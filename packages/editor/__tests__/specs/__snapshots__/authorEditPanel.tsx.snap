// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Author Edit Panel should allow a new author to be created  1`] = `
<AuthorEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  authors.panels.createAuthor
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <defaultProps(Panel)
            classPrefix="rs-panel"
          >
            <Panel
              classPrefix="rs-panel"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-body"
                >
                  <Form
                    checkDelay={500}
                    checkTrigger="change"
                    classPrefix="rs-form"
                    errorFromContext={true}
                    fluid={true}
                    formDefaultValue={Object {}}
                    layout="vertical"
                    model={
                      Schema {
                        "schema": Object {},
                      }
                    }
                  >
                    <form
                      className="rs-form rs-form-vertical rs-form-fluid"
                      onSubmit={[Function]}
                    >
                      <withStyleProps(defaultProps(FormGroup))
                        classPrefix="rs-form-group"
                      >
                        <defaultProps(FormGroup)
                          className=""
                          classPrefix="rs-form-group"
                        >
                          <FormGroup
                            className=""
                            classPrefix="rs-form-group"
                          >
                            <div
                              className="rs-form-group"
                              role="group"
                            >
                              <defaultProps(ControlLabel)
                                classPrefix="rs-control-label"
                              >
                                <ControlLabel
                                  classPrefix="rs-control-label"
                                >
                                  <label
                                    className="rs-control-label"
                                  >
                                    authors.panels.name
                                  </label>
                                </ControlLabel>
                              </defaultProps(ControlLabel)>
                              <defaultProps(FormControlWrapper)
                                classPrefix="rs-form-control"
                                disabled={true}
                                name="authors.panels.name"
                                onChange={[Function]}
                                value="Clark Kent"
                              >
                                <FormControlWrapper
                                  classPrefix="rs-form-control"
                                  disabled={true}
                                  name="authors.panels.name"
                                  onChange={[Function]}
                                  value="Clark Kent"
                                >
                                  <FormControl
                                    accepter={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "contextType": Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": null,
                                          "_currentValue2": null,
                                          "_threadCount": 0,
                                        },
                                        "defaultProps": Object {
                                          "classPrefix": "rs-input",
                                          "componentClass": "input",
                                          "type": "text",
                                        },
                                        "displayName": "withStyleProps(defaultProps(Input))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    classPrefix="rs-form-control"
                                    disabled={true}
                                    errorPlacement="bottomStart"
                                    formValue={Object {}}
                                    name="authors.panels.name"
                                    onChange={[Function]}
                                    plaintextDefaultValue="--"
                                    value="Clark Kent"
                                  >
                                    <div
                                      className="rs-form-control-wrapper"
                                    >
                                      <withStyleProps(defaultProps(Input))
                                        classPrefix="rs-input"
                                        componentClass="input"
                                        disabled={true}
                                        name="authors.panels.name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="text"
                                        value="Clark Kent"
                                      >
                                        <defaultProps(Input)
                                          className=""
                                          classPrefix="rs-input"
                                          componentClass="input"
                                          disabled={true}
                                          name="authors.panels.name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value="Clark Kent"
                                        >
                                          <Input
                                            className=""
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            disabled={true}
                                            name="authors.panels.name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value="Clark Kent"
                                          >
                                            <input
                                              className="rs-input"
                                              disabled={true}
                                              name="authors.panels.name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="Clark Kent"
                                            />
                                          </Input>
                                        </defaultProps(Input)>
                                      </withStyleProps(defaultProps(Input))>
                                      <defaultProps(ErrorMessage)
                                        className="rs-form-control-message-wrapper"
                                        classPrefix="rs-error-message"
                                        placement="bottomStart"
                                        show={false}
                                      >
                                        <ErrorMessage
                                          className="rs-form-control-message-wrapper"
                                          classPrefix="rs-error-message"
                                          placement="bottomStart"
                                          show={false}
                                        />
                                      </defaultProps(ErrorMessage)>
                                    </div>
                                  </FormControl>
                                </FormControlWrapper>
                              </defaultProps(FormControlWrapper)>
                            </div>
                          </FormGroup>
                        </defaultProps(FormGroup)>
                      </withStyleProps(defaultProps(FormGroup))>
                    </form>
                  </Form>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <ChooseEditImage
            disabled={false}
            openChooseModalOpen={[Function]}
            openEditModalOpen={[Function]}
            removeImage={[Function]}
          >
            <defaultProps(Panel)
              classPrefix="rs-panel"
              header="chooseEditImage.header"
              style={
                Object {
                  "height": 300,
                }
              }
            >
              <Panel
                classPrefix="rs-panel"
                header="chooseEditImage.header"
                style={
                  Object {
                    "height": 300,
                  }
                }
              >
                <div
                  className="rs-panel rs-panel-default"
                  style={
                    Object {
                      "height": 300,
                    }
                  }
                >
                  <div
                    className="rs-panel-heading"
                    onClick={[Function]}
                    role="rowheader"
                    tabIndex={-1}
                  >
                    chooseEditImage.header
                  </div>
                  <div
                    className="rs-panel-body"
                  >
                    <PlaceholderInput
                      onAddClick={[Function]}
                    >
                      <div
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#f7f9fa",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": "100%",
                            "justifyContent": "center",
                            "width": "100%",
                          }
                        }
                      >
                        <defaultProps(IconButton)
                          classPrefix="rs-btn-icon"
                          icon={
                            <defaultProps(Icon)
                              classPrefix="rs-icon"
                              componentClass="i"
                              icon="plus-circle"
                              size="5x"
                            />
                          }
                          onClick={[Function]}
                          placement="left"
                          size="lg"
                        >
                          <IconButton
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                                size="5x"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                            size="lg"
                          >
                            <withStyleProps(defaultProps(Button))
                              appearance="default"
                              className="rs-btn-icon rs-btn-icon-placement-left"
                              classPrefix="rs-btn"
                              componentClass="button"
                              onClick={[Function]}
                              ripple={true}
                              size="lg"
                            >
                              <defaultProps(Button)
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <Button
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <button
                                    className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      icon="plus-circle"
                                      size="5x"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                        size="5x"
                                      >
                                        <i
                                          className="rs-icon rs-icon-plus-circle rs-icon-size-5x"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                    <defaultProps(Ripple)
                                      classPrefix="rs-ripple"
                                    >
                                      <Ripple
                                        classPrefix="rs-ripple"
                                      >
                                        <span
                                          className="rs-ripple-pond"
                                        >
                                          <Transition
                                            enteringClassName="rs-ripple-rippling"
                                            in={false}
                                            onEntered={[Function]}
                                            timeout={1000}
                                          >
                                            <span
                                              className="rs-ripple"
                                              style={Object {}}
                                            />
                                          </Transition>
                                        </span>
                                      </Ripple>
                                    </defaultProps(Ripple)>
                                  </button>
                                </Button>
                              </defaultProps(Button)>
                            </withStyleProps(defaultProps(Button))>
                          </IconButton>
                        </defaultProps(IconButton)>
                      </div>
                    </PlaceholderInput>
                  </div>
                </div>
              </Panel>
            </defaultProps(Panel)>
          </ChooseEditImage>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.links"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.links"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.links
                </div>
                <div
                  className="rs-panel-body"
                >
                  <ListInput
                    defaultValue={
                      Object {
                        "title": "",
                        "url": "",
                      }
                    }
                    onChange={[Function]}
                    value={Array []}
                  >
                    <div>
                      <Component
                        defaultValue={
                          Object {
                            "title": "",
                            "url": "",
                          }
                        }
                        onChange={[Function]}
                        onSortEnd={[Function]}
                        useDragHandle={true}
                        value={Array []}
                      >
                        <div>
                          <defaultProps(IconButton)
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                          >
                            <IconButton
                              classPrefix="rs-btn-icon"
                              icon={
                                <defaultProps(Icon)
                                  classPrefix="rs-icon"
                                  componentClass="i"
                                  icon="plus-circle"
                                />
                              }
                              onClick={[Function]}
                              placement="left"
                            >
                              <withStyleProps(defaultProps(Button))
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <defaultProps(Button)
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <Button
                                    appearance="default"
                                    className="rs-btn-icon rs-btn-icon-placement-left"
                                    classPrefix="rs-btn"
                                    componentClass="button"
                                    onClick={[Function]}
                                    ripple={true}
                                  >
                                    <button
                                      className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                      >
                                        <Icon
                                          classPrefix="rs-icon"
                                          componentClass="i"
                                          icon="plus-circle"
                                        >
                                          <i
                                            className="rs-icon rs-icon-plus-circle"
                                          />
                                        </Icon>
                                      </defaultProps(Icon)>
                                      <defaultProps(Ripple)
                                        classPrefix="rs-ripple"
                                      >
                                        <Ripple
                                          classPrefix="rs-ripple"
                                        >
                                          <span
                                            className="rs-ripple-pond"
                                          >
                                            <Transition
                                              enteringClassName="rs-ripple-rippling"
                                              in={false}
                                              onEntered={[Function]}
                                              timeout={1000}
                                            >
                                              <span
                                                className="rs-ripple"
                                                style={Object {}}
                                              />
                                            </Transition>
                                          </span>
                                        </Ripple>
                                      </defaultProps(Ripple)>
                                    </button>
                                  </Button>
                                </defaultProps(Button)>
                              </withStyleProps(defaultProps(Button))>
                            </IconButton>
                          </defaultProps(IconButton)>
                        </div>
                      </Component>
                    </div>
                  </ListInput>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.bioInformation"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.bioInformation"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.bioInformation
                </div>
                <div
                  className="rs-panel-body"
                >
                  <Memo(RichTextBlock)
                    onChange={[Function]}
                    value={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "text": "",
                            },
                          ],
                          "type": "paragraph",
                        },
                      ]
                    }
                  >
                    <Slate
                      editor={
                        Object {
                          "addMark": [Function],
                          "apply": [Function],
                          "children": Array [
                            Object {
                              "children": Array [
                                Object {
                                  "text": "",
                                },
                              ],
                              "type": "paragraph",
                            },
                          ],
                          "deleteBackward": [Function],
                          "deleteForward": [Function],
                          "deleteFragment": [Function],
                          "getFragment": [Function],
                          "history": Object {
                            "redos": Array [],
                            "undos": Array [],
                          },
                          "insertBreak": [Function],
                          "insertData": [Function],
                          "insertFragment": [Function],
                          "insertNode": [Function],
                          "insertText": [Function],
                          "isInline": [Function],
                          "isVoid": [Function],
                          "marks": null,
                          "normalizeNode": [Function],
                          "onChange": [Function],
                          "operations": Array [],
                          "redo": [Function],
                          "removeMark": [Function],
                          "selection": null,
                          "setFragmentData": [Function],
                          "undo": [Function],
                        }
                      }
                      onChange={[Function]}
                      value={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "text": "",
                              },
                            ],
                            "type": "paragraph",
                          },
                        ]
                      }
                    >
                      <Toolbar
                        fadeOut={true}
                      >
                        <div
                          style={
                            Object {
                              "alignItems": "center",
                              "display": "flex",
                              "justifyContent": "center",
                              "marginBottom": 30,
                              "pointerEvents": "none",
                              "position": "sticky",
                              "top": 70,
                              "zIndex": 1,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "backgroundColor": "white",
                                "borderRadius": 6,
                                "padding": 5,
                                "pointerEvents": "auto",
                                "transitionDuration": "100ms",
                                "transitionProperty": "opacity",
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "opacity": 0.5,
                                  "transitionDuration": "100ms",
                                  "transitionProperty": "opacity",
                                }
                              }
                            >
                              <FormatButton
                                format="heading-one"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-two"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-three"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="unordered-list"
                                icon="list-ul"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ul"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ul"
                                      icon="list-ul"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ul"
                                        icon="list-ul"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ul"
                                          element="list-ul"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="ordered-list"
                                icon="list-ol"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ol"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ol"
                                      icon="list-ol"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ol"
                                        icon="list-ol"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ol"
                                          element="list-ol"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="bold"
                                icon="bold"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="bold"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="bold"
                                      icon="bold"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="bold"
                                        icon="bold"
                                      >
                                        <i
                                          className="rs-icon rs-icon-bold"
                                          element="bold"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="italic"
                                icon="italic"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="italic"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="italic"
                                      icon="italic"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="italic"
                                        icon="italic"
                                      >
                                        <i
                                          className="rs-icon rs-icon-italic"
                                          element="italic"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="underline"
                                icon="underline"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="underline"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="underline"
                                      icon="underline"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="underline"
                                        icon="underline"
                                      >
                                        <i
                                          className="rs-icon rs-icon-underline"
                                          element="underline"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="strikethrough"
                                icon="strikethrough"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="strikethrough"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="strikethrough"
                                      icon="strikethrough"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="strikethrough"
                                        icon="strikethrough"
                                      >
                                        <i
                                          className="rs-icon rs-icon-strikethrough"
                                          element="strikethrough"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <LinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="link"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="link"
                                      icon="link"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="link"
                                        icon="link"
                                      >
                                        <i
                                          className="rs-icon rs-icon-link"
                                          element="link"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                                <defaultProps(Modal)
                                  animation={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "Bounce",
                                      "render": [Function],
                                    }
                                  }
                                  animationTimeout={300}
                                  autoFocus={true}
                                  backdrop={true}
                                  classPrefix="rs-modal"
                                  dialogComponentClass={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "defaultProps": Object {
                                        "classPrefix": "rs-modal",
                                      },
                                      "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                      "propTypes": Object {
                                        "innerRef": [Function],
                                        "size": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  enforceFocus={true}
                                  keyboard={true}
                                  onHide={[Function]}
                                  overflow={true}
                                  show={false}
                                  size="sm"
                                >
                                  <Modal
                                    animation={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "Bounce",
                                        "render": [Function],
                                      }
                                    }
                                    animationTimeout={300}
                                    autoFocus={true}
                                    backdrop={true}
                                    classPrefix="rs-modal"
                                    dialogComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "classPrefix": "rs-modal",
                                        },
                                        "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    enforceFocus={true}
                                    keyboard={true}
                                    onHide={[Function]}
                                    overflow={true}
                                    show={false}
                                    size="sm"
                                  >
                                    <BaseModal
                                      autoFocus={true}
                                      backdrop={true}
                                      backdropClassName="rs-modal-backdrop"
                                      backdropTransitionTimeout={150}
                                      className="rs-modal-wrapper"
                                      containerClassName="rs-modal-open rs-modal-has-backdrop"
                                      dialogTransitionTimeout={300}
                                      enforceFocus={true}
                                      keyboard={true}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      overflow={true}
                                      show={false}
                                      transition={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "Bounce",
                                          "render": [Function],
                                        }
                                      }
                                    />
                                  </Modal>
                                </defaultProps(Modal)>
                              </LinkFormatButton>
                              <RemoveLinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  disabled={true}
                                  icon="unlink"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    disabled={true}
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="unlink"
                                      icon="unlink"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="unlink"
                                        icon="unlink"
                                      >
                                        <i
                                          className="rs-icon rs-icon-unlink"
                                          element="unlink"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </RemoveLinkFormatButton>
                            </div>
                          </div>
                        </div>
                      </Toolbar>
                      <Editable
                        placeholder="blocks.richText.startWriting"
                        renderElement={[Function]}
                        renderLeaf={[Function]}
                      >
                        <div
                          contentEditable={true}
                          data-gramm={false}
                          data-slate-editor={true}
                          data-slate-node="value"
                          onBeforeInput={[Function]}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCopy={[Function]}
                          onCut={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onPaste={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "outline": "none",
                              "whiteSpace": "pre-wrap",
                              "wordWrap": "break-word",
                            }
                          }
                          suppressContentEditableWarning={true}
                        >
                          <Children
                            decorate={[Function]}
                            decorations={
                              Array [
                                Object {
                                  "anchor": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "focus": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "placeholder": "blocks.richText.startWriting",
                                  Symbol(placeholder): true,
                                },
                              ]
                            }
                            node={
                              Object {
                                "addMark": [Function],
                                "apply": [Function],
                                "children": Array [
                                  Object {
                                    "children": Array [
                                      Object {
                                        "text": "",
                                      },
                                    ],
                                    "type": "paragraph",
                                  },
                                ],
                                "deleteBackward": [Function],
                                "deleteForward": [Function],
                                "deleteFragment": [Function],
                                "getFragment": [Function],
                                "history": Object {
                                  "redos": Array [],
                                  "undos": Array [],
                                },
                                "insertBreak": [Function],
                                "insertData": [Function],
                                "insertFragment": [Function],
                                "insertNode": [Function],
                                "insertText": [Function],
                                "isInline": [Function],
                                "isVoid": [Function],
                                "marks": null,
                                "normalizeNode": [Function],
                                "onChange": [Function],
                                "operations": Array [],
                                "redo": [Function],
                                "removeMark": [Function],
                                "selection": null,
                                "setFragmentData": [Function],
                                "undo": [Function],
                              }
                            }
                            renderElement={[Function]}
                            renderLeaf={[Function]}
                            selection={null}
                          >
                            <Element
                              decorate={[Function]}
                              decorations={
                                Array [
                                  Object {
                                    "anchor": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "focus": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "placeholder": "blocks.richText.startWriting",
                                    Symbol(placeholder): true,
                                  },
                                ]
                              }
                              element={
                                Object {
                                  "children": Array [
                                    Object {
                                      "text": "",
                                    },
                                  ],
                                  "type": "paragraph",
                                }
                              }
                              key="8"
                              renderElement={[Function]}
                              renderLeaf={[Function]}
                              selection={null}
                            >
                              <p
                                data-slate-node="element"
                              >
                                <Children
                                  decorate={[Function]}
                                  decorations={
                                    Array [
                                      Object {
                                        "anchor": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "focus": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "placeholder": "blocks.richText.startWriting",
                                        Symbol(placeholder): true,
                                      },
                                    ]
                                  }
                                  node={
                                    Object {
                                      "children": Array [
                                        Object {
                                          "text": "",
                                        },
                                      ],
                                      "type": "paragraph",
                                    }
                                  }
                                  renderElement={[Function]}
                                  renderLeaf={[Function]}
                                  selection={null}
                                >
                                  <Text
                                    decorations={
                                      Array [
                                        Object {
                                          "anchor": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "focus": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "placeholder": "blocks.richText.startWriting",
                                          Symbol(placeholder): true,
                                        },
                                      ]
                                    }
                                    isLast={true}
                                    key="9"
                                    parent={
                                      Object {
                                        "children": Array [
                                          Object {
                                            "text": "",
                                          },
                                        ],
                                        "type": "paragraph",
                                      }
                                    }
                                    renderLeaf={[Function]}
                                    text={
                                      Object {
                                        "text": "",
                                      }
                                    }
                                  >
                                    <span
                                      data-slate-node="text"
                                    >
                                      <Leaf
                                        isLast={true}
                                        key="9-0"
                                        leaf={
                                          Object {
                                            "placeholder": "blocks.richText.startWriting",
                                            "text": "",
                                            Symbol(placeholder): true,
                                          }
                                        }
                                        parent={
                                          Object {
                                            "children": Array [
                                              Object {
                                                "text": "",
                                              },
                                            ],
                                            "type": "paragraph",
                                          }
                                        }
                                        renderLeaf={[Function]}
                                        text={
                                          Object {
                                            "text": "",
                                          }
                                        }
                                      >
                                        <span
                                          data-slate-leaf={true}
                                        >
                                          <span
                                            contentEditable={false}
                                            style={
                                              Object {
                                                "display": "inline-block",
                                                "maxWidth": "100%",
                                                "opacity": "0.333",
                                                "pointerEvents": "none",
                                                "verticalAlign": "text-top",
                                                "whiteSpace": "nowrap",
                                                "width": "0",
                                              }
                                            }
                                          >
                                            blocks.richText.startWriting
                                          </span>
                                          <String
                                            isLast={true}
                                            leaf={
                                              Object {
                                                "placeholder": "blocks.richText.startWriting",
                                                "text": "",
                                                Symbol(placeholder): true,
                                              }
                                            }
                                            parent={
                                              Object {
                                                "children": Array [
                                                  Object {
                                                    "text": "",
                                                  },
                                                ],
                                                "type": "paragraph",
                                              }
                                            }
                                            text={
                                              Object {
                                                "text": "",
                                              }
                                            }
                                          >
                                            <ZeroWidthString
                                              isLineBreak={true}
                                            >
                                              <span
                                                data-slate-length={0}
                                                data-slate-zero-width="n"
                                              >
                                                ï»¿
                                                <br />
                                              </span>
                                            </ZeroWidthString>
                                          </String>
                                        </span>
                                      </Leaf>
                                    </span>
                                  </Text>
                                </Children>
                              </p>
                            </Element>
                          </Children>
                        </div>
                      </Editable>
                    </Slate>
                  </Memo(RichTextBlock)>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={true}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={true}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={true}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    onHide={[Function]}
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      onHide={[Function]}
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        onHide={[Function]}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          onHide={[Function]}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
</AuthorEditPanel>
`;

exports[`Author Edit Panel should expand links fields when Add Block button is clicked 1`] = `
<AuthorEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  authors.panels.createAuthor
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <defaultProps(Panel)
            classPrefix="rs-panel"
          >
            <Panel
              classPrefix="rs-panel"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-body"
                >
                  <Form
                    checkDelay={500}
                    checkTrigger="change"
                    classPrefix="rs-form"
                    errorFromContext={true}
                    fluid={true}
                    formDefaultValue={Object {}}
                    layout="vertical"
                    model={
                      Schema {
                        "schema": Object {},
                      }
                    }
                  >
                    <form
                      className="rs-form rs-form-vertical rs-form-fluid"
                      onSubmit={[Function]}
                    >
                      <withStyleProps(defaultProps(FormGroup))
                        classPrefix="rs-form-group"
                      >
                        <defaultProps(FormGroup)
                          className=""
                          classPrefix="rs-form-group"
                        >
                          <FormGroup
                            className=""
                            classPrefix="rs-form-group"
                          >
                            <div
                              className="rs-form-group"
                              role="group"
                            >
                              <defaultProps(ControlLabel)
                                classPrefix="rs-control-label"
                              >
                                <ControlLabel
                                  classPrefix="rs-control-label"
                                >
                                  <label
                                    className="rs-control-label"
                                  >
                                    authors.panels.name
                                  </label>
                                </ControlLabel>
                              </defaultProps(ControlLabel)>
                              <defaultProps(FormControlWrapper)
                                classPrefix="rs-form-control"
                                disabled={false}
                                name="authors.panels.name"
                                onChange={[Function]}
                                value=""
                              >
                                <FormControlWrapper
                                  classPrefix="rs-form-control"
                                  disabled={false}
                                  name="authors.panels.name"
                                  onChange={[Function]}
                                  value=""
                                >
                                  <FormControl
                                    accepter={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "contextType": Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": null,
                                          "_currentValue2": null,
                                          "_threadCount": 0,
                                        },
                                        "defaultProps": Object {
                                          "classPrefix": "rs-input",
                                          "componentClass": "input",
                                          "type": "text",
                                        },
                                        "displayName": "withStyleProps(defaultProps(Input))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    classPrefix="rs-form-control"
                                    disabled={false}
                                    errorPlacement="bottomStart"
                                    formValue={Object {}}
                                    name="authors.panels.name"
                                    onChange={[Function]}
                                    plaintextDefaultValue="--"
                                    value=""
                                  >
                                    <div
                                      className="rs-form-control-wrapper"
                                    >
                                      <withStyleProps(defaultProps(Input))
                                        classPrefix="rs-input"
                                        componentClass="input"
                                        disabled={false}
                                        name="authors.panels.name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <defaultProps(Input)
                                          className=""
                                          classPrefix="rs-input"
                                          componentClass="input"
                                          disabled={false}
                                          name="authors.panels.name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <Input
                                            className=""
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            disabled={false}
                                            name="authors.panels.name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="rs-input"
                                              disabled={false}
                                              name="authors.panels.name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </Input>
                                        </defaultProps(Input)>
                                      </withStyleProps(defaultProps(Input))>
                                      <defaultProps(ErrorMessage)
                                        className="rs-form-control-message-wrapper"
                                        classPrefix="rs-error-message"
                                        placement="bottomStart"
                                        show={false}
                                      >
                                        <ErrorMessage
                                          className="rs-form-control-message-wrapper"
                                          classPrefix="rs-error-message"
                                          placement="bottomStart"
                                          show={false}
                                        />
                                      </defaultProps(ErrorMessage)>
                                    </div>
                                  </FormControl>
                                </FormControlWrapper>
                              </defaultProps(FormControlWrapper)>
                            </div>
                          </FormGroup>
                        </defaultProps(FormGroup)>
                      </withStyleProps(defaultProps(FormGroup))>
                    </form>
                  </Form>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <ChooseEditImage
            disabled={false}
            openChooseModalOpen={[Function]}
            openEditModalOpen={[Function]}
            removeImage={[Function]}
          >
            <defaultProps(Panel)
              classPrefix="rs-panel"
              header="chooseEditImage.header"
              style={
                Object {
                  "height": 300,
                }
              }
            >
              <Panel
                classPrefix="rs-panel"
                header="chooseEditImage.header"
                style={
                  Object {
                    "height": 300,
                  }
                }
              >
                <div
                  className="rs-panel rs-panel-default"
                  style={
                    Object {
                      "height": 300,
                    }
                  }
                >
                  <div
                    className="rs-panel-heading"
                    onClick={[Function]}
                    role="rowheader"
                    tabIndex={-1}
                  >
                    chooseEditImage.header
                  </div>
                  <div
                    className="rs-panel-body"
                  >
                    <PlaceholderInput
                      onAddClick={[Function]}
                    >
                      <div
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#f7f9fa",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": "100%",
                            "justifyContent": "center",
                            "width": "100%",
                          }
                        }
                      >
                        <defaultProps(IconButton)
                          classPrefix="rs-btn-icon"
                          icon={
                            <defaultProps(Icon)
                              classPrefix="rs-icon"
                              componentClass="i"
                              icon="plus-circle"
                              size="5x"
                            />
                          }
                          onClick={[Function]}
                          placement="left"
                          size="lg"
                        >
                          <IconButton
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                                size="5x"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                            size="lg"
                          >
                            <withStyleProps(defaultProps(Button))
                              appearance="default"
                              className="rs-btn-icon rs-btn-icon-placement-left"
                              classPrefix="rs-btn"
                              componentClass="button"
                              onClick={[Function]}
                              ripple={true}
                              size="lg"
                            >
                              <defaultProps(Button)
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <Button
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <button
                                    className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      icon="plus-circle"
                                      size="5x"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                        size="5x"
                                      >
                                        <i
                                          className="rs-icon rs-icon-plus-circle rs-icon-size-5x"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                    <defaultProps(Ripple)
                                      classPrefix="rs-ripple"
                                    >
                                      <Ripple
                                        classPrefix="rs-ripple"
                                      >
                                        <span
                                          className="rs-ripple-pond"
                                        >
                                          <Transition
                                            enteringClassName="rs-ripple-rippling"
                                            in={false}
                                            onEntered={[Function]}
                                            timeout={1000}
                                          >
                                            <span
                                              className="rs-ripple"
                                              style={Object {}}
                                            />
                                          </Transition>
                                        </span>
                                      </Ripple>
                                    </defaultProps(Ripple)>
                                  </button>
                                </Button>
                              </defaultProps(Button)>
                            </withStyleProps(defaultProps(Button))>
                          </IconButton>
                        </defaultProps(IconButton)>
                      </div>
                    </PlaceholderInput>
                  </div>
                </div>
              </Panel>
            </defaultProps(Panel)>
          </ChooseEditImage>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.links"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.links"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.links
                </div>
                <div
                  className="rs-panel-body"
                >
                  <ListInput
                    defaultValue={
                      Object {
                        "title": "",
                        "url": "",
                      }
                    }
                    onChange={[Function]}
                    value={
                      Array [
                        Object {
                          "id": "fakeNanoid1",
                          "value": Object {
                            "title": "",
                            "url": "",
                          },
                        },
                      ]
                    }
                  >
                    <div>
                      <Component
                        defaultValue={
                          Object {
                            "title": "",
                            "url": "",
                          }
                        }
                        onChange={[Function]}
                        onSortEnd={[Function]}
                        useDragHandle={true}
                        value={
                          Array [
                            Object {
                              "id": "fakeNanoid1",
                              "value": Object {
                                "title": "",
                                "url": "",
                              },
                            },
                          ]
                        }
                      >
                        <div>
                          <Component
                            index={0}
                            itemIndex={0}
                            key="fakeNanoid1"
                            onChange={[Function]}
                            onRemove={[Function]}
                            value={
                              Object {
                                "id": "fakeNanoid1",
                                "value": Object {
                                  "title": "",
                                  "url": "",
                                },
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "flexDirection": "row",
                                  "marginBottom": "10px",
                                }
                              }
                            >
                              <div
                                style={
                                  Object {
                                    "marginRight": "10px",
                                  }
                                }
                              >
                                <Component>
                                  <defaultProps(IconButton)
                                    classPrefix="rs-btn-icon"
                                    icon={
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="th2"
                                      />
                                    }
                                    placement="left"
                                  >
                                    <IconButton
                                      classPrefix="rs-btn-icon"
                                      icon={
                                        <defaultProps(Icon)
                                          classPrefix="rs-icon"
                                          componentClass="i"
                                          icon="th2"
                                        />
                                      }
                                      placement="left"
                                    >
                                      <withStyleProps(defaultProps(Button))
                                        appearance="default"
                                        className="rs-btn-icon rs-btn-icon-placement-left"
                                        classPrefix="rs-btn"
                                        componentClass="button"
                                        ripple={true}
                                      >
                                        <defaultProps(Button)
                                          appearance="default"
                                          className="rs-btn-icon rs-btn-icon-placement-left"
                                          classPrefix="rs-btn"
                                          componentClass="button"
                                          ripple={true}
                                        >
                                          <Button
                                            appearance="default"
                                            className="rs-btn-icon rs-btn-icon-placement-left"
                                            classPrefix="rs-btn"
                                            componentClass="button"
                                            ripple={true}
                                          >
                                            <button
                                              className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                              type="button"
                                            >
                                              <defaultProps(Icon)
                                                classPrefix="rs-icon"
                                                componentClass="i"
                                                icon="th2"
                                              >
                                                <Icon
                                                  classPrefix="rs-icon"
                                                  componentClass="i"
                                                  icon="th2"
                                                >
                                                  <i
                                                    className="rs-icon rs-icon-th2"
                                                  />
                                                </Icon>
                                              </defaultProps(Icon)>
                                              <defaultProps(Ripple)
                                                classPrefix="rs-ripple"
                                              >
                                                <Ripple
                                                  classPrefix="rs-ripple"
                                                >
                                                  <span
                                                    className="rs-ripple-pond"
                                                  >
                                                    <Transition
                                                      enteringClassName="rs-ripple-rippling"
                                                      in={false}
                                                      onEntered={[Function]}
                                                      timeout={1000}
                                                    >
                                                      <span
                                                        className="rs-ripple"
                                                        style={Object {}}
                                                      />
                                                    </Transition>
                                                  </span>
                                                </Ripple>
                                              </defaultProps(Ripple)>
                                            </button>
                                          </Button>
                                        </defaultProps(Button)>
                                      </withStyleProps(defaultProps(Button))>
                                    </IconButton>
                                  </defaultProps(IconButton)>
                                </Component>
                              </div>
                              <defaultProps(Panel)
                                classPrefix="rs-panel"
                                style={
                                  Object {
                                    "width": "100%",
                                  }
                                }
                              >
                                <Panel
                                  classPrefix="rs-panel"
                                  style={
                                    Object {
                                      "width": "100%",
                                    }
                                  }
                                >
                                  <div
                                    className="rs-panel rs-panel-default"
                                    style={
                                      Object {
                                        "width": "100%",
                                      }
                                    }
                                  >
                                    <div
                                      className="rs-panel-body"
                                    >
                                      <div
                                        style={
                                          Object {
                                            "minHeight": "100%",
                                            "padding": "10px",
                                          }
                                        }
                                      >
                                        <div
                                          style={
                                            Object {
                                              "display": "flex",
                                              "flexDirection": "row",
                                            }
                                          }
                                        >
                                          <withStyleProps(defaultProps(Input))
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            onChange={[Function]}
                                            placeholder="authors.panels.title"
                                            style={
                                              Object {
                                                "flexBasis": "30%",
                                                "marginRight": "10px",
                                              }
                                            }
                                            type="text"
                                            value=""
                                          >
                                            <defaultProps(Input)
                                              className=""
                                              classPrefix="rs-input"
                                              componentClass="input"
                                              onChange={[Function]}
                                              placeholder="authors.panels.title"
                                              style={
                                                Object {
                                                  "flexBasis": "30%",
                                                  "marginRight": "10px",
                                                }
                                              }
                                              type="text"
                                              value=""
                                            >
                                              <Input
                                                className=""
                                                classPrefix="rs-input"
                                                componentClass="input"
                                                onChange={[Function]}
                                                placeholder="authors.panels.title"
                                                style={
                                                  Object {
                                                    "flexBasis": "30%",
                                                    "marginRight": "10px",
                                                  }
                                                }
                                                type="text"
                                                value=""
                                              >
                                                <input
                                                  className="rs-input"
                                                  id={null}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="authors.panels.title"
                                                  style={
                                                    Object {
                                                      "flexBasis": "30%",
                                                      "marginRight": "10px",
                                                    }
                                                  }
                                                  type="text"
                                                  value="abcd"
                                                />
                                              </Input>
                                            </defaultProps(Input)>
                                          </withStyleProps(defaultProps(Input))>
                                          <withStyleProps(defaultProps(Input))
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            onChange={[Function]}
                                            placeholder="authors.panels.link"
                                            style={
                                              Object {
                                                "flexBasis": "70%",
                                              }
                                            }
                                            type="text"
                                            value=""
                                          >
                                            <defaultProps(Input)
                                              className=""
                                              classPrefix="rs-input"
                                              componentClass="input"
                                              onChange={[Function]}
                                              placeholder="authors.panels.link"
                                              style={
                                                Object {
                                                  "flexBasis": "70%",
                                                }
                                              }
                                              type="text"
                                              value=""
                                            >
                                              <Input
                                                className=""
                                                classPrefix="rs-input"
                                                componentClass="input"
                                                onChange={[Function]}
                                                placeholder="authors.panels.link"
                                                style={
                                                  Object {
                                                    "flexBasis": "70%",
                                                  }
                                                }
                                                type="text"
                                                value=""
                                              >
                                                <input
                                                  className="rs-input"
                                                  id={null}
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="authors.panels.link"
                                                  style={
                                                    Object {
                                                      "flexBasis": "70%",
                                                    }
                                                  }
                                                  type="text"
                                                  value=""
                                                />
                                              </Input>
                                            </defaultProps(Input)>
                                          </withStyleProps(defaultProps(Input))>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </Panel>
                              </defaultProps(Panel)>
                              <div
                                style={
                                  Object {
                                    "marginLeft": "10px",
                                  }
                                }
                              >
                                <defaultProps(IconButton)
                                  classPrefix="rs-btn-icon"
                                  icon={
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      icon="trash"
                                    />
                                  }
                                  onClick={[Function]}
                                  placement="left"
                                >
                                  <IconButton
                                    classPrefix="rs-btn-icon"
                                    icon={
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="trash"
                                      />
                                    }
                                    onClick={[Function]}
                                    placement="left"
                                  >
                                    <withStyleProps(defaultProps(Button))
                                      appearance="default"
                                      className="rs-btn-icon rs-btn-icon-placement-left"
                                      classPrefix="rs-btn"
                                      componentClass="button"
                                      onClick={[Function]}
                                      ripple={true}
                                    >
                                      <defaultProps(Button)
                                        appearance="default"
                                        className="rs-btn-icon rs-btn-icon-placement-left"
                                        classPrefix="rs-btn"
                                        componentClass="button"
                                        onClick={[Function]}
                                        ripple={true}
                                      >
                                        <Button
                                          appearance="default"
                                          className="rs-btn-icon rs-btn-icon-placement-left"
                                          classPrefix="rs-btn"
                                          componentClass="button"
                                          onClick={[Function]}
                                          ripple={true}
                                        >
                                          <button
                                            className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <defaultProps(Icon)
                                              classPrefix="rs-icon"
                                              componentClass="i"
                                              icon="trash"
                                            >
                                              <Icon
                                                classPrefix="rs-icon"
                                                componentClass="i"
                                                icon="trash"
                                              >
                                                <i
                                                  className="rs-icon rs-icon-trash"
                                                />
                                              </Icon>
                                            </defaultProps(Icon)>
                                            <defaultProps(Ripple)
                                              classPrefix="rs-ripple"
                                            >
                                              <Ripple
                                                classPrefix="rs-ripple"
                                              >
                                                <span
                                                  className="rs-ripple-pond"
                                                >
                                                  <Transition
                                                    enteringClassName="rs-ripple-rippling"
                                                    in={false}
                                                    onEntered={[Function]}
                                                    timeout={1000}
                                                  >
                                                    <span
                                                      className="rs-ripple"
                                                      style={Object {}}
                                                    />
                                                  </Transition>
                                                </span>
                                              </Ripple>
                                            </defaultProps(Ripple)>
                                          </button>
                                        </Button>
                                      </defaultProps(Button)>
                                    </withStyleProps(defaultProps(Button))>
                                  </IconButton>
                                </defaultProps(IconButton)>
                              </div>
                            </div>
                          </Component>
                          <defaultProps(IconButton)
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                          >
                            <IconButton
                              classPrefix="rs-btn-icon"
                              icon={
                                <defaultProps(Icon)
                                  classPrefix="rs-icon"
                                  componentClass="i"
                                  icon="plus-circle"
                                />
                              }
                              onClick={[Function]}
                              placement="left"
                            >
                              <withStyleProps(defaultProps(Button))
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <defaultProps(Button)
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <Button
                                    appearance="default"
                                    className="rs-btn-icon rs-btn-icon-placement-left"
                                    classPrefix="rs-btn"
                                    componentClass="button"
                                    onClick={[Function]}
                                    ripple={true}
                                  >
                                    <button
                                      className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                      >
                                        <Icon
                                          classPrefix="rs-icon"
                                          componentClass="i"
                                          icon="plus-circle"
                                        >
                                          <i
                                            className="rs-icon rs-icon-plus-circle"
                                          />
                                        </Icon>
                                      </defaultProps(Icon)>
                                      <defaultProps(Ripple)
                                        classPrefix="rs-ripple"
                                      >
                                        <Ripple
                                          classPrefix="rs-ripple"
                                        >
                                          <span
                                            className="rs-ripple-pond"
                                          >
                                            <Transition
                                              enteringClassName="rs-ripple-rippling"
                                              in={false}
                                              onEntered={[Function]}
                                              timeout={1000}
                                            >
                                              <span
                                                className="rs-ripple"
                                                style={Object {}}
                                              />
                                            </Transition>
                                          </span>
                                        </Ripple>
                                      </defaultProps(Ripple)>
                                    </button>
                                  </Button>
                                </defaultProps(Button)>
                              </withStyleProps(defaultProps(Button))>
                            </IconButton>
                          </defaultProps(IconButton)>
                        </div>
                      </Component>
                    </div>
                  </ListInput>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.bioInformation"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.bioInformation"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.bioInformation
                </div>
                <div
                  className="rs-panel-body"
                >
                  <Memo(RichTextBlock)
                    onChange={[Function]}
                    value={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "text": "",
                            },
                          ],
                          "type": "paragraph",
                        },
                      ]
                    }
                  >
                    <Slate
                      editor={
                        Object {
                          "addMark": [Function],
                          "apply": [Function],
                          "children": Array [
                            Object {
                              "children": Array [
                                Object {
                                  "text": "",
                                },
                              ],
                              "type": "paragraph",
                            },
                          ],
                          "deleteBackward": [Function],
                          "deleteForward": [Function],
                          "deleteFragment": [Function],
                          "getFragment": [Function],
                          "history": Object {
                            "redos": Array [],
                            "undos": Array [],
                          },
                          "insertBreak": [Function],
                          "insertData": [Function],
                          "insertFragment": [Function],
                          "insertNode": [Function],
                          "insertText": [Function],
                          "isInline": [Function],
                          "isVoid": [Function],
                          "marks": null,
                          "normalizeNode": [Function],
                          "onChange": [Function],
                          "operations": Array [],
                          "redo": [Function],
                          "removeMark": [Function],
                          "selection": null,
                          "setFragmentData": [Function],
                          "undo": [Function],
                        }
                      }
                      onChange={[Function]}
                      value={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "text": "",
                              },
                            ],
                            "type": "paragraph",
                          },
                        ]
                      }
                    >
                      <Toolbar
                        fadeOut={true}
                      >
                        <div
                          style={
                            Object {
                              "alignItems": "center",
                              "display": "flex",
                              "justifyContent": "center",
                              "marginBottom": 30,
                              "pointerEvents": "none",
                              "position": "sticky",
                              "top": 70,
                              "zIndex": 1,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "backgroundColor": "white",
                                "borderRadius": 6,
                                "padding": 5,
                                "pointerEvents": "auto",
                                "transitionDuration": "100ms",
                                "transitionProperty": "opacity",
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "opacity": 0.5,
                                  "transitionDuration": "100ms",
                                  "transitionProperty": "opacity",
                                }
                              }
                            >
                              <FormatButton
                                format="heading-one"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-two"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-three"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="unordered-list"
                                icon="list-ul"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ul"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ul"
                                      icon="list-ul"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ul"
                                        icon="list-ul"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ul"
                                          element="list-ul"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="ordered-list"
                                icon="list-ol"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ol"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ol"
                                      icon="list-ol"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ol"
                                        icon="list-ol"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ol"
                                          element="list-ol"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="bold"
                                icon="bold"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="bold"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="bold"
                                      icon="bold"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="bold"
                                        icon="bold"
                                      >
                                        <i
                                          className="rs-icon rs-icon-bold"
                                          element="bold"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="italic"
                                icon="italic"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="italic"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="italic"
                                      icon="italic"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="italic"
                                        icon="italic"
                                      >
                                        <i
                                          className="rs-icon rs-icon-italic"
                                          element="italic"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="underline"
                                icon="underline"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="underline"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="underline"
                                      icon="underline"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="underline"
                                        icon="underline"
                                      >
                                        <i
                                          className="rs-icon rs-icon-underline"
                                          element="underline"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="strikethrough"
                                icon="strikethrough"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="strikethrough"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="strikethrough"
                                      icon="strikethrough"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="strikethrough"
                                        icon="strikethrough"
                                      >
                                        <i
                                          className="rs-icon rs-icon-strikethrough"
                                          element="strikethrough"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <LinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="link"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="link"
                                      icon="link"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="link"
                                        icon="link"
                                      >
                                        <i
                                          className="rs-icon rs-icon-link"
                                          element="link"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                                <defaultProps(Modal)
                                  animation={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "Bounce",
                                      "render": [Function],
                                    }
                                  }
                                  animationTimeout={300}
                                  autoFocus={true}
                                  backdrop={true}
                                  classPrefix="rs-modal"
                                  dialogComponentClass={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "defaultProps": Object {
                                        "classPrefix": "rs-modal",
                                      },
                                      "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                      "propTypes": Object {
                                        "innerRef": [Function],
                                        "size": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  enforceFocus={true}
                                  keyboard={true}
                                  onHide={[Function]}
                                  overflow={true}
                                  show={false}
                                  size="sm"
                                >
                                  <Modal
                                    animation={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "Bounce",
                                        "render": [Function],
                                      }
                                    }
                                    animationTimeout={300}
                                    autoFocus={true}
                                    backdrop={true}
                                    classPrefix="rs-modal"
                                    dialogComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "classPrefix": "rs-modal",
                                        },
                                        "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    enforceFocus={true}
                                    keyboard={true}
                                    onHide={[Function]}
                                    overflow={true}
                                    show={false}
                                    size="sm"
                                  >
                                    <BaseModal
                                      autoFocus={true}
                                      backdrop={true}
                                      backdropClassName="rs-modal-backdrop"
                                      backdropTransitionTimeout={150}
                                      className="rs-modal-wrapper"
                                      containerClassName="rs-modal-open rs-modal-has-backdrop"
                                      dialogTransitionTimeout={300}
                                      enforceFocus={true}
                                      keyboard={true}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      overflow={true}
                                      show={false}
                                      transition={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "Bounce",
                                          "render": [Function],
                                        }
                                      }
                                    />
                                  </Modal>
                                </defaultProps(Modal)>
                              </LinkFormatButton>
                              <RemoveLinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  disabled={true}
                                  icon="unlink"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    disabled={true}
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="unlink"
                                      icon="unlink"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="unlink"
                                        icon="unlink"
                                      >
                                        <i
                                          className="rs-icon rs-icon-unlink"
                                          element="unlink"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </RemoveLinkFormatButton>
                            </div>
                          </div>
                        </div>
                      </Toolbar>
                      <Editable
                        placeholder="blocks.richText.startWriting"
                        renderElement={[Function]}
                        renderLeaf={[Function]}
                      >
                        <div
                          contentEditable={true}
                          data-gramm={false}
                          data-slate-editor={true}
                          data-slate-node="value"
                          onBeforeInput={[Function]}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCopy={[Function]}
                          onCut={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onPaste={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "outline": "none",
                              "whiteSpace": "pre-wrap",
                              "wordWrap": "break-word",
                            }
                          }
                          suppressContentEditableWarning={true}
                        >
                          <Children
                            decorate={[Function]}
                            decorations={
                              Array [
                                Object {
                                  "anchor": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "focus": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "placeholder": "blocks.richText.startWriting",
                                  Symbol(placeholder): true,
                                },
                              ]
                            }
                            node={
                              Object {
                                "addMark": [Function],
                                "apply": [Function],
                                "children": Array [
                                  Object {
                                    "children": Array [
                                      Object {
                                        "text": "",
                                      },
                                    ],
                                    "type": "paragraph",
                                  },
                                ],
                                "deleteBackward": [Function],
                                "deleteForward": [Function],
                                "deleteFragment": [Function],
                                "getFragment": [Function],
                                "history": Object {
                                  "redos": Array [],
                                  "undos": Array [],
                                },
                                "insertBreak": [Function],
                                "insertData": [Function],
                                "insertFragment": [Function],
                                "insertNode": [Function],
                                "insertText": [Function],
                                "isInline": [Function],
                                "isVoid": [Function],
                                "marks": null,
                                "normalizeNode": [Function],
                                "onChange": [Function],
                                "operations": Array [],
                                "redo": [Function],
                                "removeMark": [Function],
                                "selection": null,
                                "setFragmentData": [Function],
                                "undo": [Function],
                              }
                            }
                            renderElement={[Function]}
                            renderLeaf={[Function]}
                            selection={null}
                          >
                            <Element
                              decorate={[Function]}
                              decorations={
                                Array [
                                  Object {
                                    "anchor": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "focus": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "placeholder": "blocks.richText.startWriting",
                                    Symbol(placeholder): true,
                                  },
                                ]
                              }
                              element={
                                Object {
                                  "children": Array [
                                    Object {
                                      "text": "",
                                    },
                                  ],
                                  "type": "paragraph",
                                }
                              }
                              key="6"
                              renderElement={[Function]}
                              renderLeaf={[Function]}
                              selection={null}
                            >
                              <p
                                data-slate-node="element"
                              >
                                <Children
                                  decorate={[Function]}
                                  decorations={
                                    Array [
                                      Object {
                                        "anchor": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "focus": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "placeholder": "blocks.richText.startWriting",
                                        Symbol(placeholder): true,
                                      },
                                    ]
                                  }
                                  node={
                                    Object {
                                      "children": Array [
                                        Object {
                                          "text": "",
                                        },
                                      ],
                                      "type": "paragraph",
                                    }
                                  }
                                  renderElement={[Function]}
                                  renderLeaf={[Function]}
                                  selection={null}
                                >
                                  <Text
                                    decorations={
                                      Array [
                                        Object {
                                          "anchor": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "focus": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "placeholder": "blocks.richText.startWriting",
                                          Symbol(placeholder): true,
                                        },
                                      ]
                                    }
                                    isLast={true}
                                    key="7"
                                    parent={
                                      Object {
                                        "children": Array [
                                          Object {
                                            "text": "",
                                          },
                                        ],
                                        "type": "paragraph",
                                      }
                                    }
                                    renderLeaf={[Function]}
                                    text={
                                      Object {
                                        "text": "",
                                      }
                                    }
                                  >
                                    <span
                                      data-slate-node="text"
                                    >
                                      <Leaf
                                        isLast={true}
                                        key="7-0"
                                        leaf={
                                          Object {
                                            "placeholder": "blocks.richText.startWriting",
                                            "text": "",
                                            Symbol(placeholder): true,
                                          }
                                        }
                                        parent={
                                          Object {
                                            "children": Array [
                                              Object {
                                                "text": "",
                                              },
                                            ],
                                            "type": "paragraph",
                                          }
                                        }
                                        renderLeaf={[Function]}
                                        text={
                                          Object {
                                            "text": "",
                                          }
                                        }
                                      >
                                        <span
                                          data-slate-leaf={true}
                                        >
                                          <span
                                            contentEditable={false}
                                            style={
                                              Object {
                                                "display": "inline-block",
                                                "maxWidth": "100%",
                                                "opacity": "0.333",
                                                "pointerEvents": "none",
                                                "verticalAlign": "text-top",
                                                "whiteSpace": "nowrap",
                                                "width": "0",
                                              }
                                            }
                                          >
                                            blocks.richText.startWriting
                                          </span>
                                          <String
                                            isLast={true}
                                            leaf={
                                              Object {
                                                "placeholder": "blocks.richText.startWriting",
                                                "text": "",
                                                Symbol(placeholder): true,
                                              }
                                            }
                                            parent={
                                              Object {
                                                "children": Array [
                                                  Object {
                                                    "text": "",
                                                  },
                                                ],
                                                "type": "paragraph",
                                              }
                                            }
                                            text={
                                              Object {
                                                "text": "",
                                              }
                                            }
                                          >
                                            <ZeroWidthString
                                              isLineBreak={true}
                                            >
                                              <span
                                                data-slate-length={0}
                                                data-slate-zero-width="n"
                                              >
                                                ï»¿
                                                <br />
                                              </span>
                                            </ZeroWidthString>
                                          </String>
                                        </span>
                                      </Leaf>
                                    </span>
                                  </Text>
                                </Children>
                              </p>
                            </Element>
                          </Children>
                        </div>
                      </Editable>
                    </Slate>
                  </Memo(RichTextBlock)>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    onHide={[Function]}
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      onHide={[Function]}
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        onHide={[Function]}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          onHide={[Function]}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
</AuthorEditPanel>
`;

exports[`Author Edit Panel should render 1`] = `
<AuthorEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  authors.panels.createAuthor
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <defaultProps(Panel)
            classPrefix="rs-panel"
          >
            <Panel
              classPrefix="rs-panel"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-body"
                >
                  <Form
                    checkDelay={500}
                    checkTrigger="change"
                    classPrefix="rs-form"
                    errorFromContext={true}
                    fluid={true}
                    formDefaultValue={Object {}}
                    layout="vertical"
                    model={
                      Schema {
                        "schema": Object {},
                      }
                    }
                  >
                    <form
                      className="rs-form rs-form-vertical rs-form-fluid"
                      onSubmit={[Function]}
                    >
                      <withStyleProps(defaultProps(FormGroup))
                        classPrefix="rs-form-group"
                      >
                        <defaultProps(FormGroup)
                          className=""
                          classPrefix="rs-form-group"
                        >
                          <FormGroup
                            className=""
                            classPrefix="rs-form-group"
                          >
                            <div
                              className="rs-form-group"
                              role="group"
                            >
                              <defaultProps(ControlLabel)
                                classPrefix="rs-control-label"
                              >
                                <ControlLabel
                                  classPrefix="rs-control-label"
                                >
                                  <label
                                    className="rs-control-label"
                                  >
                                    authors.panels.name
                                  </label>
                                </ControlLabel>
                              </defaultProps(ControlLabel)>
                              <defaultProps(FormControlWrapper)
                                classPrefix="rs-form-control"
                                disabled={false}
                                name="authors.panels.name"
                                onChange={[Function]}
                                value=""
                              >
                                <FormControlWrapper
                                  classPrefix="rs-form-control"
                                  disabled={false}
                                  name="authors.panels.name"
                                  onChange={[Function]}
                                  value=""
                                >
                                  <FormControl
                                    accepter={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "contextType": Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": null,
                                          "_currentValue2": null,
                                          "_threadCount": 0,
                                        },
                                        "defaultProps": Object {
                                          "classPrefix": "rs-input",
                                          "componentClass": "input",
                                          "type": "text",
                                        },
                                        "displayName": "withStyleProps(defaultProps(Input))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    classPrefix="rs-form-control"
                                    disabled={false}
                                    errorPlacement="bottomStart"
                                    formValue={Object {}}
                                    name="authors.panels.name"
                                    onChange={[Function]}
                                    plaintextDefaultValue="--"
                                    value=""
                                  >
                                    <div
                                      className="rs-form-control-wrapper"
                                    >
                                      <withStyleProps(defaultProps(Input))
                                        classPrefix="rs-input"
                                        componentClass="input"
                                        disabled={false}
                                        name="authors.panels.name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <defaultProps(Input)
                                          className=""
                                          classPrefix="rs-input"
                                          componentClass="input"
                                          disabled={false}
                                          name="authors.panels.name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <Input
                                            className=""
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            disabled={false}
                                            name="authors.panels.name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="rs-input"
                                              disabled={false}
                                              name="authors.panels.name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </Input>
                                        </defaultProps(Input)>
                                      </withStyleProps(defaultProps(Input))>
                                      <defaultProps(ErrorMessage)
                                        className="rs-form-control-message-wrapper"
                                        classPrefix="rs-error-message"
                                        placement="bottomStart"
                                        show={false}
                                      >
                                        <ErrorMessage
                                          className="rs-form-control-message-wrapper"
                                          classPrefix="rs-error-message"
                                          placement="bottomStart"
                                          show={false}
                                        />
                                      </defaultProps(ErrorMessage)>
                                    </div>
                                  </FormControl>
                                </FormControlWrapper>
                              </defaultProps(FormControlWrapper)>
                            </div>
                          </FormGroup>
                        </defaultProps(FormGroup)>
                      </withStyleProps(defaultProps(FormGroup))>
                    </form>
                  </Form>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <ChooseEditImage
            disabled={false}
            openChooseModalOpen={[Function]}
            openEditModalOpen={[Function]}
            removeImage={[Function]}
          >
            <defaultProps(Panel)
              classPrefix="rs-panel"
              header="chooseEditImage.header"
              style={
                Object {
                  "height": 300,
                }
              }
            >
              <Panel
                classPrefix="rs-panel"
                header="chooseEditImage.header"
                style={
                  Object {
                    "height": 300,
                  }
                }
              >
                <div
                  className="rs-panel rs-panel-default"
                  style={
                    Object {
                      "height": 300,
                    }
                  }
                >
                  <div
                    className="rs-panel-heading"
                    onClick={[Function]}
                    role="rowheader"
                    tabIndex={-1}
                  >
                    chooseEditImage.header
                  </div>
                  <div
                    className="rs-panel-body"
                  >
                    <PlaceholderInput
                      onAddClick={[Function]}
                    >
                      <div
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#f7f9fa",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": "100%",
                            "justifyContent": "center",
                            "width": "100%",
                          }
                        }
                      >
                        <defaultProps(IconButton)
                          classPrefix="rs-btn-icon"
                          icon={
                            <defaultProps(Icon)
                              classPrefix="rs-icon"
                              componentClass="i"
                              icon="plus-circle"
                              size="5x"
                            />
                          }
                          onClick={[Function]}
                          placement="left"
                          size="lg"
                        >
                          <IconButton
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                                size="5x"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                            size="lg"
                          >
                            <withStyleProps(defaultProps(Button))
                              appearance="default"
                              className="rs-btn-icon rs-btn-icon-placement-left"
                              classPrefix="rs-btn"
                              componentClass="button"
                              onClick={[Function]}
                              ripple={true}
                              size="lg"
                            >
                              <defaultProps(Button)
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <Button
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <button
                                    className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      icon="plus-circle"
                                      size="5x"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                        size="5x"
                                      >
                                        <i
                                          className="rs-icon rs-icon-plus-circle rs-icon-size-5x"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                    <defaultProps(Ripple)
                                      classPrefix="rs-ripple"
                                    >
                                      <Ripple
                                        classPrefix="rs-ripple"
                                      >
                                        <span
                                          className="rs-ripple-pond"
                                        >
                                          <Transition
                                            enteringClassName="rs-ripple-rippling"
                                            in={false}
                                            onEntered={[Function]}
                                            timeout={1000}
                                          >
                                            <span
                                              className="rs-ripple"
                                              style={Object {}}
                                            />
                                          </Transition>
                                        </span>
                                      </Ripple>
                                    </defaultProps(Ripple)>
                                  </button>
                                </Button>
                              </defaultProps(Button)>
                            </withStyleProps(defaultProps(Button))>
                          </IconButton>
                        </defaultProps(IconButton)>
                      </div>
                    </PlaceholderInput>
                  </div>
                </div>
              </Panel>
            </defaultProps(Panel)>
          </ChooseEditImage>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.links"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.links"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.links
                </div>
                <div
                  className="rs-panel-body"
                >
                  <ListInput
                    defaultValue={
                      Object {
                        "title": "",
                        "url": "",
                      }
                    }
                    onChange={[Function]}
                    value={Array []}
                  >
                    <div>
                      <Component
                        defaultValue={
                          Object {
                            "title": "",
                            "url": "",
                          }
                        }
                        onChange={[Function]}
                        onSortEnd={[Function]}
                        useDragHandle={true}
                        value={Array []}
                      >
                        <div>
                          <defaultProps(IconButton)
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                          >
                            <IconButton
                              classPrefix="rs-btn-icon"
                              icon={
                                <defaultProps(Icon)
                                  classPrefix="rs-icon"
                                  componentClass="i"
                                  icon="plus-circle"
                                />
                              }
                              onClick={[Function]}
                              placement="left"
                            >
                              <withStyleProps(defaultProps(Button))
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <defaultProps(Button)
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <Button
                                    appearance="default"
                                    className="rs-btn-icon rs-btn-icon-placement-left"
                                    classPrefix="rs-btn"
                                    componentClass="button"
                                    onClick={[Function]}
                                    ripple={true}
                                  >
                                    <button
                                      className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                      >
                                        <Icon
                                          classPrefix="rs-icon"
                                          componentClass="i"
                                          icon="plus-circle"
                                        >
                                          <i
                                            className="rs-icon rs-icon-plus-circle"
                                          />
                                        </Icon>
                                      </defaultProps(Icon)>
                                      <defaultProps(Ripple)
                                        classPrefix="rs-ripple"
                                      >
                                        <Ripple
                                          classPrefix="rs-ripple"
                                        >
                                          <span
                                            className="rs-ripple-pond"
                                          >
                                            <Transition
                                              enteringClassName="rs-ripple-rippling"
                                              in={false}
                                              onEntered={[Function]}
                                              timeout={1000}
                                            >
                                              <span
                                                className="rs-ripple"
                                                style={Object {}}
                                              />
                                            </Transition>
                                          </span>
                                        </Ripple>
                                      </defaultProps(Ripple)>
                                    </button>
                                  </Button>
                                </defaultProps(Button)>
                              </withStyleProps(defaultProps(Button))>
                            </IconButton>
                          </defaultProps(IconButton)>
                        </div>
                      </Component>
                    </div>
                  </ListInput>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.bioInformation"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.bioInformation"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.bioInformation
                </div>
                <div
                  className="rs-panel-body"
                >
                  <Memo(RichTextBlock)
                    onChange={[Function]}
                    value={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "text": "",
                            },
                          ],
                          "type": "paragraph",
                        },
                      ]
                    }
                  >
                    <Slate
                      editor={
                        Object {
                          "addMark": [Function],
                          "apply": [Function],
                          "children": Array [
                            Object {
                              "children": Array [
                                Object {
                                  "text": "",
                                },
                              ],
                              "type": "paragraph",
                            },
                          ],
                          "deleteBackward": [Function],
                          "deleteForward": [Function],
                          "deleteFragment": [Function],
                          "getFragment": [Function],
                          "history": Object {
                            "redos": Array [],
                            "undos": Array [],
                          },
                          "insertBreak": [Function],
                          "insertData": [Function],
                          "insertFragment": [Function],
                          "insertNode": [Function],
                          "insertText": [Function],
                          "isInline": [Function],
                          "isVoid": [Function],
                          "marks": null,
                          "normalizeNode": [Function],
                          "onChange": [Function],
                          "operations": Array [],
                          "redo": [Function],
                          "removeMark": [Function],
                          "selection": null,
                          "setFragmentData": [Function],
                          "undo": [Function],
                        }
                      }
                      onChange={[Function]}
                      value={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "text": "",
                              },
                            ],
                            "type": "paragraph",
                          },
                        ]
                      }
                    >
                      <Toolbar
                        fadeOut={true}
                      >
                        <div
                          style={
                            Object {
                              "alignItems": "center",
                              "display": "flex",
                              "justifyContent": "center",
                              "marginBottom": 30,
                              "pointerEvents": "none",
                              "position": "sticky",
                              "top": 70,
                              "zIndex": 1,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "backgroundColor": "white",
                                "borderRadius": 6,
                                "padding": 5,
                                "pointerEvents": "auto",
                                "transitionDuration": "100ms",
                                "transitionProperty": "opacity",
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "opacity": 0.5,
                                  "transitionDuration": "100ms",
                                  "transitionProperty": "opacity",
                                }
                              }
                            >
                              <FormatButton
                                format="heading-one"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-two"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-three"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="unordered-list"
                                icon="list-ul"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ul"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ul"
                                      icon="list-ul"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ul"
                                        icon="list-ul"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ul"
                                          element="list-ul"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="ordered-list"
                                icon="list-ol"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ol"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ol"
                                      icon="list-ol"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ol"
                                        icon="list-ol"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ol"
                                          element="list-ol"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="bold"
                                icon="bold"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="bold"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="bold"
                                      icon="bold"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="bold"
                                        icon="bold"
                                      >
                                        <i
                                          className="rs-icon rs-icon-bold"
                                          element="bold"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="italic"
                                icon="italic"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="italic"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="italic"
                                      icon="italic"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="italic"
                                        icon="italic"
                                      >
                                        <i
                                          className="rs-icon rs-icon-italic"
                                          element="italic"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="underline"
                                icon="underline"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="underline"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="underline"
                                      icon="underline"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="underline"
                                        icon="underline"
                                      >
                                        <i
                                          className="rs-icon rs-icon-underline"
                                          element="underline"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="strikethrough"
                                icon="strikethrough"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="strikethrough"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="strikethrough"
                                      icon="strikethrough"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="strikethrough"
                                        icon="strikethrough"
                                      >
                                        <i
                                          className="rs-icon rs-icon-strikethrough"
                                          element="strikethrough"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <LinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="link"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="link"
                                      icon="link"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="link"
                                        icon="link"
                                      >
                                        <i
                                          className="rs-icon rs-icon-link"
                                          element="link"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                                <defaultProps(Modal)
                                  animation={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "Bounce",
                                      "render": [Function],
                                    }
                                  }
                                  animationTimeout={300}
                                  autoFocus={true}
                                  backdrop={true}
                                  classPrefix="rs-modal"
                                  dialogComponentClass={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "defaultProps": Object {
                                        "classPrefix": "rs-modal",
                                      },
                                      "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                      "propTypes": Object {
                                        "innerRef": [Function],
                                        "size": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  enforceFocus={true}
                                  keyboard={true}
                                  onHide={[Function]}
                                  overflow={true}
                                  show={false}
                                  size="sm"
                                >
                                  <Modal
                                    animation={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "Bounce",
                                        "render": [Function],
                                      }
                                    }
                                    animationTimeout={300}
                                    autoFocus={true}
                                    backdrop={true}
                                    classPrefix="rs-modal"
                                    dialogComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "classPrefix": "rs-modal",
                                        },
                                        "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    enforceFocus={true}
                                    keyboard={true}
                                    onHide={[Function]}
                                    overflow={true}
                                    show={false}
                                    size="sm"
                                  >
                                    <BaseModal
                                      autoFocus={true}
                                      backdrop={true}
                                      backdropClassName="rs-modal-backdrop"
                                      backdropTransitionTimeout={150}
                                      className="rs-modal-wrapper"
                                      containerClassName="rs-modal-open rs-modal-has-backdrop"
                                      dialogTransitionTimeout={300}
                                      enforceFocus={true}
                                      keyboard={true}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      overflow={true}
                                      show={false}
                                      transition={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "Bounce",
                                          "render": [Function],
                                        }
                                      }
                                    />
                                  </Modal>
                                </defaultProps(Modal)>
                              </LinkFormatButton>
                              <RemoveLinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  disabled={true}
                                  icon="unlink"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    disabled={true}
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="unlink"
                                      icon="unlink"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="unlink"
                                        icon="unlink"
                                      >
                                        <i
                                          className="rs-icon rs-icon-unlink"
                                          element="unlink"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </RemoveLinkFormatButton>
                            </div>
                          </div>
                        </div>
                      </Toolbar>
                      <Editable
                        placeholder="blocks.richText.startWriting"
                        renderElement={[Function]}
                        renderLeaf={[Function]}
                      >
                        <div
                          contentEditable={true}
                          data-gramm={false}
                          data-slate-editor={true}
                          data-slate-node="value"
                          onBeforeInput={[Function]}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCopy={[Function]}
                          onCut={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onPaste={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "outline": "none",
                              "whiteSpace": "pre-wrap",
                              "wordWrap": "break-word",
                            }
                          }
                          suppressContentEditableWarning={true}
                        >
                          <Children
                            decorate={[Function]}
                            decorations={
                              Array [
                                Object {
                                  "anchor": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "focus": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "placeholder": "blocks.richText.startWriting",
                                  Symbol(placeholder): true,
                                },
                              ]
                            }
                            node={
                              Object {
                                "addMark": [Function],
                                "apply": [Function],
                                "children": Array [
                                  Object {
                                    "children": Array [
                                      Object {
                                        "text": "",
                                      },
                                    ],
                                    "type": "paragraph",
                                  },
                                ],
                                "deleteBackward": [Function],
                                "deleteForward": [Function],
                                "deleteFragment": [Function],
                                "getFragment": [Function],
                                "history": Object {
                                  "redos": Array [],
                                  "undos": Array [],
                                },
                                "insertBreak": [Function],
                                "insertData": [Function],
                                "insertFragment": [Function],
                                "insertNode": [Function],
                                "insertText": [Function],
                                "isInline": [Function],
                                "isVoid": [Function],
                                "marks": null,
                                "normalizeNode": [Function],
                                "onChange": [Function],
                                "operations": Array [],
                                "redo": [Function],
                                "removeMark": [Function],
                                "selection": null,
                                "setFragmentData": [Function],
                                "undo": [Function],
                              }
                            }
                            renderElement={[Function]}
                            renderLeaf={[Function]}
                            selection={null}
                          >
                            <Element
                              decorate={[Function]}
                              decorations={
                                Array [
                                  Object {
                                    "anchor": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "focus": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "placeholder": "blocks.richText.startWriting",
                                    Symbol(placeholder): true,
                                  },
                                ]
                              }
                              element={
                                Object {
                                  "children": Array [
                                    Object {
                                      "text": "",
                                    },
                                  ],
                                  "type": "paragraph",
                                }
                              }
                              key="0"
                              renderElement={[Function]}
                              renderLeaf={[Function]}
                              selection={null}
                            >
                              <p
                                data-slate-node="element"
                              >
                                <Children
                                  decorate={[Function]}
                                  decorations={
                                    Array [
                                      Object {
                                        "anchor": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "focus": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "placeholder": "blocks.richText.startWriting",
                                        Symbol(placeholder): true,
                                      },
                                    ]
                                  }
                                  node={
                                    Object {
                                      "children": Array [
                                        Object {
                                          "text": "",
                                        },
                                      ],
                                      "type": "paragraph",
                                    }
                                  }
                                  renderElement={[Function]}
                                  renderLeaf={[Function]}
                                  selection={null}
                                >
                                  <Text
                                    decorations={
                                      Array [
                                        Object {
                                          "anchor": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "focus": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "placeholder": "blocks.richText.startWriting",
                                          Symbol(placeholder): true,
                                        },
                                      ]
                                    }
                                    isLast={true}
                                    key="1"
                                    parent={
                                      Object {
                                        "children": Array [
                                          Object {
                                            "text": "",
                                          },
                                        ],
                                        "type": "paragraph",
                                      }
                                    }
                                    renderLeaf={[Function]}
                                    text={
                                      Object {
                                        "text": "",
                                      }
                                    }
                                  >
                                    <span
                                      data-slate-node="text"
                                    >
                                      <Leaf
                                        isLast={true}
                                        key="1-0"
                                        leaf={
                                          Object {
                                            "placeholder": "blocks.richText.startWriting",
                                            "text": "",
                                            Symbol(placeholder): true,
                                          }
                                        }
                                        parent={
                                          Object {
                                            "children": Array [
                                              Object {
                                                "text": "",
                                              },
                                            ],
                                            "type": "paragraph",
                                          }
                                        }
                                        renderLeaf={[Function]}
                                        text={
                                          Object {
                                            "text": "",
                                          }
                                        }
                                      >
                                        <span
                                          data-slate-leaf={true}
                                        >
                                          <span
                                            contentEditable={false}
                                            style={
                                              Object {
                                                "display": "inline-block",
                                                "maxWidth": "100%",
                                                "opacity": "0.333",
                                                "pointerEvents": "none",
                                                "verticalAlign": "text-top",
                                                "whiteSpace": "nowrap",
                                                "width": "0",
                                              }
                                            }
                                          >
                                            blocks.richText.startWriting
                                          </span>
                                          <String
                                            isLast={true}
                                            leaf={
                                              Object {
                                                "placeholder": "blocks.richText.startWriting",
                                                "text": "",
                                                Symbol(placeholder): true,
                                              }
                                            }
                                            parent={
                                              Object {
                                                "children": Array [
                                                  Object {
                                                    "text": "",
                                                  },
                                                ],
                                                "type": "paragraph",
                                              }
                                            }
                                            text={
                                              Object {
                                                "text": "",
                                              }
                                            }
                                          >
                                            <ZeroWidthString
                                              isLineBreak={true}
                                            >
                                              <span
                                                data-slate-length={0}
                                                data-slate-zero-width="n"
                                              >
                                                ï»¿
                                                <br />
                                              </span>
                                            </ZeroWidthString>
                                          </String>
                                        </span>
                                      </Leaf>
                                    </span>
                                  </Text>
                                </Children>
                              </p>
                            </Element>
                          </Children>
                        </div>
                      </Editable>
                    </Slate>
                  </Memo(RichTextBlock)>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    onHide={[Function]}
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      onHide={[Function]}
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        onHide={[Function]}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          onHide={[Function]}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
</AuthorEditPanel>
`;

exports[`Author Edit Panel should render with ID 1`] = `
<AuthorEditPanel
  id="fakeId2"
>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  authors.panels.editAuthor
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <defaultProps(Panel)
            classPrefix="rs-panel"
          >
            <Panel
              classPrefix="rs-panel"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-body"
                >
                  <Form
                    checkDelay={500}
                    checkTrigger="change"
                    classPrefix="rs-form"
                    errorFromContext={true}
                    fluid={true}
                    formDefaultValue={Object {}}
                    layout="vertical"
                    model={
                      Schema {
                        "schema": Object {},
                      }
                    }
                  >
                    <form
                      className="rs-form rs-form-vertical rs-form-fluid"
                      onSubmit={[Function]}
                    >
                      <withStyleProps(defaultProps(FormGroup))
                        classPrefix="rs-form-group"
                      >
                        <defaultProps(FormGroup)
                          className=""
                          classPrefix="rs-form-group"
                        >
                          <FormGroup
                            className=""
                            classPrefix="rs-form-group"
                          >
                            <div
                              className="rs-form-group"
                              role="group"
                            >
                              <defaultProps(ControlLabel)
                                classPrefix="rs-control-label"
                              >
                                <ControlLabel
                                  classPrefix="rs-control-label"
                                >
                                  <label
                                    className="rs-control-label"
                                  >
                                    authors.panels.name
                                  </label>
                                </ControlLabel>
                              </defaultProps(ControlLabel)>
                              <defaultProps(FormControlWrapper)
                                classPrefix="rs-form-control"
                                disabled={false}
                                name="authors.panels.name"
                                onChange={[Function]}
                                value="Douglas Cole"
                              >
                                <FormControlWrapper
                                  classPrefix="rs-form-control"
                                  disabled={false}
                                  name="authors.panels.name"
                                  onChange={[Function]}
                                  value="Douglas Cole"
                                >
                                  <FormControl
                                    accepter={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "contextType": Object {
                                          "$$typeof": Symbol(react.context),
                                          "Consumer": Object {
                                            "$$typeof": Symbol(react.context),
                                            "_calculateChangedBits": null,
                                            "_context": [Circular],
                                          },
                                          "Provider": Object {
                                            "$$typeof": Symbol(react.provider),
                                            "_context": [Circular],
                                          },
                                          "_calculateChangedBits": null,
                                          "_currentRenderer": null,
                                          "_currentRenderer2": null,
                                          "_currentValue": null,
                                          "_currentValue2": null,
                                          "_threadCount": 0,
                                        },
                                        "defaultProps": Object {
                                          "classPrefix": "rs-input",
                                          "componentClass": "input",
                                          "type": "text",
                                        },
                                        "displayName": "withStyleProps(defaultProps(Input))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    classPrefix="rs-form-control"
                                    disabled={false}
                                    errorPlacement="bottomStart"
                                    formValue={Object {}}
                                    name="authors.panels.name"
                                    onChange={[Function]}
                                    plaintextDefaultValue="--"
                                    value="Douglas Cole"
                                  >
                                    <div
                                      className="rs-form-control-wrapper"
                                    >
                                      <withStyleProps(defaultProps(Input))
                                        classPrefix="rs-input"
                                        componentClass="input"
                                        disabled={false}
                                        name="authors.panels.name"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="text"
                                        value="Douglas Cole"
                                      >
                                        <defaultProps(Input)
                                          className=""
                                          classPrefix="rs-input"
                                          componentClass="input"
                                          disabled={false}
                                          name="authors.panels.name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value="Douglas Cole"
                                        >
                                          <Input
                                            className=""
                                            classPrefix="rs-input"
                                            componentClass="input"
                                            disabled={false}
                                            name="authors.panels.name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value="Douglas Cole"
                                          >
                                            <input
                                              className="rs-input"
                                              disabled={false}
                                              name="authors.panels.name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="Douglas Cole"
                                            />
                                          </Input>
                                        </defaultProps(Input)>
                                      </withStyleProps(defaultProps(Input))>
                                      <defaultProps(ErrorMessage)
                                        className="rs-form-control-message-wrapper"
                                        classPrefix="rs-error-message"
                                        placement="bottomStart"
                                        show={false}
                                      >
                                        <ErrorMessage
                                          className="rs-form-control-message-wrapper"
                                          classPrefix="rs-error-message"
                                          placement="bottomStart"
                                          show={false}
                                        />
                                      </defaultProps(ErrorMessage)>
                                    </div>
                                  </FormControl>
                                </FormControlWrapper>
                              </defaultProps(FormControlWrapper)>
                            </div>
                          </FormGroup>
                        </defaultProps(FormGroup)>
                      </withStyleProps(defaultProps(FormGroup))>
                    </form>
                  </Form>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <ChooseEditImage
            disabled={false}
            openChooseModalOpen={[Function]}
            openEditModalOpen={[Function]}
            removeImage={[Function]}
          >
            <defaultProps(Panel)
              classPrefix="rs-panel"
              header="chooseEditImage.header"
              style={
                Object {
                  "height": 300,
                }
              }
            >
              <Panel
                classPrefix="rs-panel"
                header="chooseEditImage.header"
                style={
                  Object {
                    "height": 300,
                  }
                }
              >
                <div
                  className="rs-panel rs-panel-default"
                  style={
                    Object {
                      "height": 300,
                    }
                  }
                >
                  <div
                    className="rs-panel-heading"
                    onClick={[Function]}
                    role="rowheader"
                    tabIndex={-1}
                  >
                    chooseEditImage.header
                  </div>
                  <div
                    className="rs-panel-body"
                  >
                    <PlaceholderInput
                      onAddClick={[Function]}
                    >
                      <div
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#f7f9fa",
                            "display": "flex",
                            "flexDirection": "column",
                            "height": "100%",
                            "justifyContent": "center",
                            "width": "100%",
                          }
                        }
                      >
                        <defaultProps(IconButton)
                          classPrefix="rs-btn-icon"
                          icon={
                            <defaultProps(Icon)
                              classPrefix="rs-icon"
                              componentClass="i"
                              icon="plus-circle"
                              size="5x"
                            />
                          }
                          onClick={[Function]}
                          placement="left"
                          size="lg"
                        >
                          <IconButton
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                                size="5x"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                            size="lg"
                          >
                            <withStyleProps(defaultProps(Button))
                              appearance="default"
                              className="rs-btn-icon rs-btn-icon-placement-left"
                              classPrefix="rs-btn"
                              componentClass="button"
                              onClick={[Function]}
                              ripple={true}
                              size="lg"
                            >
                              <defaultProps(Button)
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <Button
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <button
                                    className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left rs-btn-lg"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      icon="plus-circle"
                                      size="5x"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                        size="5x"
                                      >
                                        <i
                                          className="rs-icon rs-icon-plus-circle rs-icon-size-5x"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                    <defaultProps(Ripple)
                                      classPrefix="rs-ripple"
                                    >
                                      <Ripple
                                        classPrefix="rs-ripple"
                                      >
                                        <span
                                          className="rs-ripple-pond"
                                        >
                                          <Transition
                                            enteringClassName="rs-ripple-rippling"
                                            in={false}
                                            onEntered={[Function]}
                                            timeout={1000}
                                          >
                                            <span
                                              className="rs-ripple"
                                              style={Object {}}
                                            />
                                          </Transition>
                                        </span>
                                      </Ripple>
                                    </defaultProps(Ripple)>
                                  </button>
                                </Button>
                              </defaultProps(Button)>
                            </withStyleProps(defaultProps(Button))>
                          </IconButton>
                        </defaultProps(IconButton)>
                      </div>
                    </PlaceholderInput>
                  </div>
                </div>
              </Panel>
            </defaultProps(Panel)>
          </ChooseEditImage>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.links"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.links"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.links
                </div>
                <div
                  className="rs-panel-body"
                >
                  <ListInput
                    defaultValue={
                      Object {
                        "title": "",
                        "url": "",
                      }
                    }
                    onChange={[Function]}
                    value={Array []}
                  >
                    <div>
                      <Component
                        defaultValue={
                          Object {
                            "title": "",
                            "url": "",
                          }
                        }
                        onChange={[Function]}
                        onSortEnd={[Function]}
                        useDragHandle={true}
                        value={Array []}
                      >
                        <div>
                          <defaultProps(IconButton)
                            classPrefix="rs-btn-icon"
                            icon={
                              <defaultProps(Icon)
                                classPrefix="rs-icon"
                                componentClass="i"
                                icon="plus-circle"
                              />
                            }
                            onClick={[Function]}
                            placement="left"
                          >
                            <IconButton
                              classPrefix="rs-btn-icon"
                              icon={
                                <defaultProps(Icon)
                                  classPrefix="rs-icon"
                                  componentClass="i"
                                  icon="plus-circle"
                                />
                              }
                              onClick={[Function]}
                              placement="left"
                            >
                              <withStyleProps(defaultProps(Button))
                                appearance="default"
                                className="rs-btn-icon rs-btn-icon-placement-left"
                                classPrefix="rs-btn"
                                componentClass="button"
                                onClick={[Function]}
                                ripple={true}
                              >
                                <defaultProps(Button)
                                  appearance="default"
                                  className="rs-btn-icon rs-btn-icon-placement-left"
                                  classPrefix="rs-btn"
                                  componentClass="button"
                                  onClick={[Function]}
                                  ripple={true}
                                >
                                  <Button
                                    appearance="default"
                                    className="rs-btn-icon rs-btn-icon-placement-left"
                                    classPrefix="rs-btn"
                                    componentClass="button"
                                    onClick={[Function]}
                                    ripple={true}
                                  >
                                    <button
                                      className="rs-btn rs-btn-default rs-btn-icon rs-btn-icon-placement-left"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      <defaultProps(Icon)
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        icon="plus-circle"
                                      >
                                        <Icon
                                          classPrefix="rs-icon"
                                          componentClass="i"
                                          icon="plus-circle"
                                        >
                                          <i
                                            className="rs-icon rs-icon-plus-circle"
                                          />
                                        </Icon>
                                      </defaultProps(Icon)>
                                      <defaultProps(Ripple)
                                        classPrefix="rs-ripple"
                                      >
                                        <Ripple
                                          classPrefix="rs-ripple"
                                        >
                                          <span
                                            className="rs-ripple-pond"
                                          >
                                            <Transition
                                              enteringClassName="rs-ripple-rippling"
                                              in={false}
                                              onEntered={[Function]}
                                              timeout={1000}
                                            >
                                              <span
                                                className="rs-ripple"
                                                style={Object {}}
                                              />
                                            </Transition>
                                          </span>
                                        </Ripple>
                                      </defaultProps(Ripple)>
                                    </button>
                                  </Button>
                                </defaultProps(Button)>
                              </withStyleProps(defaultProps(Button))>
                            </IconButton>
                          </defaultProps(IconButton)>
                        </div>
                      </Component>
                    </div>
                  </ListInput>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
          <defaultProps(Panel)
            classPrefix="rs-panel"
            header="authors.panels.bioInformation"
          >
            <Panel
              classPrefix="rs-panel"
              header="authors.panels.bioInformation"
            >
              <div
                className="rs-panel rs-panel-default"
              >
                <div
                  className="rs-panel-heading"
                  onClick={[Function]}
                  role="rowheader"
                  tabIndex={-1}
                >
                  authors.panels.bioInformation
                </div>
                <div
                  className="rs-panel-body"
                >
                  <Memo(RichTextBlock)
                    onChange={[Function]}
                    value={
                      Array [
                        Object {
                          "children": Array [
                            Object {
                              "text": "",
                            },
                          ],
                          "type": "paragraph",
                        },
                      ]
                    }
                  >
                    <Slate
                      editor={
                        Object {
                          "addMark": [Function],
                          "apply": [Function],
                          "children": Array [
                            Object {
                              "children": Array [
                                Object {
                                  "text": "",
                                },
                              ],
                              "type": "paragraph",
                            },
                          ],
                          "deleteBackward": [Function],
                          "deleteForward": [Function],
                          "deleteFragment": [Function],
                          "getFragment": [Function],
                          "history": Object {
                            "redos": Array [],
                            "undos": Array [],
                          },
                          "insertBreak": [Function],
                          "insertData": [Function],
                          "insertFragment": [Function],
                          "insertNode": [Function],
                          "insertText": [Function],
                          "isInline": [Function],
                          "isVoid": [Function],
                          "marks": null,
                          "normalizeNode": [Function],
                          "onChange": [Function],
                          "operations": Array [],
                          "redo": [Function],
                          "removeMark": [Function],
                          "selection": null,
                          "setFragmentData": [Function],
                          "undo": [Function],
                        }
                      }
                      onChange={[Function]}
                      value={
                        Array [
                          Object {
                            "children": Array [
                              Object {
                                "text": "",
                              },
                            ],
                            "type": "paragraph",
                          },
                        ]
                      }
                    >
                      <Toolbar
                        fadeOut={true}
                      >
                        <div
                          style={
                            Object {
                              "alignItems": "center",
                              "display": "flex",
                              "justifyContent": "center",
                              "marginBottom": 30,
                              "pointerEvents": "none",
                              "position": "sticky",
                              "top": 70,
                              "zIndex": 1,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "backgroundColor": "white",
                                "borderRadius": 6,
                                "padding": 5,
                                "pointerEvents": "auto",
                                "transitionDuration": "100ms",
                                "transitionProperty": "opacity",
                              }
                            }
                          >
                            <div
                              style={
                                Object {
                                  "display": "flex",
                                  "opacity": 0.5,
                                  "transitionDuration": "100ms",
                                  "transitionProperty": "opacity",
                                }
                              }
                            >
                              <FormatButton
                                format="heading-one"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-two"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="heading-three"
                                icon="header"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="header"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="header"
                                      icon="header"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="header"
                                        icon="header"
                                      >
                                        <i
                                          className="rs-icon rs-icon-header"
                                          element="header"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="unordered-list"
                                icon="list-ul"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ul"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ul"
                                      icon="list-ul"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ul"
                                        icon="list-ul"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ul"
                                          element="list-ul"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="ordered-list"
                                icon="list-ol"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="list-ol"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="list-ol"
                                      icon="list-ol"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="list-ol"
                                        icon="list-ol"
                                      >
                                        <i
                                          className="rs-icon rs-icon-list-ol"
                                          element="list-ol"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <FormatButton
                                format="bold"
                                icon="bold"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="bold"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="bold"
                                      icon="bold"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="bold"
                                        icon="bold"
                                      >
                                        <i
                                          className="rs-icon rs-icon-bold"
                                          element="bold"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="italic"
                                icon="italic"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="italic"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="italic"
                                      icon="italic"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="italic"
                                        icon="italic"
                                      >
                                        <i
                                          className="rs-icon rs-icon-italic"
                                          element="italic"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="underline"
                                icon="underline"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="underline"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="underline"
                                      icon="underline"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="underline"
                                        icon="underline"
                                      >
                                        <i
                                          className="rs-icon rs-icon-underline"
                                          element="underline"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <FormatButton
                                format="strikethrough"
                                icon="strikethrough"
                              >
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="strikethrough"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="strikethrough"
                                      icon="strikethrough"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="strikethrough"
                                        icon="strikethrough"
                                      >
                                        <i
                                          className="rs-icon rs-icon-strikethrough"
                                          element="strikethrough"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </FormatButton>
                              <ToolbarDivider>
                                <div
                                  style={
                                    Object {
                                      "alignSelf": "stretch",
                                      "backgroundColor": "gray",
                                      "marginBottom": 2,
                                      "marginLeft": 20,
                                      "marginRight": 20,
                                      "marginTop": 2,
                                      "width": "1px",
                                    }
                                  }
                                />
                              </ToolbarDivider>
                              <LinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  icon="link"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="link"
                                      icon="link"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="link"
                                        icon="link"
                                      >
                                        <i
                                          className="rs-icon rs-icon-link"
                                          element="link"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                                <defaultProps(Modal)
                                  animation={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "Bounce",
                                      "render": [Function],
                                    }
                                  }
                                  animationTimeout={300}
                                  autoFocus={true}
                                  backdrop={true}
                                  classPrefix="rs-modal"
                                  dialogComponentClass={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "defaultProps": Object {
                                        "classPrefix": "rs-modal",
                                      },
                                      "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                      "propTypes": Object {
                                        "innerRef": [Function],
                                        "size": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  enforceFocus={true}
                                  keyboard={true}
                                  onHide={[Function]}
                                  overflow={true}
                                  show={false}
                                  size="sm"
                                >
                                  <Modal
                                    animation={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "Bounce",
                                        "render": [Function],
                                      }
                                    }
                                    animationTimeout={300}
                                    autoFocus={true}
                                    backdrop={true}
                                    classPrefix="rs-modal"
                                    dialogComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "classPrefix": "rs-modal",
                                        },
                                        "displayName": "withStyleProps(defaultProps(ModalDialog))",
                                        "propTypes": Object {
                                          "innerRef": [Function],
                                          "size": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    enforceFocus={true}
                                    keyboard={true}
                                    onHide={[Function]}
                                    overflow={true}
                                    show={false}
                                    size="sm"
                                  >
                                    <BaseModal
                                      autoFocus={true}
                                      backdrop={true}
                                      backdropClassName="rs-modal-backdrop"
                                      backdropTransitionTimeout={150}
                                      className="rs-modal-wrapper"
                                      containerClassName="rs-modal-open rs-modal-has-backdrop"
                                      dialogTransitionTimeout={300}
                                      enforceFocus={true}
                                      keyboard={true}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      overflow={true}
                                      show={false}
                                      transition={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "Bounce",
                                          "render": [Function],
                                        }
                                      }
                                    />
                                  </Modal>
                                </defaultProps(Modal)>
                              </LinkFormatButton>
                              <RemoveLinkFormatButton>
                                <ForwardRef(ToolbarButton)
                                  active={false}
                                  disabled={true}
                                  icon="unlink"
                                  onMouseDown={[Function]}
                                >
                                  <button
                                    disabled={true}
                                    onMouseDown={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "transparent",
                                        "border": "",
                                        "borderRadius": 3,
                                        "cursor": "pointer",
                                        "fontSize": 16,
                                        "padding": 2,
                                      }
                                    }
                                  >
                                    <defaultProps(Icon)
                                      classPrefix="rs-icon"
                                      componentClass="i"
                                      element="unlink"
                                      icon="unlink"
                                    >
                                      <Icon
                                        classPrefix="rs-icon"
                                        componentClass="i"
                                        element="unlink"
                                        icon="unlink"
                                      >
                                        <i
                                          className="rs-icon rs-icon-unlink"
                                          element="unlink"
                                        />
                                      </Icon>
                                    </defaultProps(Icon)>
                                  </button>
                                </ForwardRef(ToolbarButton)>
                              </RemoveLinkFormatButton>
                            </div>
                          </div>
                        </div>
                      </Toolbar>
                      <Editable
                        placeholder="blocks.richText.startWriting"
                        renderElement={[Function]}
                        renderLeaf={[Function]}
                      >
                        <div
                          contentEditable={true}
                          data-gramm={false}
                          data-slate-editor={true}
                          data-slate-node="value"
                          onBeforeInput={[Function]}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onCompositionEnd={[Function]}
                          onCompositionStart={[Function]}
                          onCopy={[Function]}
                          onCut={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onPaste={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "outline": "none",
                              "whiteSpace": "pre-wrap",
                              "wordWrap": "break-word",
                            }
                          }
                          suppressContentEditableWarning={true}
                        >
                          <Children
                            decorate={[Function]}
                            decorations={
                              Array [
                                Object {
                                  "anchor": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "focus": Object {
                                    "offset": 0,
                                    "path": Array [
                                      0,
                                      0,
                                    ],
                                  },
                                  "placeholder": "blocks.richText.startWriting",
                                  Symbol(placeholder): true,
                                },
                              ]
                            }
                            node={
                              Object {
                                "addMark": [Function],
                                "apply": [Function],
                                "children": Array [
                                  Object {
                                    "children": Array [
                                      Object {
                                        "text": "",
                                      },
                                    ],
                                    "type": "paragraph",
                                  },
                                ],
                                "deleteBackward": [Function],
                                "deleteForward": [Function],
                                "deleteFragment": [Function],
                                "getFragment": [Function],
                                "history": Object {
                                  "redos": Array [],
                                  "undos": Array [],
                                },
                                "insertBreak": [Function],
                                "insertData": [Function],
                                "insertFragment": [Function],
                                "insertNode": [Function],
                                "insertText": [Function],
                                "isInline": [Function],
                                "isVoid": [Function],
                                "marks": null,
                                "normalizeNode": [Function],
                                "onChange": [Function],
                                "operations": Array [],
                                "redo": [Function],
                                "removeMark": [Function],
                                "selection": null,
                                "setFragmentData": [Function],
                                "undo": [Function],
                              }
                            }
                            renderElement={[Function]}
                            renderLeaf={[Function]}
                            selection={null}
                          >
                            <Element
                              decorate={[Function]}
                              decorations={
                                Array [
                                  Object {
                                    "anchor": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "focus": Object {
                                      "offset": 0,
                                      "path": Array [
                                        0,
                                        0,
                                      ],
                                    },
                                    "placeholder": "blocks.richText.startWriting",
                                    Symbol(placeholder): true,
                                  },
                                ]
                              }
                              element={
                                Object {
                                  "children": Array [
                                    Object {
                                      "text": "",
                                    },
                                  ],
                                  "type": "paragraph",
                                }
                              }
                              key="4"
                              renderElement={[Function]}
                              renderLeaf={[Function]}
                              selection={null}
                            >
                              <p
                                data-slate-node="element"
                              >
                                <Children
                                  decorate={[Function]}
                                  decorations={
                                    Array [
                                      Object {
                                        "anchor": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "focus": Object {
                                          "offset": 0,
                                          "path": Array [
                                            0,
                                            0,
                                          ],
                                        },
                                        "placeholder": "blocks.richText.startWriting",
                                        Symbol(placeholder): true,
                                      },
                                    ]
                                  }
                                  node={
                                    Object {
                                      "children": Array [
                                        Object {
                                          "text": "",
                                        },
                                      ],
                                      "type": "paragraph",
                                    }
                                  }
                                  renderElement={[Function]}
                                  renderLeaf={[Function]}
                                  selection={null}
                                >
                                  <Text
                                    decorations={
                                      Array [
                                        Object {
                                          "anchor": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "focus": Object {
                                            "offset": 0,
                                            "path": Array [
                                              0,
                                              0,
                                            ],
                                          },
                                          "placeholder": "blocks.richText.startWriting",
                                          Symbol(placeholder): true,
                                        },
                                      ]
                                    }
                                    isLast={true}
                                    key="5"
                                    parent={
                                      Object {
                                        "children": Array [
                                          Object {
                                            "text": "",
                                          },
                                        ],
                                        "type": "paragraph",
                                      }
                                    }
                                    renderLeaf={[Function]}
                                    text={
                                      Object {
                                        "text": "",
                                      }
                                    }
                                  >
                                    <span
                                      data-slate-node="text"
                                    >
                                      <Leaf
                                        isLast={true}
                                        key="5-0"
                                        leaf={
                                          Object {
                                            "placeholder": "blocks.richText.startWriting",
                                            "text": "",
                                            Symbol(placeholder): true,
                                          }
                                        }
                                        parent={
                                          Object {
                                            "children": Array [
                                              Object {
                                                "text": "",
                                              },
                                            ],
                                            "type": "paragraph",
                                          }
                                        }
                                        renderLeaf={[Function]}
                                        text={
                                          Object {
                                            "text": "",
                                          }
                                        }
                                      >
                                        <span
                                          data-slate-leaf={true}
                                        >
                                          <span
                                            contentEditable={false}
                                            style={
                                              Object {
                                                "display": "inline-block",
                                                "maxWidth": "100%",
                                                "opacity": "0.333",
                                                "pointerEvents": "none",
                                                "verticalAlign": "text-top",
                                                "whiteSpace": "nowrap",
                                                "width": "0",
                                              }
                                            }
                                          >
                                            blocks.richText.startWriting
                                          </span>
                                          <String
                                            isLast={true}
                                            leaf={
                                              Object {
                                                "placeholder": "blocks.richText.startWriting",
                                                "text": "",
                                                Symbol(placeholder): true,
                                              }
                                            }
                                            parent={
                                              Object {
                                                "children": Array [
                                                  Object {
                                                    "text": "",
                                                  },
                                                ],
                                                "type": "paragraph",
                                              }
                                            }
                                            text={
                                              Object {
                                                "text": "",
                                              }
                                            }
                                          >
                                            <ZeroWidthString
                                              isLineBreak={true}
                                            >
                                              <span
                                                data-slate-length={0}
                                                data-slate-zero-width="n"
                                              >
                                                ï»¿
                                                <br />
                                              </span>
                                            </ZeroWidthString>
                                          </String>
                                        </span>
                                      </Leaf>
                                    </span>
                                  </Text>
                                </Children>
                              </p>
                            </Element>
                          </Children>
                        </div>
                      </Editable>
                    </Slate>
                  </Memo(RichTextBlock)>
                </div>
              </div>
            </Panel>
          </defaultProps(Panel)>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.save
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  authors.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    onHide={[Function]}
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      onHide={[Function]}
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        onHide={[Function]}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          onHide={[Function]}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
  <defaultProps(Drawer)
    classPrefix="rs-drawer"
    placement="right"
    show={false}
    size="sm"
  >
    <Drawer
      classPrefix="rs-drawer"
      placement="right"
      show={false}
      size="sm"
    >
      <defaultProps(Modal)
        animation={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Slide",
            "render": [Function],
          }
        }
        animationProps={
          Object {
            "placement": "right",
          }
        }
        animationTimeout={300}
        autoFocus={true}
        backdrop={true}
        className="rs-drawer-right"
        classPrefix="rs-drawer"
        dialogComponentClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": Object {
              "classPrefix": "rs-modal",
            },
            "displayName": "withStyleProps(defaultProps(ModalDialog))",
            "propTypes": Object {
              "innerRef": [Function],
              "size": [Function],
            },
            "render": [Function],
          }
        }
        drawer={true}
        enforceFocus={true}
        keyboard={true}
        overflow={true}
        show={false}
        size="sm"
      >
        <Modal
          animation={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "Slide",
              "render": [Function],
            }
          }
          animationProps={
            Object {
              "placement": "right",
            }
          }
          animationTimeout={300}
          autoFocus={true}
          backdrop={true}
          className="rs-drawer-right"
          classPrefix="rs-drawer"
          dialogComponentClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": Object {
                "classPrefix": "rs-modal",
              },
              "displayName": "withStyleProps(defaultProps(ModalDialog))",
              "propTypes": Object {
                "innerRef": [Function],
                "size": [Function],
              },
              "render": [Function],
            }
          }
          drawer={true}
          enforceFocus={true}
          keyboard={true}
          overflow={true}
          show={false}
          size="sm"
        >
          <BaseModal
            animationProps={
              Object {
                "placement": "right",
              }
            }
            autoFocus={true}
            backdrop={true}
            backdropClassName="rs-drawer-backdrop"
            backdropTransitionTimeout={150}
            className="rs-drawer-wrapper"
            containerClassName="rs-drawer-open rs-drawer-has-backdrop"
            dialogTransitionTimeout={300}
            drawer={true}
            enforceFocus={true}
            keyboard={true}
            onEntered={[Function]}
            onEntering={[Function]}
            onExited={[Function]}
            overflow={true}
            show={false}
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "Slide",
                "render": [Function],
              }
            }
          />
        </Modal>
      </defaultProps(Modal)>
    </Drawer>
  </defaultProps(Drawer)>
</AuthorEditPanel>
`;
