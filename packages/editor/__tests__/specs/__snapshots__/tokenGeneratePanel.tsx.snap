// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generate Token Panel should render 1`] = `
<TokenGeneratePanel>
  <Styled(div)>
    <div>
      <PanelHeader
        leftChildren={
          <ForwardRef(NavigationButton)
            icon={[Function]}
            label="Close"
            onClick={[Function]}
          />
        }
        rightChildren={
          <ForwardRef(NavigationButton)
            disabled={false}
            icon={[Function]}
            label="tokenList.panels.generate"
            onClick={[Function]}
          />
        }
        title="tokenList.panels.generateToken"
      >
        <Styled(div)>
          <div>
            <ForwardRef(NavigationButton)
              icon={[Function]}
              label="Close"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": undefined,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconClose
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                        />
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                      </svg>
                    </MaterialIconClose>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      Close
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
            <ForwardRef(Box)
              flexGrow={1}
            >
              <div />
            </ForwardRef(Box)>
            <Styled(span)>
              <span>
                tokenList.panels.generateToken
              </span>
            </Styled(span)>
            <ForwardRef(NavigationButton)
              disabled={false}
              icon={[Function]}
              label="tokenList.panels.generate"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": false,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconSaveOutlined
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M0 0h24v24H0V0z"
                          fill="none"
                        />
                        <path
                          d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm2 16H5V5h11.17L19 7.83V19zm-7-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zM6 6h9v4H6z"
                        />
                      </svg>
                    </MaterialIconSaveOutlined>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      tokenList.panels.generate
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
          </div>
        </Styled(div)>
      </PanelHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(TextInput)
              disabled={false}
              label="tokenList.panels.name"
              marginBottom={10}
              onChange={[Function]}
              value=""
            >
              <Styled(div)
                styleProps={
                  Object {
                    "marginBottom": 10,
                  }
                }
              >
                <div>
                  <Styled(label)>
                    <label>
                      <Styled(input)
                        disabled={false}
                        onChange={[Function]}
                        placeholder="tokenList.panels.name"
                        styleProps={
                          Object {
                            "hasError": false,
                            "hasIcon": false,
                          }
                        }
                        value=""
                      >
                        <input
                          disabled={false}
                          onChange={[Function]}
                          placeholder="tokenList.panels.name"
                          value=""
                        />
                      </Styled(input)>
                      <Styled(span)
                        styleProps={
                          Object {
                            "hasError": false,
                            "hasIcon": false,
                          }
                        }
                      >
                        <span>
                          tokenList.panels.name
                        </span>
                      </Styled(span)>
                    </label>
                  </Styled(label)>
                </div>
              </Styled(div)>
            </ForwardRef(TextInput)>
          </div>
        </Styled(div)>
      </PanelSection>
    </div>
  </Styled(div)>
  <Toast
    autoHideDuration={5000}
    onClose={[Function]}
    open={false}
    type="error"
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={false}
      mountOnEnter={false}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    />
  </Toast>
</TokenGeneratePanel>
`;

exports[`User should be able to generate new token 1`] = `
<TokenGeneratePanel>
  <Styled(div)>
    <div>
      <PanelHeader
        leftChildren={
          <ForwardRef(NavigationButton)
            icon={[Function]}
            label="Close"
            onClick={[Function]}
          />
        }
        rightChildren={false}
        title="tokenList.panels.generateToken"
      >
        <Styled(div)>
          <div>
            <ForwardRef(NavigationButton)
              icon={[Function]}
              label="Close"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": undefined,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconClose
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                        />
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                      </svg>
                    </MaterialIconClose>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      Close
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
            <ForwardRef(Box)
              flexGrow={1}
            >
              <div />
            </ForwardRef(Box)>
            <Styled(span)>
              <span>
                tokenList.panels.generateToken
              </span>
            </Styled(span)>
          </div>
        </Styled(div)>
      </PanelHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(Box)
              marginBottom={20}
            >
              <div>
                <ForwardRef(Typography)
                  variant="body1"
                >
                  <p>
                    tokenList.panels.creationSuccess
                  </p>
                </ForwardRef(Typography)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Card)
              padding={10}
            >
              <Styled(div)
                styleProps={
                  Object {
                    "padding": 10,
                  }
                }
              >
                <div>
                  <ForwardRef(Typography)
                    align="center"
                    variant="body2"
                  >
                    <p>
                      iXBGZLn7L5bAg455FQiCrd7RUQJtgWZ5
                    </p>
                  </ForwardRef(Typography)>
                </div>
              </Styled(div)>
            </ForwardRef(Card)>
          </div>
        </Styled(div)>
      </PanelSection>
    </div>
  </Styled(div)>
  <Toast
    autoHideDuration={5000}
    onClose={[Function]}
    open={false}
    type="error"
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={false}
      mountOnEnter={false}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    />
  </Toast>
</TokenGeneratePanel>
`;
