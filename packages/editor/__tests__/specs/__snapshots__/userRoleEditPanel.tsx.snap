// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User Role Edit Panel should allow a new role to be created 1`] = `
<UserRoleEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userRoles.panels.createUserRole
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userRoles.panels.name"
                        onChange={[Function]}
                        value="Brand New User Role"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userRoles.panels.name"
                          onChange={[Function]}
                          value="Brand New User Role"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Brand New User Role"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userRoles.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Brand New User Role"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userRoles.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Brand New User Role"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userRoles.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Brand New User Role"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userRoles.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Brand New User Role"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.description
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userRoles.panels.description"
                        onChange={[Function]}
                        value="A user role to be added to snapshot"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userRoles.panels.description"
                          onChange={[Function]}
                          value="A user role to be added to snapshot"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.description"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="A user role to be added to snapshot"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userRoles.panels.description"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="A user role to be added to snapshot"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userRoles.panels.description"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="A user role to be added to snapshot"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userRoles.panels.description"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="A user role to be added to snapshot"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userRoles.panels.description"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="A user role to be added to snapshot"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.permissions
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        block={true}
                        data={
                          Array [
                            Object {
                              "label": "permission description 1",
                              "value": "permissionId1",
                            },
                            Object {
                              "label": "permission description 2",
                              "value": "permissionId2",
                            },
                            Object {
                              "label": "permission description 3",
                              "value": "permissionId3",
                            },
                            Object {
                              "label": "permission description 4",
                              "value": "permissionId4",
                            },
                          ]
                        }
                        disabledItemValues={Array []}
                        onChange={[Function]}
                        value={Array []}
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          block={true}
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "permission description 1",
                                "value": "permissionId1",
                              },
                              Object {
                                "label": "permission description 2",
                                "value": "permissionId2",
                              },
                              Object {
                                "label": "permission description 3",
                                "value": "permissionId3",
                              },
                              Object {
                                "label": "permission description 4",
                                "value": "permissionId4",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={Array []}
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            block={true}
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "permission description 1",
                                  "value": "permissionId1",
                                },
                                Object {
                                  "label": "permission description 2",
                                  "value": "permissionId2",
                                },
                                Object {
                                  "label": "permission description 3",
                                  "value": "permissionId3",
                                },
                                Object {
                                  "label": "permission description 4",
                                  "value": "permissionId4",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={Array []}
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "block": true,
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "permission description 1",
                                      "value": "permissionId1",
                                    },
                                    Object {
                                      "label": "permission description 2",
                                      "value": "permissionId2",
                                    },
                                    Object {
                                      "label": "permission description 3",
                                      "value": "permissionId3",
                                    },
                                    Object {
                                      "label": "permission description 4",
                                      "value": "permissionId4",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={Array []}
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                        Object {
                                          "label": "permission description 3",
                                          "value": "permissionId3",
                                        },
                                        Object {
                                          "label": "permission description 4",
                                          "value": "permissionId4",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={Array []}
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "permission description 1",
                                            "value": "permissionId1",
                                          },
                                          Object {
                                            "label": "permission description 2",
                                            "value": "permissionId2",
                                          },
                                          Object {
                                            "label": "permission description 3",
                                            "value": "permissionId3",
                                          },
                                          Object {
                                            "label": "permission description 4",
                                            "value": "permissionId4",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-block rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={false}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={false}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-placeholder"
                                                >
                                                  <FormattedMessage
                                                    id="placeholder"
                                                  >
                                                    <span>
                                                      Select
                                                    </span>
                                                  </FormattedMessage>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={true}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={true}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={true}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should have Toggle sliders disabled with System Role 1`] = `
<UserRoleEditPanel
  id="roleId1"
>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userRoles.panels.editUserRole
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userRoles.panels.name"
                        onChange={[Function]}
                        value="Role 1"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userRoles.panels.name"
                          onChange={[Function]}
                          value="Role 1"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Role 1"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userRoles.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Role 1"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userRoles.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Role 1"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userRoles.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Role 1"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userRoles.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Role 1"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.description
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userRoles.panels.description"
                        onChange={[Function]}
                        value="Description for role 1"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userRoles.panels.description"
                          onChange={[Function]}
                          value="Description for role 1"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.description"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Description for role 1"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userRoles.panels.description"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Description for role 1"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userRoles.panels.description"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Description for role 1"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userRoles.panels.description"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Description for role 1"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userRoles.panels.description"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Description for role 1"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <p>
                userRoles.panels.systemRole
              </p>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.permissions
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        block={true}
                        data={
                          Array [
                            Object {
                              "label": "permission description 1",
                              "value": "permissionId1",
                            },
                            Object {
                              "label": "permission description 2",
                              "value": "permissionId2",
                            },
                            Object {
                              "label": "permission description 3",
                              "value": "permissionId3",
                            },
                            Object {
                              "label": "permission description 4",
                              "value": "permissionId4",
                            },
                          ]
                        }
                        disabledItemValues={
                          Array [
                            "permissionId1",
                            "permissionId2",
                            "permissionId3",
                            "permissionId4",
                          ]
                        }
                        onChange={[Function]}
                        value={
                          Array [
                            "permissionId1",
                            "permissionId2",
                          ]
                        }
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          block={true}
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "permission description 1",
                                "value": "permissionId1",
                              },
                              Object {
                                "label": "permission description 2",
                                "value": "permissionId2",
                              },
                              Object {
                                "label": "permission description 3",
                                "value": "permissionId3",
                              },
                              Object {
                                "label": "permission description 4",
                                "value": "permissionId4",
                              },
                            ]
                          }
                          disabledItemValues={
                            Array [
                              "permissionId1",
                              "permissionId2",
                              "permissionId3",
                              "permissionId4",
                            ]
                          }
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={
                            Array [
                              "permissionId1",
                              "permissionId2",
                            ]
                          }
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            block={true}
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "permission description 1",
                                  "value": "permissionId1",
                                },
                                Object {
                                  "label": "permission description 2",
                                  "value": "permissionId2",
                                },
                                Object {
                                  "label": "permission description 3",
                                  "value": "permissionId3",
                                },
                                Object {
                                  "label": "permission description 4",
                                  "value": "permissionId4",
                                },
                              ]
                            }
                            disabledItemValues={
                              Array [
                                "permissionId1",
                                "permissionId2",
                                "permissionId3",
                                "permissionId4",
                              ]
                            }
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={
                              Array [
                                "permissionId1",
                                "permissionId2",
                              ]
                            }
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "block": true,
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "permission description 1",
                                      "value": "permissionId1",
                                    },
                                    Object {
                                      "label": "permission description 2",
                                      "value": "permissionId2",
                                    },
                                    Object {
                                      "label": "permission description 3",
                                      "value": "permissionId3",
                                    },
                                    Object {
                                      "label": "permission description 4",
                                      "value": "permissionId4",
                                    },
                                  ],
                                  "disabledItemValues": Array [
                                    "permissionId1",
                                    "permissionId2",
                                    "permissionId3",
                                    "permissionId4",
                                  ],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [
                                    "permissionId1",
                                    "permissionId2",
                                  ],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={
                                      Array [
                                        "permissionId1",
                                        "permissionId2",
                                      ]
                                    }
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                        Object {
                                          "label": "permission description 3",
                                          "value": "permissionId3",
                                        },
                                        Object {
                                          "label": "permission description 4",
                                          "value": "permissionId4",
                                        },
                                      ]
                                    }
                                    disabledItemValues={
                                      Array [
                                        "permissionId1",
                                        "permissionId2",
                                        "permissionId3",
                                        "permissionId4",
                                      ]
                                    }
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={
                                        Array [
                                          "permissionId1",
                                          "permissionId2",
                                        ]
                                      }
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "permission description 1",
                                            "value": "permissionId1",
                                          },
                                          Object {
                                            "label": "permission description 2",
                                            "value": "permissionId2",
                                          },
                                          Object {
                                            "label": "permission description 3",
                                            "value": "permissionId3",
                                          },
                                          Object {
                                            "label": "permission description 4",
                                            "value": "permissionId4",
                                          },
                                        ]
                                      }
                                      disabledItemValues={
                                        Array [
                                          "permissionId1",
                                          "permissionId2",
                                          "permissionId3",
                                          "permissionId4",
                                        ]
                                      }
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-block rs-picker-has-value rs-picker-cleanable rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={true}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={true}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-value"
                                                >
                                                  <SelectedElement
                                                    countable={true}
                                                    labelKey="label"
                                                    prefix={[Function]}
                                                    selectedItems={
                                                      Array [
                                                        Object {
                                                          "label": "permission description 1",
                                                          "value": "permissionId1",
                                                        },
                                                        Object {
                                                          "label": "permission description 2",
                                                          "value": "permissionId2",
                                                        },
                                                      ]
                                                    }
                                                    valueKey="value"
                                                  >
                                                    <span
                                                      className="rs-picker-value-list"
                                                      title="permission description 1, permission description 2"
                                                    >
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 1
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-separator"
                                                      >
                                                        ,
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 2
                                                      </span>
                                                    </span>
                                                    <span
                                                      className="rs-picker-value-count"
                                                      title="2"
                                                    >
                                                      2
                                                    </span>
                                                  </SelectedElement>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-clean"
                                                  onClick={[Function]}
                                                  role="button"
                                                  tabIndex={-1}
                                                >
                                                  âœ•
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={true}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={true}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={true}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.save
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should render 1`] = `
<UserRoleEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userRoles.panels.createUserRole
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userRoles.panels.name"
                        onChange={[Function]}
                        value=""
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userRoles.panels.name"
                          onChange={[Function]}
                          value=""
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value=""
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userRoles.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userRoles.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userRoles.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userRoles.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.description
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userRoles.panels.description"
                        onChange={[Function]}
                        value=""
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userRoles.panels.description"
                          onChange={[Function]}
                          value=""
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.description"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value=""
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userRoles.panels.description"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userRoles.panels.description"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userRoles.panels.description"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userRoles.panels.description"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.permissions
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        block={true}
                        data={
                          Array [
                            Object {
                              "label": "permission description 1",
                              "value": "permissionId1",
                            },
                            Object {
                              "label": "permission description 2",
                              "value": "permissionId2",
                            },
                            Object {
                              "label": "permission description 3",
                              "value": "permissionId3",
                            },
                            Object {
                              "label": "permission description 4",
                              "value": "permissionId4",
                            },
                          ]
                        }
                        disabledItemValues={Array []}
                        onChange={[Function]}
                        value={Array []}
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          block={true}
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "permission description 1",
                                "value": "permissionId1",
                              },
                              Object {
                                "label": "permission description 2",
                                "value": "permissionId2",
                              },
                              Object {
                                "label": "permission description 3",
                                "value": "permissionId3",
                              },
                              Object {
                                "label": "permission description 4",
                                "value": "permissionId4",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={Array []}
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            block={true}
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "permission description 1",
                                  "value": "permissionId1",
                                },
                                Object {
                                  "label": "permission description 2",
                                  "value": "permissionId2",
                                },
                                Object {
                                  "label": "permission description 3",
                                  "value": "permissionId3",
                                },
                                Object {
                                  "label": "permission description 4",
                                  "value": "permissionId4",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={Array []}
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "block": true,
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "permission description 1",
                                      "value": "permissionId1",
                                    },
                                    Object {
                                      "label": "permission description 2",
                                      "value": "permissionId2",
                                    },
                                    Object {
                                      "label": "permission description 3",
                                      "value": "permissionId3",
                                    },
                                    Object {
                                      "label": "permission description 4",
                                      "value": "permissionId4",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={Array []}
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                        Object {
                                          "label": "permission description 3",
                                          "value": "permissionId3",
                                        },
                                        Object {
                                          "label": "permission description 4",
                                          "value": "permissionId4",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={Array []}
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "permission description 1",
                                            "value": "permissionId1",
                                          },
                                          Object {
                                            "label": "permission description 2",
                                            "value": "permissionId2",
                                          },
                                          Object {
                                            "label": "permission description 3",
                                            "value": "permissionId3",
                                          },
                                          Object {
                                            "label": "permission description 4",
                                            "value": "permissionId4",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-block rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={false}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={false}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-placeholder"
                                                >
                                                  <FormattedMessage
                                                    id="placeholder"
                                                  >
                                                    <span>
                                                      Select
                                                    </span>
                                                  </FormattedMessage>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should render with role 1`] = `
<UserRoleEditPanel
  id="roleId1"
>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              Ã—
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userRoles.panels.editUserRole
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userRoles.panels.name"
                        onChange={[Function]}
                        value="Role 1"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userRoles.panels.name"
                          onChange={[Function]}
                          value="Role 1"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Role 1"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userRoles.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Role 1"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userRoles.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Role 1"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userRoles.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Role 1"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userRoles.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Role 1"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.description
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userRoles.panels.description"
                        onChange={[Function]}
                        value="Description for role 1"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userRoles.panels.description"
                          onChange={[Function]}
                          value="Description for role 1"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userRoles.panels.description"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Description for role 1"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userRoles.panels.description"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Description for role 1"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userRoles.panels.description"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Description for role 1"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userRoles.panels.description"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Description for role 1"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userRoles.panels.description"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Description for role 1"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userRoles.panels.permissions
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        block={true}
                        data={
                          Array [
                            Object {
                              "label": "permission description 1",
                              "value": "permissionId1",
                            },
                            Object {
                              "label": "permission description 2",
                              "value": "permissionId2",
                            },
                            Object {
                              "label": "permission description 3",
                              "value": "permissionId3",
                            },
                            Object {
                              "label": "permission description 4",
                              "value": "permissionId4",
                            },
                          ]
                        }
                        disabledItemValues={Array []}
                        onChange={[Function]}
                        value={
                          Array [
                            "permissionId1",
                            "permissionId2",
                            "permissionId3",
                            "permissionId4",
                          ]
                        }
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          block={true}
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "permission description 1",
                                "value": "permissionId1",
                              },
                              Object {
                                "label": "permission description 2",
                                "value": "permissionId2",
                              },
                              Object {
                                "label": "permission description 3",
                                "value": "permissionId3",
                              },
                              Object {
                                "label": "permission description 4",
                                "value": "permissionId4",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={
                            Array [
                              "permissionId1",
                              "permissionId2",
                              "permissionId3",
                              "permissionId4",
                            ]
                          }
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            block={true}
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "permission description 1",
                                  "value": "permissionId1",
                                },
                                Object {
                                  "label": "permission description 2",
                                  "value": "permissionId2",
                                },
                                Object {
                                  "label": "permission description 3",
                                  "value": "permissionId3",
                                },
                                Object {
                                  "label": "permission description 4",
                                  "value": "permissionId4",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={
                              Array [
                                "permissionId1",
                                "permissionId2",
                                "permissionId3",
                                "permissionId4",
                              ]
                            }
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "block": true,
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "permission description 1",
                                      "value": "permissionId1",
                                    },
                                    Object {
                                      "label": "permission description 2",
                                      "value": "permissionId2",
                                    },
                                    Object {
                                      "label": "permission description 3",
                                      "value": "permissionId3",
                                    },
                                    Object {
                                      "label": "permission description 4",
                                      "value": "permissionId4",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [
                                    "permissionId1",
                                    "permissionId2",
                                    "permissionId3",
                                    "permissionId4",
                                  ],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={
                                      Array [
                                        "permissionId1",
                                        "permissionId2",
                                        "permissionId3",
                                        "permissionId4",
                                      ]
                                    }
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                        Object {
                                          "label": "permission description 3",
                                          "value": "permissionId3",
                                        },
                                        Object {
                                          "label": "permission description 4",
                                          "value": "permissionId4",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={
                                        Array [
                                          "permissionId1",
                                          "permissionId2",
                                          "permissionId3",
                                          "permissionId4",
                                        ]
                                      }
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "permission description 1",
                                            "value": "permissionId1",
                                          },
                                          Object {
                                            "label": "permission description 2",
                                            "value": "permissionId2",
                                          },
                                          Object {
                                            "label": "permission description 3",
                                            "value": "permissionId3",
                                          },
                                          Object {
                                            "label": "permission description 4",
                                            "value": "permissionId4",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-block rs-picker-has-value rs-picker-cleanable rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={true}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={true}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-value"
                                                >
                                                  <SelectedElement
                                                    countable={true}
                                                    labelKey="label"
                                                    prefix={[Function]}
                                                    selectedItems={
                                                      Array [
                                                        Object {
                                                          "label": "permission description 1",
                                                          "value": "permissionId1",
                                                        },
                                                        Object {
                                                          "label": "permission description 2",
                                                          "value": "permissionId2",
                                                        },
                                                        Object {
                                                          "label": "permission description 3",
                                                          "value": "permissionId3",
                                                        },
                                                        Object {
                                                          "label": "permission description 4",
                                                          "value": "permissionId4",
                                                        },
                                                      ]
                                                    }
                                                    valueKey="value"
                                                  >
                                                    <span
                                                      className="rs-picker-value-list"
                                                      title="permission description 1, permission description 2, permission description 3, permission description 4"
                                                    >
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 1
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-separator"
                                                      >
                                                        ,
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 2
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-separator"
                                                      >
                                                        ,
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 3
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-separator"
                                                      >
                                                        ,
                                                      </span>
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        permission description 4
                                                      </span>
                                                    </span>
                                                    <span
                                                      className="rs-picker-value-count"
                                                      title="4"
                                                    >
                                                      4
                                                    </span>
                                                  </SelectedElement>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-clean"
                                                  onClick={[Function]}
                                                  role="button"
                                                  tabIndex={-1}
                                                >
                                                  âœ•
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.save
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
</UserRoleEditPanel>
`;
