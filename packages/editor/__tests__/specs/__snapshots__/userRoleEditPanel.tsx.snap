// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User Role Edit Panel should allow a new role to be created 1`] = `
<UserRoleEditPanel>
  <DrawerHeader>
    <ModalHeader
      classPrefix="drawer-header"
    >
      <div
        className="rs-drawer-header"
      >
        <CloseButton
          className="rs-drawer-header-close"
        >
          <span
            aria-label="Close"
            className="rs-drawer-header-close rs-btn-close"
            role="button"
            title="Close"
          >
            <Close>
              <Icon
                aria-label="close"
                as={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                data-category="application"
                fill="currentColor"
                height="1em"
                width="1em"
              >
                <ForwardRef(Close)
                  aria-hidden={true}
                  aria-label="close"
                  className="rs-icon"
                  data-category="application"
                  fill="currentColor"
                  focusable={false}
                  height="1em"
                  width="1em"
                >
                  <svg
                    aria-hidden={true}
                    aria-label="close"
                    className="rs-icon"
                    data-category="application"
                    fill="currentColor"
                    focusable={false}
                    height="1em"
                    viewBox="0 0 16 16"
                    width="1em"
                  >
                    <path
                      d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                    />
                  </svg>
                </ForwardRef(Close)>
              </Icon>
            </Close>
          </span>
        </CloseButton>
        <DrawerTitle>
          <Modal.Title
            classPrefix="drawer-title"
          >
            <h4
              className="rs-drawer-title"
            >
              userRoles.panels.createUserRole
            </h4>
          </Modal.Title>
        </DrawerTitle>
        <DrawerActions>
          <ModalFooter
            classPrefix="drawer-actions"
          >
            <div
              className="rs-drawer-actions"
            >
              <Button
                appearance="primary"
                disabled={true}
                onClick={[Function]}
              >
                <button
                  aria-disabled={true}
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.create
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
              <Button
                appearance="subtle"
                onClick={[Function]}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
            </div>
          </ModalFooter>
        </DrawerActions>
      </div>
    </ModalHeader>
  </DrawerHeader>
  <DrawerBody>
    <ModalBody
      classPrefix="drawer-body"
    >
      <div
        className="rs-drawer-body"
        style={Object {}}
      >
        <Form
          fluid={true}
        >
          <form
            className="rs-form rs-form-vertical rs-form-fluid"
            onSubmit={[Function]}
          >
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.name
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={true}
                  name="userRoles.panels.name"
                  onChange={[Function]}
                  value="Brand New User Role"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={true}
                      name="userRoles.panels.name"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="Brand New User Role"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={true}
                        name="userRoles.panels.name"
                        type="text"
                        value="Brand New User Role"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.description
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={true}
                  name="userRoles.panels.description"
                  onChange={[Function]}
                  value="A user role to be added to snapshot"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={true}
                      name="userRoles.panels.description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="A user role to be added to snapshot"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={true}
                        name="userRoles.panels.description"
                        type="text"
                        value="A user role to be added to snapshot"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.permissions
                  </label>
                </FormControlLabel>
                <CheckPicker
                  block={true}
                  data={
                    Array [
                      Object {
                        "label": "permission description 1",
                        "value": "permissionId1",
                      },
                      Object {
                        "label": "permission description 2",
                        "value": "permissionId2",
                      },
                      Object {
                        "label": "permission description 3",
                        "value": "permissionId3",
                      },
                      Object {
                        "label": "permission description 4",
                        "value": "permissionId4",
                      },
                    ]
                  }
                  disabledItemValues={Array []}
                  onChange={[Function]}
                  value={Array []}
                  virtualized={true}
                >
                  <PickerToggleTrigger
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onExited={[Function]}
                    pickerProps={Object {}}
                    placement="bottomStart"
                    speaker={[Function]}
                  >
                    <OverlayTrigger
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onExited={[Function]}
                      placement="bottomStart"
                      speaker={[Function]}
                      trigger="click"
                    >
                      <div
                        className="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-cleanable rs-picker-block rs-picker-countable"
                        onClick={[Function]}
                      >
                        <PickerToggle
                          active={false}
                          appearance="default"
                          cleanable={true}
                          hasValue={false}
                          inputValue={Array []}
                          onClean={[Function]}
                          onKeyDown={[Function]}
                          placement="bottomStart"
                        >
                          <ToggleButton
                            appearance="default"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            className="rs-picker-toggle"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="combobox"
                            tabIndex={0}
                          >
                            <Button
                              appearance="default"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              as="div"
                              className="rs-picker-toggle"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              ripple={false}
                              role="combobox"
                              tabIndex={0}
                            >
                              <div
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                className="rs-picker-toggle rs-btn rs-btn-default"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                role="combobox"
                                tabIndex={0}
                              >
                                <TextMask
                                  aria-hidden={true}
                                  className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                  mask={Array []}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  readOnly={true}
                                  render={[Function]}
                                  tabIndex={-1}
                                  value=""
                                >
                                  <input
                                    aria-hidden={true}
                                    className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                    defaultValue=""
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    readOnly={true}
                                    tabIndex={-1}
                                  />
                                </TextMask>
                                <span
                                  aria-placeholder="Select"
                                  className="rs-picker-toggle-placeholder"
                                >
                                  Select
                                </span>
                                <AngleDown
                                  className="rs-picker-toggle-caret"
                                >
                                  <Icon
                                    aria-label="angle down"
                                    as={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    className="rs-picker-toggle-caret"
                                    data-category="legacy"
                                    fill="currentColor"
                                    height="1em"
                                    width="1em"
                                  >
                                    <ForwardRef(AngleDown)
                                      aria-hidden={true}
                                      aria-label="angle down"
                                      className="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable={false}
                                      height="1em"
                                      width="1em"
                                    >
                                      <svg
                                        aria-hidden={true}
                                        aria-label="angle down"
                                        className="rs-picker-toggle-caret rs-icon"
                                        data-category="legacy"
                                        fill="currentColor"
                                        focusable={false}
                                        height="1em"
                                        viewBox="0 0 21 32"
                                        width="1em"
                                      >
                                        <path
                                          d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                        />
                                      </svg>
                                    </ForwardRef(AngleDown)>
                                  </Icon>
                                </AngleDown>
                              </div>
                            </Button>
                          </ToggleButton>
                        </PickerToggle>
                      </div>
                      <Component>
                        <Portal
                          containerInfo={<body />}
                        >
                          <Overlay
                            childrenProps={
                              Object {
                                "id": undefined,
                              }
                            }
                            onClose={[Function]}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onExited={[Function]}
                            placement="bottomStart"
                            rootClose={true}
                            triggerTarget={
                              Object {
                                "current": <div
                                  class="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-cleanable rs-picker-block rs-picker-countable"
                                >
                                  <div
                                    aria-expanded="false"
                                    aria-haspopup="listbox"
                                    class="rs-picker-toggle rs-btn rs-btn-default"
                                    role="combobox"
                                    tabindex="0"
                                  >
                                    <input
                                      aria-hidden="true"
                                      class="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                      readonly=""
                                      tabindex="-1"
                                      value=""
                                    />
                                    <span
                                      aria-placeholder="Select"
                                      class="rs-picker-toggle-placeholder"
                                    >
                                      Select
                                    </span>
                                    <svg
                                      aria-hidden="true"
                                      aria-label="angle down"
                                      class="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      viewBox="0 0 21 32"
                                      width="1em"
                                    >
                                      <path
                                        d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                      />
                                    </svg>
                                  </div>
                                </div>,
                              }
                            }
                          />
                        </Portal>
                      </Component>
                    </OverlayTrigger>
                  </PickerToggleTrigger>
                </CheckPicker>
              </div>
            </FormGroup>
          </form>
        </Form>
      </div>
    </ModalBody>
  </DrawerBody>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should have Toggle sliders disabled with System Role 1`] = `
<UserRoleEditPanel
  id="roleId1"
>
  <DrawerHeader>
    <ModalHeader
      classPrefix="drawer-header"
    >
      <div
        className="rs-drawer-header"
      >
        <CloseButton
          className="rs-drawer-header-close"
        >
          <span
            aria-label="Close"
            className="rs-drawer-header-close rs-btn-close"
            role="button"
            title="Close"
          >
            <Close>
              <Icon
                aria-label="close"
                as={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                data-category="application"
                fill="currentColor"
                height="1em"
                width="1em"
              >
                <ForwardRef(Close)
                  aria-hidden={true}
                  aria-label="close"
                  className="rs-icon"
                  data-category="application"
                  fill="currentColor"
                  focusable={false}
                  height="1em"
                  width="1em"
                >
                  <svg
                    aria-hidden={true}
                    aria-label="close"
                    className="rs-icon"
                    data-category="application"
                    fill="currentColor"
                    focusable={false}
                    height="1em"
                    viewBox="0 0 16 16"
                    width="1em"
                  >
                    <path
                      d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                    />
                  </svg>
                </ForwardRef(Close)>
              </Icon>
            </Close>
          </span>
        </CloseButton>
        <DrawerTitle>
          <Modal.Title
            classPrefix="drawer-title"
          >
            <h4
              className="rs-drawer-title"
            >
              userRoles.panels.editUserRole
            </h4>
          </Modal.Title>
        </DrawerTitle>
        <DrawerActions>
          <ModalFooter
            classPrefix="drawer-actions"
          >
            <div
              className="rs-drawer-actions"
            >
              <Button
                appearance="primary"
                disabled={true}
                onClick={[Function]}
              >
                <button
                  aria-disabled={true}
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.save
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
              <Button
                appearance="subtle"
                onClick={[Function]}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
            </div>
          </ModalFooter>
        </DrawerActions>
      </div>
    </ModalHeader>
  </DrawerHeader>
  <DrawerBody>
    <ModalBody
      classPrefix="drawer-body"
    >
      <div
        className="rs-drawer-body"
        style={Object {}}
      >
        <Form
          fluid={true}
        >
          <form
            className="rs-form rs-form-vertical rs-form-fluid"
            onSubmit={[Function]}
          >
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.name
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={true}
                  name="userRoles.panels.name"
                  onChange={[Function]}
                  value="Role 1"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={true}
                      name="userRoles.panels.name"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="Role 1"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={true}
                        name="userRoles.panels.name"
                        type="text"
                        value="Role 1"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.description
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={true}
                  name="userRoles.panels.description"
                  onChange={[Function]}
                  value="Description for role 1"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={true}
                      name="userRoles.panels.description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="Description for role 1"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={true}
                        name="userRoles.panels.description"
                        type="text"
                        value="Description for role 1"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <p>
              userRoles.panels.systemRole
            </p>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.permissions
                  </label>
                </FormControlLabel>
                <CheckPicker
                  block={true}
                  data={
                    Array [
                      Object {
                        "label": "permission description 1",
                        "value": "permissionId1",
                      },
                      Object {
                        "label": "permission description 2",
                        "value": "permissionId2",
                      },
                      Object {
                        "label": "permission description 3",
                        "value": "permissionId3",
                      },
                      Object {
                        "label": "permission description 4",
                        "value": "permissionId4",
                      },
                    ]
                  }
                  disabledItemValues={
                    Array [
                      "permissionId1",
                      "permissionId2",
                      "permissionId3",
                      "permissionId4",
                    ]
                  }
                  onChange={[Function]}
                  value={
                    Array [
                      "permissionId1",
                      "permissionId2",
                    ]
                  }
                  virtualized={true}
                >
                  <PickerToggleTrigger
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onExited={[Function]}
                    pickerProps={Object {}}
                    placement="bottomStart"
                    speaker={[Function]}
                  >
                    <OverlayTrigger
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onExited={[Function]}
                      placement="bottomStart"
                      speaker={[Function]}
                      trigger="click"
                    >
                      <div
                        className="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-has-value rs-picker-cleanable rs-picker-block rs-picker-countable"
                        onClick={[Function]}
                      >
                        <PickerToggle
                          active={false}
                          appearance="default"
                          cleanable={true}
                          hasValue={true}
                          inputValue={
                            Array [
                              "permissionId1",
                              "permissionId2",
                            ]
                          }
                          onClean={[Function]}
                          onKeyDown={[Function]}
                          placement="bottomStart"
                        >
                          <ToggleButton
                            appearance="default"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            className="rs-picker-toggle"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="combobox"
                            tabIndex={0}
                          >
                            <Button
                              appearance="default"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              as="div"
                              className="rs-picker-toggle"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              ripple={false}
                              role="combobox"
                              tabIndex={0}
                            >
                              <div
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                className="rs-picker-toggle rs-btn rs-btn-default"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                role="combobox"
                                tabIndex={0}
                              >
                                <TextMask
                                  aria-hidden={true}
                                  className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                  mask={Array []}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  readOnly={true}
                                  render={[Function]}
                                  tabIndex={-1}
                                  value="permissionId1,permissionId2"
                                >
                                  <input
                                    aria-hidden={true}
                                    className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                    defaultValue="permissionId1,permissionId2"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    readOnly={true}
                                    tabIndex={-1}
                                  />
                                </TextMask>
                                <span
                                  className="rs-picker-toggle-value"
                                >
                                  <SelectedElement
                                    countable={true}
                                    labelKey="label"
                                    prefix={[Function]}
                                    selectedItems={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                      ]
                                    }
                                    valueKey="value"
                                  >
                                    <span
                                      className="rs-picker-value-list"
                                      title="permission description 1, permission description 2"
                                    >
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 1
                                      </span>
                                      <span
                                        className="rs-picker-value-separator"
                                      >
                                        ,
                                      </span>
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 2
                                      </span>
                                    </span>
                                    <span
                                      className="rs-picker-value-count"
                                      title="2"
                                    >
                                      2
                                    </span>
                                  </SelectedElement>
                                </span>
                                <CloseButton
                                  className="rs-picker-toggle-clean"
                                  locale={
                                    Object {
                                      "closeLabel": "Clear",
                                    }
                                  }
                                  onClick={[Function]}
                                  tabIndex={-1}
                                >
                                  <span
                                    aria-label="Clear"
                                    className="rs-picker-toggle-clean rs-btn-close"
                                    onClick={[Function]}
                                    role="button"
                                    tabIndex={-1}
                                    title="Clear"
                                  >
                                    <Close>
                                      <Icon
                                        aria-label="close"
                                        as={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                        data-category="application"
                                        fill="currentColor"
                                        height="1em"
                                        width="1em"
                                      >
                                        <ForwardRef(Close)
                                          aria-hidden={true}
                                          aria-label="close"
                                          className="rs-icon"
                                          data-category="application"
                                          fill="currentColor"
                                          focusable={false}
                                          height="1em"
                                          width="1em"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-label="close"
                                            className="rs-icon"
                                            data-category="application"
                                            fill="currentColor"
                                            focusable={false}
                                            height="1em"
                                            viewBox="0 0 16 16"
                                            width="1em"
                                          >
                                            <path
                                              d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                                            />
                                          </svg>
                                        </ForwardRef(Close)>
                                      </Icon>
                                    </Close>
                                  </span>
                                </CloseButton>
                                <AngleDown
                                  className="rs-picker-toggle-caret"
                                >
                                  <Icon
                                    aria-label="angle down"
                                    as={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    className="rs-picker-toggle-caret"
                                    data-category="legacy"
                                    fill="currentColor"
                                    height="1em"
                                    width="1em"
                                  >
                                    <ForwardRef(AngleDown)
                                      aria-hidden={true}
                                      aria-label="angle down"
                                      className="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable={false}
                                      height="1em"
                                      width="1em"
                                    >
                                      <svg
                                        aria-hidden={true}
                                        aria-label="angle down"
                                        className="rs-picker-toggle-caret rs-icon"
                                        data-category="legacy"
                                        fill="currentColor"
                                        focusable={false}
                                        height="1em"
                                        viewBox="0 0 21 32"
                                        width="1em"
                                      >
                                        <path
                                          d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                        />
                                      </svg>
                                    </ForwardRef(AngleDown)>
                                  </Icon>
                                </AngleDown>
                              </div>
                            </Button>
                          </ToggleButton>
                        </PickerToggle>
                      </div>
                      <Component>
                        <Portal
                          containerInfo={<body />}
                        >
                          <Overlay
                            childrenProps={
                              Object {
                                "id": undefined,
                              }
                            }
                            onClose={[Function]}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onExited={[Function]}
                            placement="bottomStart"
                            rootClose={true}
                            triggerTarget={
                              Object {
                                "current": <div
                                  class="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-has-value rs-picker-cleanable rs-picker-block rs-picker-countable"
                                >
                                  <div
                                    aria-expanded="false"
                                    aria-haspopup="listbox"
                                    class="rs-picker-toggle rs-btn rs-btn-default"
                                    role="combobox"
                                    tabindex="0"
                                  >
                                    <input
                                      aria-hidden="true"
                                      class="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                      readonly=""
                                      tabindex="-1"
                                      value="permissionId1,permissionId2"
                                    />
                                    <span
                                      class="rs-picker-toggle-value"
                                    >
                                      <span
                                        class="rs-picker-value-list"
                                        title="permission description 1, permission description 2"
                                      >
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 1
                                          
                                        </span>
                                        <span
                                          class="rs-picker-value-separator"
                                        >
                                          ,
                                        </span>
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 2
                                          
                                        </span>
                                      </span>
                                      <span
                                        class="rs-picker-value-count"
                                        title="2"
                                      >
                                        2
                                      </span>
                                    </span>
                                    <span
                                      aria-label="Clear"
                                      class="rs-picker-toggle-clean rs-btn-close"
                                      role="button"
                                      tabindex="-1"
                                      title="Clear"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        aria-label="close"
                                        class="rs-icon"
                                        data-category="application"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        viewBox="0 0 16 16"
                                        width="1em"
                                      >
                                        <path
                                          d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                                        />
                                      </svg>
                                    </span>
                                    <svg
                                      aria-hidden="true"
                                      aria-label="angle down"
                                      class="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      viewBox="0 0 21 32"
                                      width="1em"
                                    >
                                      <path
                                        d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                      />
                                    </svg>
                                  </div>
                                </div>,
                              }
                            }
                          />
                        </Portal>
                      </Component>
                    </OverlayTrigger>
                  </PickerToggleTrigger>
                </CheckPicker>
              </div>
            </FormGroup>
          </form>
        </Form>
      </div>
    </ModalBody>
  </DrawerBody>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should render 1`] = `
<UserRoleEditPanel>
  <DrawerHeader>
    <ModalHeader
      classPrefix="drawer-header"
    >
      <div
        className="rs-drawer-header"
      >
        <CloseButton
          className="rs-drawer-header-close"
        >
          <span
            aria-label="Close"
            className="rs-drawer-header-close rs-btn-close"
            role="button"
            title="Close"
          >
            <Close>
              <Icon
                aria-label="close"
                as={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                data-category="application"
                fill="currentColor"
                height="1em"
                width="1em"
              >
                <ForwardRef(Close)
                  aria-hidden={true}
                  aria-label="close"
                  className="rs-icon"
                  data-category="application"
                  fill="currentColor"
                  focusable={false}
                  height="1em"
                  width="1em"
                >
                  <svg
                    aria-hidden={true}
                    aria-label="close"
                    className="rs-icon"
                    data-category="application"
                    fill="currentColor"
                    focusable={false}
                    height="1em"
                    viewBox="0 0 16 16"
                    width="1em"
                  >
                    <path
                      d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                    />
                  </svg>
                </ForwardRef(Close)>
              </Icon>
            </Close>
          </span>
        </CloseButton>
        <DrawerTitle>
          <Modal.Title
            classPrefix="drawer-title"
          >
            <h4
              className="rs-drawer-title"
            >
              userRoles.panels.createUserRole
            </h4>
          </Modal.Title>
        </DrawerTitle>
        <DrawerActions>
          <ModalFooter
            classPrefix="drawer-actions"
          >
            <div
              className="rs-drawer-actions"
            >
              <Button
                appearance="primary"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  aria-disabled={false}
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.create
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
              <Button
                appearance="subtle"
                onClick={[Function]}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
            </div>
          </ModalFooter>
        </DrawerActions>
      </div>
    </ModalHeader>
  </DrawerHeader>
  <DrawerBody>
    <ModalBody
      classPrefix="drawer-body"
    >
      <div
        className="rs-drawer-body"
        style={Object {}}
      >
        <Form
          fluid={true}
        >
          <form
            className="rs-form rs-form-vertical rs-form-fluid"
            onSubmit={[Function]}
          >
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.name
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={false}
                  name="userRoles.panels.name"
                  onChange={[Function]}
                  value=""
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={false}
                      name="userRoles.panels.name"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={false}
                        name="userRoles.panels.name"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value=""
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.description
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={false}
                  name="userRoles.panels.description"
                  onChange={[Function]}
                  value=""
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={false}
                      name="userRoles.panels.description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value=""
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={false}
                        name="userRoles.panels.description"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value=""
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.permissions
                  </label>
                </FormControlLabel>
                <CheckPicker
                  block={true}
                  data={
                    Array [
                      Object {
                        "label": "permission description 1",
                        "value": "permissionId1",
                      },
                      Object {
                        "label": "permission description 2",
                        "value": "permissionId2",
                      },
                      Object {
                        "label": "permission description 3",
                        "value": "permissionId3",
                      },
                      Object {
                        "label": "permission description 4",
                        "value": "permissionId4",
                      },
                    ]
                  }
                  disabledItemValues={Array []}
                  onChange={[Function]}
                  value={Array []}
                  virtualized={true}
                >
                  <PickerToggleTrigger
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onExited={[Function]}
                    pickerProps={Object {}}
                    placement="bottomStart"
                    speaker={[Function]}
                  >
                    <OverlayTrigger
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onExited={[Function]}
                      placement="bottomStart"
                      speaker={[Function]}
                      trigger="click"
                    >
                      <div
                        className="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-cleanable rs-picker-block rs-picker-countable"
                        onClick={[Function]}
                      >
                        <PickerToggle
                          active={false}
                          appearance="default"
                          cleanable={true}
                          hasValue={false}
                          inputValue={Array []}
                          onClean={[Function]}
                          onKeyDown={[Function]}
                          placement="bottomStart"
                        >
                          <ToggleButton
                            appearance="default"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            className="rs-picker-toggle"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="combobox"
                            tabIndex={0}
                          >
                            <Button
                              appearance="default"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              as="div"
                              className="rs-picker-toggle"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              ripple={false}
                              role="combobox"
                              tabIndex={0}
                            >
                              <div
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                className="rs-picker-toggle rs-btn rs-btn-default"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                role="combobox"
                                tabIndex={0}
                              >
                                <TextMask
                                  aria-hidden={true}
                                  className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                  mask={Array []}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  readOnly={true}
                                  render={[Function]}
                                  tabIndex={-1}
                                  value=""
                                >
                                  <input
                                    aria-hidden={true}
                                    className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                    defaultValue=""
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    readOnly={true}
                                    tabIndex={-1}
                                  />
                                </TextMask>
                                <span
                                  aria-placeholder="Select"
                                  className="rs-picker-toggle-placeholder"
                                >
                                  Select
                                </span>
                                <AngleDown
                                  className="rs-picker-toggle-caret"
                                >
                                  <Icon
                                    aria-label="angle down"
                                    as={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    className="rs-picker-toggle-caret"
                                    data-category="legacy"
                                    fill="currentColor"
                                    height="1em"
                                    width="1em"
                                  >
                                    <ForwardRef(AngleDown)
                                      aria-hidden={true}
                                      aria-label="angle down"
                                      className="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable={false}
                                      height="1em"
                                      width="1em"
                                    >
                                      <svg
                                        aria-hidden={true}
                                        aria-label="angle down"
                                        className="rs-picker-toggle-caret rs-icon"
                                        data-category="legacy"
                                        fill="currentColor"
                                        focusable={false}
                                        height="1em"
                                        viewBox="0 0 21 32"
                                        width="1em"
                                      >
                                        <path
                                          d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                        />
                                      </svg>
                                    </ForwardRef(AngleDown)>
                                  </Icon>
                                </AngleDown>
                              </div>
                            </Button>
                          </ToggleButton>
                        </PickerToggle>
                      </div>
                      <Component>
                        <Portal
                          containerInfo={<body />}
                        >
                          <Overlay
                            childrenProps={
                              Object {
                                "id": undefined,
                              }
                            }
                            onClose={[Function]}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onExited={[Function]}
                            placement="bottomStart"
                            rootClose={true}
                            triggerTarget={
                              Object {
                                "current": <div
                                  class="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-cleanable rs-picker-block rs-picker-countable"
                                >
                                  <div
                                    aria-expanded="false"
                                    aria-haspopup="listbox"
                                    class="rs-picker-toggle rs-btn rs-btn-default"
                                    role="combobox"
                                    tabindex="0"
                                  >
                                    <input
                                      aria-hidden="true"
                                      class="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                      readonly=""
                                      tabindex="-1"
                                      value=""
                                    />
                                    <span
                                      aria-placeholder="Select"
                                      class="rs-picker-toggle-placeholder"
                                    >
                                      Select
                                    </span>
                                    <svg
                                      aria-hidden="true"
                                      aria-label="angle down"
                                      class="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      viewBox="0 0 21 32"
                                      width="1em"
                                    >
                                      <path
                                        d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                      />
                                    </svg>
                                  </div>
                                </div>,
                              }
                            }
                          />
                        </Portal>
                      </Component>
                    </OverlayTrigger>
                  </PickerToggleTrigger>
                </CheckPicker>
              </div>
            </FormGroup>
          </form>
        </Form>
      </div>
    </ModalBody>
  </DrawerBody>
</UserRoleEditPanel>
`;

exports[`User Role Edit Panel should render with role 1`] = `
<UserRoleEditPanel
  id="roleId1"
>
  <DrawerHeader>
    <ModalHeader
      classPrefix="drawer-header"
    >
      <div
        className="rs-drawer-header"
      >
        <CloseButton
          className="rs-drawer-header-close"
        >
          <span
            aria-label="Close"
            className="rs-drawer-header-close rs-btn-close"
            role="button"
            title="Close"
          >
            <Close>
              <Icon
                aria-label="close"
                as={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                data-category="application"
                fill="currentColor"
                height="1em"
                width="1em"
              >
                <ForwardRef(Close)
                  aria-hidden={true}
                  aria-label="close"
                  className="rs-icon"
                  data-category="application"
                  fill="currentColor"
                  focusable={false}
                  height="1em"
                  width="1em"
                >
                  <svg
                    aria-hidden={true}
                    aria-label="close"
                    className="rs-icon"
                    data-category="application"
                    fill="currentColor"
                    focusable={false}
                    height="1em"
                    viewBox="0 0 16 16"
                    width="1em"
                  >
                    <path
                      d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                    />
                  </svg>
                </ForwardRef(Close)>
              </Icon>
            </Close>
          </span>
        </CloseButton>
        <DrawerTitle>
          <Modal.Title
            classPrefix="drawer-title"
          >
            <h4
              className="rs-drawer-title"
            >
              userRoles.panels.editUserRole
            </h4>
          </Modal.Title>
        </DrawerTitle>
        <DrawerActions>
          <ModalFooter
            classPrefix="drawer-actions"
          >
            <div
              className="rs-drawer-actions"
            >
              <Button
                appearance="primary"
                disabled={false}
                onClick={[Function]}
              >
                <button
                  aria-disabled={false}
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.save
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
              <Button
                appearance="subtle"
                onClick={[Function]}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userRoles.panels.close
                  <Ripple>
                    <span
                      className="rs-ripple-pond"
                    >
                      <Transition
                        enteringClassName="rs-ripple-rippling"
                        in={false}
                        onEntered={[Function]}
                        timeout={1000}
                      >
                        <span
                          className="rs-ripple"
                        />
                      </Transition>
                    </span>
                  </Ripple>
                </button>
              </Button>
            </div>
          </ModalFooter>
        </DrawerActions>
      </div>
    </ModalHeader>
  </DrawerHeader>
  <DrawerBody>
    <ModalBody
      classPrefix="drawer-body"
    >
      <div
        className="rs-drawer-body"
        style={Object {}}
      >
        <Form
          fluid={true}
        >
          <form
            className="rs-form rs-form-vertical rs-form-fluid"
            onSubmit={[Function]}
          >
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.name
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={false}
                  name="userRoles.panels.name"
                  onChange={[Function]}
                  value="Role 1"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={false}
                      name="userRoles.panels.name"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="Role 1"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={false}
                        name="userRoles.panels.name"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value="Role 1"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.description
                  </label>
                </FormControlLabel>
                <FormControl
                  disabled={false}
                  name="userRoles.panels.description"
                  onChange={[Function]}
                  value="Description for role 1"
                >
                  <div
                    className="rs-form-control rs-form-control-wrapper"
                  >
                    <Input
                      aria-describedby={null}
                      aria-labelledby={null}
                      disabled={false}
                      name="userRoles.panels.description"
                      onBlur={[Function]}
                      onChange={[Function]}
                      value="Description for role 1"
                    >
                      <input
                        aria-describedby={null}
                        aria-labelledby={null}
                        className="rs-input"
                        disabled={false}
                        name="userRoles.panels.description"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value="Description for role 1"
                      />
                    </Input>
                    <FormErrorMessage
                      aria-relevant="all"
                      className="rs-form-control-message-wrapper"
                      id="undefined-error-message"
                      placement="bottomStart"
                      role="alert"
                      show={false}
                    />
                  </div>
                </FormControl>
              </div>
            </FormGroup>
            <FormGroup>
              <div
                className="rs-form-group"
                role="group"
              >
                <FormControlLabel>
                  <label
                    className="rs-form-control-label"
                    id={null}
                  >
                    userRoles.panels.permissions
                  </label>
                </FormControlLabel>
                <CheckPicker
                  block={true}
                  data={
                    Array [
                      Object {
                        "label": "permission description 1",
                        "value": "permissionId1",
                      },
                      Object {
                        "label": "permission description 2",
                        "value": "permissionId2",
                      },
                      Object {
                        "label": "permission description 3",
                        "value": "permissionId3",
                      },
                      Object {
                        "label": "permission description 4",
                        "value": "permissionId4",
                      },
                    ]
                  }
                  disabledItemValues={Array []}
                  onChange={[Function]}
                  value={
                    Array [
                      "permissionId1",
                      "permissionId2",
                      "permissionId3",
                      "permissionId4",
                    ]
                  }
                  virtualized={true}
                >
                  <PickerToggleTrigger
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onExited={[Function]}
                    pickerProps={Object {}}
                    placement="bottomStart"
                    speaker={[Function]}
                  >
                    <OverlayTrigger
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onExited={[Function]}
                      placement="bottomStart"
                      speaker={[Function]}
                      trigger="click"
                    >
                      <div
                        className="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-has-value rs-picker-cleanable rs-picker-block rs-picker-countable"
                        onClick={[Function]}
                      >
                        <PickerToggle
                          active={false}
                          appearance="default"
                          cleanable={true}
                          hasValue={true}
                          inputValue={
                            Array [
                              "permissionId1",
                              "permissionId2",
                              "permissionId3",
                              "permissionId4",
                            ]
                          }
                          onClean={[Function]}
                          onKeyDown={[Function]}
                          placement="bottomStart"
                        >
                          <ToggleButton
                            appearance="default"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            className="rs-picker-toggle"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            role="combobox"
                            tabIndex={0}
                          >
                            <Button
                              appearance="default"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              as="div"
                              className="rs-picker-toggle"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              ripple={false}
                              role="combobox"
                              tabIndex={0}
                            >
                              <div
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                className="rs-picker-toggle rs-btn rs-btn-default"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                role="combobox"
                                tabIndex={0}
                              >
                                <TextMask
                                  aria-hidden={true}
                                  className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                  mask={Array []}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  readOnly={true}
                                  render={[Function]}
                                  tabIndex={-1}
                                  value="permissionId1,permissionId2,permissionId3,permissionId4"
                                >
                                  <input
                                    aria-hidden={true}
                                    className="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                    defaultValue="permissionId1,permissionId2,permissionId3,permissionId4"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    readOnly={true}
                                    tabIndex={-1}
                                  />
                                </TextMask>
                                <span
                                  className="rs-picker-toggle-value"
                                >
                                  <SelectedElement
                                    countable={true}
                                    labelKey="label"
                                    prefix={[Function]}
                                    selectedItems={
                                      Array [
                                        Object {
                                          "label": "permission description 1",
                                          "value": "permissionId1",
                                        },
                                        Object {
                                          "label": "permission description 2",
                                          "value": "permissionId2",
                                        },
                                        Object {
                                          "label": "permission description 3",
                                          "value": "permissionId3",
                                        },
                                        Object {
                                          "label": "permission description 4",
                                          "value": "permissionId4",
                                        },
                                      ]
                                    }
                                    valueKey="value"
                                  >
                                    <span
                                      className="rs-picker-value-list"
                                      title="permission description 1, permission description 2, permission description 3, permission description 4"
                                    >
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 1
                                      </span>
                                      <span
                                        className="rs-picker-value-separator"
                                      >
                                        ,
                                      </span>
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 2
                                      </span>
                                      <span
                                        className="rs-picker-value-separator"
                                      >
                                        ,
                                      </span>
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 3
                                      </span>
                                      <span
                                        className="rs-picker-value-separator"
                                      >
                                        ,
                                      </span>
                                      <span
                                        className="rs-picker-value-item"
                                      >
                                        permission description 4
                                      </span>
                                    </span>
                                    <span
                                      className="rs-picker-value-count"
                                      title="4"
                                    >
                                      4
                                    </span>
                                  </SelectedElement>
                                </span>
                                <CloseButton
                                  className="rs-picker-toggle-clean"
                                  locale={
                                    Object {
                                      "closeLabel": "Clear",
                                    }
                                  }
                                  onClick={[Function]}
                                  tabIndex={-1}
                                >
                                  <span
                                    aria-label="Clear"
                                    className="rs-picker-toggle-clean rs-btn-close"
                                    onClick={[Function]}
                                    role="button"
                                    tabIndex={-1}
                                    title="Clear"
                                  >
                                    <Close>
                                      <Icon
                                        aria-label="close"
                                        as={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          }
                                        }
                                        data-category="application"
                                        fill="currentColor"
                                        height="1em"
                                        width="1em"
                                      >
                                        <ForwardRef(Close)
                                          aria-hidden={true}
                                          aria-label="close"
                                          className="rs-icon"
                                          data-category="application"
                                          fill="currentColor"
                                          focusable={false}
                                          height="1em"
                                          width="1em"
                                        >
                                          <svg
                                            aria-hidden={true}
                                            aria-label="close"
                                            className="rs-icon"
                                            data-category="application"
                                            fill="currentColor"
                                            focusable={false}
                                            height="1em"
                                            viewBox="0 0 16 16"
                                            width="1em"
                                          >
                                            <path
                                              d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                                            />
                                          </svg>
                                        </ForwardRef(Close)>
                                      </Icon>
                                    </Close>
                                  </span>
                                </CloseButton>
                                <AngleDown
                                  className="rs-picker-toggle-caret"
                                >
                                  <Icon
                                    aria-label="angle down"
                                    as={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    className="rs-picker-toggle-caret"
                                    data-category="legacy"
                                    fill="currentColor"
                                    height="1em"
                                    width="1em"
                                  >
                                    <ForwardRef(AngleDown)
                                      aria-hidden={true}
                                      aria-label="angle down"
                                      className="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable={false}
                                      height="1em"
                                      width="1em"
                                    >
                                      <svg
                                        aria-hidden={true}
                                        aria-label="angle down"
                                        className="rs-picker-toggle-caret rs-icon"
                                        data-category="legacy"
                                        fill="currentColor"
                                        focusable={false}
                                        height="1em"
                                        viewBox="0 0 21 32"
                                        width="1em"
                                      >
                                        <path
                                          d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                        />
                                      </svg>
                                    </ForwardRef(AngleDown)>
                                  </Icon>
                                </AngleDown>
                              </div>
                            </Button>
                          </ToggleButton>
                        </PickerToggle>
                      </div>
                      <Component>
                        <Portal
                          containerInfo={<body />}
                        >
                          <Overlay
                            childrenProps={
                              Object {
                                "id": undefined,
                              }
                            }
                            onClose={[Function]}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onExited={[Function]}
                            placement="bottomStart"
                            rootClose={true}
                            triggerTarget={
                              Object {
                                "current": <div
                                  class="rs-picker rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-has-value rs-picker-cleanable rs-picker-block rs-picker-countable"
                                >
                                  <div
                                    aria-expanded="false"
                                    aria-haspopup="listbox"
                                    class="rs-picker-toggle rs-btn rs-btn-default"
                                    role="combobox"
                                    tabindex="0"
                                  >
                                    <input
                                      aria-hidden="true"
                                      class="rs-picker-toggle-textbox rs-picker-toggle-read-only"
                                      readonly=""
                                      tabindex="-1"
                                      value="permissionId1,permissionId2,permissionId3,permissionId4"
                                    />
                                    <span
                                      class="rs-picker-toggle-value"
                                    >
                                      <span
                                        class="rs-picker-value-list"
                                        title="permission description 1, permission description 2, permission description 3, permission description 4"
                                      >
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 1
                                          
                                        </span>
                                        <span
                                          class="rs-picker-value-separator"
                                        >
                                          ,
                                        </span>
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 2
                                          
                                        </span>
                                        <span
                                          class="rs-picker-value-separator"
                                        >
                                          ,
                                        </span>
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 3
                                          
                                        </span>
                                        <span
                                          class="rs-picker-value-separator"
                                        >
                                          ,
                                        </span>
                                        <span
                                          class="rs-picker-value-item"
                                        >
                                          permission description 4
                                          
                                        </span>
                                      </span>
                                      <span
                                        class="rs-picker-value-count"
                                        title="4"
                                      >
                                        4
                                      </span>
                                    </span>
                                    <span
                                      aria-label="Clear"
                                      class="rs-picker-toggle-clean rs-btn-close"
                                      role="button"
                                      tabindex="-1"
                                      title="Clear"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        aria-label="close"
                                        class="rs-icon"
                                        data-category="application"
                                        fill="currentColor"
                                        focusable="false"
                                        height="1em"
                                        viewBox="0 0 16 16"
                                        width="1em"
                                      >
                                        <path
                                          d="M2.784 2.089l.069.058 5.146 5.147 5.146-5.147a.5.5 0 01.765.638l-.058.069L8.705 8l5.147 5.146a.5.5 0 01-.638.765l-.069-.058-5.146-5.147-5.146 5.147a.5.5 0 01-.765-.638l.058-.069L7.293 8 2.146 2.854a.5.5 0 01.638-.765z"
                                        />
                                      </svg>
                                    </span>
                                    <svg
                                      aria-hidden="true"
                                      aria-label="angle down"
                                      class="rs-picker-toggle-caret rs-icon"
                                      data-category="legacy"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      viewBox="0 0 21 32"
                                      width="1em"
                                    >
                                      <path
                                        d="M19.196 13.143a.612.612 0 01-.179.411l-8.321 8.321c-.107.107-.268.179-.411.179s-.304-.071-.411-.179l-8.321-8.321c-.107-.107-.179-.268-.179-.411s.071-.304.179-.411l.893-.893a.582.582 0 01.411-.179c.143 0 .304.071.411.179l7.018 7.018 7.018-7.018c.107-.107.268-.179.411-.179s.304.071.411.179l.893.893a.617.617 0 01.179.411z"
                                      />
                                    </svg>
                                  </div>
                                </div>,
                              }
                            }
                          />
                        </Portal>
                      </Component>
                    </OverlayTrigger>
                  </PickerToggleTrigger>
                </CheckPicker>
              </div>
            </FormGroup>
          </form>
        </Form>
      </div>
    </ModalBody>
  </DrawerBody>
</UserRoleEditPanel>
`;
