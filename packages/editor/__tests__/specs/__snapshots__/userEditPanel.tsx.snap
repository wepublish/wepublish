// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User Edit Panel should allow a new user to be created 1`] = `
<UserEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              ×
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userList.panels.createUser
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userList.panels.name"
                        onChange={[Function]}
                        value="Testing Müller"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userList.panels.name"
                          onChange={[Function]}
                          value="Testing Müller"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Testing Müller"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userList.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Testing Müller"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userList.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Testing Müller"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userList.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Testing Müller"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userList.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Testing Müller"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.email
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userList.panels.email"
                        onChange={[Function]}
                        value="testing@mueller.com"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userList.panels.email"
                          onChange={[Function]}
                          value="testing@mueller.com"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.email"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="testing@mueller.com"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userList.panels.email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="testing@mueller.com"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userList.panels.email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="testing@mueller.com"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userList.panels.email"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="testing@mueller.com"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userList.panels.email"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="testing@mueller.com"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.password
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={true}
                        name="userList.panels.password"
                        onChange={[Function]}
                        type="password"
                        value="superSecret"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={true}
                          name="userList.panels.password"
                          onChange={[Function]}
                          type="password"
                          value="superSecret"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={true}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.password"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            type="password"
                            value="superSecret"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={true}
                                name="userList.panels.password"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="password"
                                value="superSecret"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={true}
                                  name="userList.panels.password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="password"
                                  value="superSecret"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={true}
                                    name="userList.panels.password"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="password"
                                    value="superSecret"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={true}
                                      name="userList.panels.password"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="password"
                                      value="superSecret"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.userRoles
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        data={
                          Array [
                            Object {
                              "label": "Role 1",
                              "value": "roleId1",
                            },
                            Object {
                              "label": "Role 2",
                              "value": "roleId2",
                            },
                          ]
                        }
                        onChange={[Function]}
                        value={Array []}
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "Role 1",
                                "value": "roleId1",
                              },
                              Object {
                                "label": "Role 2",
                                "value": "roleId2",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={Array []}
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "Role 1",
                                  "value": "roleId1",
                                },
                                Object {
                                  "label": "Role 2",
                                  "value": "roleId2",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={Array []}
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "Role 1",
                                      "value": "roleId1",
                                    },
                                    Object {
                                      "label": "Role 2",
                                      "value": "roleId2",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={Array []}
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "Role 1",
                                          "value": "roleId1",
                                        },
                                        Object {
                                          "label": "Role 2",
                                          "value": "roleId2",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "displayName": "defaultProps(Checkbox)",
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "displayName": "defaultProps(DropdownMenuCheckItem)",
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={Array []}
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "Role 1",
                                            "value": "roleId1",
                                          },
                                          Object {
                                            "label": "Role 2",
                                            "value": "roleId2",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "displayName": "defaultProps(Checkbox)",
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "displayName": "defaultProps(DropdownMenuCheckItem)",
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "DefaultToggleButton",
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={false}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "DefaultToggleButton",
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={false}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-placeholder"
                                                >
                                                  <FormattedMessage
                                                    id="placeholder"
                                                  >
                                                    <span>
                                                      Select
                                                    </span>
                                                  </FormattedMessage>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "displayName": "Fade",
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={true}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={true}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={true}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary rs-btn-disabled"
                  disabled={true}
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Modal)
    animation={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "displayName": "Bounce",
        "render": [Function],
      }
    }
    animationTimeout={300}
    autoFocus={true}
    backdrop={true}
    classPrefix="rs-modal"
    dialogComponentClass={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "classPrefix": "rs-modal",
        },
        "displayName": "withStyleProps(defaultProps(ModalDialog))",
        "propTypes": Object {
          "innerRef": [Function],
          "size": [Function],
        },
        "render": [Function],
      }
    }
    enforceFocus={true}
    keyboard={true}
    onHide={[Function]}
    overflow={true}
    show={false}
    size="sm"
  >
    <Modal
      animation={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "displayName": "Bounce",
          "render": [Function],
        }
      }
      animationTimeout={300}
      autoFocus={true}
      backdrop={true}
      classPrefix="rs-modal"
      dialogComponentClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": Object {
            "classPrefix": "rs-modal",
          },
          "displayName": "withStyleProps(defaultProps(ModalDialog))",
          "propTypes": Object {
            "innerRef": [Function],
            "size": [Function],
          },
          "render": [Function],
        }
      }
      enforceFocus={true}
      keyboard={true}
      onHide={[Function]}
      overflow={true}
      show={false}
      size="sm"
    >
      <BaseModal
        autoFocus={true}
        backdrop={true}
        backdropClassName="rs-modal-backdrop"
        backdropTransitionTimeout={150}
        className="rs-modal-wrapper"
        containerClassName="rs-modal-open rs-modal-has-backdrop"
        dialogTransitionTimeout={300}
        enforceFocus={true}
        keyboard={true}
        onEntered={[Function]}
        onEntering={[Function]}
        onExited={[Function]}
        onHide={[Function]}
        overflow={true}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Bounce",
            "render": [Function],
          }
        }
      />
    </Modal>
  </defaultProps(Modal)>
</UserEditPanel>
`;

exports[`User Edit Panel should allow user role to be added 1`] = `
<UserEditPanel>
  <Styled(div)>
    <div>
      <PanelHeader
        leftChildren={
          <ForwardRef(NavigationButton)
            icon={[Function]}
            label="userList.panels.close"
            onClick={[Function]}
          />
        }
        rightChildren={
          <ForwardRef(NavigationButton)
            disabled={false}
            icon={[Function]}
            label="userList.panels.create"
            onClick={[Function]}
          />
        }
        title="userList.panels.createUser"
      >
        <Styled(div)>
          <div>
            <ForwardRef(NavigationButton)
              icon={[Function]}
              label="userList.panels.close"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": undefined,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconClose
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                        />
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                      </svg>
                    </MaterialIconClose>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      userList.panels.close
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
            <ForwardRef(Box)
              flexGrow={1}
            >
              <div />
            </ForwardRef(Box)>
            <Styled(span)>
              <span>
                userList.panels.createUser
              </span>
            </Styled(span)>
            <ForwardRef(NavigationButton)
              disabled={false}
              icon={[Function]}
              label="userList.panels.create"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": false,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconSaveOutlined
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M0 0h24v24H0V0z"
                          fill="none"
                        />
                        <path
                          d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm2 16H5V5h11.17L19 7.83V19zm-7-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zM6 6h9v4H6z"
                        />
                      </svg>
                    </MaterialIconSaveOutlined>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      userList.panels.create
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
          </div>
        </Styled(div)>
      </PanelHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(TextInput)
                  disabled={false}
                  label="userList.panels.name"
                  onChange={[Function]}
                  value=""
                >
                  <Styled(div)
                    styleProps={Object {}}
                  >
                    <div>
                      <Styled(label)>
                        <label>
                          <Styled(input)
                            disabled={false}
                            onChange={[Function]}
                            placeholder="userList.panels.name"
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                            value=""
                          >
                            <input
                              disabled={false}
                              onChange={[Function]}
                              placeholder="userList.panels.name"
                              value=""
                            />
                          </Styled(input)>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                          >
                            <span>
                              userList.panels.name
                            </span>
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                    </div>
                  </Styled(div)>
                </ForwardRef(TextInput)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(TextInput)
                  disabled={false}
                  label="userList.panels.email"
                  onChange={[Function]}
                  value=""
                >
                  <Styled(div)
                    styleProps={Object {}}
                  >
                    <div>
                      <Styled(label)>
                        <label>
                          <Styled(input)
                            disabled={false}
                            onChange={[Function]}
                            placeholder="userList.panels.email"
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                            value=""
                          >
                            <input
                              disabled={false}
                              onChange={[Function]}
                              placeholder="userList.panels.email"
                              value=""
                            />
                          </Styled(input)>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                          >
                            <span>
                              userList.panels.email
                            </span>
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                    </div>
                  </Styled(div)>
                </ForwardRef(TextInput)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(TextInput)
                  disabled={false}
                  label="userList.panels.password"
                  onChange={[Function]}
                  type="password"
                  value=""
                >
                  <Styled(div)
                    styleProps={Object {}}
                  >
                    <div>
                      <Styled(label)>
                        <label>
                          <Styled(input)
                            disabled={false}
                            onChange={[Function]}
                            placeholder="userList.panels.password"
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                            type="password"
                            value=""
                          >
                            <input
                              disabled={false}
                              onChange={[Function]}
                              placeholder="userList.panels.password"
                              type="password"
                              value=""
                            />
                          </Styled(input)>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                          >
                            <span>
                              userList.panels.password
                            </span>
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                    </div>
                  </Styled(div)>
                </ForwardRef(TextInput)>
              </div>
            </ForwardRef(Box)>
          </div>
        </Styled(div)>
      </PanelSection>
      <PanelSectionHeader
        title="userList.panels.userRoles"
      >
        <Styled(div)>
          <div>
            userList.panels.userRoles
          </div>
        </Styled(div)>
      </PanelSectionHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(Box)
              alignItems="center"
              display="flex"
              flexDirection="row"
              key="roleId2"
            >
              <div>
                <ForwardRef(Box)>
                  <div>
                    <ForwardRef(Typography)
                      variant="h3"
                    >
                      <h3>
                        Role 2
                      </h3>
                    </ForwardRef(Typography)>
                    <ForwardRef(Typography)
                      variant="body1"
                    >
                      <p>
                        Description for role 2
                      </p>
                    </ForwardRef(Typography)>
                  </div>
                </ForwardRef(Box)>
                <ForwardRef(Box)
                  flexGrow={1}
                >
                  <div />
                </ForwardRef(Box)>
                <OptionButton
                  menuItems={
                    Array [
                      Object {
                        "icon": [Function],
                        "id": "remove",
                        "label": "userList.panels.remove",
                      },
                    ]
                  }
                  onMenuItemClick={[Function]}
                  position="left"
                >
                  <div>
                    <ForwardRef(IconButton)
                      active={false}
                      icon={[Function]}
                      onClick={[Function]}
                    >
                      <Styled(button)
                        onClick={[Function]}
                        styleProps={
                          Object {
                            "active": false,
                            "disabled": undefined,
                            "variant": "default",
                          }
                        }
                      >
                        <button
                          onClick={[Function]}
                        >
                          <Icon
                            block={true}
                            element={[Function]}
                          >
                            <MaterialIconMoreVert
                              role="img"
                            >
                              <svg
                                role="img"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M0 0h24v24H0z"
                                  fill="none"
                                />
                                <path
                                  d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
                                />
                              </svg>
                            </MaterialIconMoreVert>
                          </Icon>
                        </button>
                      </Styled(button)>
                    </ForwardRef(IconButton)>
                  </div>
                </OptionButton>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              marginTop={40}
            >
              <div>
                <ForwardRef(Typography)
                  variant="h3"
                >
                  <h3>
                    userList.panels.addUserRole
                  </h3>
                </ForwardRef(Typography)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              alignItems="center"
              display="flex"
              flexDirection="row"
            >
              <div>
                <Select
                  description="userList.panels.selectUserRole"
                  flexBasis="90%"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "__typename": "UserRole",
                        "description": "Description for role 1",
                        "id": "roleId1",
                        "name": "Role 1",
                        "permissions": Array [],
                        "systemRole": false,
                      },
                      Object {
                        "__typename": "UserRole",
                        "description": "Description for role 2",
                        "id": "roleId2",
                        "name": "Role 2",
                        "permissions": Array [],
                        "systemRole": false,
                      },
                    ]
                  }
                  renderListItem={[Function]}
                >
                  <Styled(div)
                    styleProps={
                      Object {
                        "flexBasis": "90%",
                      }
                    }
                  >
                    <div>
                      <Styled(label)
                        htmlFor="downshift-7-toggle-button"
                        id="downshift-7-label"
                      >
                        <label
                          htmlFor="downshift-7-toggle-button"
                          id="downshift-7-label"
                        >
                          <Styled(button)
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-labelledby="downshift-7-label downshift-7-toggle-button"
                            id="downshift-7-toggle-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasFocus": false,
                                "hasIcon": false,
                                "isOpen": false,
                                "isPlaceholderShown": false,
                              }
                            }
                          >
                            <button
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              aria-labelledby="downshift-7-label downshift-7-toggle-button"
                              id="downshift-7-toggle-button"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                            >
                              Role 2
                            </button>
                          </Styled(button)>
                          <Icon
                            element={[Function]}
                            style={[Function]}
                          >
                            <MaterialIconKeyboardArrowDown
                              role="img"
                            >
                              <svg
                                role="img"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                />
                                <path
                                  d="M0 0h24v24H0V0z"
                                  fill="none"
                                />
                              </svg>
                            </MaterialIconKeyboardArrowDown>
                          </Icon>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasFocus": false,
                                "hasIcon": false,
                                "isOpen": false,
                                "isPlaceholderShown": false,
                              }
                            }
                          >
                            <span />
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                      <Styled(ul)
                        aria-labelledby="downshift-7-label"
                        id="downshift-7-menu"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <ul
                          aria-labelledby="downshift-7-label"
                          id="downshift-7-menu"
                          onBlur={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onMouseLeave={[Function]}
                          role="listbox"
                          tabIndex={-1}
                        />
                      </Styled(ul)>
                      <Styled(div)>
                        <div>
                          userList.panels.selectUserRole
                        </div>
                      </Styled(div)>
                    </div>
                  </Styled(div)>
                </Select>
                <ForwardRef(IconButton)
                  flexBasis="10%"
                  icon={[Function]}
                  margin={5}
                  onClick={[Function]}
                  variant="large"
                >
                  <Styled(button)
                    onClick={[Function]}
                    styleProps={
                      Object {
                        "active": undefined,
                        "disabled": undefined,
                        "flexBasis": "10%",
                        "margin": 5,
                        "variant": "large",
                      }
                    }
                  >
                    <button
                      onClick={[Function]}
                    >
                      <Icon
                        block={true}
                        element={[Function]}
                      >
                        <MaterialIconAdd
                          role="img"
                        >
                          <svg
                            role="img"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                            />
                            <path
                              d="M0 0h24v24H0z"
                              fill="none"
                            />
                          </svg>
                        </MaterialIconAdd>
                      </Icon>
                    </button>
                  </Styled(button)>
                </ForwardRef(IconButton)>
              </div>
            </ForwardRef(Box)>
          </div>
        </Styled(div)>
      </PanelSection>
    </div>
  </Styled(div)>
  <Toast
    autoHideDuration={5000}
    onClose={[Function]}
    open={false}
    type="error"
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={false}
      mountOnEnter={false}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    />
  </Toast>
  <Dialog
    closeOnBackgroundClick={true}
    onClose={[Function]}
    open={false}
    width={480}
  >
    <Modal
      closeOnBackgroundClick={true}
      onClose={[Function]}
      open={false}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={false}
        mountOnEnter={false}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      />
    </Modal>
  </Dialog>
</UserEditPanel>
`;

exports[`User Edit Panel should allow user role to be removed 1`] = `
<UserEditPanel
  id="fakeId3"
>
  <Styled(div)>
    <div>
      <PanelHeader
        leftChildren={
          <ForwardRef(NavigationButton)
            icon={[Function]}
            label="userList.panels.close"
            onClick={[Function]}
          />
        }
        rightChildren={
          <ForwardRef(NavigationButton)
            disabled={false}
            icon={[Function]}
            label="userList.panels.save"
            onClick={[Function]}
          />
        }
        title="userList.panels.editUser"
      >
        <Styled(div)>
          <div>
            <ForwardRef(NavigationButton)
              icon={[Function]}
              label="userList.panels.close"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": undefined,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconClose
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                        />
                        <path
                          d="M0 0h24v24H0z"
                          fill="none"
                        />
                      </svg>
                    </MaterialIconClose>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      userList.panels.close
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
            <ForwardRef(Box)
              flexGrow={1}
            >
              <div />
            </ForwardRef(Box)>
            <Styled(span)>
              <span>
                userList.panels.editUser
              </span>
            </Styled(span)>
            <ForwardRef(NavigationButton)
              disabled={false}
              icon={[Function]}
              label="userList.panels.save"
              onClick={[Function]}
            >
              <Styled(button)
                onClick={[Function]}
                styleProps={
                  Object {
                    "active": undefined,
                    "disabled": false,
                  }
                }
              >
                <button
                  onClick={[Function]}
                >
                  <Icon
                    element={[Function]}
                    scale="2em"
                  >
                    <MaterialIconSaveOutlined
                      role="img"
                    >
                      <svg
                        role="img"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M0 0h24v24H0V0z"
                          fill="none"
                        />
                        <path
                          d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm2 16H5V5h11.17L19 7.83V19zm-7-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zM6 6h9v4H6z"
                        />
                      </svg>
                    </MaterialIconSaveOutlined>
                  </Icon>
                  <ForwardRef(Box)
                    display="block"
                    element="span"
                  >
                    <span>
                      userList.panels.save
                    </span>
                  </ForwardRef(Box)>
                </button>
              </Styled(button)>
            </ForwardRef(NavigationButton)>
          </div>
        </Styled(div)>
      </PanelHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(TextInput)
                  disabled={false}
                  label="userList.panels.name"
                  onChange={[Function]}
                  value="Peter Parker"
                >
                  <Styled(div)
                    styleProps={Object {}}
                  >
                    <div>
                      <Styled(label)>
                        <label>
                          <Styled(input)
                            disabled={false}
                            onChange={[Function]}
                            placeholder="userList.panels.name"
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                            value="Peter Parker"
                          >
                            <input
                              disabled={false}
                              onChange={[Function]}
                              placeholder="userList.panels.name"
                              value="Peter Parker"
                            />
                          </Styled(input)>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                          >
                            <span>
                              userList.panels.name
                            </span>
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                    </div>
                  </Styled(div)>
                </ForwardRef(TextInput)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(TextInput)
                  disabled={false}
                  label="userList.panels.email"
                  onChange={[Function]}
                  value="peter@parker.com"
                >
                  <Styled(div)
                    styleProps={Object {}}
                  >
                    <div>
                      <Styled(label)>
                        <label>
                          <Styled(input)
                            disabled={false}
                            onChange={[Function]}
                            placeholder="userList.panels.email"
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                            value="peter@parker.com"
                          >
                            <input
                              disabled={false}
                              onChange={[Function]}
                              placeholder="userList.panels.email"
                              value="peter@parker.com"
                            />
                          </Styled(input)>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasIcon": false,
                              }
                            }
                          >
                            <span>
                              userList.panels.email
                            </span>
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                    </div>
                  </Styled(div)>
                </ForwardRef(TextInput)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              marginBottom={10}
            >
              <div>
                <ForwardRef(Button)
                  label="userList.panels.resetPassword"
                  onClick={[Function]}
                  variant="outlined"
                >
                  <Styled(button)
                    onClick={[Function]}
                    styleProps={
                      Object {
                        "color": "default",
                        "disabled": undefined,
                        "variant": "outlined",
                      }
                    }
                  >
                    <button
                      onClick={[Function]}
                    >
                      userList.panels.resetPassword
                    </button>
                  </Styled(button)>
                </ForwardRef(Button)>
              </div>
            </ForwardRef(Box)>
          </div>
        </Styled(div)>
      </PanelSection>
      <PanelSectionHeader
        title="userList.panels.userRoles"
      >
        <Styled(div)>
          <div>
            userList.panels.userRoles
          </div>
        </Styled(div)>
      </PanelSectionHeader>
      <PanelSection>
        <Styled(div)
          styleProps={
            Object {
              "dark": undefined,
            }
          }
        >
          <div>
            <ForwardRef(Box)
              marginTop={40}
            >
              <div>
                <ForwardRef(Typography)
                  variant="h3"
                >
                  <h3>
                    userList.panels.addUserRole
                  </h3>
                </ForwardRef(Typography)>
              </div>
            </ForwardRef(Box)>
            <ForwardRef(Box)
              alignItems="center"
              display="flex"
              flexDirection="row"
            >
              <div>
                <Select
                  description="userList.panels.selectUserRole"
                  flexBasis="90%"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "__typename": "UserRole",
                        "description": "Description for role 1",
                        "id": "roleId1",
                        "name": "Role 1",
                        "permissions": Array [],
                        "systemRole": false,
                      },
                      Object {
                        "__typename": "UserRole",
                        "description": "Description for role 2",
                        "id": "roleId2",
                        "name": "Role 2",
                        "permissions": Array [],
                        "systemRole": false,
                      },
                    ]
                  }
                  renderListItem={[Function]}
                >
                  <Styled(div)
                    styleProps={
                      Object {
                        "flexBasis": "90%",
                      }
                    }
                  >
                    <div>
                      <Styled(label)
                        htmlFor="downshift-14-toggle-button"
                        id="downshift-14-label"
                      >
                        <label
                          htmlFor="downshift-14-toggle-button"
                          id="downshift-14-label"
                        >
                          <Styled(button)
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-labelledby="downshift-14-label downshift-14-toggle-button"
                            id="downshift-14-toggle-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasFocus": false,
                                "hasIcon": false,
                                "isOpen": false,
                                "isPlaceholderShown": true,
                              }
                            }
                          >
                            <button
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              aria-labelledby="downshift-14-label downshift-14-toggle-button"
                              id="downshift-14-toggle-button"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                            />
                          </Styled(button)>
                          <Icon
                            element={[Function]}
                            style={[Function]}
                          >
                            <MaterialIconKeyboardArrowDown
                              role="img"
                            >
                              <svg
                                role="img"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                                />
                                <path
                                  d="M0 0h24v24H0V0z"
                                  fill="none"
                                />
                              </svg>
                            </MaterialIconKeyboardArrowDown>
                          </Icon>
                          <Styled(span)
                            styleProps={
                              Object {
                                "hasError": false,
                                "hasFocus": false,
                                "hasIcon": false,
                                "isOpen": false,
                                "isPlaceholderShown": true,
                              }
                            }
                          >
                            <span />
                          </Styled(span)>
                        </label>
                      </Styled(label)>
                      <Styled(ul)
                        aria-labelledby="downshift-14-label"
                        id="downshift-14-menu"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseLeave={[Function]}
                        role="listbox"
                        tabIndex={-1}
                      >
                        <ul
                          aria-labelledby="downshift-14-label"
                          id="downshift-14-menu"
                          onBlur={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onMouseLeave={[Function]}
                          role="listbox"
                          tabIndex={-1}
                        />
                      </Styled(ul)>
                      <Styled(div)>
                        <div>
                          userList.panels.selectUserRole
                        </div>
                      </Styled(div)>
                    </div>
                  </Styled(div)>
                </Select>
                <ForwardRef(IconButton)
                  flexBasis="10%"
                  icon={[Function]}
                  margin={5}
                  onClick={[Function]}
                  variant="large"
                >
                  <Styled(button)
                    onClick={[Function]}
                    styleProps={
                      Object {
                        "active": undefined,
                        "disabled": undefined,
                        "flexBasis": "10%",
                        "margin": 5,
                        "variant": "large",
                      }
                    }
                  >
                    <button
                      onClick={[Function]}
                    >
                      <Icon
                        block={true}
                        element={[Function]}
                      >
                        <MaterialIconAdd
                          role="img"
                        >
                          <svg
                            role="img"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                            />
                            <path
                              d="M0 0h24v24H0z"
                              fill="none"
                            />
                          </svg>
                        </MaterialIconAdd>
                      </Icon>
                    </button>
                  </Styled(button)>
                </ForwardRef(IconButton)>
              </div>
            </ForwardRef(Box)>
          </div>
        </Styled(div)>
      </PanelSection>
    </div>
  </Styled(div)>
  <Toast
    autoHideDuration={5000}
    onClose={[Function]}
    open={false}
    type="error"
  >
    <Transition
      appear={false}
      enter={true}
      exit={true}
      in={false}
      mountOnEnter={false}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      timeout={200}
      unmountOnExit={true}
    />
  </Toast>
  <Dialog
    closeOnBackgroundClick={true}
    onClose={[Function]}
    open={false}
    width={480}
  >
    <Modal
      closeOnBackgroundClick={true}
      onClose={[Function]}
      open={false}
    >
      <Transition
        appear={false}
        enter={true}
        exit={true}
        in={false}
        mountOnEnter={false}
        onEnter={[Function]}
        onEntered={[Function]}
        onEntering={[Function]}
        onExit={[Function]}
        onExited={[Function]}
        onExiting={[Function]}
        timeout={200}
        unmountOnExit={true}
      />
    </Modal>
  </Dialog>
</UserEditPanel>
`;

exports[`User Edit Panel should render 1`] = `
<UserEditPanel>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              ×
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userList.panels.createUser
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userList.panels.name"
                        onChange={[Function]}
                        value=""
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userList.panels.name"
                          onChange={[Function]}
                          value=""
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value=""
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userList.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userList.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userList.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userList.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.email
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userList.panels.email"
                        onChange={[Function]}
                        value=""
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userList.panels.email"
                          onChange={[Function]}
                          value=""
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.email"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value=""
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userList.panels.email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value=""
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userList.panels.email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userList.panels.email"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userList.panels.email"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.password
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userList.panels.password"
                        onChange={[Function]}
                        type="password"
                        value=""
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userList.panels.password"
                          onChange={[Function]}
                          type="password"
                          value=""
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.password"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            type="password"
                            value=""
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userList.panels.password"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="password"
                                value=""
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userList.panels.password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userList.panels.password"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userList.panels.password"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="password"
                                      value=""
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.userRoles
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        data={
                          Array [
                            Object {
                              "label": "Role 1",
                              "value": "roleId1",
                            },
                            Object {
                              "label": "Role 2",
                              "value": "roleId2",
                            },
                          ]
                        }
                        onChange={[Function]}
                        value={Array []}
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "Role 1",
                                "value": "roleId1",
                              },
                              Object {
                                "label": "Role 2",
                                "value": "roleId2",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={Array []}
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "Role 1",
                                  "value": "roleId1",
                                },
                                Object {
                                  "label": "Role 2",
                                  "value": "roleId2",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={Array []}
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "Role 1",
                                      "value": "roleId1",
                                    },
                                    Object {
                                      "label": "Role 2",
                                      "value": "roleId2",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={Array []}
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "Role 1",
                                          "value": "roleId1",
                                        },
                                        Object {
                                          "label": "Role 2",
                                          "value": "roleId2",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "displayName": "defaultProps(Checkbox)",
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "displayName": "defaultProps(DropdownMenuCheckItem)",
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={Array []}
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "Role 1",
                                            "value": "roleId1",
                                          },
                                          Object {
                                            "label": "Role 2",
                                            "value": "roleId2",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "displayName": "defaultProps(Checkbox)",
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "displayName": "defaultProps(DropdownMenuCheckItem)",
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "DefaultToggleButton",
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={false}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "DefaultToggleButton",
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={false}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-placeholder"
                                                >
                                                  <FormattedMessage
                                                    id="placeholder"
                                                  >
                                                    <span>
                                                      Select
                                                    </span>
                                                  </FormattedMessage>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "displayName": "Fade",
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.create
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Modal)
    animation={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "displayName": "Bounce",
        "render": [Function],
      }
    }
    animationTimeout={300}
    autoFocus={true}
    backdrop={true}
    classPrefix="rs-modal"
    dialogComponentClass={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "classPrefix": "rs-modal",
        },
        "displayName": "withStyleProps(defaultProps(ModalDialog))",
        "propTypes": Object {
          "innerRef": [Function],
          "size": [Function],
        },
        "render": [Function],
      }
    }
    enforceFocus={true}
    keyboard={true}
    onHide={[Function]}
    overflow={true}
    show={false}
    size="sm"
  >
    <Modal
      animation={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "displayName": "Bounce",
          "render": [Function],
        }
      }
      animationTimeout={300}
      autoFocus={true}
      backdrop={true}
      classPrefix="rs-modal"
      dialogComponentClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": Object {
            "classPrefix": "rs-modal",
          },
          "displayName": "withStyleProps(defaultProps(ModalDialog))",
          "propTypes": Object {
            "innerRef": [Function],
            "size": [Function],
          },
          "render": [Function],
        }
      }
      enforceFocus={true}
      keyboard={true}
      onHide={[Function]}
      overflow={true}
      show={false}
      size="sm"
    >
      <BaseModal
        autoFocus={true}
        backdrop={true}
        backdropClassName="rs-modal-backdrop"
        backdropTransitionTimeout={150}
        className="rs-modal-wrapper"
        containerClassName="rs-modal-open rs-modal-has-backdrop"
        dialogTransitionTimeout={300}
        enforceFocus={true}
        keyboard={true}
        onEntered={[Function]}
        onEntering={[Function]}
        onExited={[Function]}
        onHide={[Function]}
        overflow={true}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Bounce",
            "render": [Function],
          }
        }
      />
    </Modal>
  </defaultProps(Modal)>
</UserEditPanel>
`;

exports[`User Edit Panel should render with ID 1`] = `
<UserEditPanel
  id="fakeId3"
>
  <defaultProps(defaultProps(ModalHeader))
    classPrefix="rs-drawer-header"
    closeButton={true}
  >
    <defaultProps(ModalHeader)
      classPrefix="rs-drawer-header"
      closeButton={true}
    >
      <ModalHeader
        classPrefix="rs-drawer-header"
        closeButton={true}
      >
        <div
          className="rs-drawer-header"
        >
          <button
            aria-label="Close"
            className="rs-drawer-header-close"
            type="button"
          >
            <span
              aria-hidden="true"
            >
              ×
            </span>
          </button>
          <defaultProps(defaultProps(ModalTitle))
            classPrefix="rs-drawer-title"
          >
            <defaultProps(ModalTitle)
              classPrefix="rs-drawer-title"
            >
              <ModalTitle
                classPrefix="rs-drawer-title"
              >
                <h4
                  className="rs-drawer-title"
                >
                  userList.panels.editUser
                </h4>
              </ModalTitle>
            </defaultProps(ModalTitle)>
          </defaultProps(defaultProps(ModalTitle))>
        </div>
      </ModalHeader>
    </defaultProps(ModalHeader)>
  </defaultProps(defaultProps(ModalHeader))>
  <Body
    classPrefix="rs-drawer-body"
  >
    <defaultProps(ModalBody)
      classPrefix="rs-drawer-body"
    >
      <ModalBody
        classPrefix="rs-drawer-body"
      >
        <div
          className="rs-drawer-body"
          style={Object {}}
        >
          <Form
            checkDelay={500}
            checkTrigger="change"
            classPrefix="rs-form"
            errorFromContext={true}
            fluid={true}
            formDefaultValue={Object {}}
            layout="vertical"
            model={
              Schema {
                "schema": Object {},
              }
            }
          >
            <form
              className="rs-form rs-form-vertical rs-form-fluid"
              onSubmit={[Function]}
            >
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.name
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userList.panels.name"
                        onChange={[Function]}
                        value="Peter Parker"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userList.panels.name"
                          onChange={[Function]}
                          value="Peter Parker"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.name"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="Peter Parker"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userList.panels.name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="Peter Parker"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userList.panels.name"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="Peter Parker"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userList.panels.name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="Peter Parker"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userList.panels.name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="Peter Parker"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.email
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <defaultProps(FormControlWrapper)
                        classPrefix="rs-form-control"
                        disabled={false}
                        name="userList.panels.email"
                        onChange={[Function]}
                        value="peter@parker.com"
                      >
                        <FormControlWrapper
                          classPrefix="rs-form-control"
                          disabled={false}
                          name="userList.panels.email"
                          onChange={[Function]}
                          value="peter@parker.com"
                        >
                          <FormControl
                            accepter={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "contextType": Object {
                                  "$$typeof": Symbol(react.context),
                                  "Consumer": Object {
                                    "$$typeof": Symbol(react.context),
                                    "_calculateChangedBits": null,
                                    "_context": [Circular],
                                  },
                                  "Provider": Object {
                                    "$$typeof": Symbol(react.provider),
                                    "_context": [Circular],
                                  },
                                  "_calculateChangedBits": null,
                                  "_currentRenderer": null,
                                  "_currentRenderer2": null,
                                  "_currentValue": null,
                                  "_currentValue2": null,
                                  "_threadCount": 0,
                                },
                                "defaultProps": Object {
                                  "classPrefix": "rs-input",
                                  "componentClass": "input",
                                  "type": "text",
                                },
                                "displayName": "withStyleProps(defaultProps(Input))",
                                "propTypes": Object {
                                  "innerRef": [Function],
                                  "size": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            classPrefix="rs-form-control"
                            disabled={false}
                            errorPlacement="bottomStart"
                            formValue={Object {}}
                            name="userList.panels.email"
                            onChange={[Function]}
                            plaintextDefaultValue="--"
                            value="peter@parker.com"
                          >
                            <div
                              className="rs-form-control-wrapper"
                            >
                              <withStyleProps(defaultProps(Input))
                                classPrefix="rs-input"
                                componentClass="input"
                                disabled={false}
                                name="userList.panels.email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="text"
                                value="peter@parker.com"
                              >
                                <defaultProps(Input)
                                  className=""
                                  classPrefix="rs-input"
                                  componentClass="input"
                                  disabled={false}
                                  name="userList.panels.email"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="text"
                                  value="peter@parker.com"
                                >
                                  <Input
                                    className=""
                                    classPrefix="rs-input"
                                    componentClass="input"
                                    disabled={false}
                                    name="userList.panels.email"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    type="text"
                                    value="peter@parker.com"
                                  >
                                    <input
                                      className="rs-input"
                                      disabled={false}
                                      name="userList.panels.email"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onKeyDown={[Function]}
                                      type="text"
                                      value="peter@parker.com"
                                    />
                                  </Input>
                                </defaultProps(Input)>
                              </withStyleProps(defaultProps(Input))>
                              <defaultProps(ErrorMessage)
                                className="rs-form-control-message-wrapper"
                                classPrefix="rs-error-message"
                                placement="bottomStart"
                                show={false}
                              >
                                <ErrorMessage
                                  className="rs-form-control-message-wrapper"
                                  classPrefix="rs-error-message"
                                  placement="bottomStart"
                                  show={false}
                                />
                              </defaultProps(ErrorMessage)>
                            </div>
                          </FormControl>
                        </FormControlWrapper>
                      </defaultProps(FormControlWrapper)>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <withStyleProps(defaultProps(Button))
                        appearance="primary"
                        classPrefix="rs-btn"
                        componentClass="button"
                        onClick={[Function]}
                        ripple={true}
                      >
                        <defaultProps(Button)
                          appearance="primary"
                          className=""
                          classPrefix="rs-btn"
                          componentClass="button"
                          onClick={[Function]}
                          ripple={true}
                        >
                          <Button
                            appearance="primary"
                            className=""
                            classPrefix="rs-btn"
                            componentClass="button"
                            onClick={[Function]}
                            ripple={true}
                          >
                            <button
                              className="rs-btn rs-btn-primary"
                              onClick={[Function]}
                              type="button"
                            >
                              userList.panels.resetPassword
                              <defaultProps(Ripple)
                                classPrefix="rs-ripple"
                              >
                                <Ripple
                                  classPrefix="rs-ripple"
                                >
                                  <span
                                    className="rs-ripple-pond"
                                  >
                                    <Transition
                                      enteringClassName="rs-ripple-rippling"
                                      in={false}
                                      onEntered={[Function]}
                                      timeout={1000}
                                    >
                                      <span
                                        className="rs-ripple"
                                        style={Object {}}
                                      />
                                    </Transition>
                                  </span>
                                </Ripple>
                              </defaultProps(Ripple)>
                            </button>
                          </Button>
                        </defaultProps(Button)>
                      </withStyleProps(defaultProps(Button))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
              <withStyleProps(defaultProps(FormGroup))
                classPrefix="rs-form-group"
              >
                <defaultProps(FormGroup)
                  className=""
                  classPrefix="rs-form-group"
                >
                  <FormGroup
                    className=""
                    classPrefix="rs-form-group"
                  >
                    <div
                      className="rs-form-group"
                      role="group"
                    >
                      <defaultProps(ControlLabel)
                        classPrefix="rs-control-label"
                      >
                        <ControlLabel
                          classPrefix="rs-control-label"
                        >
                          <label
                            className="rs-control-label"
                          >
                            userList.panels.userRoles
                          </label>
                        </ControlLabel>
                      </defaultProps(ControlLabel)>
                      <withLocale(defaultProps(CheckPicker))
                        data={
                          Array [
                            Object {
                              "label": "Role 1",
                              "value": "roleId1",
                            },
                            Object {
                              "label": "Role 2",
                              "value": "roleId2",
                            },
                          ]
                        }
                        onChange={[Function]}
                        value={
                          Array [
                            "roleId1",
                          ]
                        }
                      >
                        <defaultProps(CheckPicker)
                          appearance="default"
                          childrenKey="children"
                          classPrefix="rs-picker"
                          cleanable={true}
                          countable={true}
                          data={
                            Array [
                              Object {
                                "label": "Role 1",
                                "value": "roleId1",
                              },
                              Object {
                                "label": "Role 2",
                                "value": "roleId2",
                              },
                            ]
                          }
                          disabledItemValues={Array []}
                          labelKey="label"
                          locale={
                            Object {
                              "checkAll": "All",
                              "formatDate": [Function],
                              "noResultsText": "No results found",
                              "placeholder": "Select",
                              "searchPlaceholder": "Search",
                            }
                          }
                          maxHeight={320}
                          menuAutoWidth={true}
                          onChange={[Function]}
                          placement="bottomStart"
                          searchable={true}
                          value={
                            Array [
                              "roleId1",
                            ]
                          }
                          valueKey="value"
                          virtualized={true}
                        >
                          <CheckPicker
                            appearance="default"
                            childrenKey="children"
                            classPrefix="rs-picker"
                            cleanable={true}
                            countable={true}
                            data={
                              Array [
                                Object {
                                  "label": "Role 1",
                                  "value": "roleId1",
                                },
                                Object {
                                  "label": "Role 2",
                                  "value": "roleId2",
                                },
                              ]
                            }
                            disabledItemValues={Array []}
                            labelKey="label"
                            locale={
                              Object {
                                "checkAll": "All",
                                "formatDate": [Function],
                                "noResultsText": "No results found",
                                "placeholder": "Select",
                                "searchPlaceholder": "Search",
                              }
                            }
                            maxHeight={320}
                            menuAutoWidth={true}
                            onChange={[Function]}
                            placement="bottomStart"
                            searchable={true}
                            value={
                              Array [
                                "roleId1",
                              ]
                            }
                            valueKey="value"
                            virtualized={true}
                          >
                            <PickerToggleTrigger
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onExited={[Function]}
                              pickerProps={
                                Object {
                                  "appearance": "default",
                                  "childrenKey": "children",
                                  "classPrefix": "rs-picker",
                                  "cleanable": true,
                                  "countable": true,
                                  "data": Array [
                                    Object {
                                      "label": "Role 1",
                                      "value": "roleId1",
                                    },
                                    Object {
                                      "label": "Role 2",
                                      "value": "roleId2",
                                    },
                                  ],
                                  "disabledItemValues": Array [],
                                  "labelKey": "label",
                                  "locale": Object {
                                    "checkAll": "All",
                                    "formatDate": [Function],
                                    "noResultsText": "No results found",
                                    "placeholder": "Select",
                                    "searchPlaceholder": "Search",
                                  },
                                  "maxHeight": 320,
                                  "menuAutoWidth": true,
                                  "onChange": [Function],
                                  "placement": "bottomStart",
                                  "searchable": true,
                                  "value": Array [
                                    "roleId1",
                                  ],
                                  "valueKey": "value",
                                  "virtualized": true,
                                }
                              }
                              positionRef={[Function]}
                              speaker={
                                <defaultProps(MenuWrapper)
                                  autoWidth={true}
                                  className="rs-picker-check-menu"
                                  classPrefix="rs-picker-menu"
                                  getPositionInstance={[Function]}
                                  getToggleInstance={[Function]}
                                  onKeyDown={[Function]}
                                >
                                  <defaultProps(SearchBar)
                                    classPrefix="rs-picker-search-bar"
                                    onChange={[Function]}
                                    placeholder="Search"
                                    value=""
                                  />
                                  <defaultProps(DropdownMenu)
                                    activeItemValues={
                                      Array [
                                        "roleId1",
                                      ]
                                    }
                                    classPrefix="rs-picker-check-menu"
                                    data={
                                      Array [
                                        Object {
                                          "label": "Role 1",
                                          "value": "roleId1",
                                        },
                                        Object {
                                          "label": "Role 2",
                                          "value": "roleId2",
                                        },
                                      ]
                                    }
                                    disabledItemValues={Array []}
                                    dropdownMenuItemComponentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "defaultProps": Object {
                                          "checkable": true,
                                          "checkboxComponentClass": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "contextType": Object {
                                              "$$typeof": Symbol(react.context),
                                              "Consumer": Object {
                                                "$$typeof": Symbol(react.context),
                                                "_calculateChangedBits": null,
                                                "_context": [Circular],
                                              },
                                              "Provider": Object {
                                                "$$typeof": Symbol(react.provider),
                                                "_context": [Circular],
                                              },
                                              "_calculateChangedBits": null,
                                              "_currentRenderer": null,
                                              "_currentRenderer2": null,
                                              "_currentValue": Object {},
                                              "_currentValue2": Object {},
                                              "_threadCount": 0,
                                            },
                                            "defaultProps": Object {
                                              "checkable": true,
                                              "classPrefix": "rs-checkbox",
                                              "tabIndex": 0,
                                            },
                                            "displayName": "defaultProps(Checkbox)",
                                            "propTypes": Object {
                                              "checkable": [Function],
                                              "checked": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classPrefix": [Function],
                                              "defaultChecked": [Function],
                                              "disabled": [Function],
                                              "indeterminate": [Function],
                                              "inline": [Function],
                                              "inputRef": [Function],
                                              "onChange": [Function],
                                              "onCheckboxClick": [Function],
                                              "onClick": [Function],
                                              "tabIndex": [Function],
                                              "title": [Function],
                                              "value": [Function],
                                            },
                                            "render": [Function],
                                          },
                                          "classPrefix": "rs-check-item",
                                          "componentClass": "div",
                                        },
                                        "displayName": "defaultProps(DropdownMenuCheckItem)",
                                        "propTypes": Object {
                                          "active": [Function],
                                          "checkable": [Function],
                                          "checkboxComponentClass": [Function],
                                          "children": [Function],
                                          "className": [Function],
                                          "classPrefix": [Function],
                                          "componentClass": [Function],
                                          "disabled": [Function],
                                          "focus": [Function],
                                          "getItemData": [Function],
                                          "indeterminate": [Function],
                                          "onCheck": [Function],
                                          "onKeyDown": [Function],
                                          "onSelect": [Function],
                                          "onSelectItem": [Function],
                                          "title": [Function],
                                          "value": [Function],
                                        },
                                        "render": [Function],
                                      }
                                    }
                                    group={false}
                                    labelKey="label"
                                    maxHeight={320}
                                    onSelect={[Function]}
                                    valueKey="value"
                                    virtualized={true}
                                  />
                                </defaultProps(MenuWrapper)>
                              }
                            >
                              <OverlayTrigger
                                delayHide={200}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onExited={[Function]}
                                placement="bottomStart"
                                positionRef={[Function]}
                                rootClose={true}
                                speaker={
                                  <defaultProps(MenuWrapper)
                                    autoWidth={true}
                                    className="rs-picker-check-menu"
                                    classPrefix="rs-picker-menu"
                                    getPositionInstance={[Function]}
                                    getToggleInstance={[Function]}
                                    onKeyDown={[Function]}
                                  >
                                    <defaultProps(SearchBar)
                                      classPrefix="rs-picker-search-bar"
                                      onChange={[Function]}
                                      placeholder="Search"
                                      value=""
                                    />
                                    <defaultProps(DropdownMenu)
                                      activeItemValues={
                                        Array [
                                          "roleId1",
                                        ]
                                      }
                                      classPrefix="rs-picker-check-menu"
                                      data={
                                        Array [
                                          Object {
                                            "label": "Role 1",
                                            "value": "roleId1",
                                          },
                                          Object {
                                            "label": "Role 2",
                                            "value": "roleId2",
                                          },
                                        ]
                                      }
                                      disabledItemValues={Array []}
                                      dropdownMenuItemComponentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "defaultProps": Object {
                                            "checkable": true,
                                            "checkboxComponentClass": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "contextType": Object {
                                                "$$typeof": Symbol(react.context),
                                                "Consumer": Object {
                                                  "$$typeof": Symbol(react.context),
                                                  "_calculateChangedBits": null,
                                                  "_context": [Circular],
                                                },
                                                "Provider": Object {
                                                  "$$typeof": Symbol(react.provider),
                                                  "_context": [Circular],
                                                },
                                                "_calculateChangedBits": null,
                                                "_currentRenderer": null,
                                                "_currentRenderer2": null,
                                                "_currentValue": Object {},
                                                "_currentValue2": Object {},
                                                "_threadCount": 0,
                                              },
                                              "defaultProps": Object {
                                                "checkable": true,
                                                "classPrefix": "rs-checkbox",
                                                "tabIndex": 0,
                                              },
                                              "displayName": "defaultProps(Checkbox)",
                                              "propTypes": Object {
                                                "checkable": [Function],
                                                "checked": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classPrefix": [Function],
                                                "defaultChecked": [Function],
                                                "disabled": [Function],
                                                "indeterminate": [Function],
                                                "inline": [Function],
                                                "inputRef": [Function],
                                                "onChange": [Function],
                                                "onCheckboxClick": [Function],
                                                "onClick": [Function],
                                                "tabIndex": [Function],
                                                "title": [Function],
                                                "value": [Function],
                                              },
                                              "render": [Function],
                                            },
                                            "classPrefix": "rs-check-item",
                                            "componentClass": "div",
                                          },
                                          "displayName": "defaultProps(DropdownMenuCheckItem)",
                                          "propTypes": Object {
                                            "active": [Function],
                                            "checkable": [Function],
                                            "checkboxComponentClass": [Function],
                                            "children": [Function],
                                            "className": [Function],
                                            "classPrefix": [Function],
                                            "componentClass": [Function],
                                            "disabled": [Function],
                                            "focus": [Function],
                                            "getItemData": [Function],
                                            "indeterminate": [Function],
                                            "onCheck": [Function],
                                            "onKeyDown": [Function],
                                            "onSelect": [Function],
                                            "onSelectItem": [Function],
                                            "title": [Function],
                                            "value": [Function],
                                          },
                                          "render": [Function],
                                        }
                                      }
                                      group={false}
                                      labelKey="label"
                                      maxHeight={320}
                                      onSelect={[Function]}
                                      valueKey="value"
                                      virtualized={true}
                                    />
                                  </defaultProps(MenuWrapper)>
                                }
                                trigger="click"
                              >
                                <div
                                  className="rs-picker-check rs-picker-default rs-picker-toggle-wrapper rs-picker-placement-bottom-start rs-picker-has-value rs-picker-cleanable rs-picker-countable"
                                  key="triggerComponent"
                                  onClick={[Function]}
                                >
                                  <defaultProps(PickerToggle)
                                    caret={true}
                                    classPrefix="rs-picker-toggle"
                                    cleanable={true}
                                    componentClass={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "displayName": "DefaultToggleButton",
                                        "render": [Function],
                                      }
                                    }
                                    hasValue={true}
                                    onClean={[Function]}
                                    onKeyDown={[Function]}
                                    tabIndex={0}
                                  >
                                    <PickerToggle
                                      caret={true}
                                      classPrefix="rs-picker-toggle"
                                      cleanable={true}
                                      componentClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "displayName": "DefaultToggleButton",
                                          "render": [Function],
                                        }
                                      }
                                      hasValue={true}
                                      onClean={[Function]}
                                      onKeyDown={[Function]}
                                      tabIndex={0}
                                    >
                                      <DefaultToggleButton
                                        className="rs-picker-toggle"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        role="combobox"
                                        tabIndex={0}
                                      >
                                        <withStyleProps(defaultProps(Button))
                                          appearance="default"
                                          className="rs-picker-toggle"
                                          classPrefix="rs-btn"
                                          componentClass="a"
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          ripple={false}
                                          role="combobox"
                                          tabIndex={0}
                                        >
                                          <defaultProps(Button)
                                            appearance="default"
                                            className="rs-picker-toggle"
                                            classPrefix="rs-btn"
                                            componentClass="a"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            ripple={false}
                                            role="combobox"
                                            tabIndex={0}
                                          >
                                            <Button
                                              appearance="default"
                                              className="rs-picker-toggle"
                                              classPrefix="rs-btn"
                                              componentClass="a"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              ripple={false}
                                              role="combobox"
                                              tabIndex={0}
                                            >
                                              <a
                                                className="rs-btn rs-btn-default rs-picker-toggle"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                role="combobox"
                                                tabIndex={0}
                                              >
                                                <span
                                                  className="rs-picker-toggle-value"
                                                >
                                                  <SelectedElement
                                                    countable={true}
                                                    labelKey="label"
                                                    prefix={[Function]}
                                                    selectedItems={
                                                      Array [
                                                        Object {
                                                          "label": "Role 1",
                                                          "value": "roleId1",
                                                        },
                                                      ]
                                                    }
                                                    valueKey="value"
                                                  >
                                                    <span
                                                      className="rs-picker-value-list"
                                                      title="Role 1"
                                                    >
                                                      <span
                                                        className="rs-picker-value-item"
                                                      >
                                                        Role 1
                                                      </span>
                                                    </span>
                                                    <span
                                                      className="rs-picker-value-count"
                                                      title="1"
                                                    >
                                                      1
                                                    </span>
                                                  </SelectedElement>
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-clean"
                                                  onClick={[Function]}
                                                  role="button"
                                                  tabIndex={-1}
                                                >
                                                  ✕
                                                </span>
                                                <span
                                                  className="rs-picker-toggle-caret"
                                                />
                                              </a>
                                            </Button>
                                          </defaultProps(Button)>
                                        </withStyleProps(defaultProps(Button))>
                                      </DefaultToggleButton>
                                    </PickerToggle>
                                  </defaultProps(PickerToggle)>
                                </div>
                                <Portal
                                  key="portal"
                                >
                                  <Portal
                                    containerInfo={<body />}
                                  >
                                    <Overlay
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      placement="bottomStart"
                                      positionRef={[Function]}
                                      rootClose={true}
                                      target={[Function]}
                                    >
                                      <BaseOverlay
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onExited={[Function]}
                                        onHide={[Function]}
                                        placement="bottomStart"
                                        positionRef={[Function]}
                                        rootClose={true}
                                        target={[Function]}
                                        transition={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "displayName": "Fade",
                                            "render": [Function],
                                          }
                                        }
                                      />
                                    </Overlay>
                                  </Portal>
                                </Portal>
                              </OverlayTrigger>
                            </PickerToggleTrigger>
                          </CheckPicker>
                        </defaultProps(CheckPicker)>
                      </withLocale(defaultProps(CheckPicker))>
                    </div>
                  </FormGroup>
                </defaultProps(FormGroup)>
              </withStyleProps(defaultProps(FormGroup))>
            </form>
          </Form>
        </div>
      </ModalBody>
    </defaultProps(ModalBody)>
  </Body>
  <defaultProps(defaultProps(ModalFooter))
    classPrefix="rs-drawer-footer"
  >
    <defaultProps(ModalFooter)
      classPrefix="rs-drawer-footer"
    >
      <ModalFooter
        classPrefix="rs-drawer-footer"
      >
        <div
          className="rs-drawer-footer"
        >
          <withStyleProps(defaultProps(Button))
            appearance="primary"
            classPrefix="rs-btn"
            componentClass="button"
            disabled={false}
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="primary"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              disabled={false}
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="primary"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                disabled={false}
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-primary"
                  disabled={false}
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.save
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
          <withStyleProps(defaultProps(Button))
            appearance="subtle"
            classPrefix="rs-btn"
            componentClass="button"
            onClick={[Function]}
            ripple={true}
          >
            <defaultProps(Button)
              appearance="subtle"
              className=""
              classPrefix="rs-btn"
              componentClass="button"
              onClick={[Function]}
              ripple={true}
            >
              <Button
                appearance="subtle"
                className=""
                classPrefix="rs-btn"
                componentClass="button"
                onClick={[Function]}
                ripple={true}
              >
                <button
                  className="rs-btn rs-btn-subtle"
                  onClick={[Function]}
                  type="button"
                >
                  userList.panels.close
                  <defaultProps(Ripple)
                    classPrefix="rs-ripple"
                  >
                    <Ripple
                      classPrefix="rs-ripple"
                    >
                      <span
                        className="rs-ripple-pond"
                      >
                        <Transition
                          enteringClassName="rs-ripple-rippling"
                          in={false}
                          onEntered={[Function]}
                          timeout={1000}
                        >
                          <span
                            className="rs-ripple"
                            style={Object {}}
                          />
                        </Transition>
                      </span>
                    </Ripple>
                  </defaultProps(Ripple)>
                </button>
              </Button>
            </defaultProps(Button)>
          </withStyleProps(defaultProps(Button))>
        </div>
      </ModalFooter>
    </defaultProps(ModalFooter)>
  </defaultProps(defaultProps(ModalFooter))>
  <defaultProps(Modal)
    animation={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "displayName": "Bounce",
        "render": [Function],
      }
    }
    animationTimeout={300}
    autoFocus={true}
    backdrop={true}
    classPrefix="rs-modal"
    dialogComponentClass={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "classPrefix": "rs-modal",
        },
        "displayName": "withStyleProps(defaultProps(ModalDialog))",
        "propTypes": Object {
          "innerRef": [Function],
          "size": [Function],
        },
        "render": [Function],
      }
    }
    enforceFocus={true}
    keyboard={true}
    onHide={[Function]}
    overflow={true}
    show={false}
    size="sm"
  >
    <Modal
      animation={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "displayName": "Bounce",
          "render": [Function],
        }
      }
      animationTimeout={300}
      autoFocus={true}
      backdrop={true}
      classPrefix="rs-modal"
      dialogComponentClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": Object {
            "classPrefix": "rs-modal",
          },
          "displayName": "withStyleProps(defaultProps(ModalDialog))",
          "propTypes": Object {
            "innerRef": [Function],
            "size": [Function],
          },
          "render": [Function],
        }
      }
      enforceFocus={true}
      keyboard={true}
      onHide={[Function]}
      overflow={true}
      show={false}
      size="sm"
    >
      <BaseModal
        autoFocus={true}
        backdrop={true}
        backdropClassName="rs-modal-backdrop"
        backdropTransitionTimeout={150}
        className="rs-modal-wrapper"
        containerClassName="rs-modal-open rs-modal-has-backdrop"
        dialogTransitionTimeout={300}
        enforceFocus={true}
        keyboard={true}
        onEntered={[Function]}
        onEntering={[Function]}
        onExited={[Function]}
        onHide={[Function]}
        overflow={true}
        show={false}
        transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "displayName": "Bounce",
            "render": [Function],
          }
        }
      />
    </Modal>
  </defaultProps(Modal)>
</UserEditPanel>
`;
