import { Prisma, PrismaClient } from '@prisma/client';
import { Context } from '../../context';
import { CreateUserInput } from './user.mutation';
export declare const deleteUserById: (id: string, authenticate: Context['authenticate'], user: PrismaClient['user']) => Prisma.Prisma__UserClient<{
    properties: import(".prisma/client").MetadataProperty[];
    modifiedAt: Date;
    id: string;
    createdAt: Date;
    email: string;
    emailVerifiedAt: Date | null;
    name: string;
    firstName: string | null;
    preferredName: string | null;
    password: string;
    active: boolean;
    lastLogin: Date | null;
    roleIDs: string[];
    userImageID: string | null;
    address: import(".prisma/client").UserAddress | null;
    oauth2Accounts: import(".prisma/client").UserOAuth2Account[];
    paymentProviderCustomers: import(".prisma/client").PaymentProviderCustomer[];
}>;
export declare const createAdminUser: (input: CreateUserInput, authenticate: Context['authenticate'], hashCostFactor: Context['hashCostFactor'], user: PrismaClient['user']) => Promise<{
    properties: import(".prisma/client").MetadataProperty[];
    modifiedAt: Date;
    id: string;
    createdAt: Date;
    email: string;
    emailVerifiedAt: Date | null;
    name: string;
    firstName: string | null;
    preferredName: string | null;
    password: string;
    active: boolean;
    lastLogin: Date | null;
    roleIDs: string[];
    userImageID: string | null;
    address: import(".prisma/client").UserAddress | null;
    oauth2Accounts: import(".prisma/client").UserOAuth2Account[];
    paymentProviderCustomers: import(".prisma/client").PaymentProviderCustomer[];
}>;
declare type UpdateUserInput = Prisma.UserUncheckedUpdateInput & {
    properties: Prisma.MetadataPropertyCreateManyUserInput[];
    address: Prisma.UserAddressUncheckedCreateWithoutUserInput | null;
};
export declare const updateAdminUser: (id: string, { properties, address, ...input }: UpdateUserInput, authenticate: Context['authenticate'], user: PrismaClient['user']) => Promise<{
    properties: import(".prisma/client").MetadataProperty[];
    modifiedAt: Date;
    id: string;
    createdAt: Date;
    email: string;
    emailVerifiedAt: Date | null;
    name: string;
    firstName: string | null;
    preferredName: string | null;
    password: string;
    active: boolean;
    lastLogin: Date | null;
    roleIDs: string[];
    userImageID: string | null;
    address: import(".prisma/client").UserAddress | null;
    oauth2Accounts: import(".prisma/client").UserOAuth2Account[];
    paymentProviderCustomers: import(".prisma/client").PaymentProviderCustomer[];
}>;
export declare const resetUserPassword: (id: string, password: string, sendMail: boolean, hashCostFactor: number, authenticate: Context['authenticate'], mailContext: Context['mailContext'], userClient: PrismaClient['user']) => Promise<{
    properties: import(".prisma/client").MetadataProperty[];
    modifiedAt: Date;
    id: string;
    createdAt: Date;
    email: string;
    emailVerifiedAt: Date | null;
    name: string;
    firstName: string | null;
    preferredName: string | null;
    password: string;
    active: boolean;
    lastLogin: Date | null;
    roleIDs: string[];
    userImageID: string | null;
    address: import(".prisma/client").UserAddress | null;
    oauth2Accounts: import(".prisma/client").UserOAuth2Account[];
    paymentProviderCustomers: import(".prisma/client").PaymentProviderCustomer[];
}>;
export {};
//# sourceMappingURL=user.private-mutation.d.ts.map