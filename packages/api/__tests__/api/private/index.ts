// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Node} from 'slate'
import gql from 'graphql-tag'
export type Maybe<T> = T | null
export type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: string
  /** A hexidecimal color value. */
  Color: string
  RichText: Node[]
  Slug: string
  /** The `Upload` scalar type represents a file upload. */
  Upload: File
}

export type Article = {
  __typename?: 'Article'
  id: Scalars['ID']
  shared: Scalars['Boolean']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  draft?: Maybe<ArticleRevision>
  published?: Maybe<ArticleRevision>
  pending?: Maybe<ArticleRevision>
  latest: ArticleRevision
}

export type ArticleConnection = {
  __typename?: 'ArticleConnection'
  nodes: Array<Article>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ArticleFilter = {
  title?: Maybe<Scalars['String']>
  draft?: Maybe<Scalars['Boolean']>
  published?: Maybe<Scalars['Boolean']>
  pending?: Maybe<Scalars['Boolean']>
  authors?: Maybe<Array<Scalars['ID']>>
  tags?: Maybe<Array<Scalars['String']>>
}

export type ArticleInput = {
  slug: Scalars['Slug']
  preTitle?: Maybe<Scalars['String']>
  title: Scalars['String']
  lead?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  properties: Array<PropertiesInput>
  imageID?: Maybe<Scalars['ID']>
  authorIDs: Array<Scalars['ID']>
  shared: Scalars['Boolean']
  breaking: Scalars['Boolean']
  hideAuthor: Scalars['Boolean']
  socialMediaTitle?: Maybe<Scalars['String']>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaAuthorIDs: Array<Scalars['ID']>
  socialMediaImageID?: Maybe<Scalars['ID']>
  blocks: Array<BlockInput>
}

export type ArticleNavigationLink = BaseNavigationLink & {
  __typename?: 'ArticleNavigationLink'
  label: Scalars['String']
  article?: Maybe<Article>
}

export type ArticleNavigationLinkInput = {
  label: Scalars['String']
  articleID: Scalars['ID']
}

export type ArticleRevision = {
  __typename?: 'ArticleRevision'
  revision: Scalars['Int']
  createdAt: Scalars['DateTime']
  publishAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  hideAuthor: Scalars['Boolean']
  preTitle?: Maybe<Scalars['String']>
  title: Scalars['String']
  lead?: Maybe<Scalars['String']>
  slug: Scalars['Slug']
  tags: Array<Scalars['String']>
  properties: Array<Properties>
  image?: Maybe<Image>
  authors: Array<Maybe<Author>>
  breaking: Scalars['Boolean']
  socialMediaTitle?: Maybe<Scalars['String']>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaAuthors: Array<Author>
  socialMediaImage?: Maybe<Image>
  blocks: Array<Block>
}

export enum ArticleSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PublishAt = 'PUBLISH_AT',
  PublishedAt = 'PUBLISHED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type ArticleTeaser = {
  __typename?: 'ArticleTeaser'
  style: TeaserStyle
  image?: Maybe<Image>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  article?: Maybe<Article>
}

export type ArticleTeaserInput = {
  style: TeaserStyle
  imageID?: Maybe<Scalars['ID']>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  articleID: Scalars['ID']
}

export type Author = {
  __typename?: 'Author'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['Slug']
  url: Scalars['String']
  links?: Maybe<Array<AuthorLink>>
  bio?: Maybe<Scalars['RichText']>
  image?: Maybe<Image>
}

export type AuthorConnection = {
  __typename?: 'AuthorConnection'
  nodes: Array<Author>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuthorFilter = {
  name?: Maybe<Scalars['String']>
}

export type AuthorInput = {
  name: Scalars['String']
  slug: Scalars['Slug']
  links?: Maybe<Array<AuthorLinkInput>>
  bio?: Maybe<Scalars['RichText']>
  imageID?: Maybe<Scalars['ID']>
}

export type AuthorLink = {
  __typename?: 'AuthorLink'
  title: Scalars['String']
  url: Scalars['String']
}

export type AuthorLinkInput = {
  title: Scalars['String']
  url: Scalars['String']
}

export enum AuthorSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type AuthProvider = {
  __typename?: 'AuthProvider'
  name: Scalars['String']
  url: Scalars['String']
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod'
  paymentMethods: Array<PaymentMethod>
  paymentPeriodicities: Array<PaymentPeriodicity>
  forceAutoRenewal: Scalars['Boolean']
}

export type AvailablePaymentMethodInput = {
  paymentMethodIDs: Array<Scalars['String']>
  paymentPeriodicities: Array<PaymentPeriodicity>
  forceAutoRenewal: Scalars['Boolean']
}

export type BaseNavigationLink = {
  label: Scalars['String']
}

export type Block =
  | RichTextBlock
  | ImageBlock
  | ImageGalleryBlock
  | ListicleBlock
  | FacebookPostBlock
  | FacebookVideoBlock
  | InstagramPostBlock
  | TwitterTweetBlock
  | VimeoVideoBlock
  | YouTubeVideoBlock
  | SoundCloudTrackBlock
  | EmbedBlock
  | LinkPageBreakBlock
  | TitleBlock
  | QuoteBlock
  | TeaserGridBlock

export type BlockInput = {
  richText?: Maybe<RichTextBlockInput>
  image?: Maybe<ImageBlockInput>
  imageGallery?: Maybe<ImageGalleryBlockInput>
  listicle?: Maybe<ListicleBlockInput>
  title?: Maybe<TitleBlockInput>
  quote?: Maybe<QuoteBlockInput>
  facebookPost?: Maybe<FacebookPostBlockInput>
  facebookVideo?: Maybe<FacebookVideoBlockInput>
  instagramPost?: Maybe<InstagramPostBlockInput>
  twitterTweet?: Maybe<TwitterTweetBlockInput>
  vimeoVideo?: Maybe<VimeoVideoBlockInput>
  youTubeVideo?: Maybe<YouTubeVideoBlockInput>
  soundCloudTrack?: Maybe<SoundCloudTrackBlockInput>
  embed?: Maybe<EmbedBlockInput>
  linkPageBreak?: Maybe<LinkPageBreakBlockInput>
  teaserGrid?: Maybe<TeaserGridBlockInput>
}

export type CreatedToken = {
  __typename?: 'CreatedToken'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  token: Scalars['String']
}

export type CreatePeerInput = {
  name: Scalars['String']
  slug: Scalars['String']
  hostURL: Scalars['String']
  token: Scalars['String']
}

export type DateFilter = {
  date?: Maybe<Scalars['DateTime']>
  comparison: DateFilterComparison
}

export enum DateFilterComparison {
  Greater = 'GREATER',
  GreaterOrEqual = 'GREATER_OR_EQUAL',
  Equal = 'EQUAL',
  Lower = 'LOWER',
  LowerOrEqual = 'LOWER_OR_EQUAL'
}

export type EmbedBlock = {
  __typename?: 'EmbedBlock'
  url?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  width?: Maybe<Scalars['Int']>
  height?: Maybe<Scalars['Int']>
  styleCustom?: Maybe<Scalars['String']>
}

export type EmbedBlockInput = {
  url?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  width?: Maybe<Scalars['Int']>
  height?: Maybe<Scalars['Int']>
  styleCustom?: Maybe<Scalars['String']>
}

export type ExternalNavigationLink = BaseNavigationLink & {
  __typename?: 'ExternalNavigationLink'
  label: Scalars['String']
  url: Scalars['String']
}

export type ExternalNavigationLinkInput = {
  label: Scalars['String']
  url: Scalars['String']
}

export type FacebookPostBlock = {
  __typename?: 'FacebookPostBlock'
  userID: Scalars['String']
  postID: Scalars['String']
}

export type FacebookPostBlockInput = {
  userID: Scalars['String']
  postID: Scalars['String']
}

export type FacebookVideoBlock = {
  __typename?: 'FacebookVideoBlock'
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type FacebookVideoBlockInput = {
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type GalleryImageEdge = {
  __typename?: 'GalleryImageEdge'
  caption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
}

export type GalleryImageEdgeInput = {
  caption?: Maybe<Scalars['String']>
  imageID?: Maybe<Scalars['ID']>
}

export type Image = {
  __typename?: 'Image'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  filename?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  source?: Maybe<Scalars['String']>
  author?: Maybe<Scalars['String']>
  license?: Maybe<Scalars['String']>
  fileSize: Scalars['Int']
  extension: Scalars['String']
  mimeType: Scalars['String']
  format: Scalars['String']
  width: Scalars['Int']
  height: Scalars['Int']
  focalPoint?: Maybe<Point>
  url?: Maybe<Scalars['String']>
  transformURL?: Maybe<Scalars['String']>
}

export type ImageTransformUrlArgs = {
  input?: Maybe<ImageTransformation>
}

export type ImageBlock = {
  __typename?: 'ImageBlock'
  image?: Maybe<Image>
  caption?: Maybe<Scalars['String']>
}

export type ImageBlockInput = {
  caption?: Maybe<Scalars['String']>
  imageID?: Maybe<Scalars['ID']>
}

export type ImageConnection = {
  __typename?: 'ImageConnection'
  nodes: Array<Image>
  totalCount: Scalars['Int']
  pageInfo: PageInfo
}

export type ImageFilter = {
  title?: Maybe<Scalars['String']>
  tags?: Maybe<Array<Scalars['String']>>
}

export type ImageGalleryBlock = {
  __typename?: 'ImageGalleryBlock'
  images: Array<GalleryImageEdge>
}

export type ImageGalleryBlockInput = {
  images?: Maybe<Array<Maybe<GalleryImageEdgeInput>>>
}

export enum ImageOutput {
  Png = 'PNG',
  Jpeg = 'JPEG',
  Webp = 'WEBP'
}

export enum ImageRotation {
  Auto = 'AUTO',
  Rotate_0 = 'ROTATE_0',
  Rotate_90 = 'ROTATE_90',
  Rotate_180 = 'ROTATE_180',
  Rotate_270 = 'ROTATE_270'
}

export enum ImageSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type ImageTransformation = {
  width?: Maybe<Scalars['Int']>
  height?: Maybe<Scalars['Int']>
  rotation?: Maybe<ImageRotation>
  quality?: Maybe<Scalars['Float']>
  output?: Maybe<ImageOutput>
}

export type InputPoint = {
  x: Scalars['Float']
  y: Scalars['Float']
}

export type InstagramPostBlock = {
  __typename?: 'InstagramPostBlock'
  postID: Scalars['String']
}

export type InstagramPostBlockInput = {
  postID: Scalars['String']
}

export type Invoice = {
  __typename?: 'Invoice'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  mail: Scalars['String']
  user?: Maybe<User>
  description?: Maybe<Scalars['String']>
  paidAt?: Maybe<Scalars['DateTime']>
  items: Array<InvoiceItem>
  total: Scalars['Int']
}

export type InvoiceConnection = {
  __typename?: 'InvoiceConnection'
  nodes: Array<Invoice>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InvoiceFilter = {
  mail?: Maybe<Scalars['String']>
}

export type InvoiceInput = {
  mail: Scalars['String']
  userID?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['String']>
  paidAt?: Maybe<Scalars['DateTime']>
  items: Array<InvoiceItemInput>
}

export type InvoiceItem = {
  __typename?: 'InvoiceItem'
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  description?: Maybe<Scalars['String']>
  quantity: Scalars['Int']
  amount: Scalars['Int']
  total: Scalars['Int']
}

export type InvoiceItemInput = {
  name: Scalars['String']
  description?: Maybe<Scalars['String']>
  quantity: Scalars['Int']
  amount: Scalars['Int']
}

export enum InvoiceSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PaidAt = 'PAID_AT'
}

export type LinkPageBreakBlock = {
  __typename?: 'LinkPageBreakBlock'
  text?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
  linkURL?: Maybe<Scalars['String']>
  linkText?: Maybe<Scalars['String']>
  linkTarget?: Maybe<Scalars['String']>
  hideButton: Scalars['Boolean']
  styleOption?: Maybe<Scalars['String']>
  layoutOption?: Maybe<Scalars['String']>
  templateOption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
}

export type LinkPageBreakBlockInput = {
  text?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
  linkURL?: Maybe<Scalars['String']>
  linkText?: Maybe<Scalars['String']>
  linkTarget?: Maybe<Scalars['String']>
  hideButton: Scalars['Boolean']
  styleOption?: Maybe<Scalars['String']>
  templateOption?: Maybe<Scalars['String']>
  layoutOption?: Maybe<Scalars['String']>
  imageID?: Maybe<Scalars['ID']>
}

export type ListicleBlock = {
  __typename?: 'ListicleBlock'
  items: Array<ListicleItem>
}

export type ListicleBlockInput = {
  items?: Maybe<Array<Maybe<ListicleItemInput>>>
}

export type ListicleItem = {
  __typename?: 'ListicleItem'
  title: Scalars['String']
  image?: Maybe<Image>
  richText: Scalars['RichText']
}

export type ListicleItemInput = {
  title: Scalars['String']
  imageID?: Maybe<Scalars['ID']>
  richText: Scalars['RichText']
}

export type MemberPlan = {
  __typename?: 'MemberPlan'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['String']
  image?: Maybe<Image>
  description?: Maybe<Scalars['RichText']>
  active: Scalars['Boolean']
  amountPerMonthMin: Scalars['Int']
  availablePaymentMethods: Array<AvailablePaymentMethod>
}

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection'
  nodes: Array<MemberPlan>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberPlanFilter = {
  name?: Maybe<Scalars['String']>
  active?: Maybe<Scalars['Boolean']>
}

export type MemberPlanInput = {
  name: Scalars['String']
  slug: Scalars['String']
  imageID?: Maybe<Scalars['ID']>
  description?: Maybe<Scalars['RichText']>
  active: Scalars['Boolean']
  amountPerMonthMin: Scalars['Int']
  availablePaymentMethods: Array<AvailablePaymentMethodInput>
}

export enum MemberPlanSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type Mutation = {
  __typename?: 'Mutation'
  updatePeerProfile: PeerProfile
  createPeer: Peer
  updatePeer: Peer
  deletePeer?: Maybe<Scalars['ID']>
  createSession: SessionWithToken
  createSessionWithJWT: SessionWithToken
  createSessionWithOAuth2Code: SessionWithToken
  revokeSession: Scalars['Boolean']
  revokeActiveSession: Scalars['Boolean']
  sessions: Array<Session>
  sendJWTLogin: Scalars['String']
  createToken: CreatedToken
  deleteToken?: Maybe<Scalars['String']>
  createUser?: Maybe<User>
  updateUser?: Maybe<User>
  updateUserSubscription?: Maybe<UserSubscription>
  resetUserPassword?: Maybe<User>
  deleteUser?: Maybe<Scalars['String']>
  deleteUserSubscription?: Maybe<Scalars['String']>
  createUserRole?: Maybe<UserRole>
  updateUserRole?: Maybe<UserRole>
  deleteUserRole?: Maybe<Scalars['String']>
  createNavigation?: Maybe<Navigation>
  updateNavigation?: Maybe<Navigation>
  deleteNavigation?: Maybe<Scalars['ID']>
  createAuthor?: Maybe<Author>
  updateAuthor?: Maybe<Author>
  deleteAuthor?: Maybe<Scalars['ID']>
  uploadImage?: Maybe<Image>
  updateImage?: Maybe<Image>
  deleteImage?: Maybe<Scalars['Boolean']>
  createArticle: Article
  updateArticle?: Maybe<Article>
  deleteArticle?: Maybe<Scalars['Boolean']>
  publishArticle?: Maybe<Article>
  unpublishArticle?: Maybe<Article>
  createPage: Page
  updatePage?: Maybe<Page>
  deletePage?: Maybe<Scalars['Boolean']>
  publishPage?: Maybe<Page>
  unpublishPage?: Maybe<Page>
  createMemberPlan?: Maybe<MemberPlan>
  updateMemberPlan?: Maybe<MemberPlan>
  deleteMemberPlan?: Maybe<Scalars['ID']>
  createPaymentMethod?: Maybe<PaymentMethod>
  updatePaymentMethod?: Maybe<PaymentMethod>
  deletePaymentMethod?: Maybe<Scalars['ID']>
  createInvoice?: Maybe<Invoice>
  createPaymentFromInvoice?: Maybe<Payment>
  updateInvoice?: Maybe<Invoice>
  deleteInvoice?: Maybe<Scalars['ID']>
}

export type MutationUpdatePeerProfileArgs = {
  input: PeerProfileInput
}

export type MutationCreatePeerArgs = {
  input: CreatePeerInput
}

export type MutationUpdatePeerArgs = {
  id: Scalars['ID']
  input: UpdatePeerInput
}

export type MutationDeletePeerArgs = {
  id: Scalars['ID']
}

export type MutationCreateSessionArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String']
}

export type MutationCreateSessionWithOAuth2CodeArgs = {
  name: Scalars['String']
  code: Scalars['String']
  redirectUri: Scalars['String']
}

export type MutationRevokeSessionArgs = {
  id: Scalars['ID']
}

export type MutationSendJwtLoginArgs = {
  url: Scalars['String']
  email: Scalars['String']
}

export type MutationCreateTokenArgs = {
  input: TokenInput
}

export type MutationDeleteTokenArgs = {
  id: Scalars['ID']
}

export type MutationCreateUserArgs = {
  input: UserInput
  password: Scalars['String']
}

export type MutationUpdateUserArgs = {
  id: Scalars['ID']
  input: UserInput
}

export type MutationUpdateUserSubscriptionArgs = {
  userID: Scalars['ID']
  input: UserSubscriptionInput
}

export type MutationResetUserPasswordArgs = {
  id: Scalars['ID']
  password: Scalars['String']
  sendMail?: Maybe<Scalars['Boolean']>
}

export type MutationDeleteUserArgs = {
  id: Scalars['ID']
}

export type MutationDeleteUserSubscriptionArgs = {
  userID: Scalars['ID']
}

export type MutationCreateUserRoleArgs = {
  input: UserRoleInput
}

export type MutationUpdateUserRoleArgs = {
  id: Scalars['ID']
  input: UserRoleInput
}

export type MutationDeleteUserRoleArgs = {
  id: Scalars['ID']
}

export type MutationCreateNavigationArgs = {
  input: NavigationInput
}

export type MutationUpdateNavigationArgs = {
  id: Scalars['ID']
  input: NavigationInput
}

export type MutationDeleteNavigationArgs = {
  id: Scalars['ID']
}

export type MutationCreateAuthorArgs = {
  input: AuthorInput
}

export type MutationUpdateAuthorArgs = {
  id: Scalars['ID']
  input: AuthorInput
}

export type MutationDeleteAuthorArgs = {
  id: Scalars['ID']
}

export type MutationUploadImageArgs = {
  input: UploadImageInput
}

export type MutationUpdateImageArgs = {
  id: Scalars['ID']
  input: UpdateImageInput
}

export type MutationDeleteImageArgs = {
  id: Scalars['ID']
}

export type MutationCreateArticleArgs = {
  input: ArticleInput
}

export type MutationUpdateArticleArgs = {
  id: Scalars['ID']
  input: ArticleInput
}

export type MutationDeleteArticleArgs = {
  id: Scalars['ID']
}

export type MutationPublishArticleArgs = {
  id: Scalars['ID']
  publishAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
}

export type MutationUnpublishArticleArgs = {
  id: Scalars['ID']
}

export type MutationCreatePageArgs = {
  input: PageInput
}

export type MutationUpdatePageArgs = {
  id: Scalars['ID']
  input: PageInput
}

export type MutationDeletePageArgs = {
  id: Scalars['ID']
}

export type MutationPublishPageArgs = {
  id: Scalars['ID']
  publishAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
}

export type MutationUnpublishPageArgs = {
  id: Scalars['ID']
}

export type MutationCreateMemberPlanArgs = {
  input: MemberPlanInput
}

export type MutationUpdateMemberPlanArgs = {
  id: Scalars['ID']
  input: MemberPlanInput
}

export type MutationDeleteMemberPlanArgs = {
  id: Scalars['ID']
}

export type MutationCreatePaymentMethodArgs = {
  input: PaymentMethodInput
}

export type MutationUpdatePaymentMethodArgs = {
  id: Scalars['ID']
  input: PaymentMethodInput
}

export type MutationDeletePaymentMethodArgs = {
  id: Scalars['ID']
}

export type MutationCreateInvoiceArgs = {
  input: InvoiceInput
}

export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput
}

export type MutationUpdateInvoiceArgs = {
  id: Scalars['ID']
  input: InvoiceInput
}

export type MutationDeleteInvoiceArgs = {
  id: Scalars['ID']
}

export type Navigation = {
  __typename?: 'Navigation'
  id: Scalars['ID']
  key: Scalars['String']
  name: Scalars['String']
  links: Array<NavigationLink>
}

export type NavigationInput = {
  key: Scalars['String']
  name: Scalars['String']
  links: Array<NavigationLinkInput>
}

export type NavigationLink = PageNavigationLink | ArticleNavigationLink | ExternalNavigationLink

export type NavigationLinkInput = {
  page?: Maybe<PageNavigationLinkInput>
  article?: Maybe<ArticleNavigationLinkInput>
  external?: Maybe<ExternalNavigationLinkInput>
}

export type Page = {
  __typename?: 'Page'
  id: Scalars['ID']
  shared: Scalars['Boolean']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  draft?: Maybe<PageRevision>
  published?: Maybe<PageRevision>
  pending?: Maybe<PageRevision>
  latest: PageRevision
}

export type PageConnection = {
  __typename?: 'PageConnection'
  nodes: Array<Page>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PageFilter = {
  title?: Maybe<Scalars['String']>
  draft?: Maybe<Scalars['Boolean']>
  published?: Maybe<Scalars['Boolean']>
  pending?: Maybe<Scalars['Boolean']>
  tags?: Maybe<Array<Scalars['String']>>
}

export type PageInfo = {
  __typename?: 'PageInfo'
  startCursor?: Maybe<Scalars['String']>
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
}

export type PageInput = {
  slug: Scalars['Slug']
  title: Scalars['String']
  description?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  properties: Array<PropertiesInput>
  imageID?: Maybe<Scalars['ID']>
  socialMediaTitle?: Maybe<Scalars['String']>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImageID?: Maybe<Scalars['ID']>
  blocks: Array<BlockInput>
}

export type PageNavigationLink = BaseNavigationLink & {
  __typename?: 'PageNavigationLink'
  label: Scalars['String']
  page?: Maybe<Page>
}

export type PageNavigationLinkInput = {
  label: Scalars['String']
  pageID: Scalars['ID']
}

export type PageRevision = {
  __typename?: 'PageRevision'
  revision: Scalars['Int']
  createdAt: Scalars['DateTime']
  publishAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  slug: Scalars['Slug']
  title: Scalars['String']
  description?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  properties: Array<Properties>
  image?: Maybe<Image>
  socialMediaTitle?: Maybe<Scalars['String']>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImage?: Maybe<Image>
  blocks: Array<Block>
}

export enum PageSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT',
  PublishAt = 'PUBLISH_AT',
  PublishedAt = 'PUBLISHED_AT',
  UpdatedAt = 'UPDATED_AT'
}

export type PageTeaser = {
  __typename?: 'PageTeaser'
  style: TeaserStyle
  image?: Maybe<Image>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  page?: Maybe<Page>
}

export type PageTeaserInput = {
  style: TeaserStyle
  imageID?: Maybe<Scalars['ID']>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  pageID: Scalars['ID']
}

export type Payment = {
  __typename?: 'Payment'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  intentID?: Maybe<Scalars['String']>
  intentSecret?: Maybe<Scalars['String']>
  state: PaymentState
  invoice: Invoice
  intentData?: Maybe<Scalars['String']>
  paymentMethod: PaymentMethod
  paymentData?: Maybe<Scalars['String']>
}

export type PaymentConnection = {
  __typename?: 'PaymentConnection'
  nodes: Array<Payment>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PaymentFilter = {
  intentID?: Maybe<Scalars['String']>
}

export type PaymentFromInvoiceInput = {
  invoiceID: Scalars['String']
  paymentMethodID: Scalars['String']
  successURL?: Maybe<Scalars['String']>
  failureURL?: Maybe<Scalars['String']>
}

export type PaymentMethod = {
  __typename?: 'PaymentMethod'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  description: Scalars['String']
  paymentProvider: PaymentProvider
  active: Scalars['Boolean']
}

export type PaymentMethodInput = {
  name: Scalars['String']
  description: Scalars['String']
  paymentProviderID: Scalars['String']
  active: Scalars['Boolean']
}

export enum PaymentPeriodicity {
  Monthly = 'MONTHLY',
  Quarterly = 'QUARTERLY',
  Biannual = 'BIANNUAL',
  Yearly = 'YEARLY'
}

export type PaymentProvider = {
  __typename?: 'PaymentProvider'
  id: Scalars['ID']
  name: Scalars['String']
}

export enum PaymentSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export enum PaymentState {
  Created = 'Created',
  Submitted = 'Submitted',
  RequiresUserAction = 'RequiresUserAction',
  Processing = 'Processing',
  Payed = 'Payed',
  Canceled = 'Canceled',
  Declined = 'Declined'
}

export type Peer = {
  __typename?: 'Peer'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['String']
  hostURL: Scalars['String']
  profile?: Maybe<PeerProfile>
}

export type PeerArticle = {
  __typename?: 'PeerArticle'
  peer: Peer
  article: Article
}

export type PeerArticleConnection = {
  __typename?: 'PeerArticleConnection'
  nodes: Array<PeerArticle>
  pageInfo: UnidirectionalPageInfo
  totalCount: Scalars['Int']
}

export type PeerArticleTeaser = {
  __typename?: 'PeerArticleTeaser'
  style: TeaserStyle
  image?: Maybe<Image>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  peer?: Maybe<Peer>
  articleID: Scalars['ID']
  article?: Maybe<Article>
}

export type PeerArticleTeaserInput = {
  style: TeaserStyle
  imageID?: Maybe<Scalars['ID']>
  preTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  peerID: Scalars['ID']
  articleID: Scalars['ID']
}

export type PeerProfile = {
  __typename?: 'PeerProfile'
  name: Scalars['String']
  logo?: Maybe<Image>
  themeColor: Scalars['Color']
  hostURL: Scalars['String']
  websiteURL: Scalars['String']
  callToActionText: Scalars['RichText']
  callToActionURL: Scalars['String']
}

export type PeerProfileInput = {
  name: Scalars['String']
  logoID?: Maybe<Scalars['ID']>
  themeColor: Scalars['Color']
  callToActionText: Scalars['RichText']
  callToActionURL: Scalars['String']
}

export type Permission = {
  __typename?: 'Permission'
  id: Scalars['String']
  description: Scalars['String']
  deprecated: Scalars['Boolean']
}

export type Point = {
  __typename?: 'Point'
  x: Scalars['Float']
  y: Scalars['Float']
}

export type Properties = {
  __typename?: 'Properties'
  key: Scalars['String']
  value: Scalars['String']
  public: Scalars['Boolean']
}

export type PropertiesInput = {
  key: Scalars['String']
  value: Scalars['String']
  public: Scalars['Boolean']
}

export type Query = {
  __typename?: 'Query'
  peerProfile: PeerProfile
  peers?: Maybe<Array<Peer>>
  peer?: Maybe<Peer>
  me?: Maybe<User>
  sessions: Array<Session>
  authProviders: Array<AuthProvider>
  user?: Maybe<User>
  users: UserConnection
  userRole?: Maybe<UserRole>
  userRoles: UserRoleConnection
  permissions?: Maybe<Array<Permission>>
  tokens: Array<Token>
  navigation?: Maybe<Navigation>
  navigations: Array<Navigation>
  author?: Maybe<Author>
  authors: AuthorConnection
  image?: Maybe<Image>
  images: ImageConnection
  article?: Maybe<Article>
  articles: ArticleConnection
  peerArticle?: Maybe<Article>
  peerArticles: PeerArticleConnection
  page?: Maybe<Page>
  pages: PageConnection
  memberPlan?: Maybe<MemberPlan>
  memberPlans: MemberPlanConnection
  paymentMethod?: Maybe<PaymentMethod>
  paymentMethods: Array<PaymentMethod>
  paymentProviders: Array<PaymentProvider>
  invoice?: Maybe<Invoice>
  invoices: InvoiceConnection
  payment?: Maybe<Payment>
  payments: PaymentConnection
}

export type QueryPeerArgs = {
  id: Scalars['ID']
}

export type QueryAuthProvidersArgs = {
  redirectUri?: Maybe<Scalars['String']>
}

export type QueryUserArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryUsersArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<UserFilter>
  sort?: Maybe<UserSort>
  order?: Maybe<SortOrder>
}

export type QueryUserRoleArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryUserRolesArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<UserRoleFilter>
  sort?: Maybe<UserRoleSort>
  order?: Maybe<SortOrder>
}

export type QueryNavigationArgs = {
  id?: Maybe<Scalars['ID']>
  key?: Maybe<Scalars['ID']>
}

export type QueryAuthorArgs = {
  id?: Maybe<Scalars['ID']>
  slug?: Maybe<Scalars['Slug']>
}

export type QueryAuthorsArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<AuthorFilter>
  sort?: Maybe<AuthorSort>
  order?: Maybe<SortOrder>
}

export type QueryImageArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryImagesArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<ImageFilter>
  sort?: Maybe<ImageSort>
  order?: Maybe<SortOrder>
}

export type QueryArticleArgs = {
  id: Scalars['ID']
}

export type QueryArticlesArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<ArticleFilter>
  sort?: Maybe<ArticleSort>
  order?: Maybe<SortOrder>
}

export type QueryPeerArticleArgs = {
  peerID: Scalars['ID']
  id: Scalars['ID']
}

export type QueryPeerArticlesArgs = {
  after?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  filter?: Maybe<ArticleFilter>
  sort?: Maybe<ArticleSort>
  order?: Maybe<SortOrder>
}

export type QueryPageArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryPagesArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<PageFilter>
  sort?: Maybe<PageSort>
  order?: Maybe<SortOrder>
}

export type QueryMemberPlanArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryMemberPlansArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<MemberPlanFilter>
  sort?: Maybe<MemberPlanSort>
  order?: Maybe<SortOrder>
}

export type QueryPaymentMethodArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryInvoiceArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryInvoicesArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<InvoiceFilter>
  sort?: Maybe<InvoiceSort>
  order?: Maybe<SortOrder>
}

export type QueryPaymentArgs = {
  id?: Maybe<Scalars['ID']>
}

export type QueryPaymentsArgs = {
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  filter?: Maybe<PaymentFilter>
  sort?: Maybe<PaymentSort>
  order?: Maybe<SortOrder>
}

export type QuoteBlock = {
  __typename?: 'QuoteBlock'
  quote?: Maybe<Scalars['String']>
  author?: Maybe<Scalars['String']>
}

export type QuoteBlockInput = {
  quote?: Maybe<Scalars['String']>
  author?: Maybe<Scalars['String']>
}

export type RichTextBlock = {
  __typename?: 'RichTextBlock'
  richText: Scalars['RichText']
}

export type RichTextBlockInput = {
  richText: Scalars['RichText']
}

export type Session = {
  __typename?: 'Session'
  id: Scalars['ID']
  user: User
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
}

export type SessionWithToken = {
  __typename?: 'SessionWithToken'
  id: Scalars['ID']
  user: User
  token: Scalars['String']
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
}

export enum SortOrder {
  Ascending = 'ASCENDING',
  Descending = 'DESCENDING'
}

export type SoundCloudTrackBlock = {
  __typename?: 'SoundCloudTrackBlock'
  trackID: Scalars['String']
}

export type SoundCloudTrackBlockInput = {
  trackID: Scalars['String']
}

export type Teaser = ArticleTeaser | PeerArticleTeaser | PageTeaser

export type TeaserGridBlock = {
  __typename?: 'TeaserGridBlock'
  teasers: Array<Maybe<Teaser>>
  numColumns: Scalars['Int']
}

export type TeaserGridBlockInput = {
  teasers: Array<Maybe<TeaserInput>>
  numColumns: Scalars['Int']
}

export type TeaserInput = {
  article?: Maybe<ArticleTeaserInput>
  peerArticle?: Maybe<PeerArticleTeaserInput>
  page?: Maybe<PageTeaserInput>
}

export enum TeaserStyle {
  Default = 'DEFAULT',
  Light = 'LIGHT',
  Text = 'TEXT'
}

export type TitleBlock = {
  __typename?: 'TitleBlock'
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
}

export type TitleBlockInput = {
  title?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
}

export type Token = {
  __typename?: 'Token'
  id: Scalars['ID']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
}

export type TokenInput = {
  name: Scalars['String']
}

export type TwitterTweetBlock = {
  __typename?: 'TwitterTweetBlock'
  userID: Scalars['String']
  tweetID: Scalars['String']
}

export type TwitterTweetBlockInput = {
  userID: Scalars['String']
  tweetID: Scalars['String']
}

export type UnidirectionalPageInfo = {
  __typename?: 'UnidirectionalPageInfo'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
}

export type UpdateImageInput = {
  filename?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  tags?: Maybe<Array<Scalars['String']>>
  source?: Maybe<Scalars['String']>
  author?: Maybe<Scalars['String']>
  license?: Maybe<Scalars['String']>
  focalPoint?: Maybe<InputPoint>
}

export type UpdatePeerInput = {
  name: Scalars['String']
  slug: Scalars['String']
  hostURL: Scalars['String']
  token?: Maybe<Scalars['String']>
}

export type UploadImageInput = {
  file: Scalars['Upload']
  filename?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  tags?: Maybe<Array<Scalars['String']>>
  source?: Maybe<Scalars['String']>
  author?: Maybe<Scalars['String']>
  license?: Maybe<Scalars['String']>
  focalPoint?: Maybe<InputPoint>
}

export type User = {
  __typename?: 'User'
  id: Scalars['String']
  createdAt: Scalars['DateTime']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  email: Scalars['String']
  preferredName?: Maybe<Scalars['String']>
  address?: Maybe<UserAddress>
  active: Scalars['Boolean']
  lastLogin?: Maybe<Scalars['DateTime']>
  properties: Array<Properties>
  roles: Array<UserRole>
  subscription?: Maybe<UserSubscription>
}

export type UserAddress = {
  __typename?: 'UserAddress'
  street: Scalars['String']
  zipCode: Scalars['String']
  city: Scalars['String']
  country: Scalars['String']
}

export type UserAddressInput = {
  street: Scalars['String']
  zipCode: Scalars['String']
  city: Scalars['String']
  country: Scalars['String']
}

export type UserConnection = {
  __typename?: 'UserConnection'
  nodes: Array<User>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UserFilter = {
  name?: Maybe<Scalars['String']>
  subscription?: Maybe<UserSubscriptionFilter>
}

export type UserInput = {
  name: Scalars['String']
  email: Scalars['String']
  preferredName?: Maybe<Scalars['String']>
  address?: Maybe<UserAddressInput>
  active: Scalars['Boolean']
  properties: Array<PropertiesInput>
  roleIDs?: Maybe<Array<Scalars['String']>>
}

export type UserRole = {
  __typename?: 'UserRole'
  id: Scalars['String']
  name: Scalars['String']
  description?: Maybe<Scalars['String']>
  systemRole: Scalars['Boolean']
  permissions: Array<Permission>
}

export type UserRoleConnection = {
  __typename?: 'UserRoleConnection'
  nodes: Array<UserRole>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UserRoleFilter = {
  name?: Maybe<Scalars['String']>
}

export type UserRoleInput = {
  name: Scalars['String']
  description: Scalars['String']
  permissionIDs?: Maybe<Array<Scalars['String']>>
}

export enum UserRoleSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export enum UserSort {
  CreatedAt = 'CREATED_AT',
  ModifiedAt = 'MODIFIED_AT'
}

export type UserSubscription = {
  __typename?: 'UserSubscription'
  memberPlan: MemberPlan
  paymentPeriodicity: PaymentPeriodicity
  monthlyAmount: Scalars['Int']
  autoRenew: Scalars['Boolean']
  startsAt: Scalars['DateTime']
  paidUntil?: Maybe<Scalars['DateTime']>
  paymentMethod: PaymentMethod
  deactivatedAt?: Maybe<Scalars['DateTime']>
}

export type UserSubscriptionFilter = {
  startsAt?: Maybe<DateFilter>
  paidUntil?: Maybe<DateFilter>
  deactivatedAt?: Maybe<DateFilter>
  autoRenew?: Maybe<Scalars['Boolean']>
}

export type UserSubscriptionInput = {
  memberPlanID: Scalars['String']
  paymentPeriodicity: PaymentPeriodicity
  monthlyAmount: Scalars['Int']
  autoRenew: Scalars['Boolean']
  startsAt: Scalars['DateTime']
  paidUntil?: Maybe<Scalars['DateTime']>
  paymentMethodID: Scalars['String']
  deactivatedAt?: Maybe<Scalars['DateTime']>
}

export type VimeoVideoBlock = {
  __typename?: 'VimeoVideoBlock'
  videoID: Scalars['String']
}

export type VimeoVideoBlockInput = {
  videoID: Scalars['String']
}

export type YouTubeVideoBlock = {
  __typename?: 'YouTubeVideoBlock'
  videoID: Scalars['String']
}

export type YouTubeVideoBlockInput = {
  videoID: Scalars['String']
}

export type MutationArticleFragment = {__typename?: 'Article'} & Pick<Article, 'id' | 'shared'> & {
    draft?: Maybe<
      {__typename?: 'ArticleRevision'} & Pick<
        ArticleRevision,
        'publishedAt' | 'updatedAt' | 'revision'
      >
    >
    pending?: Maybe<
      {__typename?: 'ArticleRevision'} & Pick<ArticleRevision, 'publishAt' | 'revision'>
    >
    published?: Maybe<
      {__typename?: 'ArticleRevision'} & Pick<
        ArticleRevision,
        'publishedAt' | 'updatedAt' | 'revision'
      >
    >
    latest: {__typename?: 'ArticleRevision'} & Pick<
      ArticleRevision,
      | 'publishedAt'
      | 'updatedAt'
      | 'revision'
      | 'title'
      | 'preTitle'
      | 'lead'
      | 'slug'
      | 'breaking'
      | 'tags'
    > & {
        properties: Array<
          {__typename?: 'Properties'} & Pick<Properties, 'key' | 'value' | 'public'>
        >
      }
  }

export type ArticleRefFragment = {__typename?: 'Article'} & Pick<
  Article,
  'id' | 'createdAt' | 'modifiedAt'
> & {
    draft?: Maybe<{__typename?: 'ArticleRevision'} & Pick<ArticleRevision, 'revision'>>
    pending?: Maybe<{__typename?: 'ArticleRevision'} & Pick<ArticleRevision, 'revision'>>
    published?: Maybe<
      {__typename?: 'ArticleRevision'} & Pick<
        ArticleRevision,
        'publishedAt' | 'updatedAt' | 'revision'
      >
    >
    latest: {__typename?: 'ArticleRevision'} & Pick<
      ArticleRevision,
      'publishedAt' | 'updatedAt' | 'revision' | 'preTitle' | 'title' | 'lead'
    > & {image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>}
  }

export type ArticleListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
}>

export type ArticleListQuery = {__typename?: 'Query'} & {
  articles: {__typename?: 'ArticleConnection'} & Pick<ArticleConnection, 'totalCount'> & {
      nodes: Array<{__typename?: 'Article'} & ArticleRefFragment>
      pageInfo: {__typename?: 'PageInfo'} & Pick<
        PageInfo,
        'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
      >
    }
}

export type PeerArticleListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
}>

export type PeerArticleListQuery = {__typename?: 'Query'} & {
  peerArticles: {__typename?: 'PeerArticleConnection'} & Pick<
    PeerArticleConnection,
    'totalCount'
  > & {
      nodes: Array<
        {__typename?: 'PeerArticle'} & {
          peer: {__typename?: 'Peer'} & PeerWithProfileFragment
          article: {__typename?: 'Article'} & ArticleRefFragment
        }
      >
      pageInfo: {__typename?: 'UnidirectionalPageInfo'} & Pick<
        UnidirectionalPageInfo,
        'endCursor' | 'hasNextPage'
      >
    }
}

export type CreateArticleMutationVariables = Exact<{
  input: ArticleInput
}>

export type CreateArticleMutation = {__typename?: 'Mutation'} & {
  createArticle: {__typename?: 'Article'} & MutationArticleFragment
}

export type UpdateArticleMutationVariables = Exact<{
  id: Scalars['ID']
  input: ArticleInput
}>

export type UpdateArticleMutation = {__typename?: 'Mutation'} & {
  updateArticle?: Maybe<{__typename?: 'Article'} & MutationArticleFragment>
}

export type PublishArticleMutationVariables = Exact<{
  id: Scalars['ID']
  publishAt: Scalars['DateTime']
  publishedAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
}>

export type PublishArticleMutation = {__typename?: 'Mutation'} & {
  publishArticle?: Maybe<{__typename?: 'Article'} & MutationArticleFragment>
}

export type UnpublishArticleMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type UnpublishArticleMutation = {__typename?: 'Mutation'} & {
  unpublishArticle?: Maybe<{__typename?: 'Article'} & MutationArticleFragment>
}

export type DeleteArticleMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteArticleMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deleteArticle'>

export type ArticleQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ArticleQuery = {__typename?: 'Query'} & {
  article?: Maybe<
    {__typename?: 'Article'} & Pick<Article, 'id' | 'shared'> & {
        pending?: Maybe<{__typename?: 'ArticleRevision'} & Pick<ArticleRevision, 'publishAt'>>
        published?: Maybe<
          {__typename?: 'ArticleRevision'} & Pick<ArticleRevision, 'publishedAt' | 'updatedAt'>
        >
        latest: {__typename?: 'ArticleRevision'} & Pick<
          ArticleRevision,
          | 'publishedAt'
          | 'updatedAt'
          | 'revision'
          | 'slug'
          | 'preTitle'
          | 'title'
          | 'lead'
          | 'tags'
          | 'hideAuthor'
          | 'breaking'
          | 'socialMediaTitle'
          | 'socialMediaDescription'
        > & {
            image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
            properties: Array<
              {__typename?: 'Properties'} & Pick<Properties, 'key' | 'value' | 'public'>
            >
            authors: Array<Maybe<{__typename?: 'Author'} & AuthorRefFragment>>
            socialMediaAuthors: Array<{__typename?: 'Author'} & AuthorRefFragment>
            socialMediaImage?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
            blocks: Array<
              | ({__typename?: 'RichTextBlock'} & FullBlock_RichTextBlock_Fragment)
              | ({__typename?: 'ImageBlock'} & FullBlock_ImageBlock_Fragment)
              | ({__typename?: 'ImageGalleryBlock'} & FullBlock_ImageGalleryBlock_Fragment)
              | ({__typename?: 'ListicleBlock'} & FullBlock_ListicleBlock_Fragment)
              | ({__typename?: 'FacebookPostBlock'} & FullBlock_FacebookPostBlock_Fragment)
              | ({__typename?: 'FacebookVideoBlock'} & FullBlock_FacebookVideoBlock_Fragment)
              | ({__typename?: 'InstagramPostBlock'} & FullBlock_InstagramPostBlock_Fragment)
              | ({__typename?: 'TwitterTweetBlock'} & FullBlock_TwitterTweetBlock_Fragment)
              | ({__typename?: 'VimeoVideoBlock'} & FullBlock_VimeoVideoBlock_Fragment)
              | ({__typename?: 'YouTubeVideoBlock'} & FullBlock_YouTubeVideoBlock_Fragment)
              | ({__typename?: 'SoundCloudTrackBlock'} & FullBlock_SoundCloudTrackBlock_Fragment)
              | ({__typename?: 'EmbedBlock'} & FullBlock_EmbedBlock_Fragment)
              | ({__typename?: 'LinkPageBreakBlock'} & FullBlock_LinkPageBreakBlock_Fragment)
              | ({__typename?: 'TitleBlock'} & FullBlock_TitleBlock_Fragment)
              | ({__typename?: 'QuoteBlock'} & FullBlock_QuoteBlock_Fragment)
              | ({__typename?: 'TeaserGridBlock'} & FullBlock_TeaserGridBlock_Fragment)
            >
          }
      }
  >
}

export type AuthorRefFragment = {__typename?: 'Author'} & Pick<Author, 'id' | 'name'> & {
    image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
  }

export type FullAuthorFragment = {__typename?: 'Author'} & Pick<Author, 'slug' | 'bio'> & {
    links?: Maybe<Array<{__typename?: 'AuthorLink'} & Pick<AuthorLink, 'title' | 'url'>>>
  } & AuthorRefFragment

export type AuthorListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
}>

export type AuthorListQuery = {__typename?: 'Query'} & {
  authors: {__typename?: 'AuthorConnection'} & Pick<AuthorConnection, 'totalCount'> & {
      nodes: Array<{__typename?: 'Author'} & FullAuthorFragment>
      pageInfo: {__typename?: 'PageInfo'} & Pick<
        PageInfo,
        'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
      >
    }
}

export type AuthorQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AuthorQuery = {__typename?: 'Query'} & {
  author?: Maybe<{__typename?: 'Author'} & FullAuthorFragment>
}

export type CreateAuthorMutationVariables = Exact<{
  input: AuthorInput
}>

export type CreateAuthorMutation = {__typename?: 'Mutation'} & {
  createAuthor?: Maybe<{__typename?: 'Author'} & FullAuthorFragment>
}

export type UpdateAuthorMutationVariables = Exact<{
  id: Scalars['ID']
  input: AuthorInput
}>

export type UpdateAuthorMutation = {__typename?: 'Mutation'} & {
  updateAuthor?: Maybe<{__typename?: 'Author'} & FullAuthorFragment>
}

export type DeleteAuthorMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteAuthorMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deleteAuthor'>

type FullTeaser_ArticleTeaser_Fragment = {__typename?: 'ArticleTeaser'} & Pick<
  ArticleTeaser,
  'style' | 'preTitle' | 'title' | 'lead'
> & {
    image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
    article?: Maybe<{__typename?: 'Article'} & ArticleRefFragment>
  }

type FullTeaser_PeerArticleTeaser_Fragment = {__typename?: 'PeerArticleTeaser'} & Pick<
  PeerArticleTeaser,
  'style' | 'preTitle' | 'title' | 'lead' | 'articleID'
> & {
    image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
    peer?: Maybe<{__typename?: 'Peer'} & PeerWithProfileFragment>
    article?: Maybe<{__typename?: 'Article'} & ArticleRefFragment>
  }

type FullTeaser_PageTeaser_Fragment = {__typename?: 'PageTeaser'} & Pick<
  PageTeaser,
  'style' | 'preTitle' | 'title' | 'lead'
> & {
    image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
    page?: Maybe<{__typename?: 'Page'} & PageRefFragment>
  }

export type FullTeaserFragment =
  | FullTeaser_ArticleTeaser_Fragment
  | FullTeaser_PeerArticleTeaser_Fragment
  | FullTeaser_PageTeaser_Fragment

type FullBlock_RichTextBlock_Fragment = {__typename: 'RichTextBlock'} & Pick<
  RichTextBlock,
  'richText'
>

type FullBlock_ImageBlock_Fragment = {__typename: 'ImageBlock'} & Pick<ImageBlock, 'caption'> & {
    image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
  }

type FullBlock_ImageGalleryBlock_Fragment = {__typename: 'ImageGalleryBlock'} & {
  images: Array<
    {__typename?: 'GalleryImageEdge'} & Pick<GalleryImageEdge, 'caption'> & {
        image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
      }
  >
}

type FullBlock_ListicleBlock_Fragment = {__typename: 'ListicleBlock'} & {
  items: Array<
    {__typename?: 'ListicleItem'} & Pick<ListicleItem, 'title' | 'richText'> & {
        image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
      }
  >
}

type FullBlock_FacebookPostBlock_Fragment = {__typename: 'FacebookPostBlock'} & Pick<
  FacebookPostBlock,
  'userID' | 'postID'
>

type FullBlock_FacebookVideoBlock_Fragment = {__typename: 'FacebookVideoBlock'} & Pick<
  FacebookVideoBlock,
  'userID' | 'videoID'
>

type FullBlock_InstagramPostBlock_Fragment = {__typename: 'InstagramPostBlock'} & Pick<
  InstagramPostBlock,
  'postID'
>

type FullBlock_TwitterTweetBlock_Fragment = {__typename: 'TwitterTweetBlock'} & Pick<
  TwitterTweetBlock,
  'userID' | 'tweetID'
>

type FullBlock_VimeoVideoBlock_Fragment = {__typename: 'VimeoVideoBlock'} & Pick<
  VimeoVideoBlock,
  'videoID'
>

type FullBlock_YouTubeVideoBlock_Fragment = {__typename: 'YouTubeVideoBlock'} & Pick<
  YouTubeVideoBlock,
  'videoID'
>

type FullBlock_SoundCloudTrackBlock_Fragment = {__typename: 'SoundCloudTrackBlock'} & Pick<
  SoundCloudTrackBlock,
  'trackID'
>

type FullBlock_EmbedBlock_Fragment = {__typename: 'EmbedBlock'} & Pick<
  EmbedBlock,
  'url' | 'title' | 'width' | 'height' | 'styleCustom'
>

type FullBlock_LinkPageBreakBlock_Fragment = {__typename: 'LinkPageBreakBlock'} & Pick<
  LinkPageBreakBlock,
  'text' | 'linkText' | 'linkURL'
>

type FullBlock_TitleBlock_Fragment = {__typename: 'TitleBlock'} & Pick<TitleBlock, 'title' | 'lead'>

type FullBlock_QuoteBlock_Fragment = {__typename: 'QuoteBlock'} & Pick<
  QuoteBlock,
  'quote' | 'author'
>

type FullBlock_TeaserGridBlock_Fragment = {__typename: 'TeaserGridBlock'} & Pick<
  TeaserGridBlock,
  'numColumns'
> & {
    teasers: Array<
      Maybe<
        | ({__typename?: 'ArticleTeaser'} & FullTeaser_ArticleTeaser_Fragment)
        | ({__typename?: 'PeerArticleTeaser'} & FullTeaser_PeerArticleTeaser_Fragment)
        | ({__typename?: 'PageTeaser'} & FullTeaser_PageTeaser_Fragment)
      >
    >
  }

export type FullBlockFragment =
  | FullBlock_RichTextBlock_Fragment
  | FullBlock_ImageBlock_Fragment
  | FullBlock_ImageGalleryBlock_Fragment
  | FullBlock_ListicleBlock_Fragment
  | FullBlock_FacebookPostBlock_Fragment
  | FullBlock_FacebookVideoBlock_Fragment
  | FullBlock_InstagramPostBlock_Fragment
  | FullBlock_TwitterTweetBlock_Fragment
  | FullBlock_VimeoVideoBlock_Fragment
  | FullBlock_YouTubeVideoBlock_Fragment
  | FullBlock_SoundCloudTrackBlock_Fragment
  | FullBlock_EmbedBlock_Fragment
  | FullBlock_LinkPageBreakBlock_Fragment
  | FullBlock_TitleBlock_Fragment
  | FullBlock_QuoteBlock_Fragment
  | FullBlock_TeaserGridBlock_Fragment

export type ImageUrLsFragment = {__typename?: 'Image'} & Pick<Image, 'url'> & {
    largeURL: Image['transformURL']
    mediumURL: Image['transformURL']
    thumbURL: Image['transformURL']
    squareURL: Image['transformURL']
    previewURL: Image['transformURL']
    column1URL: Image['transformURL']
    column6URL: Image['transformURL']
  }

export type ImageRefFragment = {__typename?: 'Image'} & Pick<
  Image,
  'id' | 'filename' | 'extension' | 'title' | 'description' | 'width' | 'height'
> &
  ImageUrLsFragment

export type FullImageFragment = {__typename?: 'Image'} & Pick<
  Image,
  | 'id'
  | 'createdAt'
  | 'modifiedAt'
  | 'filename'
  | 'extension'
  | 'width'
  | 'height'
  | 'fileSize'
  | 'description'
  | 'tags'
  | 'author'
  | 'source'
  | 'license'
> & {focalPoint?: Maybe<{__typename?: 'Point'} & Pick<Point, 'x' | 'y'>>} & ImageRefFragment

export type ImageListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
}>

export type ImageListQuery = {__typename?: 'Query'} & {
  images: {__typename?: 'ImageConnection'} & {
    nodes: Array<{__typename?: 'Image'} & ImageRefFragment>
    pageInfo: {__typename?: 'PageInfo'} & Pick<
      PageInfo,
      'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
    >
  }
}

export type ImageQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ImageQuery = {__typename?: 'Query'} & {
  image?: Maybe<{__typename?: 'Image'} & FullImageFragment>
}

export type UploadImageMutationVariables = Exact<{
  input: UploadImageInput
}>

export type UploadImageMutation = {__typename?: 'Mutation'} & {
  uploadImage?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
}

export type UpdateImageMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateImageInput
}>

export type UpdateImageMutation = {__typename?: 'Mutation'} & {
  updateImage?: Maybe<{__typename?: 'Image'} & FullImageFragment>
}

export type DeleteImageMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteImageMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deleteImage'>

export type FullNavigationFragment = {__typename?: 'Navigation'} & Pick<
  Navigation,
  'id' | 'key' | 'name'
> & {
    links: Array<
      | ({__typename: 'PageNavigationLink'} & Pick<PageNavigationLink, 'label'> & {
            page?: Maybe<{__typename?: 'Page'} & PageRefFragment>
          })
      | ({__typename: 'ArticleNavigationLink'} & Pick<ArticleNavigationLink, 'label'> & {
            article?: Maybe<{__typename?: 'Article'} & ArticleRefFragment>
          })
      | ({__typename: 'ExternalNavigationLink'} & Pick<ExternalNavigationLink, 'label' | 'url'>)
    >
  }

export type NavigationListQueryVariables = Exact<{[key: string]: never}>

export type NavigationListQuery = {__typename?: 'Query'} & {
  navigations: Array<{__typename?: 'Navigation'} & FullNavigationFragment>
}

export type NavigationQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type NavigationQuery = {__typename?: 'Query'} & {
  navigation?: Maybe<{__typename?: 'Navigation'} & FullNavigationFragment>
}

export type CreateNavigationMutationVariables = Exact<{
  input: NavigationInput
}>

export type CreateNavigationMutation = {__typename?: 'Mutation'} & {
  createNavigation?: Maybe<{__typename?: 'Navigation'} & FullNavigationFragment>
}

export type UpdateNavigationMutationVariables = Exact<{
  id: Scalars['ID']
  input: NavigationInput
}>

export type UpdateNavigationMutation = {__typename?: 'Mutation'} & {
  updateNavigation?: Maybe<{__typename?: 'Navigation'} & FullNavigationFragment>
}

export type DeleteNavigationMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteNavigationMutation = {__typename?: 'Mutation'} & Pick<
  Mutation,
  'deleteNavigation'
>

export type MutationPageFragment = {__typename?: 'Page'} & Pick<Page, 'id'> & {
    draft?: Maybe<
      {__typename?: 'PageRevision'} & Pick<PageRevision, 'publishedAt' | 'updatedAt' | 'revision'>
    >
    pending?: Maybe<{__typename?: 'PageRevision'} & Pick<PageRevision, 'publishAt' | 'revision'>>
    published?: Maybe<
      {__typename?: 'PageRevision'} & Pick<PageRevision, 'publishedAt' | 'updatedAt' | 'revision'>
    >
    latest: {__typename?: 'PageRevision'} & Pick<
      PageRevision,
      'publishedAt' | 'updatedAt' | 'slug' | 'title' | 'description' | 'tags'
    > & {
        image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
        properties: Array<
          {__typename?: 'Properties'} & Pick<Properties, 'key' | 'value' | 'public'>
        >
        blocks: Array<
          | ({__typename?: 'RichTextBlock'} & FullBlock_RichTextBlock_Fragment)
          | ({__typename?: 'ImageBlock'} & FullBlock_ImageBlock_Fragment)
          | ({__typename?: 'ImageGalleryBlock'} & FullBlock_ImageGalleryBlock_Fragment)
          | ({__typename?: 'ListicleBlock'} & FullBlock_ListicleBlock_Fragment)
          | ({__typename?: 'FacebookPostBlock'} & FullBlock_FacebookPostBlock_Fragment)
          | ({__typename?: 'FacebookVideoBlock'} & FullBlock_FacebookVideoBlock_Fragment)
          | ({__typename?: 'InstagramPostBlock'} & FullBlock_InstagramPostBlock_Fragment)
          | ({__typename?: 'TwitterTweetBlock'} & FullBlock_TwitterTweetBlock_Fragment)
          | ({__typename?: 'VimeoVideoBlock'} & FullBlock_VimeoVideoBlock_Fragment)
          | ({__typename?: 'YouTubeVideoBlock'} & FullBlock_YouTubeVideoBlock_Fragment)
          | ({__typename?: 'SoundCloudTrackBlock'} & FullBlock_SoundCloudTrackBlock_Fragment)
          | ({__typename?: 'EmbedBlock'} & FullBlock_EmbedBlock_Fragment)
          | ({__typename?: 'LinkPageBreakBlock'} & FullBlock_LinkPageBreakBlock_Fragment)
          | ({__typename?: 'TitleBlock'} & FullBlock_TitleBlock_Fragment)
          | ({__typename?: 'QuoteBlock'} & FullBlock_QuoteBlock_Fragment)
          | ({__typename?: 'TeaserGridBlock'} & FullBlock_TeaserGridBlock_Fragment)
        >
      }
  }

export type PageRefFragment = {__typename?: 'Page'} & Pick<
  Page,
  'id' | 'createdAt' | 'modifiedAt'
> & {
    draft?: Maybe<{__typename?: 'PageRevision'} & Pick<PageRevision, 'revision'>>
    pending?: Maybe<{__typename?: 'PageRevision'} & Pick<PageRevision, 'revision'>>
    published?: Maybe<
      {__typename?: 'PageRevision'} & Pick<PageRevision, 'publishedAt' | 'updatedAt' | 'revision'>
    >
    latest: {__typename?: 'PageRevision'} & Pick<
      PageRevision,
      'publishedAt' | 'updatedAt' | 'revision' | 'title' | 'description'
    > & {image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>}
  }

export type PageListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
}>

export type PageListQuery = {__typename?: 'Query'} & {
  pages: {__typename?: 'PageConnection'} & Pick<PageConnection, 'totalCount'> & {
      nodes: Array<{__typename?: 'Page'} & PageRefFragment>
      pageInfo: {__typename?: 'PageInfo'} & Pick<
        PageInfo,
        'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
      >
    }
}

export type CreatePageMutationVariables = Exact<{
  input: PageInput
}>

export type CreatePageMutation = {__typename?: 'Mutation'} & {
  createPage: {__typename?: 'Page'} & MutationPageFragment
}

export type UpdatePageMutationVariables = Exact<{
  id: Scalars['ID']
  input: PageInput
}>

export type UpdatePageMutation = {__typename?: 'Mutation'} & {
  updatePage?: Maybe<{__typename?: 'Page'} & MutationPageFragment>
}

export type PublishPageMutationVariables = Exact<{
  id: Scalars['ID']
  publishAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}>

export type PublishPageMutation = {__typename?: 'Mutation'} & {
  publishPage?: Maybe<{__typename?: 'Page'} & MutationPageFragment>
}

export type UnpublishPageMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type UnpublishPageMutation = {__typename?: 'Mutation'} & {
  unpublishPage?: Maybe<{__typename?: 'Page'} & MutationPageFragment>
}

export type DeletePageMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeletePageMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deletePage'>

export type PageQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type PageQuery = {__typename?: 'Query'} & {
  page?: Maybe<
    {__typename?: 'Page'} & Pick<Page, 'id'> & {
        pending?: Maybe<{__typename?: 'PageRevision'} & Pick<PageRevision, 'publishAt'>>
        published?: Maybe<
          {__typename?: 'PageRevision'} & Pick<PageRevision, 'publishedAt' | 'updatedAt'>
        >
        latest: {__typename?: 'PageRevision'} & Pick<
          PageRevision,
          'publishedAt' | 'updatedAt' | 'slug' | 'title' | 'description' | 'tags'
        > & {
            image?: Maybe<{__typename?: 'Image'} & ImageRefFragment>
            properties: Array<
              {__typename?: 'Properties'} & Pick<Properties, 'key' | 'value' | 'public'>
            >
            blocks: Array<
              | ({__typename?: 'RichTextBlock'} & FullBlock_RichTextBlock_Fragment)
              | ({__typename?: 'ImageBlock'} & FullBlock_ImageBlock_Fragment)
              | ({__typename?: 'ImageGalleryBlock'} & FullBlock_ImageGalleryBlock_Fragment)
              | ({__typename?: 'ListicleBlock'} & FullBlock_ListicleBlock_Fragment)
              | ({__typename?: 'FacebookPostBlock'} & FullBlock_FacebookPostBlock_Fragment)
              | ({__typename?: 'FacebookVideoBlock'} & FullBlock_FacebookVideoBlock_Fragment)
              | ({__typename?: 'InstagramPostBlock'} & FullBlock_InstagramPostBlock_Fragment)
              | ({__typename?: 'TwitterTweetBlock'} & FullBlock_TwitterTweetBlock_Fragment)
              | ({__typename?: 'VimeoVideoBlock'} & FullBlock_VimeoVideoBlock_Fragment)
              | ({__typename?: 'YouTubeVideoBlock'} & FullBlock_YouTubeVideoBlock_Fragment)
              | ({__typename?: 'SoundCloudTrackBlock'} & FullBlock_SoundCloudTrackBlock_Fragment)
              | ({__typename?: 'EmbedBlock'} & FullBlock_EmbedBlock_Fragment)
              | ({__typename?: 'LinkPageBreakBlock'} & FullBlock_LinkPageBreakBlock_Fragment)
              | ({__typename?: 'TitleBlock'} & FullBlock_TitleBlock_Fragment)
              | ({__typename?: 'QuoteBlock'} & FullBlock_QuoteBlock_Fragment)
              | ({__typename?: 'TeaserGridBlock'} & FullBlock_TeaserGridBlock_Fragment)
            >
          }
      }
  >
}

export type FullPeerProfileFragment = {__typename?: 'PeerProfile'} & Pick<
  PeerProfile,
  'name' | 'hostURL' | 'themeColor' | 'callToActionText' | 'callToActionURL'
> & {logo?: Maybe<{__typename?: 'Image'} & ImageRefFragment>}

export type PeerRefFragment = {__typename?: 'Peer'} & Pick<Peer, 'id' | 'name' | 'slug' | 'hostURL'>

export type PeerWithProfileFragment = {__typename?: 'Peer'} & {
  profile?: Maybe<{__typename?: 'PeerProfile'} & FullPeerProfileFragment>
} & PeerRefFragment

export type PeerProfileQueryVariables = Exact<{[key: string]: never}>

export type PeerProfileQuery = {__typename?: 'Query'} & {
  peerProfile: {__typename?: 'PeerProfile'} & FullPeerProfileFragment
}

export type UpdatePeerProfileMutationVariables = Exact<{
  input: PeerProfileInput
}>

export type UpdatePeerProfileMutation = {__typename?: 'Mutation'} & {
  updatePeerProfile: {__typename?: 'PeerProfile'} & FullPeerProfileFragment
}

export type PeerListQueryVariables = Exact<{[key: string]: never}>

export type PeerListQuery = {__typename?: 'Query'} & {
  peers?: Maybe<Array<{__typename?: 'Peer'} & PeerRefFragment>>
}

export type PeerQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type PeerQuery = {__typename?: 'Query'} & {
  peer?: Maybe<{__typename?: 'Peer'} & PeerRefFragment>
}

export type CreatePeerMutationVariables = Exact<{
  input: CreatePeerInput
}>

export type CreatePeerMutation = {__typename?: 'Mutation'} & {
  createPeer: {__typename?: 'Peer'} & PeerRefFragment
}

export type UpdatePeerMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdatePeerInput
}>

export type UpdatePeerMutation = {__typename?: 'Mutation'} & {
  updatePeer: {__typename?: 'Peer'} & PeerRefFragment
}

export type DeletePeerMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeletePeerMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deletePeer'>

export type FullUserFragment = {__typename?: 'User'} & Pick<User, 'id' | 'name' | 'email'> & {
    roles: Array<{__typename?: 'UserRole'} & FullUserRoleFragment>
  }

export type UserListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
}>

export type UserListQuery = {__typename?: 'Query'} & {
  users: {__typename?: 'UserConnection'} & Pick<UserConnection, 'totalCount'> & {
      nodes: Array<{__typename?: 'User'} & FullUserFragment>
      pageInfo: {__typename?: 'PageInfo'} & Pick<
        PageInfo,
        'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
      >
    }
}

export type MeQueryVariables = Exact<{[key: string]: never}>

export type MeQuery = {__typename?: 'Query'} & {
  me?: Maybe<{__typename?: 'User'} & FullUserFragment>
}

export type UserQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type UserQuery = {__typename?: 'Query'} & {
  user?: Maybe<{__typename?: 'User'} & FullUserFragment>
}

export type CreateUserMutationVariables = Exact<{
  input: UserInput
  password: Scalars['String']
}>

export type CreateUserMutation = {__typename?: 'Mutation'} & {
  createUser?: Maybe<{__typename?: 'User'} & FullUserFragment>
}

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['ID']
  input: UserInput
}>

export type UpdateUserMutation = {__typename?: 'Mutation'} & {
  updateUser?: Maybe<{__typename?: 'User'} & FullUserFragment>
}

export type ResetUserPasswordMutationVariables = Exact<{
  id: Scalars['ID']
  password: Scalars['String']
}>

export type ResetUserPasswordMutation = {__typename?: 'Mutation'} & {
  resetUserPassword?: Maybe<{__typename?: 'User'} & FullUserFragment>
}

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteUserMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deleteUser'>

export type CreateSessionMutationVariables = Exact<{
  email: Scalars['String']
  password: Scalars['String']
}>

export type CreateSessionMutation = {__typename?: 'Mutation'} & {
  createSession: {__typename?: 'SessionWithToken'} & Pick<SessionWithToken, 'token'> & {
      user: {__typename?: 'User'} & Pick<User, 'email'>
    }
}

export type CreateSessionWithJwtMutationVariables = Exact<{
  jwt: Scalars['String']
}>

export type CreateSessionWithJwtMutation = {__typename?: 'Mutation'} & {
  createSessionWithJWT: {__typename?: 'SessionWithToken'} & Pick<SessionWithToken, 'token'> & {
      user: {__typename?: 'User'} & Pick<User, 'email'>
    }
}

export type FullPermissionFragment = {__typename?: 'Permission'} & Pick<
  Permission,
  'id' | 'description' | 'deprecated'
>

export type FullUserRoleFragment = {__typename?: 'UserRole'} & Pick<
  UserRole,
  'id' | 'name' | 'description' | 'systemRole'
> & {permissions: Array<{__typename?: 'Permission'} & FullPermissionFragment>}

export type UserRoleListQueryVariables = Exact<{
  filter?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['ID']>
  before?: Maybe<Scalars['ID']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
}>

export type UserRoleListQuery = {__typename?: 'Query'} & {
  userRoles: {__typename?: 'UserRoleConnection'} & Pick<UserRoleConnection, 'totalCount'> & {
      nodes: Array<{__typename?: 'UserRole'} & FullUserRoleFragment>
      pageInfo: {__typename?: 'PageInfo'} & Pick<
        PageInfo,
        'startCursor' | 'endCursor' | 'hasNextPage' | 'hasPreviousPage'
      >
    }
}

export type PermissionListQueryVariables = Exact<{[key: string]: never}>

export type PermissionListQuery = {__typename?: 'Query'} & {
  permissions?: Maybe<Array<{__typename?: 'Permission'} & FullPermissionFragment>>
}

export type UserRoleQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type UserRoleQuery = {__typename?: 'Query'} & {
  userRole?: Maybe<{__typename?: 'UserRole'} & FullUserRoleFragment>
}

export type CreateUserRoleMutationVariables = Exact<{
  input: UserRoleInput
}>

export type CreateUserRoleMutation = {__typename?: 'Mutation'} & {
  createUserRole?: Maybe<{__typename?: 'UserRole'} & FullUserRoleFragment>
}

export type UpdateUserRoleMutationVariables = Exact<{
  id: Scalars['ID']
  input: UserRoleInput
}>

export type UpdateUserRoleMutation = {__typename?: 'Mutation'} & {
  updateUserRole?: Maybe<{__typename?: 'UserRole'} & FullUserRoleFragment>
}

export type DeleteUserRoleMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteUserRoleMutation = {__typename?: 'Mutation'} & Pick<Mutation, 'deleteUserRole'>

export const MutationArticle = gql`
  fragment MutationArticle on Article {
    id
    shared
    draft {
      publishedAt
      updatedAt
      revision
    }
    pending {
      publishAt
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      revision
      title
      preTitle
      lead
      slug
      breaking
      tags
      properties {
        key
        value
        public
      }
    }
  }
`
export const ImageUrLs = gql`
  fragment ImageURLs on Image {
    url
    largeURL: transformURL(input: {width: 500})
    mediumURL: transformURL(input: {width: 300})
    thumbURL: transformURL(input: {width: 280, height: 200})
    squareURL: transformURL(input: {width: 100, height: 100})
    previewURL: transformURL(input: {width: 400, height: 200})
    column1URL: transformURL(input: {width: 800, height: 300})
    column6URL: transformURL(input: {width: 260, height: 300})
  }
`
export const ImageRef = gql`
  fragment ImageRef on Image {
    id
    filename
    extension
    title
    description
    width
    height
    ...ImageURLs
  }
  ${ImageUrLs}
`
export const AuthorRef = gql`
  fragment AuthorRef on Author {
    id
    name
    image {
      ...ImageRef
    }
  }
  ${ImageRef}
`
export const FullAuthor = gql`
  fragment FullAuthor on Author {
    slug
    links {
      title
      url
    }
    bio
    ...AuthorRef
  }
  ${AuthorRef}
`
export const FullImage = gql`
  fragment FullImage on Image {
    id
    createdAt
    modifiedAt
    filename
    extension
    width
    height
    fileSize
    description
    tags
    author
    source
    license
    focalPoint {
      x
      y
    }
    ...ImageRef
  }
  ${ImageRef}
`
export const PageRef = gql`
  fragment PageRef on Page {
    id
    createdAt
    modifiedAt
    draft {
      revision
    }
    pending {
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      revision
      title
      description
      image {
        ...ImageRef
      }
    }
  }
  ${ImageRef}
`
export const ArticleRef = gql`
  fragment ArticleRef on Article {
    id
    createdAt
    modifiedAt
    draft {
      revision
    }
    pending {
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      revision
      preTitle
      title
      lead
      image {
        ...ImageRef
      }
    }
  }
  ${ImageRef}
`
export const FullNavigation = gql`
  fragment FullNavigation on Navigation {
    id
    key
    name
    links {
      __typename
      ... on PageNavigationLink {
        label
        page {
          ...PageRef
        }
      }
      ... on ArticleNavigationLink {
        label
        article {
          ...ArticleRef
        }
      }
      ... on ExternalNavigationLink {
        label
        url
      }
    }
  }
  ${PageRef}
  ${ArticleRef}
`
export const PeerRef = gql`
  fragment PeerRef on Peer {
    id
    name
    slug
    hostURL
  }
`
export const FullPeerProfile = gql`
  fragment FullPeerProfile on PeerProfile {
    name
    hostURL
    themeColor
    logo {
      ...ImageRef
    }
    callToActionText
    callToActionURL
  }
  ${ImageRef}
`
export const PeerWithProfile = gql`
  fragment PeerWithProfile on Peer {
    ...PeerRef
    profile {
      ...FullPeerProfile
    }
  }
  ${PeerRef}
  ${FullPeerProfile}
`
export const FullTeaser = gql`
  fragment FullTeaser on Teaser {
    ... on ArticleTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      article {
        ...ArticleRef
      }
    }
    ... on PeerArticleTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      peer {
        ...PeerWithProfile
      }
      articleID
      article {
        ...ArticleRef
      }
    }
    ... on PageTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      page {
        ...PageRef
      }
    }
  }
  ${ImageRef}
  ${ArticleRef}
  ${PeerWithProfile}
  ${PageRef}
`
export const FullBlock = gql`
  fragment FullBlock on Block {
    __typename
    ... on TitleBlock {
      title
      lead
    }
    ... on RichTextBlock {
      richText
    }
    ... on QuoteBlock {
      quote
      author
    }
    ... on LinkPageBreakBlock {
      text
      linkText
      linkURL
    }
    ... on ImageBlock {
      caption
      image {
        ...ImageRef
      }
    }
    ... on ImageGalleryBlock {
      images {
        caption
        image {
          ...ImageRef
        }
      }
    }
    ... on ListicleBlock {
      items {
        title
        image {
          ...ImageRef
        }
        richText
      }
    }
    ... on FacebookPostBlock {
      userID
      postID
    }
    ... on FacebookVideoBlock {
      userID
      videoID
    }
    ... on InstagramPostBlock {
      postID
    }
    ... on TwitterTweetBlock {
      userID
      tweetID
    }
    ... on VimeoVideoBlock {
      videoID
    }
    ... on YouTubeVideoBlock {
      videoID
    }
    ... on SoundCloudTrackBlock {
      trackID
    }
    ... on EmbedBlock {
      url
      title
      width
      height
      styleCustom
    }
    ... on TeaserGridBlock {
      teasers {
        ...FullTeaser
      }
      numColumns
    }
  }
  ${ImageRef}
  ${FullTeaser}
`
export const MutationPage = gql`
  fragment MutationPage on Page {
    id
    draft {
      publishedAt
      updatedAt
      revision
    }
    pending {
      publishAt
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      slug
      title
      description
      image {
        ...ImageRef
      }
      tags
      properties {
        key
        value
        public
      }
      blocks {
        ...FullBlock
      }
    }
  }
  ${ImageRef}
  ${FullBlock}
`
export const FullPermission = gql`
  fragment FullPermission on Permission {
    id
    description
    deprecated
  }
`
export const FullUserRole = gql`
  fragment FullUserRole on UserRole {
    id
    name
    description
    systemRole
    permissions {
      ...FullPermission
    }
  }
  ${FullPermission}
`
export const FullUser = gql`
  fragment FullUser on User {
    id
    name
    email
    roles {
      ...FullUserRole
    }
  }
  ${FullUserRole}
`
export const ArticleList = gql`
  query ArticleList($filter: String, $after: ID, $first: Int) {
    articles(first: $first, after: $after, filter: {title: $filter}) {
      nodes {
        ...ArticleRef
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${ArticleRef}
`
export const PeerArticleList = gql`
  query PeerArticleList($filter: String, $after: ID, $first: Int) {
    peerArticles(first: $first, after: $after, filter: {title: $filter}) {
      nodes {
        peer {
          ...PeerWithProfile
        }
        article {
          ...ArticleRef
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
      totalCount
    }
  }
  ${PeerWithProfile}
  ${ArticleRef}
`
export const CreateArticle = gql`
  mutation CreateArticle($input: ArticleInput!) {
    createArticle(input: $input) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const UpdateArticle = gql`
  mutation UpdateArticle($id: ID!, $input: ArticleInput!) {
    updateArticle(id: $id, input: $input) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const PublishArticle = gql`
  mutation PublishArticle(
    $id: ID!
    $publishAt: DateTime!
    $publishedAt: DateTime!
    $updatedAt: DateTime!
  ) {
    publishArticle(
      id: $id
      publishAt: $publishAt
      publishedAt: $publishedAt
      updatedAt: $updatedAt
    ) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const UnpublishArticle = gql`
  mutation UnpublishArticle($id: ID!) {
    unpublishArticle(id: $id) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const DeleteArticle = gql`
  mutation DeleteArticle($id: ID!) {
    deleteArticle(id: $id)
  }
`
export const Article = gql`
  query Article($id: ID!) {
    article(id: $id) {
      id
      shared
      pending {
        publishAt
      }
      published {
        publishedAt
        updatedAt
      }
      latest {
        publishedAt
        updatedAt
        revision
        slug
        preTitle
        title
        lead
        image {
          ...ImageRef
        }
        tags
        properties {
          key
          value
          public
        }
        authors {
          ...AuthorRef
        }
        hideAuthor
        breaking
        socialMediaTitle
        socialMediaDescription
        socialMediaAuthors {
          ...AuthorRef
        }
        socialMediaImage {
          ...ImageRef
        }
        blocks {
          ...FullBlock
        }
      }
    }
  }
  ${ImageRef}
  ${AuthorRef}
  ${FullBlock}
`
export const AuthorList = gql`
  query AuthorList($filter: String, $after: ID, $before: ID, $first: Int, $last: Int) {
    authors(filter: {name: $filter}, after: $after, before: $before, first: $first, last: $last) {
      nodes {
        ...FullAuthor
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullAuthor}
`
export const Author = gql`
  query Author($id: ID!) {
    author(id: $id) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const CreateAuthor = gql`
  mutation CreateAuthor($input: AuthorInput!) {
    createAuthor(input: $input) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const UpdateAuthor = gql`
  mutation UpdateAuthor($id: ID!, $input: AuthorInput!) {
    updateAuthor(id: $id, input: $input) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const DeleteAuthor = gql`
  mutation DeleteAuthor($id: ID!) {
    deleteAuthor(id: $id)
  }
`
export const ImageList = gql`
  query ImageList($filter: String, $after: ID, $before: ID, $first: Int, $last: Int) {
    images(filter: {title: $filter}, after: $after, before: $before, first: $first, last: $last) {
      nodes {
        ...ImageRef
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
  ${ImageRef}
`
export const Image = gql`
  query Image($id: ID!) {
    image(id: $id) {
      ...FullImage
    }
  }
  ${FullImage}
`
export const UploadImage = gql`
  mutation UploadImage($input: UploadImageInput!) {
    uploadImage(input: $input) {
      ...ImageRef
    }
  }
  ${ImageRef}
`
export const UpdateImage = gql`
  mutation UpdateImage($id: ID!, $input: UpdateImageInput!) {
    updateImage(id: $id, input: $input) {
      ...FullImage
    }
  }
  ${FullImage}
`
export const DeleteImage = gql`
  mutation DeleteImage($id: ID!) {
    deleteImage(id: $id)
  }
`
export const NavigationList = gql`
  query NavigationList {
    navigations {
      ...FullNavigation
    }
  }
  ${FullNavigation}
`
export const Navigation = gql`
  query Navigation($id: ID!) {
    navigation(id: $id) {
      ...FullNavigation
    }
  }
  ${FullNavigation}
`
export const CreateNavigation = gql`
  mutation CreateNavigation($input: NavigationInput!) {
    createNavigation(input: $input) {
      ...FullNavigation
    }
  }
  ${FullNavigation}
`
export const UpdateNavigation = gql`
  mutation UpdateNavigation($id: ID!, $input: NavigationInput!) {
    updateNavigation(id: $id, input: $input) {
      ...FullNavigation
    }
  }
  ${FullNavigation}
`
export const DeleteNavigation = gql`
  mutation DeleteNavigation($id: ID!) {
    deleteNavigation(id: $id)
  }
`
export const PageList = gql`
  query PageList($filter: String, $after: ID, $first: Int) {
    pages(first: $first, after: $after, filter: {title: $filter}) {
      nodes {
        ...PageRef
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${PageRef}
`
export const CreatePage = gql`
  mutation CreatePage($input: PageInput!) {
    createPage(input: $input) {
      ...MutationPage
    }
  }
  ${MutationPage}
`
export const UpdatePage = gql`
  mutation UpdatePage($id: ID!, $input: PageInput!) {
    updatePage(id: $id, input: $input) {
      ...MutationPage
    }
  }
  ${MutationPage}
`
export const PublishPage = gql`
  mutation PublishPage(
    $id: ID!
    $publishAt: DateTime
    $publishedAt: DateTime
    $updatedAt: DateTime
  ) {
    publishPage(id: $id, publishAt: $publishAt, publishedAt: $publishedAt, updatedAt: $updatedAt) {
      ...MutationPage
    }
  }
  ${MutationPage}
`
export const UnpublishPage = gql`
  mutation UnpublishPage($id: ID!) {
    unpublishPage(id: $id) {
      ...MutationPage
    }
  }
  ${MutationPage}
`
export const DeletePage = gql`
  mutation DeletePage($id: ID!) {
    deletePage(id: $id)
  }
`
export const Page = gql`
  query Page($id: ID!) {
    page(id: $id) {
      id
      pending {
        publishAt
      }
      published {
        publishedAt
        updatedAt
      }
      latest {
        publishedAt
        updatedAt
        slug
        title
        description
        image {
          ...ImageRef
        }
        tags
        properties {
          key
          value
          public
        }
        blocks {
          ...FullBlock
        }
      }
    }
  }
  ${ImageRef}
  ${FullBlock}
`
export const PeerProfile = gql`
  query PeerProfile {
    peerProfile {
      ...FullPeerProfile
    }
  }
  ${FullPeerProfile}
`
export const UpdatePeerProfile = gql`
  mutation UpdatePeerProfile($input: PeerProfileInput!) {
    updatePeerProfile(input: $input) {
      ...FullPeerProfile
    }
  }
  ${FullPeerProfile}
`
export const PeerList = gql`
  query PeerList {
    peers {
      ...PeerRef
    }
  }
  ${PeerRef}
`
export const Peer = gql`
  query Peer($id: ID!) {
    peer(id: $id) {
      ...PeerRef
    }
  }
  ${PeerRef}
`
export const CreatePeer = gql`
  mutation CreatePeer($input: CreatePeerInput!) {
    createPeer(input: $input) {
      ...PeerRef
    }
  }
  ${PeerRef}
`
export const UpdatePeer = gql`
  mutation UpdatePeer($id: ID!, $input: UpdatePeerInput!) {
    updatePeer(id: $id, input: $input) {
      ...PeerRef
    }
  }
  ${PeerRef}
`
export const DeletePeer = gql`
  mutation DeletePeer($id: ID!) {
    deletePeer(id: $id)
  }
`
export const UserList = gql`
  query UserList($filter: String, $after: ID, $before: ID, $first: Int, $last: Int) {
    users(filter: {name: $filter}, after: $after, before: $before, first: $first, last: $last) {
      nodes {
        ...FullUser
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullUser}
`
export const Me = gql`
  query Me {
    me {
      ...FullUser
    }
  }
  ${FullUser}
`
export const User = gql`
  query User($id: ID!) {
    user(id: $id) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const CreateUser = gql`
  mutation CreateUser($input: UserInput!, $password: String!) {
    createUser(input: $input, password: $password) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const UpdateUser = gql`
  mutation UpdateUser($id: ID!, $input: UserInput!) {
    updateUser(id: $id, input: $input) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const ResetUserPassword = gql`
  mutation ResetUserPassword($id: ID!, $password: String!) {
    resetUserPassword(id: $id, password: $password) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const DeleteUser = gql`
  mutation DeleteUser($id: ID!) {
    deleteUser(id: $id)
  }
`
export const CreateSession = gql`
  mutation CreateSession($email: String!, $password: String!) {
    createSession(email: $email, password: $password) {
      user {
        email
      }
      token
    }
  }
`
export const CreateSessionWithJwt = gql`
  mutation CreateSessionWithJWT($jwt: String!) {
    createSessionWithJWT(jwt: $jwt) {
      user {
        email
      }
      token
    }
  }
`
export const UserRoleList = gql`
  query UserRoleList($filter: String, $after: ID, $before: ID, $first: Int, $last: Int) {
    userRoles(filter: {name: $filter}, after: $after, before: $before, first: $first, last: $last) {
      nodes {
        ...FullUserRole
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullUserRole}
`
export const PermissionList = gql`
  query PermissionList {
    permissions {
      ...FullPermission
    }
  }
  ${FullPermission}
`
export const UserRole = gql`
  query UserRole($id: ID!) {
    userRole(id: $id) {
      ...FullUserRole
    }
  }
  ${FullUserRole}
`
export const CreateUserRole = gql`
  mutation CreateUserRole($input: UserRoleInput!) {
    createUserRole(input: $input) {
      ...FullUserRole
    }
  }
  ${FullUserRole}
`
export const UpdateUserRole = gql`
  mutation UpdateUserRole($id: ID!, $input: UserRoleInput!) {
    updateUserRole(id: $id, input: $input) {
      ...FullUserRole
    }
  }
  ${FullUserRole}
`
export const DeleteUserRole = gql`
  mutation DeleteUserRole($id: ID!) {
    deleteUserRole(id: $id)
  }
`
