generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model MetadataProperty {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  key        String
  value      String
  public     Boolean

  ArticleRevision   ArticleRevision? @relation(fields: [articleRevisionId], references: [id], onDelete: Cascade)
  articleRevisionId String?

  PageRevision   PageRevision? @relation(fields: [pageRevisionId], references: [id], onDelete: Cascade)
  pageRevisionId String?

  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String?

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("properties")
}

model ArticleRevision {
  id                     String             @id @default(cuid())
  preTitle               String?
  title                  String?
  lead                   String?
  seoTitle               String?
  slug                   String?
  tags                   String[]
  canonicalUrl           String?
  properties             MetadataProperty[]
  imageID                String?
  authorIDs              String[]
  breaking               Boolean
  blocks                 Json[]
  hideAuthor             Boolean
  socialMediaTitle       String?
  socialMediaDescription String?
  socialMediaAuthorIDs   String[]
  socialMediaImageID     String?

  revision    Int       @default(0)
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime? @updatedAt
  updatedAt   DateTime?
  publishAt   DateTime?
  publishedAt DateTime?

  PublishedArticle Article[] @relation("publishedArticleRevision")
  PendingArticle   Article[] @relation("pendingArticleRevision")
  DraftArticle     Article[] @relation("draftArticleRevision")

  @@index([publishAt])
  @@index([publishedAt])
  @@index([updatedAt])
  @@index([tags])
  @@map("articles.revisions")
}

model Article {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  // The better way in the future to go around draft, pending, published is to have the articleId and a state on the revision
  // There should then be a unique constraint on id + state.
  // This would allow us to
  //  cascade the revisions on article delete
  //  promoting/demoting a revision to a different state easily
  publishedId String?          @unique
  published   ArticleRevision? @relation("publishedArticleRevision", fields: [publishedId], references: [id], onDelete: SetNull)

  pendingId String?          @unique
  pending   ArticleRevision? @relation("pendingArticleRevision", fields: [pendingId], references: [id], onDelete: SetNull)

  draftId String?          @unique
  draft   ArticleRevision? @relation("draftArticleRevision", fields: [draftId], references: [id], onDelete: SetNull)

  shared Boolean

  navigations NavigationLink[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@map("articles")
}

model AuthorsLinks {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  title String
  url   String

  Author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?

  @@map("authors.links")
}

model Author {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  modifiedAt DateTime       @updatedAt
  name       String
  slug       String         @unique
  jobTitle   String?
  links      AuthorsLinks[]
  bio        Json[]

  imageID String?
  image   Image?  @relation(fields: [imageID], references: [id])

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("authors")
}

model FocalPoint {
  x Float?
  y Float?

  imageId String @unique
  image   Image? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@map("images.focal-point")
}

model Image {
  id          String      @id
  createdAt   DateTime    @default(now())
  description String?
  extension   String
  fileSize    Int
  filename    String?
  focalPoint  FocalPoint?
  format      String
  license     String?
  link        String?
  mimeType    String
  modifiedAt  DateTime    @updatedAt
  source      String?
  tags        String[]
  title       String?
  height      Int
  width       Int

  Author      Author[]
  MemberPlan  MemberPlan[]
  PeerProfile PeerProfile[]
  Comment     Comment[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([title])
  @@index([tags])
  @@map("images")
  User User[]
}

enum CommentItemType {
  article  @map("article")
  page     @map("page")
}

enum CommentRejectionReason {
  misconduct  @map("misconduct")
  spam        @map("spam")
}

model CommentsRevisions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      Json?
  title     String?
  lead      String?

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([createdAt])
  @@map("comments.revisions")
}

enum CommentState {
  approved            @map("approved")
  pendingApproval     @map("pendingApproval")
  pendingUserChanges  @map("pendingUserChanges")
  rejected            @map("rejected")
}

enum CommentAuthorType {
  team          @map("team")
  author        @map("author")
  verifiedUser  @map("verifiedUser")
  guestUser     @map("guestUser")
}

model Comment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  itemID           String
  itemType         CommentItemType
  parentID         String?
  revisions        CommentsRevisions[]
  rejectionReason  CommentRejectionReason?
  state            CommentState
  source           String?
  authorType       CommentAuthorType
  guestUsername    String?
  guestUserImageID String?
  guestUserImage   Image?                  @relation(fields: [guestUserImageID], references: [id])
  userID           String?
  user             User?                   @relation(fields: [userID], references: [id])

  tags TaggedComments[]

  ratings CommentRating[]

  @@index([createdAt])
  @@map("comments")
}

model TaggedComments {
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([commentId, tagId])
  @@map("comments.tagged-comments")
}

model CommentRatingSystem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name String? @unique

  answers CommentRatingSystemAnswer[]

  @@map("comments.rating-systems")
}

enum RatingSystemType {
  star  @map("star")
}

model CommentRatingSystemAnswer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type   RatingSystemType
  answer String?

  ratingSystem   CommentRatingSystem @relation(fields: [ratingSystemId], references: [id], onDelete: Cascade)
  ratingSystemId String

  ratings CommentRating[]

  @@unique([ratingSystemId, answer])
  @@map("comments.rating-system-answers")
}

model CommentRating {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String
  answer   CommentRatingSystemAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  value       Int
  fingerprint String?
  disabled    Boolean @default(false)

  @@unique([answerId, commentId, userId])
  @@map("comments.ratings")
}

model InvoiceItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name        String
  description String?
  quantity    Int
  amount      Int

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  invoiceId String?

  @@map("invoices.items")
}

model Invoice {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  mail                      String
  dueAt                     DateTime
  description               String?
  paidAt                    DateTime?
  canceledAt                DateTime?
  sentReminderAt            DateTime?
  items                     InvoiceItem[]
  manuallySetAsPaidByUserId String?

  subscriptionID String?
  subscription   Subscription? @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)

  userID String?
  user   User?   @relation(fields: [userID], references: [id])

  SubscriptionPeriod SubscriptionPeriod[]

  @@index([mail])
  @@map("invoices")
}

enum MailLogState {
  submitted  @map("submitted")
  accepted   @map("accepted")
  delivered  @map("delivered")
  deferred   @map("deferred")
  bounced    @map("bounced")
  rejected   @map("rejected")
}

model MailLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  recipient      String
  subject        String
  state          MailLogState
  mailData       String?
  mailProviderID String

  @@index([subject])
  @@map("mail.log")
}

enum PaymentPeriodicity {
  monthly    @map("monthly")
  quarterly  @map("quarterly")
  biannual   @map("biannual")
  yearly     @map("yearly")
}

model AvailablePaymentMethod {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentMethodIDs     String[]
  paymentPeriodicities PaymentPeriodicity[]
  forceAutoRenewal     Boolean

  MemberPlan   MemberPlan? @relation(fields: [memberPlanId], references: [id], onDelete: Cascade)
  memberPlanId String?

  @@map("member.plans.payment-methods")
}

model MemberPlan {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name                    String
  slug                    String                   @unique
  tags                    String[]
  description             Json[]
  active                  Boolean
  amountPerMonthMin       Float
  availablePaymentMethods AvailablePaymentMethod[]

  imageID String?
  image   Image?  @relation(fields: [imageID], references: [id])

  Subscription Subscription[]

  @@index([name])
  @@map("member.plans")
}

model NavigationLink {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  label String
  type  String
  url   String?

  page   Page?   @relation(fields: [pageID], references: [id], onDelete: Cascade)
  pageID String?

  article   Article? @relation(fields: [articleID], references: [id], onDelete: Cascade)
  articleID String?

  navigation   Navigation? @relation(fields: [navigationId], references: [id], onDelete: Cascade)
  navigationId String?

  @@map("navigations.links")
}

model Navigation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  key   String           @unique
  links NavigationLink[]
  name  String

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("navigations")
}

model PageRevision {
  id                     String             @id @default(cuid())
  revision               Int                @default(0)
  createdAt              DateTime           @default(now())
  modifiedAt             DateTime?          @updatedAt
  updatedAt              DateTime?
  publishedAt            DateTime?
  publishAt              DateTime?
  slug                   String?
  title                  String
  description            String?
  tags                   String[]
  properties             MetadataProperty[]
  imageID                String?
  socialMediaTitle       String?
  socialMediaDescription String?
  socialMediaImageID     String?
  blocks                 Json[]
  PublishedPage          Page[]             @relation("publishedPageRevision")
  PendingPage            Page[]             @relation("pendingPageRevision")
  DraftPage              Page[]             @relation("draftPageRevision")

  @@index([publishAt])
  @@index([publishedAt])
  @@index([updatedAt])
  @@index([tags])
  @@map("pages.revision")
}

model Page {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  publishedId String?       @unique
  published   PageRevision? @relation("publishedPageRevision", fields: [publishedId], references: [id], onDelete: SetNull)

  pendingId String?       @unique
  pending   PageRevision? @relation("pendingPageRevision", fields: [pendingId], references: [id], onDelete: SetNull)

  draftId String?       @unique
  draft   PageRevision? @relation("draftPageRevision", fields: [draftId], references: [id], onDelete: SetNull)

  navigations NavigationLink[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@map("pages")
}

model PaymentMethod {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  modifiedAt        DateTime @updatedAt
  name              String
  slug              String
  description       String
  paymentProviderID String
  active            Boolean

  Subscription Subscription[]
  Payment      Payment[]

  @@map("payment.methods")
}

enum PaymentState {
  created             @map("created")
  submitted           @map("submitted")
  requiresUserAction  @map("requiresUserAction")
  processing          @map("processing")
  paid                @map("paid")
  canceled            @map("canceled")
  declined            @map("declined")
}

model Payment {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  modifiedAt   DateTime     @updatedAt
  invoiceID    String
  state        PaymentState
  intentID     String?
  intentSecret String?
  intentData   String?
  paymentData  String?

  paymentMethodID String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  @@index([intentID])
  @@map("payments")
}

model PeerProfile {
  id                   String  @id @default(cuid())
  name                 String
  themeColor           String
  themeFontColor       String
  callToActionURL      String
  callToActionText     Json[]
  callToActionImageURL String?
  callToActionImageID  String?

  logoID String?
  logo   Image?  @relation(fields: [logoID], references: [id])

  @@map("peerProfiles")
}

model Peer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name       String
  slug       String  @unique
  hostURL    String
  token      String
  isDisabled Boolean @default(false)

  @@map("peers")
}

model Token {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name    String   @unique
  token   String
  roleIDs String[]

  @@map("tokens")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique

  userID String
  user   User   @relation(fields: [userID], references: [id])

  @@index([userID])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model SubscriptionPeriod {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  startsAt           DateTime
  endsAt             DateTime
  paymentPeriodicity PaymentPeriodicity
  amount             Float

  invoiceID String
  Invoice   Invoice @relation(fields: [invoiceID], references: [id])

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId String?

  @@map("subscriptions.periods")
}

enum SubscriptionDeactivationReason {
  none                 @map("none")
  userSelfDeactivated  @map("userSelfDeactivated")
  invoiceNotPaid       @map("invoiceNotPaid")
}

model SubscriptionDeactivation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  date   DateTime
  reason SubscriptionDeactivationReason

  subscriptionID String       @unique
  subscription   Subscription @relation(fields: [subscriptionID], references: [id], onDelete: Cascade)

  @@map("subscriptions.deactivation-reasons")
}

model Subscription {
  id                 String                    @id @default(cuid())
  createdAt          DateTime                  @default(now())
  modifiedAt         DateTime                  @updatedAt
  paymentPeriodicity PaymentPeriodicity
  monthlyAmount      Float
  autoRenew          Boolean
  startsAt           DateTime
  paidUntil          DateTime?
  periods            SubscriptionPeriod[]
  properties         MetadataProperty[]
  deactivation       SubscriptionDeactivation?

  paymentMethodID String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  memberPlanID String
  memberPlan   MemberPlan @relation(fields: [memberPlanID], references: [id])

  userID String
  user   User   @relation(fields: [userID], references: [id])

  Invoice Invoice[]

  @@map("subscriptions")
}

model UserAddress {
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  company        String?
  streetAddress  String?
  streetAddress2 String?
  zipCode        String?
  city           String?
  country        String?

  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users.addresses")
}

model UserOAuth2Account {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String
  expiresAt         Int
  tokenType         String
  scope             String
  idToken           String
  oauthTokenSecret  String?
  oauthToken        String?
  sessionState      String?

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users.oauth2-accounts")
}

model PaymentProviderCustomer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentProviderID String
  customerID        String

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("users.payment-providers")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  modifiedAt      DateTime  @updatedAt
  email           String    @unique
  emailVerifiedAt DateTime?
  name            String
  firstName       String?
  preferredName   String?
  password        String
  active          Boolean
  lastLogin       DateTime?
  roleIDs         String[]
  userImageID     String?
  userImage       Image?    @relation(fields: [userImageID], references: [id])

  address                  UserAddress?
  properties               MetadataProperty[]
  oauth2Accounts           UserOAuth2Account[]
  paymentProviderCustomers PaymentProviderCustomer[]

  Comment       Comment[]
  Session       Session[]
  Subscription  Subscription[]
  Invoice       Invoice[]
  CommentRating CommentRating[]
  PollVote      PollVote[]

  @@map("users")
}

model UserRole {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  description   String?
  name          String   @unique
  permissionIDs String[]
  systemRole    Boolean

  @@map("users.roles")
}

model Setting {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  modifiedAt         DateTime @updatedAt
  name               String   @unique
  value              Json
  settingRestriction Json

  @@map("settings")
}

enum TagType {
  Comment  @map("comment")
}

model Tag {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type TagType
  tag  String?

  comments TaggedComments[]

  @@unique([type, tag])
  @@map("tags")
}

model Poll {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  opensAt  DateTime  @default(now())
  closedAt DateTime?

  question String?

  answers             PollAnswer[]
  votes               PollVote[]
  externalVoteSources PollExternalVoteSource[]

  @@map("polls")
}

model PollAnswer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  answer String?

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  votes         PollVote[]
  externalVotes PollExternalVote[]

  @@map("polls.answers")
}

model PollVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String
  answer   PollAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  // While the poll can be infered through the answer, having the pollId in this table
  // allows to make sure a user only casts 1 vote per poll
  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  fingerprint String?
  disabled    Boolean @default(false)

  @@unique([pollId, userId])
  @@map("polls.votes")
}

model PollExternalVoteSource {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  source      String?
  voteAmounts PollExternalVote[]

  @@map("polls.external-vote-sources")
}

model PollExternalVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  answerId String
  answer   PollAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  sourceId String
  source   PollExternalVoteSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  amount Int @default(0)

  @@unique([answerId, sourceId])
  @@map("polls.external-votes")
}
