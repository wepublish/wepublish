"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/write-comment/write-comment.tsx":
/*!***************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/write-comment/write-comment.tsx ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\",\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\",\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4REVWIGFzIF9qc3hERVYgfSBmcm9tIFwiQGVtb3Rpb24vcmVhY3QvanN4LWRldi1ydW50aW1lXCI7XG52YXIgX3MgPSAkUmVmcmVzaFNpZyQoKTtcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSBcIkBob29rZm9ybS9yZXNvbHZlcnMvem9kXCI7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgdXNlVXNlciB9IGZyb20gXCJAd2VwdWJsaXNoL2F1dGhlbnRpY2F0aW9uL3dlYnNpdGVcIjtcbmltcG9ydCB7IHVzZVdlYnNpdGVCdWlsZGVyIH0gZnJvbSBcIkB3ZXB1Ymxpc2gvd2Vic2l0ZS9idWlsZGVyXCI7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb250cm9sbGVyLCB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgTWRTZW5kIH0gZnJvbSBcInJlYWN0LWljb25zL21kXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgdG9QbGFpbnRleHQgfSBmcm9tIFwiQHdlcHVibGlzaC9yaWNodGV4dFwiO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudFdyYXBwZXIgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImZvcm1cIiwge1xuICAgIHRhcmdldDogXCJld2twcXR6MFwiLFxuICAgIGxhYmVsOiBcIldyaXRlQ29tbWVudFdyYXBwZXJcIlxufSkoXCJkaXNwbGF5OmdyaWQ7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygyKTtcbn0sIFwiO1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5M2NtbDBaUzFqYjIxdFpXNTBMM2R5YVhSbExXTnZiVzFsYm5RdWRITjRJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12YVhSeWRXeHBZUzlFYjJOMWJXVnVkSE12ZDJWd2RXSnNhWE5vTDJ4cFluTXZZMjl0YldWdWRITXZkMlZpYzJsMFpTOXpjbU12YkdsaUwzZHlhWFJsTFdOdmJXMWxiblF2ZDNKcGRHVXRZMjl0YldWdWRDNTBjM2dpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0NmIyUlNaWE52YkhabGNuMGdabkp2YlNBblFHaHZiMnRtYjNKdEwzSmxjMjlzZG1WeWN5OTZiMlFuWEc1cGJYQnZjblFnZTNOMGVXeGxaSDBnWm5KdmJTQW5RRzExYVM5dFlYUmxjbWxoYkNkY2JtbHRjRzl5ZENCN2RYTmxWWE5sY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5aGRYUm9aVzUwYVdOaGRHbHZiaTkzWldKemFYUmxKMXh1YVcxd2IzSjBJSHQxYzJWWFpXSnphWFJsUW5WcGJHUmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzkzWldKemFYUmxMMkoxYVd4a1pYSW5YRzVwYlhCdmNuUWdlM1Z6WlUxbGJXOTlJR1p5YjIwZ0ozSmxZV04wSjF4dWFXMXdiM0owSUh0RGIyNTBjbTlzYkdWeUxDQjFjMlZHYjNKdGZTQm1jbTl0SUNkeVpXRmpkQzFvYjI5ckxXWnZjbTBuWEc1cGJYQnZjblFnZTAxa1UyVnVaSDBnWm5KdmJTQW5jbVZoWTNRdGFXTnZibk12YldRblhHNXBiWEJ2Y25RZ2UwNXZaR1Y5SUdaeWIyMGdKM05zWVhSbEoxeHVhVzF3YjNKMElIdDZmU0JtY205dElDZDZiMlFuWEc1cGJYQnZjblFnZTNSdlVHeGhhVzUwWlhoMGZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzSnBZMmgwWlhoMEoxeHVhVzF3YjNKMElIdEJjRzlzYkc5RmNuSnZjaXdnVVhWbGNubFNaWE4xYkhSOUlHWnliMjBnSjBCaGNHOXNiRzh2WTJ4cFpXNTBKMXh1YVcxd2IzSjBJSHRjYmlBZ1FXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWekxGeHVJQ0JEYUdGc2JHVnVaMlZSZFdWeWVTeGNiaUFnUldScGRFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzF4dWZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzZGxZbk5wZEdVdllYQnBKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwVjNKaGNIQmxjaUE5SUhOMGVXeGxaQ2duWm05eWJTY3BZRnh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1SUNCbllYQTZJQ1I3S0h0MGFHVnRaWDBwSUQwK0lIUm9aVzFsTG5Od1lXTnBibWNvTWlsOU8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjeUE5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdwMWMzUnBabmt0YzJWc1pqb2dabXhsZUMxbGJtUTdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RabXh2ZHpvZ2NtOTNJSGR5WVhBN1hHNGdJR2RoY0RvZ0pIc29lM1JvWlcxbGZTa2dQVDRnZEdobGJXVXVjM0JoWTJsdVp5Z3hLWDA3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkRhR0ZzYkdWdVoyVlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaM0pwWkMxMFpXMXdiR0YwWlMxamIyeDFiVzV6T2lCdGFXNXRZWGdvYldGNExXTnZiblJsYm5Rc0lESXdNSEI0S1NBeU1EQndlRHRjYmlBZ1lXeHBaMjR0YVhSbGJYTTZJR05sYm5SbGNqdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRE1wZlR0Y2JpQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQm1iR1Y0TFhOMFlYSjBPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbElEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dVhHNGdJSE4yWnlCN1hHNGdJQ0FnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0I5WEc1Z1hHNWNiblI1Y0dVZ1EzSmxZWFJsUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nYm1WMlpYSmNiaUFnZEdsMGJHVS9PaUJ1WlhabGNseHVJQ0JqYUdGc2JHVnVaMlU2SUZCcFkyczhVWFZsY25sU1pYTjFiSFE4UTJoaGJHeGxibWRsVVhWbGNuaytMQ0FuWkdGMFlTY2dmQ0FuYkc5aFpHbHVaeWNnZkNBblpYSnliM0luUGlCOElHNTFiR3hjYmlBZ2IyNVRkV0p0YVhRNklDaGNiaUFnSUNCa1lYUmhPaUJQYldsMFBFRmtaRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmwwWlcxSlJDY2dmQ0FuYVhSbGJWUjVjR1VuSUh3Z0ozQmhjbVZ1ZEVsRUp5QjhJQ2R3WldWeVNXUW5QbHh1SUNBcElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQkZaR2wwUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nVG05a1pWdGRJSHdnYm5Wc2JGeHVJQ0IwYVhSc1pUODZJSE4wY21sdVp5QjhJRzUxYkd4Y2JpQWdZMmhoYkd4bGJtZGxQem9nYm1WMlpYSmNiaUFnYjI1VGRXSnRhWFE2SUNoa1lYUmhPaUJQYldsMFBFVmthWFJEYjIxdFpXNTBUWFYwWVhScGIyNVdZWEpwWVdKc1pYTmJKMmx1Y0hWMEoxMHNJQ2RwWkNjK0tTQTlQaUIyYjJsa1hHNTlYRzVjYm5SNWNHVWdWM0pwZEdWRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lHOXVRMkZ1WTJWc09pQW9LU0E5UGlCMmIybGtYRzRnSUdOc1lYTnpUbUZ0WlQ4NklITjBjbWx1WjF4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb09pQnVkVzFpWlhKY2JpQWdiRzloWkdsdVp6b2dZbTl2YkdWaGJseHVJQ0JsY25KdmNqODZJRUZ3YjJ4c2IwVnljbTl5WEc1OUlDWWdLRU55WldGMFpVTnZiVzFsYm5SUWNtOXdjeUI4SUVWa2FYUkRiMjF0Wlc1MFVISnZjSE1wWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5RZ1BTQW9lMXh1SUNCamJHRnpjMDVoYldVc1hHNGdJRzl1UTJGdVkyVnNMRnh1SUNCdmJsTjFZbTFwZEN4Y2JpQWdiV0Y0UTI5dGJXVnVkRXhsYm1kMGFDeGNiaUFnZEdsMGJHVXNYRzRnSUhSbGVIUXNYRzRnSUdOb1lXeHNaVzVuWlN4Y2JpQWdiRzloWkdsdVoxeHVmVG9nVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1wSUQwK0lIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHVnNaVzFsYm5Sek9pQjdWR1Y0ZEVacFpXeGtMQ0JDZFhSMGIyNTlYRzRnSUgwZ1BTQjFjMlZYWldKemFYUmxRblZwYkdSbGNpZ3BYRzRnSUdOdmJuTjBJSHRvWVhOVmMyVnlmU0E5SUhWelpWVnpaWElvS1Z4dVhHNGdJR052Ym5OMElITmphR1Z0WVNBOUlIVnpaVTFsYlc4b1hHNGdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lIb3VkVzVwYjI0b1cxeHVJQ0FnSUNBZ0lDQjZMbTlpYW1WamRDaDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dGJXVnVkRG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExtMWhlQ2h0WVhoRGIyMXRaVzUwVEdWdVozUm9LU3hjYmlBZ0lDQWdJQ0FnSUNCMGFYUnNaVG9nZWk1emRISnBibWNvS1N4Y2JpQWdJQ0FnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDa3NYRzRnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsT2lCNkxtOWlhbVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiam9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsU1VRNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0I2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2VpNXpkSEpwYm1jb0tWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdYU2tzWEc0Z0lDQWdXMjFoZUVOdmJXMWxiblJNWlc1bmRHaGRYRzRnSUNsY2JseHVJQ0IwZVhCbElFWnZjbTFKYm5CMWRDQTlJSG91YVc1bVpYSThkSGx3Wlc5bUlITmphR1Z0WVQ1Y2JpQWdZMjl1YzNRZ2UyaGhibVJzWlZOMVltMXBkQ3dnWTI5dWRISnZiQ3dnY21WelpYUjlJRDBnZFhObFJtOXliVHhHYjNKdFNXNXdkWFErS0h0Y2JpQWdJQ0J5WlhOdmJIWmxjam9nZW05a1VtVnpiMngyWlhJb2MyTm9aVzFoS1N4Y2JpQWdJQ0JrWldaaGRXeDBWbUZzZFdWek9pQjdYRzRnSUNBZ0lDQmpiMjF0Wlc1ME9pQjBiMUJzWVdsdWRHVjRkQ2gwWlhoMEtTQS9QeUFuSnl4Y2JpQWdJQ0FnSUhScGRHeGxPaUIwYVhSc1pTQS9QeUFuSnl4Y2JpQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJR2hoYzFWelpYSWdQeUFuSnlBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHTm9ZV3hzWlc1blpUb2dhR0Z6VlhObGNseHVJQ0FnSUNBZ0lDQS9JSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUJqYUdGc2JHVnVaMlUvTG1SaGRHRS9MbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZKUkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpWTnZiSFYwYVc5dU9pQW5KMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNCOUxGeHVJQ0FnSUcxdlpHVTZJQ2RoYkd3blhHNGdJSDBwWEc1Y2JpQWdZMjl1YzNRZ2MzVmliV2wwSUQwZ2FHRnVaR3hsVTNWaWJXbDBLQ2g3WTI5dGJXVnVkQ3dnTGk0dVpHRjBZWDBwSUQwK0lIdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5aGtZWFJoS1Z4dVhHNGdJQ0FnYjI1VGRXSnRhWFFvZTF4dUlDQWdJQ0FnTGk0dVpHRjBZU3hjYmlBZ0lDQWdJSFJsZUhRNklGdGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R3WVhKaFozSmhjR2duTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdU9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJR052YlcxbGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmRYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJRjFjYmlBZ0lDQjlLVnh1SUNCOUtWeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEZkeVlYQndaWElnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWOUlHOXVVM1ZpYldsMFBYdHpkV0p0YVhSOVBseHVJQ0FnSUNBZ2V5Rm9ZWE5WYzJWeUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblozVmxjM1JWYzJWeWJtRnRaU2Q5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUkdWcGJpQk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKM1JwZEd4bEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKSGFXSWdSR1ZwYm1WdElFSmxhWFJ5WVdjZ1pXbHVaVzRnVkdsMFpXd3VYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVZHbDBaV3hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOdmJXMWxiblFuZlZ4dUlDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxtWnBaV3hrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsc2FXNWxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmxKdmQzTTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lrdHZiVzFsYm5SaGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa0psYVhSeVlXY2dkbVZ5Wm1GemMyVnVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WUNSN1ptbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb2ZTQXZJQ1I3YldGNFEyOXRiV1Z1ZEV4bGJtZDBhSDBnV21WcFkyaGxibUI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQmphR0ZzYkdWdVoyVS9MbVJoZEdFZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNBZ0lDQThWM0pwZEdWRGIyMXRaVzUwUTJoaGJHeGxibWRsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVEQxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlgyaDBiV3c2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsTG1SaGRHRXVZMmhoYkd4bGJtZGxMbU5vWVd4c1pXNW5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHk1eVpYQnNZV05sS0NjalptWm1abVptSnl3Z0ozUnlZVzV6Y0dGeVpXNTBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0NkM2FXUjBhRDFjSWpJd01Gd2lKeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25hR1ZwWjJoMFBWd2lNakF3WENJbkxDQW5KeWtnUHo4Z0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxQWHNuWTJoaGJHeGxibWRsTG1Ob1lXeHNaVzVuWlZOdmJIVjBhVzl1SjMxY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1FnZXk0dUxtWnBaV3hrZlNCc1lXSmxiRDE3SjBOaGNIUmphR0VuZlNCbGNuSnZjajE3SVNGbGNuSnZjbjBnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJRHd2VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpQbHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQnphWHBsUFZ3aWMyMWhiR3hjSWlCemRHRnlkRWxqYjI0OWV6eE5aRk5sYm1RZ0x6NTlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRmR5WVhCd1pYSStYRzRnSUNsY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZwUW0xREluMD0gKi9cIik7XG5fYyA9IFdyaXRlQ29tbWVudFdyYXBwZXI7XG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50QWN0aW9ucyA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZXdrcHF0ejFcIixcbiAgICBsYWJlbDogXCJXcml0ZUNvbW1lbnRBY3Rpb25zXCJcbn0pKFwianVzdGlmeS1zZWxmOmZsZXgtZW5kO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IHdyYXA7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygxKTtcbn0sIFwiO1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5M2NtbDBaUzFqYjIxdFpXNTBMM2R5YVhSbExXTnZiVzFsYm5RdWRITjRJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12YVhSeWRXeHBZUzlFYjJOMWJXVnVkSE12ZDJWd2RXSnNhWE5vTDJ4cFluTXZZMjl0YldWdWRITXZkMlZpYzJsMFpTOXpjbU12YkdsaUwzZHlhWFJsTFdOdmJXMWxiblF2ZDNKcGRHVXRZMjl0YldWdWRDNTBjM2dpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0NmIyUlNaWE52YkhabGNuMGdabkp2YlNBblFHaHZiMnRtYjNKdEwzSmxjMjlzZG1WeWN5OTZiMlFuWEc1cGJYQnZjblFnZTNOMGVXeGxaSDBnWm5KdmJTQW5RRzExYVM5dFlYUmxjbWxoYkNkY2JtbHRjRzl5ZENCN2RYTmxWWE5sY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5aGRYUm9aVzUwYVdOaGRHbHZiaTkzWldKemFYUmxKMXh1YVcxd2IzSjBJSHQxYzJWWFpXSnphWFJsUW5WcGJHUmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzkzWldKemFYUmxMMkoxYVd4a1pYSW5YRzVwYlhCdmNuUWdlM1Z6WlUxbGJXOTlJR1p5YjIwZ0ozSmxZV04wSjF4dWFXMXdiM0owSUh0RGIyNTBjbTlzYkdWeUxDQjFjMlZHYjNKdGZTQm1jbTl0SUNkeVpXRmpkQzFvYjI5ckxXWnZjbTBuWEc1cGJYQnZjblFnZTAxa1UyVnVaSDBnWm5KdmJTQW5jbVZoWTNRdGFXTnZibk12YldRblhHNXBiWEJ2Y25RZ2UwNXZaR1Y5SUdaeWIyMGdKM05zWVhSbEoxeHVhVzF3YjNKMElIdDZmU0JtY205dElDZDZiMlFuWEc1cGJYQnZjblFnZTNSdlVHeGhhVzUwWlhoMGZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzSnBZMmgwWlhoMEoxeHVhVzF3YjNKMElIdEJjRzlzYkc5RmNuSnZjaXdnVVhWbGNubFNaWE4xYkhSOUlHWnliMjBnSjBCaGNHOXNiRzh2WTJ4cFpXNTBKMXh1YVcxd2IzSjBJSHRjYmlBZ1FXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWekxGeHVJQ0JEYUdGc2JHVnVaMlZSZFdWeWVTeGNiaUFnUldScGRFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzF4dWZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzZGxZbk5wZEdVdllYQnBKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwVjNKaGNIQmxjaUE5SUhOMGVXeGxaQ2duWm05eWJTY3BZRnh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1SUNCbllYQTZJQ1I3S0h0MGFHVnRaWDBwSUQwK0lIUm9aVzFsTG5Od1lXTnBibWNvTWlsOU8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjeUE5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdwMWMzUnBabmt0YzJWc1pqb2dabXhsZUMxbGJtUTdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RabXh2ZHpvZ2NtOTNJSGR5WVhBN1hHNGdJR2RoY0RvZ0pIc29lM1JvWlcxbGZTa2dQVDRnZEdobGJXVXVjM0JoWTJsdVp5Z3hLWDA3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkRhR0ZzYkdWdVoyVlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaM0pwWkMxMFpXMXdiR0YwWlMxamIyeDFiVzV6T2lCdGFXNXRZWGdvYldGNExXTnZiblJsYm5Rc0lESXdNSEI0S1NBeU1EQndlRHRjYmlBZ1lXeHBaMjR0YVhSbGJYTTZJR05sYm5SbGNqdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRE1wZlR0Y2JpQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQm1iR1Y0TFhOMFlYSjBPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbElEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dVhHNGdJSE4yWnlCN1hHNGdJQ0FnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0I5WEc1Z1hHNWNiblI1Y0dVZ1EzSmxZWFJsUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nYm1WMlpYSmNiaUFnZEdsMGJHVS9PaUJ1WlhabGNseHVJQ0JqYUdGc2JHVnVaMlU2SUZCcFkyczhVWFZsY25sU1pYTjFiSFE4UTJoaGJHeGxibWRsVVhWbGNuaytMQ0FuWkdGMFlTY2dmQ0FuYkc5aFpHbHVaeWNnZkNBblpYSnliM0luUGlCOElHNTFiR3hjYmlBZ2IyNVRkV0p0YVhRNklDaGNiaUFnSUNCa1lYUmhPaUJQYldsMFBFRmtaRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmwwWlcxSlJDY2dmQ0FuYVhSbGJWUjVjR1VuSUh3Z0ozQmhjbVZ1ZEVsRUp5QjhJQ2R3WldWeVNXUW5QbHh1SUNBcElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQkZaR2wwUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nVG05a1pWdGRJSHdnYm5Wc2JGeHVJQ0IwYVhSc1pUODZJSE4wY21sdVp5QjhJRzUxYkd4Y2JpQWdZMmhoYkd4bGJtZGxQem9nYm1WMlpYSmNiaUFnYjI1VGRXSnRhWFE2SUNoa1lYUmhPaUJQYldsMFBFVmthWFJEYjIxdFpXNTBUWFYwWVhScGIyNVdZWEpwWVdKc1pYTmJKMmx1Y0hWMEoxMHNJQ2RwWkNjK0tTQTlQaUIyYjJsa1hHNTlYRzVjYm5SNWNHVWdWM0pwZEdWRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lHOXVRMkZ1WTJWc09pQW9LU0E5UGlCMmIybGtYRzRnSUdOc1lYTnpUbUZ0WlQ4NklITjBjbWx1WjF4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb09pQnVkVzFpWlhKY2JpQWdiRzloWkdsdVp6b2dZbTl2YkdWaGJseHVJQ0JsY25KdmNqODZJRUZ3YjJ4c2IwVnljbTl5WEc1OUlDWWdLRU55WldGMFpVTnZiVzFsYm5SUWNtOXdjeUI4SUVWa2FYUkRiMjF0Wlc1MFVISnZjSE1wWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5RZ1BTQW9lMXh1SUNCamJHRnpjMDVoYldVc1hHNGdJRzl1UTJGdVkyVnNMRnh1SUNCdmJsTjFZbTFwZEN4Y2JpQWdiV0Y0UTI5dGJXVnVkRXhsYm1kMGFDeGNiaUFnZEdsMGJHVXNYRzRnSUhSbGVIUXNYRzRnSUdOb1lXeHNaVzVuWlN4Y2JpQWdiRzloWkdsdVoxeHVmVG9nVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1wSUQwK0lIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHVnNaVzFsYm5Sek9pQjdWR1Y0ZEVacFpXeGtMQ0JDZFhSMGIyNTlYRzRnSUgwZ1BTQjFjMlZYWldKemFYUmxRblZwYkdSbGNpZ3BYRzRnSUdOdmJuTjBJSHRvWVhOVmMyVnlmU0E5SUhWelpWVnpaWElvS1Z4dVhHNGdJR052Ym5OMElITmphR1Z0WVNBOUlIVnpaVTFsYlc4b1hHNGdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lIb3VkVzVwYjI0b1cxeHVJQ0FnSUNBZ0lDQjZMbTlpYW1WamRDaDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dGJXVnVkRG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExtMWhlQ2h0WVhoRGIyMXRaVzUwVEdWdVozUm9LU3hjYmlBZ0lDQWdJQ0FnSUNCMGFYUnNaVG9nZWk1emRISnBibWNvS1N4Y2JpQWdJQ0FnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDa3NYRzRnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsT2lCNkxtOWlhbVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiam9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsU1VRNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0I2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2VpNXpkSEpwYm1jb0tWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdYU2tzWEc0Z0lDQWdXMjFoZUVOdmJXMWxiblJNWlc1bmRHaGRYRzRnSUNsY2JseHVJQ0IwZVhCbElFWnZjbTFKYm5CMWRDQTlJSG91YVc1bVpYSThkSGx3Wlc5bUlITmphR1Z0WVQ1Y2JpQWdZMjl1YzNRZ2UyaGhibVJzWlZOMVltMXBkQ3dnWTI5dWRISnZiQ3dnY21WelpYUjlJRDBnZFhObFJtOXliVHhHYjNKdFNXNXdkWFErS0h0Y2JpQWdJQ0J5WlhOdmJIWmxjam9nZW05a1VtVnpiMngyWlhJb2MyTm9aVzFoS1N4Y2JpQWdJQ0JrWldaaGRXeDBWbUZzZFdWek9pQjdYRzRnSUNBZ0lDQmpiMjF0Wlc1ME9pQjBiMUJzWVdsdWRHVjRkQ2gwWlhoMEtTQS9QeUFuSnl4Y2JpQWdJQ0FnSUhScGRHeGxPaUIwYVhSc1pTQS9QeUFuSnl4Y2JpQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJR2hoYzFWelpYSWdQeUFuSnlBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHTm9ZV3hzWlc1blpUb2dhR0Z6VlhObGNseHVJQ0FnSUNBZ0lDQS9JSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUJqYUdGc2JHVnVaMlUvTG1SaGRHRS9MbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZKUkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpWTnZiSFYwYVc5dU9pQW5KMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNCOUxGeHVJQ0FnSUcxdlpHVTZJQ2RoYkd3blhHNGdJSDBwWEc1Y2JpQWdZMjl1YzNRZ2MzVmliV2wwSUQwZ2FHRnVaR3hsVTNWaWJXbDBLQ2g3WTI5dGJXVnVkQ3dnTGk0dVpHRjBZWDBwSUQwK0lIdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5aGtZWFJoS1Z4dVhHNGdJQ0FnYjI1VGRXSnRhWFFvZTF4dUlDQWdJQ0FnTGk0dVpHRjBZU3hjYmlBZ0lDQWdJSFJsZUhRNklGdGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R3WVhKaFozSmhjR2duTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdU9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJR052YlcxbGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmRYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJRjFjYmlBZ0lDQjlLVnh1SUNCOUtWeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEZkeVlYQndaWElnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWOUlHOXVVM1ZpYldsMFBYdHpkV0p0YVhSOVBseHVJQ0FnSUNBZ2V5Rm9ZWE5WYzJWeUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblozVmxjM1JWYzJWeWJtRnRaU2Q5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUkdWcGJpQk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKM1JwZEd4bEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKSGFXSWdSR1ZwYm1WdElFSmxhWFJ5WVdjZ1pXbHVaVzRnVkdsMFpXd3VYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVZHbDBaV3hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOdmJXMWxiblFuZlZ4dUlDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxtWnBaV3hrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsc2FXNWxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmxKdmQzTTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lrdHZiVzFsYm5SaGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa0psYVhSeVlXY2dkbVZ5Wm1GemMyVnVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WUNSN1ptbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb2ZTQXZJQ1I3YldGNFEyOXRiV1Z1ZEV4bGJtZDBhSDBnV21WcFkyaGxibUI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQmphR0ZzYkdWdVoyVS9MbVJoZEdFZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNBZ0lDQThWM0pwZEdWRGIyMXRaVzUwUTJoaGJHeGxibWRsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVEQxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlgyaDBiV3c2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsTG1SaGRHRXVZMmhoYkd4bGJtZGxMbU5vWVd4c1pXNW5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHk1eVpYQnNZV05sS0NjalptWm1abVptSnl3Z0ozUnlZVzV6Y0dGeVpXNTBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0NkM2FXUjBhRDFjSWpJd01Gd2lKeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25hR1ZwWjJoMFBWd2lNakF3WENJbkxDQW5KeWtnUHo4Z0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxQWHNuWTJoaGJHeGxibWRsTG1Ob1lXeHNaVzVuWlZOdmJIVjBhVzl1SjMxY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1FnZXk0dUxtWnBaV3hrZlNCc1lXSmxiRDE3SjBOaGNIUmphR0VuZlNCbGNuSnZjajE3SVNGbGNuSnZjbjBnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJRHd2VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpQbHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQnphWHBsUFZ3aWMyMWhiR3hjSWlCemRHRnlkRWxqYjI0OWV6eE5aRk5sYm1RZ0x6NTlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRmR5WVhCd1pYSStYRzRnSUNsY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZ6UW0xREluMD0gKi9cIik7XG5fYzEgPSBXcml0ZUNvbW1lbnRBY3Rpb25zO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXIgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImRpdlwiLCB7XG4gICAgdGFyZ2V0OiBcImV3a3BxdHoyXCIsXG4gICAgbGFiZWw6IFwiV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlclwiXG59KShcImRpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6bWlubWF4KG1heC1jb250ZW50LDIwMHB4KSAyMDBweDthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygzKTtcbn0sIFwiO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5M2NtbDBaUzFqYjIxdFpXNTBMM2R5YVhSbExXTnZiVzFsYm5RdWRITjRJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12YVhSeWRXeHBZUzlFYjJOMWJXVnVkSE12ZDJWd2RXSnNhWE5vTDJ4cFluTXZZMjl0YldWdWRITXZkMlZpYzJsMFpTOXpjbU12YkdsaUwzZHlhWFJsTFdOdmJXMWxiblF2ZDNKcGRHVXRZMjl0YldWdWRDNTBjM2dpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0NmIyUlNaWE52YkhabGNuMGdabkp2YlNBblFHaHZiMnRtYjNKdEwzSmxjMjlzZG1WeWN5OTZiMlFuWEc1cGJYQnZjblFnZTNOMGVXeGxaSDBnWm5KdmJTQW5RRzExYVM5dFlYUmxjbWxoYkNkY2JtbHRjRzl5ZENCN2RYTmxWWE5sY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5aGRYUm9aVzUwYVdOaGRHbHZiaTkzWldKemFYUmxKMXh1YVcxd2IzSjBJSHQxYzJWWFpXSnphWFJsUW5WcGJHUmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzkzWldKemFYUmxMMkoxYVd4a1pYSW5YRzVwYlhCdmNuUWdlM1Z6WlUxbGJXOTlJR1p5YjIwZ0ozSmxZV04wSjF4dWFXMXdiM0owSUh0RGIyNTBjbTlzYkdWeUxDQjFjMlZHYjNKdGZTQm1jbTl0SUNkeVpXRmpkQzFvYjI5ckxXWnZjbTBuWEc1cGJYQnZjblFnZTAxa1UyVnVaSDBnWm5KdmJTQW5jbVZoWTNRdGFXTnZibk12YldRblhHNXBiWEJ2Y25RZ2UwNXZaR1Y5SUdaeWIyMGdKM05zWVhSbEoxeHVhVzF3YjNKMElIdDZmU0JtY205dElDZDZiMlFuWEc1cGJYQnZjblFnZTNSdlVHeGhhVzUwWlhoMGZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzSnBZMmgwWlhoMEoxeHVhVzF3YjNKMElIdEJjRzlzYkc5RmNuSnZjaXdnVVhWbGNubFNaWE4xYkhSOUlHWnliMjBnSjBCaGNHOXNiRzh2WTJ4cFpXNTBKMXh1YVcxd2IzSjBJSHRjYmlBZ1FXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWekxGeHVJQ0JEYUdGc2JHVnVaMlZSZFdWeWVTeGNiaUFnUldScGRFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzF4dWZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzZGxZbk5wZEdVdllYQnBKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwVjNKaGNIQmxjaUE5SUhOMGVXeGxaQ2duWm05eWJTY3BZRnh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1SUNCbllYQTZJQ1I3S0h0MGFHVnRaWDBwSUQwK0lIUm9aVzFsTG5Od1lXTnBibWNvTWlsOU8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjeUE5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdwMWMzUnBabmt0YzJWc1pqb2dabXhsZUMxbGJtUTdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RabXh2ZHpvZ2NtOTNJSGR5WVhBN1hHNGdJR2RoY0RvZ0pIc29lM1JvWlcxbGZTa2dQVDRnZEdobGJXVXVjM0JoWTJsdVp5Z3hLWDA3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkRhR0ZzYkdWdVoyVlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaM0pwWkMxMFpXMXdiR0YwWlMxamIyeDFiVzV6T2lCdGFXNXRZWGdvYldGNExXTnZiblJsYm5Rc0lESXdNSEI0S1NBeU1EQndlRHRjYmlBZ1lXeHBaMjR0YVhSbGJYTTZJR05sYm5SbGNqdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRE1wZlR0Y2JpQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQm1iR1Y0TFhOMFlYSjBPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbElEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dVhHNGdJSE4yWnlCN1hHNGdJQ0FnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0I5WEc1Z1hHNWNiblI1Y0dVZ1EzSmxZWFJsUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nYm1WMlpYSmNiaUFnZEdsMGJHVS9PaUJ1WlhabGNseHVJQ0JqYUdGc2JHVnVaMlU2SUZCcFkyczhVWFZsY25sU1pYTjFiSFE4UTJoaGJHeGxibWRsVVhWbGNuaytMQ0FuWkdGMFlTY2dmQ0FuYkc5aFpHbHVaeWNnZkNBblpYSnliM0luUGlCOElHNTFiR3hjYmlBZ2IyNVRkV0p0YVhRNklDaGNiaUFnSUNCa1lYUmhPaUJQYldsMFBFRmtaRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmwwWlcxSlJDY2dmQ0FuYVhSbGJWUjVjR1VuSUh3Z0ozQmhjbVZ1ZEVsRUp5QjhJQ2R3WldWeVNXUW5QbHh1SUNBcElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQkZaR2wwUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nVG05a1pWdGRJSHdnYm5Wc2JGeHVJQ0IwYVhSc1pUODZJSE4wY21sdVp5QjhJRzUxYkd4Y2JpQWdZMmhoYkd4bGJtZGxQem9nYm1WMlpYSmNiaUFnYjI1VGRXSnRhWFE2SUNoa1lYUmhPaUJQYldsMFBFVmthWFJEYjIxdFpXNTBUWFYwWVhScGIyNVdZWEpwWVdKc1pYTmJKMmx1Y0hWMEoxMHNJQ2RwWkNjK0tTQTlQaUIyYjJsa1hHNTlYRzVjYm5SNWNHVWdWM0pwZEdWRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lHOXVRMkZ1WTJWc09pQW9LU0E5UGlCMmIybGtYRzRnSUdOc1lYTnpUbUZ0WlQ4NklITjBjbWx1WjF4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb09pQnVkVzFpWlhKY2JpQWdiRzloWkdsdVp6b2dZbTl2YkdWaGJseHVJQ0JsY25KdmNqODZJRUZ3YjJ4c2IwVnljbTl5WEc1OUlDWWdLRU55WldGMFpVTnZiVzFsYm5SUWNtOXdjeUI4SUVWa2FYUkRiMjF0Wlc1MFVISnZjSE1wWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5RZ1BTQW9lMXh1SUNCamJHRnpjMDVoYldVc1hHNGdJRzl1UTJGdVkyVnNMRnh1SUNCdmJsTjFZbTFwZEN4Y2JpQWdiV0Y0UTI5dGJXVnVkRXhsYm1kMGFDeGNiaUFnZEdsMGJHVXNYRzRnSUhSbGVIUXNYRzRnSUdOb1lXeHNaVzVuWlN4Y2JpQWdiRzloWkdsdVoxeHVmVG9nVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1wSUQwK0lIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHVnNaVzFsYm5Sek9pQjdWR1Y0ZEVacFpXeGtMQ0JDZFhSMGIyNTlYRzRnSUgwZ1BTQjFjMlZYWldKemFYUmxRblZwYkdSbGNpZ3BYRzRnSUdOdmJuTjBJSHRvWVhOVmMyVnlmU0E5SUhWelpWVnpaWElvS1Z4dVhHNGdJR052Ym5OMElITmphR1Z0WVNBOUlIVnpaVTFsYlc4b1hHNGdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lIb3VkVzVwYjI0b1cxeHVJQ0FnSUNBZ0lDQjZMbTlpYW1WamRDaDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dGJXVnVkRG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExtMWhlQ2h0WVhoRGIyMXRaVzUwVEdWdVozUm9LU3hjYmlBZ0lDQWdJQ0FnSUNCMGFYUnNaVG9nZWk1emRISnBibWNvS1N4Y2JpQWdJQ0FnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDa3NYRzRnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsT2lCNkxtOWlhbVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiam9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsU1VRNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0I2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2VpNXpkSEpwYm1jb0tWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdYU2tzWEc0Z0lDQWdXMjFoZUVOdmJXMWxiblJNWlc1bmRHaGRYRzRnSUNsY2JseHVJQ0IwZVhCbElFWnZjbTFKYm5CMWRDQTlJSG91YVc1bVpYSThkSGx3Wlc5bUlITmphR1Z0WVQ1Y2JpQWdZMjl1YzNRZ2UyaGhibVJzWlZOMVltMXBkQ3dnWTI5dWRISnZiQ3dnY21WelpYUjlJRDBnZFhObFJtOXliVHhHYjNKdFNXNXdkWFErS0h0Y2JpQWdJQ0J5WlhOdmJIWmxjam9nZW05a1VtVnpiMngyWlhJb2MyTm9aVzFoS1N4Y2JpQWdJQ0JrWldaaGRXeDBWbUZzZFdWek9pQjdYRzRnSUNBZ0lDQmpiMjF0Wlc1ME9pQjBiMUJzWVdsdWRHVjRkQ2gwWlhoMEtTQS9QeUFuSnl4Y2JpQWdJQ0FnSUhScGRHeGxPaUIwYVhSc1pTQS9QeUFuSnl4Y2JpQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJR2hoYzFWelpYSWdQeUFuSnlBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lHTm9ZV3hzWlc1blpUb2dhR0Z6VlhObGNseHVJQ0FnSUNBZ0lDQS9JSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUJqYUdGc2JHVnVaMlUvTG1SaGRHRS9MbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZKUkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpWTnZiSFYwYVc5dU9pQW5KMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNCOUxGeHVJQ0FnSUcxdlpHVTZJQ2RoYkd3blhHNGdJSDBwWEc1Y2JpQWdZMjl1YzNRZ2MzVmliV2wwSUQwZ2FHRnVaR3hsVTNWaWJXbDBLQ2g3WTI5dGJXVnVkQ3dnTGk0dVpHRjBZWDBwSUQwK0lIdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5aGtZWFJoS1Z4dVhHNGdJQ0FnYjI1VGRXSnRhWFFvZTF4dUlDQWdJQ0FnTGk0dVpHRjBZU3hjYmlBZ0lDQWdJSFJsZUhRNklGdGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R3WVhKaFozSmhjR2duTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdU9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUTZJR052YlcxbGJuUmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmRYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJRjFjYmlBZ0lDQjlLVnh1SUNCOUtWeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEZkeVlYQndaWElnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWOUlHOXVVM1ZpYldsMFBYdHpkV0p0YVhSOVBseHVJQ0FnSUNBZ2V5Rm9ZWE5WYzJWeUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblozVmxjM1JWYzJWeWJtRnRaU2Q5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUkdWcGJpQk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKM1JwZEd4bEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKSGFXSWdSR1ZwYm1WdElFSmxhWFJ5WVdjZ1pXbHVaVzRnVkdsMFpXd3VYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVZHbDBaV3hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOdmJXMWxiblFuZlZ4dUlDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxtWnBaV3hrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsc2FXNWxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmxKdmQzTTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lrdHZiVzFsYm5SaGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa0psYVhSeVlXY2dkbVZ5Wm1GemMyVnVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WUNSN1ptbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb2ZTQXZJQ1I3YldGNFEyOXRiV1Z1ZEV4bGJtZDBhSDBnV21WcFkyaGxibUI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQmphR0ZzYkdWdVoyVS9MbVJoZEdFZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNBZ0lDQThWM0pwZEdWRGIyMXRaVzUwUTJoaGJHeGxibWRsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVEQxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlgyaDBiV3c2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsTG1SaGRHRXVZMmhoYkd4bGJtZGxMbU5vWVd4c1pXNW5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHk1eVpYQnNZV05sS0NjalptWm1abVptSnl3Z0ozUnlZVzV6Y0dGeVpXNTBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0NkM2FXUjBhRDFjSWpJd01Gd2lKeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25hR1ZwWjJoMFBWd2lNakF3WENJbkxDQW5KeWtnUHo4Z0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxQWHNuWTJoaGJHeGxibWRsTG1Ob1lXeHNaVzVuWlZOdmJIVjBhVzl1SjMxY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1FnZXk0dUxtWnBaV3hrZlNCc1lXSmxiRDE3SjBOaGNIUmphR0VuZlNCbGNuSnZjajE3SVNGbGNuSnZjbjBnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJRHd2VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpQbHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQnphWHBsUFZ3aWMyMWhiR3hjSWlCemRHRnlkRWxqYjI0OWV6eE5aRk5sYm1RZ0x6NTlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRmR5WVhCd1pYSStYRzRnSUNsY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUUyUWpSREluMD0gKi9cIik7XG5fYzIgPSBXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZSA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZXdrcHF0ejNcIixcbiAgICBsYWJlbDogXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VcIlxufSkoXCJoZWlnaHQ6MTAwJTtkaXNwbGF5OmdyaWQ7c3Zne2hlaWdodDoxMDAlO31cIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOTNjbWwwWlMxamIyMXRaVzUwTDNkeWFYUmxMV052YlcxbGJuUXVkSE40SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFYUnlkV3hwWVM5RWIyTjFiV1Z1ZEhNdmQyVndkV0pzYVhOb0wyeHBZbk12WTI5dGJXVnVkSE12ZDJWaWMybDBaUzl6Y21NdmJHbGlMM2R5YVhSbExXTnZiVzFsYm5RdmQzSnBkR1V0WTI5dGJXVnVkQzUwYzNnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIdDZiMlJTWlhOdmJIWmxjbjBnWm5KdmJTQW5RR2h2YjJ0bWIzSnRMM0psYzI5c2RtVnljeTk2YjJRblhHNXBiWEJ2Y25RZ2UzTjBlV3hsWkgwZ1puSnZiU0FuUUcxMWFTOXRZWFJsY21saGJDZGNibWx0Y0c5eWRDQjdkWE5sVlhObGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOWhkWFJvWlc1MGFXTmhkR2x2Ymk5M1pXSnphWFJsSjF4dWFXMXdiM0owSUh0MWMyVlhaV0p6YVhSbFFuVnBiR1JsY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5M1pXSnphWFJsTDJKMWFXeGtaWEluWEc1cGJYQnZjblFnZTNWelpVMWxiVzk5SUdaeWIyMGdKM0psWVdOMEoxeHVhVzF3YjNKMElIdERiMjUwY205c2JHVnlMQ0IxYzJWR2IzSnRmU0JtY205dElDZHlaV0ZqZEMxb2IyOXJMV1p2Y20wblhHNXBiWEJ2Y25RZ2UwMWtVMlZ1WkgwZ1puSnZiU0FuY21WaFkzUXRhV052Ym5NdmJXUW5YRzVwYlhCdmNuUWdlMDV2WkdWOUlHWnliMjBnSjNOc1lYUmxKMXh1YVcxd2IzSjBJSHQ2ZlNCbWNtOXRJQ2Q2YjJRblhHNXBiWEJ2Y25RZ2UzUnZVR3hoYVc1MFpYaDBmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM0pwWTJoMFpYaDBKMXh1YVcxd2IzSjBJSHRCY0c5c2JHOUZjbkp2Y2l3Z1VYVmxjbmxTWlhOMWJIUjlJR1p5YjIwZ0owQmhjRzlzYkc4dlkyeHBaVzUwSjF4dWFXMXdiM0owSUh0Y2JpQWdRV1JrUTI5dGJXVnVkRTExZEdGMGFXOXVWbUZ5YVdGaWJHVnpMRnh1SUNCRGFHRnNiR1Z1WjJWUmRXVnllU3hjYmlBZ1JXUnBkRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxeHVmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM2RsWW5OcGRHVXZZWEJwSjF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFYzSmhjSEJsY2lBOUlITjBlV3hsWkNnblptOXliU2NwWUZ4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dUlDQm5ZWEE2SUNSN0tIdDBhR1Z0WlgwcElEMCtJSFJvWlcxbExuTndZV05wYm1jb01pbDlPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFFXTjBhVzl1Y3lBOUlITjBlV3hsWkNnblpHbDJKeWxnWEc0Z0lHcDFjM1JwWm5rdGMyVnNaam9nWm14bGVDMWxibVE3WEc0Z0lHUnBjM0JzWVhrNklHWnNaWGc3WEc0Z0lHWnNaWGd0Wm14dmR6b2djbTkzSUhkeVlYQTdYRzRnSUdkaGNEb2dKSHNvZTNSb1pXMWxmU2tnUFQ0Z2RHaGxiV1V1YzNCaFkybHVaeWd4S1gwN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJEYUdGc2JHVnVaMlZYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjNKcFpDMTBaVzF3YkdGMFpTMWpiMngxYlc1ek9pQnRhVzV0WVhnb2JXRjRMV052Ym5SbGJuUXNJREl3TUhCNEtTQXlNREJ3ZUR0Y2JpQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RNcGZUdGNiaUFnYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJtYkdWNExYTjBZWEowTzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBRMmhoYkd4bGJtZGxJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0JrYVhOd2JHRjVPaUJuY21sa08xeHVYRzRnSUhOMlp5QjdYRzRnSUNBZ2FHVnBaMmgwT2lBeE1EQWxPMXh1SUNCOVhHNWdYRzVjYm5SNWNHVWdRM0psWVhSbFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ2JtVjJaWEpjYmlBZ2RHbDBiR1UvT2lCdVpYWmxjbHh1SUNCamFHRnNiR1Z1WjJVNklGQnBZMnM4VVhWbGNubFNaWE4xYkhROFEyaGhiR3hsYm1kbFVYVmxjbmsrTENBblpHRjBZU2NnZkNBbmJHOWhaR2x1WnljZ2ZDQW5aWEp5YjNJblBpQjhJRzUxYkd4Y2JpQWdiMjVUZFdKdGFYUTZJQ2hjYmlBZ0lDQmtZWFJoT2lCUGJXbDBQRUZrWkVOdmJXMWxiblJOZFhSaGRHbHZibFpoY21saFlteGxjMXNuYVc1d2RYUW5YU3dnSjJsMFpXMUpSQ2NnZkNBbmFYUmxiVlI1Y0dVbklId2dKM0JoY21WdWRFbEVKeUI4SUNkd1pXVnlTV1FuUGx4dUlDQXBJRDArSUhadmFXUmNibjFjYmx4dWRIbHdaU0JGWkdsMFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ1RtOWtaVnRkSUh3Z2JuVnNiRnh1SUNCMGFYUnNaVDg2SUhOMGNtbHVaeUI4SUc1MWJHeGNiaUFnWTJoaGJHeGxibWRsUHpvZ2JtVjJaWEpjYmlBZ2IyNVRkV0p0YVhRNklDaGtZWFJoT2lCUGJXbDBQRVZrYVhSRGIyMXRaVzUwVFhWMFlYUnBiMjVXWVhKcFlXSnNaWE5iSjJsdWNIVjBKMTBzSUNkcFpDYytLU0E5UGlCMmIybGtYRzU5WEc1Y2JuUjVjR1VnVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1nUFNCN1hHNGdJRzl1UTJGdVkyVnNPaUFvS1NBOVBpQjJiMmxrWEc0Z0lHTnNZWE56VG1GdFpUODZJSE4wY21sdVoxeHVJQ0J0WVhoRGIyMXRaVzUwVEdWdVozUm9PaUJ1ZFcxaVpYSmNiaUFnYkc5aFpHbHVaem9nWW05dmJHVmhibHh1SUNCbGNuSnZjajg2SUVGd2IyeHNiMFZ5Y205eVhHNTlJQ1lnS0VOeVpXRjBaVU52YlcxbGJuUlFjbTl3Y3lCOElFVmthWFJEYjIxdFpXNTBVSEp2Y0hNcFhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUWdQU0FvZTF4dUlDQmpiR0Z6YzA1aGJXVXNYRzRnSUc5dVEyRnVZMlZzTEZ4dUlDQnZibE4xWW0xcGRDeGNiaUFnYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ3hjYmlBZ2RHbDBiR1VzWEc0Z0lIUmxlSFFzWEc0Z0lHTm9ZV3hzWlc1blpTeGNiaUFnYkc5aFpHbHVaMXh1ZlRvZ1YzSnBkR1ZEYjIxdFpXNTBVSEp2Y0hNcElEMCtJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR1ZzWlcxbGJuUnpPaUI3VkdWNGRFWnBaV3hrTENCQ2RYUjBiMjU5WEc0Z0lIMGdQU0IxYzJWWFpXSnphWFJsUW5WcGJHUmxjaWdwWEc0Z0lHTnZibk4wSUh0b1lYTlZjMlZ5ZlNBOUlIVnpaVlZ6WlhJb0tWeHVYRzRnSUdOdmJuTjBJSE5qYUdWdFlTQTlJSFZ6WlUxbGJXOG9YRzRnSUNBZ0tDa2dQVDVjYmlBZ0lDQWdJSG91ZFc1cGIyNG9XMXh1SUNBZ0lDQWdJQ0I2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2VpNXpkSEpwYm1jb0tTeGNiaUFnSUNBZ0lDQWdJQ0JuZFdWemRGVnpaWEp1WVcxbE9pQjZMbk4wY21sdVp5Z3BMbTV2Ym1WdGNIUjVLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbE9pQjZMbTlpYW1WamRDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJWVGIyeDFkR2x2YmpvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFNVUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1Z4dUlDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNCNkxtOWlhbVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdZMjl0YldWdWREb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwTG0xaGVDaHRZWGhEYjIxdFpXNTBUR1Z1WjNSb0tTeGNiaUFnSUNBZ0lDQWdJQ0IwYVhSc1pUb2dlaTV6ZEhKcGJtY29LVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnWFNrc1hHNGdJQ0FnVzIxaGVFTnZiVzFsYm5STVpXNW5kR2hkWEc0Z0lDbGNibHh1SUNCMGVYQmxJRVp2Y20xSmJuQjFkQ0E5SUhvdWFXNW1aWEk4ZEhsd1pXOW1JSE5qYUdWdFlUNWNiaUFnWTI5dWMzUWdlMmhoYm1Sc1pWTjFZbTFwZEN3Z1kyOXVkSEp2YkN3Z2NtVnpaWFI5SUQwZ2RYTmxSbTl5YlR4R2IzSnRTVzV3ZFhRK0tIdGNiaUFnSUNCeVpYTnZiSFpsY2pvZ2VtOWtVbVZ6YjJ4MlpYSW9jMk5vWlcxaEtTeGNiaUFnSUNCa1pXWmhkV3gwVm1Gc2RXVnpPaUI3WEc0Z0lDQWdJQ0JqYjIxdFpXNTBPaUIwYjFCc1lXbHVkR1Y0ZENoMFpYaDBLU0EvUHlBbkp5eGNiaUFnSUNBZ0lIUnBkR3hsT2lCMGFYUnNaU0EvUHlBbkp5eGNiaUFnSUNBZ0lHZDFaWE4wVlhObGNtNWhiV1U2SUdoaGMxVnpaWElnUHlBbkp5QTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJR05vWVd4c1pXNW5aVG9nYUdGelZYTmxjbHh1SUNBZ0lDQWdJQ0EvSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVWxFT2lCamFHRnNiR1Z1WjJVL0xtUmhkR0UvTG1Ob1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWSlJDQS9QeUFuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVk52YkhWMGFXOXVPaUFuSjF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQjlMRnh1SUNBZ0lHMXZaR1U2SUNkaGJHd25YRzRnSUgwcFhHNWNiaUFnWTI5dWMzUWdjM1ZpYldsMElEMGdhR0Z1Wkd4bFUzVmliV2wwS0NoN1kyOXRiV1Z1ZEN3Z0xpNHVaR0YwWVgwcElEMCtJSHRjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWhrWVhSaEtWeHVYRzRnSUNBZ2IyNVRkV0p0YVhRb2UxeHVJQ0FnSUNBZ0xpNHVaR0YwWVN4Y2JpQWdJQ0FnSUhSbGVIUTZJRnRjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkd1lYSmhaM0poY0dnbkxGeHVJQ0FnSUNBZ0lDQWdJR05vYVd4a2NtVnVPaUJiWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFE2SUdOdmJXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUYxY2JpQWdJQ0I5S1Z4dUlDQjlLVnh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEZkeWFYUmxRMjl0YldWdWRGZHlZWEJ3WlhJZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVjlJRzl1VTNWaWJXbDBQWHR6ZFdKdGFYUjlQbHh1SUNBZ0lDQWdleUZvWVhOVmMyVnlJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdJQ0J1WVcxbFBYc25aM1ZsYzNSVmMyVnlibUZ0WlNkOVhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdJQ0J5Wlc1a1pYSTlleWg3Wm1sbGJHUXNJR1pwWld4a1UzUmhkR1U2SUh0bGNuSnZjbjE5S1NBOVBpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5Wc2JGZHBaSFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFZ3aVJHVnBiaUJPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c5WENKT1lXMWxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdobGJIQmxjbFJsZUhROWUyVnljbTl5UHk1dFpYTnpZV2RsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdLWDFjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjNScGRHeGxKMzFjYmlBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4VVpYaDBSbWxsYkdSY2JpQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJOVhDSkhhV0lnUkdWcGJtVnRJRUpsYVhSeVlXY2daV2x1Wlc0Z1ZHbDBaV3d1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc1BWd2lWR2wwWld4Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSTlleUVoWlhKeWIzSjlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnTHo1Y2JseHVJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdibUZ0WlQxN0oyTnZiVzFsYm5RbmZWeHVJQ0FnSUNBZ0lDQmpiMjUwY205c1BYdGpiMjUwY205c2ZWeHVJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2V5NHVMbVpwWld4a2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYlhWc2RHbHNhVzVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHaGNiaUFnSUNBZ0lDQWdJQ0FnSUcxcGJsSnZkM005ZXpWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEMWNJa3R2YlcxbGJuUmhjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajFjSWtKbGFYUnlZV2NnZG1WeVptRnpjMlZ1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWc2NHVnlWR1Y0ZEQxN1lDUjdabWxsYkdRdWRtRnNkV1V1YkdWdVozUm9mU0F2SUNSN2JXRjRRMjl0YldWdWRFeGxibWQwYUgwZ1dtVnBZMmhsYm1COVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lIc2hhR0Z6VlhObGNpQW1KaUJqYUdGc2JHVnVaMlUvTG1SaGRHRWdKaVlnS0Z4dUlDQWdJQ0FnSUNBOFYzSnBkR1ZEYjIxdFpXNTBRMmhoYkd4bGJtZGxWM0poY0hCbGNqNWNiaUFnSUNBZ0lDQWdJQ0E4VjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlREMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZYMmgwYld3NlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbExtUmhkR0V1WTJoaGJHeGxibWRsTG1Ob1lXeHNaVzVuWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5NXlaWEJzWVdObEtDY2pabVptWm1abUp5d2dKM1J5WVc1emNHRnlaVzUwSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDZDNhV1IwYUQxY0lqSXdNRndpSnl3Z0p5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2duYUdWcFoyaDBQVndpTWpBd1hDSW5MQ0FuSnlrZ1B6OGdKeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JseHVJQ0FnSUNBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblkyaGhiR3hsYm1kbExtTm9ZV3hzWlc1blpWTnZiSFYwYVc5dUozMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4VVpYaDBSbWxsYkdRZ2V5NHVMbVpwWld4a2ZTQnNZV0psYkQxN0owTmhjSFJqYUdFbmZTQmxjbkp2Y2oxN0lTRmxjbkp2Y24wZ2FHVnNjR1Z5VkdWNGREMTdaWEp5YjNJL0xtMWxjM05oWjJWOUlDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRMmhoYkd4bGJtZGxWM0poY0hCbGNqNWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhYY21sMFpVTnZiVzFsYm5SQlkzUnBiMjV6UGx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1SUhSNWNHVTlYQ0p6ZFdKdGFYUmNJaUJ6YVhwbFBWd2ljMjFoYkd4Y0lpQnpkR0Z5ZEVsamIyNDllenhOWkZObGJtUWdMejU5UGx4dUlDQWdJQ0FnSUNBZ0lFdHZiVzFsYm5ScFpYSmxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5KbGMyVjBYQ0pjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOaGJtTmxiQ2dwWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbFBWd2ljMjFoYkd4Y0lseHVJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTlYQ0owWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMWNJbk5sWTI5dVpHRnllVndpUGx4dUlDQWdJQ0FnSUNBZ0lFRmlZbkpsWTJobGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lEd3ZWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjejVjYmlBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEZkeVlYQndaWEkrWEc0Z0lDbGNibjFjYmlKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGeFEzRkRJbjA9ICovXCIpO1xuX2MzID0gV3JpdGVDb21tZW50Q2hhbGxlbmdlO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudCA9IChwYXJhbSk9PntcbiAgICBsZXQgeyBjbGFzc05hbWUgLCBvbkNhbmNlbCAsIG9uU3VibWl0ICwgbWF4Q29tbWVudExlbmd0aCAsIHRpdGxlICwgdGV4dCAsIGNoYWxsZW5nZSAsIGxvYWRpbmcgIH0gPSBwYXJhbTtcbiAgICB2YXIgX2NoYWxsZW5nZV9kYXRhLCBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZTtcbiAgICBfcygpO1xuICAgIGNvbnN0IHsgZWxlbWVudHM6IHsgVGV4dEZpZWxkICwgQnV0dG9uICB9ICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKTtcbiAgICBjb25zdCB7IGhhc1VzZXIgIH0gPSB1c2VVc2VyKCk7XG4gICAgY29uc3Qgc2NoZW1hID0gdXNlTWVtbygoKT0+ei51bmlvbihbXG4gICAgICAgICAgICB6Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBndWVzdFVzZXJuYW1lOiB6LnN0cmluZygpLm5vbmVtcHR5KCksXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZVNvbHV0aW9uOiB6LnN0cmluZygpLm5vbmVtcHR5KCksXG4gICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZUlEOiB6LnN0cmluZygpLm5vbmVtcHR5KClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB6Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSksIFtcbiAgICAgICAgbWF4Q29tbWVudExlbmd0aFxuICAgIF0pO1xuICAgIHZhciBfdG9QbGFpbnRleHQsIF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlSUQ7XG4gICAgY29uc3QgeyBoYW5kbGVTdWJtaXQgLCBjb250cm9sICwgcmVzZXQgIH0gPSB1c2VGb3JtKHtcbiAgICAgICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKHNjaGVtYSksXG4gICAgICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgICAgICAgIGNvbW1lbnQ6IChfdG9QbGFpbnRleHQgPSB0b1BsYWludGV4dCh0ZXh0KSkgIT09IG51bGwgJiYgX3RvUGxhaW50ZXh0ICE9PSB2b2lkIDAgPyBfdG9QbGFpbnRleHQgOiBcIlwiLFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlICE9PSBudWxsICYmIHRpdGxlICE9PSB2b2lkIDAgPyB0aXRsZSA6IFwiXCIsXG4gICAgICAgICAgICBndWVzdFVzZXJuYW1lOiBoYXNVc2VyID8gXCJcIiA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNoYWxsZW5nZTogaGFzVXNlciA/IHtcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2VJRDogKF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlSUQgPSBjaGFsbGVuZ2UgPT09IG51bGwgfHwgY2hhbGxlbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2NoYWxsZW5nZV9kYXRhID0gY2hhbGxlbmdlLmRhdGEpID09PSBudWxsIHx8IF9jaGFsbGVuZ2VfZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NoYWxsZW5nZV9kYXRhLmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCkgIT09IG51bGwgJiYgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VJRCAhPT0gdm9pZCAwID8gX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VJRCA6IFwiXCIsXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IFwiXCJcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgbW9kZTogXCJhbGxcIlxuICAgIH0pO1xuICAgIGNvbnN0IHN1Ym1pdCA9IGhhbmRsZVN1Ym1pdCgocGFyYW0pPT57XG4gICAgICAgIGxldCB7IGNvbW1lbnQgLCAuLi5kYXRhIH0gPSBwYXJhbTtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIG9uU3VibWl0KHtcbiAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICB0ZXh0OiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInBhcmFncmFwaFwiLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlX3JlcGxhY2VfcmVwbGFjZV9yZXBsYWNlO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIF9qc3hERVYoV3JpdGVDb21tZW50V3JhcHBlciwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb25TdWJtaXQ6IHN1Ym1pdCxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICFoYXNVc2VyICYmIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJndWVzdFVzZXJuYW1lXCIsXG4gICAgICAgICAgICAgICAgY29udHJvbDogY29udHJvbCxcbiAgICAgICAgICAgICAgICByZW5kZXI6IChwYXJhbSk9PntcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gcmV0dXJuIF9qc3hERVYoVGV4dEZpZWxkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIkRlaW4gTmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE0NCxcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDlcbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRpdGxlXCIsXG4gICAgICAgICAgICAgICAgY29udHJvbDogY29udHJvbCxcbiAgICAgICAgICAgICAgICByZW5kZXI6IChwYXJhbSk9PntcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gcmV0dXJuIF9qc3hERVYoVGV4dEZpZWxkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIkdpYiBEZWluZW0gQmVpdHJhZyBlaW5lbiBUaXRlbC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlRpdGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogISFlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlclRleHQ6IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTYwLFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogN1xuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQ29udHJvbGxlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiY29tbWVudFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT4vKiNfX1BVUkVfXyovIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5Sb3dzOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiS29tbWVudGFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJCZWl0cmFnIHZlcmZhc3NlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBcIlwiLmNvbmNhdChmaWVsZC52YWx1ZS5sZW5ndGgsIFwiIC8gXCIpLmNvbmNhdChtYXhDb21tZW50TGVuZ3RoLCBcIiBaZWljaGVuXCIpXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTc1LFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogN1xuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAhaGFzVXNlciAmJiAoY2hhbGxlbmdlID09PSBudWxsIHx8IGNoYWxsZW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hhbGxlbmdlLmRhdGEpICYmIC8qI19fUFVSRV9fKi8gX2pzeERFVihXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKFdyaXRlQ29tbWVudENoYWxsZW5nZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2h0bWw6IChfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZV9yZXBsYWNlX3JlcGxhY2VfcmVwbGFjZSA9IChfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZSA9IGNoYWxsZW5nZS5kYXRhLmNoYWxsZW5nZS5jaGFsbGVuZ2UpID09PSBudWxsIHx8IF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZS5yZXBsYWNlKFwiI2ZmZmZmZlwiLCBcInRyYW5zcGFyZW50XCIpLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCBcIlwiKS5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsIFwiXCIpKSAhPT0gbnVsbCAmJiBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZV9yZXBsYWNlX3JlcGxhY2VfcmVwbGFjZSAhPT0gdm9pZCAwID8gX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTk0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiAxMVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyByZXR1cm4gX2pzeERFVihUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNhcHRjaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlclRleHQ6IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwgdm9pZCAwLCB2b2lkIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDIwNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMTFcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCB2b2lkIDAsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxOTMsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihXcml0ZUNvbW1lbnRBY3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdWJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SWNvbjogLyojX19QVVJFX18qLyBfanN4REVWKE1kU2VuZCwge30sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBcIktvbW1lbnRpZXJlblwiXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMjE1LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlc2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInNlY29uZGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFwiQWJicmVjaGVuXCJcbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMTksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDlcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCB2b2lkIDAsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMTQsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA3XG4gICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICBdXG4gICAgfSwgdm9pZCAwLCB0cnVlLCB7XG4gICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICBsaW5lTnVtYmVyOiAxNDIsXG4gICAgICAgIGNvbHVtbk51bWJlcjogNVxuICAgIH0sIHRoaXMpO1xufTtcbl9zKFdyaXRlQ29tbWVudCwgXCJIYmxPYXdrWGpnM09zME1nTlpjbk05dW1SVmM9XCIsIGZhbHNlLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICB1c2VXZWJzaXRlQnVpbGRlcixcbiAgICAgICAgdXNlVXNlcixcbiAgICAgICAgdXNlRm9ybVxuICAgIF07XG59KTtcbl9jNCA9IFdyaXRlQ29tbWVudDtcbnZhciBfYywgX2MxLCBfYzIsIF9jMywgX2M0O1xuJFJlZnJlc2hSZWckKF9jLCBcIldyaXRlQ29tbWVudFdyYXBwZXJcIik7XG4kUmVmcmVzaFJlZyQoX2MxLCBcIldyaXRlQ29tbWVudEFjdGlvbnNcIik7XG4kUmVmcmVzaFJlZyQoX2MyLCBcIldyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXJcIik7XG4kUmVmcmVzaFJlZyQoX2MzLCBcIldyaXRlQ29tbWVudENoYWxsZW5nZVwiKTtcbiRSZWZyZXNoUmVnJChfYzQsIFwiV3JpdGVDb21tZW50XCIpO1xuXG5cbjtcbiAgICAvLyBXcmFwcGVkIGluIGFuIElJRkUgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBnbG9iYWwgc2NvcGVcbiAgICA7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XG4gICAgICAgIC8vIHRvIGV4dHJhY3QgQ1NTLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gY2hlY2sgd2UncmUgaW4gYVxuICAgICAgICAvLyBicm93c2VyIGNvbnRleHQgYmVmb3JlIGNvbnRpbnVpbmcuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIC8vIEFNUCAvIE5vLUpTIG1vZGUgZG9lcyBub3QgaW5qZWN0IHRoZXNlIGhlbHBlcnM6XG4gICAgICAgICAgICAnJFJlZnJlc2hIZWxwZXJzJCcgaW4gc2VsZikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXG4gICAgICAgICAgICB2YXIgY3VycmVudEV4cG9ydHMgPSBfX3dlYnBhY2tfbW9kdWxlX18uZXhwb3J0cztcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gX193ZWJwYWNrX21vZHVsZV9fLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBoYXBwZW4gaW4gTWFpblRlbXBsYXRlIGJlY2F1c2UgdGhlIGV4cG9ydHMgbWlzbWF0Y2ggYmV0d2VlblxuICAgICAgICAgICAgLy8gdGVtcGxhdGluZyBhbmQgZXhlY3V0aW9uLlxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgX193ZWJwYWNrX21vZHVsZV9fLmlkKTtcbiAgICAgICAgICAgIC8vIEEgbW9kdWxlIGNhbiBiZSBhY2NlcHRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIGl0cyBleHBvcnRzLCBlLmcuIHdoZW5cbiAgICAgICAgICAgIC8vIGl0IGlzIGEgUmVmcmVzaCBCb3VuZGFyeS5cbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyBleHBvcnRzIG9uIHVwZGF0ZSBzbyB3ZSBjYW4gY29tcGFyZSB0aGUgYm91bmRhcnlcbiAgICAgICAgICAgICAgICAvLyBzaWduYXR1cmVzLlxuICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZXZFeHBvcnRzID0gY3VycmVudEV4cG9ydHM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBhIFJlZnJlc2ggQm91bmRhcnkgbGF0ZXIuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbXBvcnRNZXRhIGlzIHJlcGxhY2VkIGluIHRoZSBsb2FkZXJcbiAgICAgICAgICAgICAgICBpbXBvcnQubWV0YS53ZWJwYWNrSG90LmFjY2VwdCgpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgc2V0IHdoZW4gdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBtb2R1bGUgd2FzIGFcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIEJvdW5kYXJ5LCBsZXR0aW5nIHVzIGtub3cgd2UgbmVlZCB0byBjaGVjayBmb3IgaW52YWxpZGF0aW9uIG9yXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFeHBvcnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYm91bmRhcnkgY2FuIGJlY29tZSBpbmVsaWdpYmxlIGlmIGl0cyBleHBvcnRzIGFyZSBpbmNvbXBhdGlibGVcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQvcmVtb3ZlL2NoYW5nZSBleHBvcnRzLCB3ZSdsbCB3YW50IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xuICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIuIFNpbWlsYXJseSwgaWYgeW91IGNvbnZlcnQgYSBjbGFzcyBjb21wb25lbnQgdG8gYVxuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2Ugd2FudCB0byBpbnZhbGlkYXRlIHRoZSBib3VuZGFyeS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX193ZWJwYWNrX21vZHVsZV9fLmhvdC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAvLyBuZXcgZXhwb3J0cyBtYWRlIGl0IGluZWxpZ2libGUgZm9yIGJlaW5nIGEgYm91bmRhcnkuXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBjYXNlIHdoZW4gd2Ugd2VyZSBfcHJldmlvdXNseV8gYSBib3VuZGFyeSxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxuICAgICAgICAgICAgICAgIHZhciBpc05vTG9uZ2VyQUJvdW5kYXJ5ID0gcHJldkV4cG9ydHMgIT09IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGlzTm9Mb25nZXJBQm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgX193ZWJwYWNrX21vZHVsZV9fLmhvdC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkoKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQjBEIn0= */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\",\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const schema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.union([\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n                guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                    challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                    challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n                })\n            }),\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n            })\n        ]), [\n        maxCommentLength\n    ]);\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: hasUser ? \"\" : undefined,\n            challenge: hasUser ? {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            } : undefined\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        console.log(data);\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 144,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 160,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 175,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 194,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 204,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 193,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 215,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 214,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n        lineNumber: 142,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"OM6pQApLTVh/0ARLk0PrIi+fqg4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"HblOawkXjg3Os0MgNZcnM9umRVc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/write-comment/write-comment.tsx\n"));

/***/ })

});