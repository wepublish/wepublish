"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/write-comment/write-comment.tsx":
/*!***************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/write-comment/write-comment.tsx ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\",\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\",\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt6b2RSZXNvbHZlcn0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnXG5pbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHt1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtDb250cm9sbGVyLCB1c2VGb3JtfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nXG5pbXBvcnQge01kU2VuZH0gZnJvbSAncmVhY3QtaWNvbnMvbWQnXG5pbXBvcnQge05vZGV9IGZyb20gJ3NsYXRlJ1xuaW1wb3J0IHt6fSBmcm9tICd6b2QnXG5pbXBvcnQge3RvUGxhaW50ZXh0fSBmcm9tICdAd2VwdWJsaXNoL3JpY2h0ZXh0J1xuaW1wb3J0IHtRdWVyeVJlc3VsdH0gZnJvbSAnQGFwb2xsby9jbGllbnQnXG5pbXBvcnQge1xuICBBZGRDb21tZW50TXV0YXRpb25WYXJpYWJsZXMsXG4gIENoYWxsZW5nZVF1ZXJ5LFxuICBFZGl0Q29tbWVudE11dGF0aW9uVmFyaWFibGVzXG59IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRXcmFwcGVyID0gc3R5bGVkKCdmb3JtJylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZygyKX07XG5gXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXIgPSBzdHlsZWQoJ2RpdicpYFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heChtYXgtY29udGVudCwgMjAwcHgpIDIwMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5gXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRDaGFsbGVuZ2UgPSBzdHlsZWQoJ2RpdicpYFxuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGdyaWQ7XG5cbiAgc3ZnIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbmBcblxudHlwZSBDcmVhdGVDb21tZW50UHJvcHMgPSB7XG4gIHRleHQ/OiBuZXZlclxuICB0aXRsZT86IG5ldmVyXG4gIGNoYWxsZW5nZTogUGljazxRdWVyeVJlc3VsdDxDaGFsbGVuZ2VRdWVyeT4sICdkYXRhJyB8ICdsb2FkaW5nJyB8ICdlcnJvcic+IHwgbnVsbFxuICBvblN1Ym1pdDogKFxuICAgIGRhdGE6IE9taXQ8QWRkQ29tbWVudE11dGF0aW9uVmFyaWFibGVzWydpbnB1dCddLCAnaXRlbUlEJyB8ICdpdGVtVHlwZScgfCAncGFyZW50SUQnIHwgJ3BlZXJJZCc+XG4gICkgPT4gdm9pZFxufVxuXG50eXBlIEVkaXRDb21tZW50UHJvcHMgPSB7XG4gIHRleHQ/OiBOb2RlW10gfCBudWxsXG4gIHRpdGxlPzogc3RyaW5nIHwgbnVsbFxuICBjaGFsbGVuZ2U/OiBuZXZlclxuICBvblN1Ym1pdDogKGRhdGE6IE9taXQ8RWRpdENvbW1lbnRNdXRhdGlvblZhcmlhYmxlc1snaW5wdXQnXSwgJ2lkJz4pID0+IHZvaWRcbn1cblxudHlwZSBXcml0ZUNvbW1lbnRQcm9wcyA9IHtcbiAgb25DYW5jZWw6ICgpID0+IHZvaWRcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIG1heENvbW1lbnRMZW5ndGg6IG51bWJlclxufSAmIChDcmVhdGVDb21tZW50UHJvcHMgfCBFZGl0Q29tbWVudFByb3BzKVxuXG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBvbkNhbmNlbCxcbiAgb25TdWJtaXQsXG4gIG1heENvbW1lbnRMZW5ndGgsXG4gIHRpdGxlLFxuICB0ZXh0LFxuICBjaGFsbGVuZ2Vcbn06IFdyaXRlQ29tbWVudFByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlbGVtZW50czoge1RleHRGaWVsZCwgQnV0dG9ufVxuICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKVxuICBjb25zdCB7aGFzVXNlcn0gPSB1c2VVc2VyKClcblxuICBjb25zdCBzY2hlbWEgPSB1c2VNZW1vKCgpID0+XG4gICAgaGFzVXNlclxuICAgICAgPyB6Lm9iamVjdCh7XG4gICAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgICBndWVzdFVzZXJuYW1lOiB6LnN0cmluZygpLm5vbmVtcHR5KCksXG4gICAgICAgICAgY2hhbGxlbmdlQW5zd2VyOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgY2hhbGxlbmdlSUQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICA6IHoub2JqZWN0KHtcbiAgICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICAgIHRpdGxlOiB6LnN0cmluZygpXG4gICAgICAgIH0pWyhtYXhDb21tZW50TGVuZ3RoLCBoYXNVc2VyKV1cbiAgKVxuXG4gIHR5cGUgRm9ybUlucHV0ID0gei5pbmZlcjx0eXBlb2Ygc2NoZW1hPlxuICBjb25zdCB7aGFuZGxlU3VibWl0LCBjb250cm9sLCByZXNldH0gPSB1c2VGb3JtPEZvcm1JbnB1dD4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIGNvbW1lbnQ6IHRvUGxhaW50ZXh0KHRleHQpID8/ICcnLFxuICAgICAgdGl0bGU6IHRpdGxlID8/ICcnLFxuICAgICAgZ3Vlc3RVc2VybmFtZTogJydcbiAgICB9LFxuICAgIG1vZGU6ICdhbGwnXG4gIH0pXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBjb25zb2xlLmxvZyhkYXRhKVxuXG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPFdyaXRlQ29tbWVudFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8V3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICAgICA8V3JpdGVDb21tZW50Q2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlQW5zd2VyLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIDxXcml0ZUNvbW1lbnRBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvV3JpdGVDb21tZW50QWN0aW9ucz5cbiAgICA8L1dyaXRlQ29tbWVudFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQm1DIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt6b2RSZXNvbHZlcn0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnXG5pbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHt1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtDb250cm9sbGVyLCB1c2VGb3JtfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nXG5pbXBvcnQge01kU2VuZH0gZnJvbSAncmVhY3QtaWNvbnMvbWQnXG5pbXBvcnQge05vZGV9IGZyb20gJ3NsYXRlJ1xuaW1wb3J0IHt6fSBmcm9tICd6b2QnXG5pbXBvcnQge3RvUGxhaW50ZXh0fSBmcm9tICdAd2VwdWJsaXNoL3JpY2h0ZXh0J1xuaW1wb3J0IHtRdWVyeVJlc3VsdH0gZnJvbSAnQGFwb2xsby9jbGllbnQnXG5pbXBvcnQge1xuICBBZGRDb21tZW50TXV0YXRpb25WYXJpYWJsZXMsXG4gIENoYWxsZW5nZVF1ZXJ5LFxuICBFZGl0Q29tbWVudE11dGF0aW9uVmFyaWFibGVzXG59IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRXcmFwcGVyID0gc3R5bGVkKCdmb3JtJylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZygyKX07XG5gXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXIgPSBzdHlsZWQoJ2RpdicpYFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heChtYXgtY29udGVudCwgMjAwcHgpIDIwMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMyl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5gXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRDaGFsbGVuZ2UgPSBzdHlsZWQoJ2RpdicpYFxuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGdyaWQ7XG5cbiAgc3ZnIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbmBcblxudHlwZSBDcmVhdGVDb21tZW50UHJvcHMgPSB7XG4gIHRleHQ/OiBuZXZlclxuICB0aXRsZT86IG5ldmVyXG4gIGNoYWxsZW5nZTogUGljazxRdWVyeVJlc3VsdDxDaGFsbGVuZ2VRdWVyeT4sICdkYXRhJyB8ICdsb2FkaW5nJyB8ICdlcnJvcic+IHwgbnVsbFxuICBvblN1Ym1pdDogKFxuICAgIGRhdGE6IE9taXQ8QWRkQ29tbWVudE11dGF0aW9uVmFyaWFibGVzWydpbnB1dCddLCAnaXRlbUlEJyB8ICdpdGVtVHlwZScgfCAncGFyZW50SUQnIHwgJ3BlZXJJZCc+XG4gICkgPT4gdm9pZFxufVxuXG50eXBlIEVkaXRDb21tZW50UHJvcHMgPSB7XG4gIHRleHQ/OiBOb2RlW10gfCBudWxsXG4gIHRpdGxlPzogc3RyaW5nIHwgbnVsbFxuICBjaGFsbGVuZ2U/OiBuZXZlclxuICBvblN1Ym1pdDogKGRhdGE6IE9taXQ8RWRpdENvbW1lbnRNdXRhdGlvblZhcmlhYmxlc1snaW5wdXQnXSwgJ2lkJz4pID0+IHZvaWRcbn1cblxudHlwZSBXcml0ZUNvbW1lbnRQcm9wcyA9IHtcbiAgb25DYW5jZWw6ICgpID0+IHZvaWRcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIG1heENvbW1lbnRMZW5ndGg6IG51bWJlclxufSAmIChDcmVhdGVDb21tZW50UHJvcHMgfCBFZGl0Q29tbWVudFByb3BzKVxuXG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBvbkNhbmNlbCxcbiAgb25TdWJtaXQsXG4gIG1heENvbW1lbnRMZW5ndGgsXG4gIHRpdGxlLFxuICB0ZXh0LFxuICBjaGFsbGVuZ2Vcbn06IFdyaXRlQ29tbWVudFByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlbGVtZW50czoge1RleHRGaWVsZCwgQnV0dG9ufVxuICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKVxuICBjb25zdCB7aGFzVXNlcn0gPSB1c2VVc2VyKClcblxuICBjb25zdCBzY2hlbWEgPSB1c2VNZW1vKCgpID0+XG4gICAgaGFzVXNlclxuICAgICAgPyB6Lm9iamVjdCh7XG4gICAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgICBndWVzdFVzZXJuYW1lOiB6LnN0cmluZygpLm5vbmVtcHR5KCksXG4gICAgICAgICAgY2hhbGxlbmdlQW5zd2VyOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgY2hhbGxlbmdlSUQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICA6IHoub2JqZWN0KHtcbiAgICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICAgIHRpdGxlOiB6LnN0cmluZygpXG4gICAgICAgIH0pWyhtYXhDb21tZW50TGVuZ3RoLCBoYXNVc2VyKV1cbiAgKVxuXG4gIHR5cGUgRm9ybUlucHV0ID0gei5pbmZlcjx0eXBlb2Ygc2NoZW1hPlxuICBjb25zdCB7aGFuZGxlU3VibWl0LCBjb250cm9sLCByZXNldH0gPSB1c2VGb3JtPEZvcm1JbnB1dD4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIGNvbW1lbnQ6IHRvUGxhaW50ZXh0KHRleHQpID8/ICcnLFxuICAgICAgdGl0bGU6IHRpdGxlID8/ICcnLFxuICAgICAgZ3Vlc3RVc2VybmFtZTogJydcbiAgICB9LFxuICAgIG1vZGU6ICdhbGwnXG4gIH0pXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBjb25zb2xlLmxvZyhkYXRhKVxuXG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPFdyaXRlQ29tbWVudFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8V3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICAgICA8V3JpdGVDb21tZW50Q2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlQW5zd2VyLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIDxXcml0ZUNvbW1lbnRBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvV3JpdGVDb21tZW50QWN0aW9ucz5cbiAgICA8L1dyaXRlQ29tbWVudFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QjRDIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\",\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge  } = param;\n    var _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const schema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>hasUser ? zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n            guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n            challengeAnswer: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n            })\n        }) : zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n        })[maxCommentLength, hasUser]);\n    var _toPlaintext;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\"\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        console.log(data);\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 132,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 148,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 163,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 182,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challengeAnswer.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 192,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 181,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 203,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 207,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 202,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n        lineNumber: 130,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"OM6pQApLTVh/0ARLk0PrIi+fqg4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"HblOawkXjg3Os0MgNZcnM9umRVc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/write-comment/write-comment.tsx\n"));

/***/ })

});