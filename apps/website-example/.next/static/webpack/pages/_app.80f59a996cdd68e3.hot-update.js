"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/write-comment/write-comment.tsx":
/*!***************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/write-comment/write-comment.tsx ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\",\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\",\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4REVWIGFzIF9qc3hERVYgfSBmcm9tIFwiQGVtb3Rpb24vcmVhY3QvanN4LWRldi1ydW50aW1lXCI7XG52YXIgX3MgPSAkUmVmcmVzaFNpZyQoKTtcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSBcIkBob29rZm9ybS9yZXNvbHZlcnMvem9kXCI7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgdXNlVXNlciB9IGZyb20gXCJAd2VwdWJsaXNoL2F1dGhlbnRpY2F0aW9uL3dlYnNpdGVcIjtcbmltcG9ydCB7IHVzZVdlYnNpdGVCdWlsZGVyIH0gZnJvbSBcIkB3ZXB1Ymxpc2gvd2Vic2l0ZS9idWlsZGVyXCI7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb250cm9sbGVyLCB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgTWRTZW5kIH0gZnJvbSBcInJlYWN0LWljb25zL21kXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgdG9QbGFpbnRleHQgfSBmcm9tIFwiQHdlcHVibGlzaC9yaWNodGV4dFwiO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudFdyYXBwZXIgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImZvcm1cIiwge1xuICAgIHRhcmdldDogXCJld2twcXR6MFwiLFxuICAgIGxhYmVsOiBcIldyaXRlQ29tbWVudFdyYXBwZXJcIlxufSkoXCJkaXNwbGF5OmdyaWQ7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygyKTtcbn0sIFwiO1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5M2NtbDBaUzFqYjIxdFpXNTBMM2R5YVhSbExXTnZiVzFsYm5RdWRITjRJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12YVhSeWRXeHBZUzlFYjJOMWJXVnVkSE12ZDJWd2RXSnNhWE5vTDJ4cFluTXZZMjl0YldWdWRITXZkMlZpYzJsMFpTOXpjbU12YkdsaUwzZHlhWFJsTFdOdmJXMWxiblF2ZDNKcGRHVXRZMjl0YldWdWRDNTBjM2dpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0NmIyUlNaWE52YkhabGNuMGdabkp2YlNBblFHaHZiMnRtYjNKdEwzSmxjMjlzZG1WeWN5OTZiMlFuWEc1cGJYQnZjblFnZTNOMGVXeGxaSDBnWm5KdmJTQW5RRzExYVM5dFlYUmxjbWxoYkNkY2JtbHRjRzl5ZENCN2RYTmxWWE5sY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5aGRYUm9aVzUwYVdOaGRHbHZiaTkzWldKemFYUmxKMXh1YVcxd2IzSjBJSHQxYzJWWFpXSnphWFJsUW5WcGJHUmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzkzWldKemFYUmxMMkoxYVd4a1pYSW5YRzVwYlhCdmNuUWdlM1Z6WlUxbGJXOTlJR1p5YjIwZ0ozSmxZV04wSjF4dWFXMXdiM0owSUh0RGIyNTBjbTlzYkdWeUxDQjFjMlZHYjNKdGZTQm1jbTl0SUNkeVpXRmpkQzFvYjI5ckxXWnZjbTBuWEc1cGJYQnZjblFnZTAxa1UyVnVaSDBnWm5KdmJTQW5jbVZoWTNRdGFXTnZibk12YldRblhHNXBiWEJ2Y25RZ2UwNXZaR1Y5SUdaeWIyMGdKM05zWVhSbEoxeHVhVzF3YjNKMElIdDZmU0JtY205dElDZDZiMlFuWEc1cGJYQnZjblFnZTNSdlVHeGhhVzUwWlhoMGZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzSnBZMmgwWlhoMEoxeHVhVzF3YjNKMElIdFJkV1Z5ZVZKbGMzVnNkSDBnWm5KdmJTQW5RR0Z3YjJ4c2J5OWpiR2xsYm5RblhHNXBiWEJ2Y25RZ2UxeHVJQ0JCWkdSRGIyMXRaVzUwVFhWMFlYUnBiMjVXWVhKcFlXSnNaWE1zWEc0Z0lFTm9ZV3hzWlc1blpWRjFaWEo1TEZ4dUlDQkZaR2wwUTI5dGJXVnVkRTExZEdGMGFXOXVWbUZ5YVdGaWJHVnpYRzU5SUdaeWIyMGdKMEIzWlhCMVlteHBjMmd2ZDJWaWMybDBaUzloY0drblhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZG1iM0p0SnlsZ1hHNGdJR1JwYzNCc1lYazZJR2R5YVdRN1hHNGdJR2RoY0RvZ0pIc29lM1JvWlcxbGZTa2dQVDRnZEdobGJXVXVjM0JoWTJsdVp5Z3lLWDA3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkJZM1JwYjI1eklEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhblZ6ZEdsbWVTMXpaV3htT2lCbWJHVjRMV1Z1WkR0Y2JpQWdaR2x6Y0d4aGVUb2dabXhsZUR0Y2JpQWdabXhsZUMxbWJHOTNPaUJ5YjNjZ2QzSmhjRHRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RFcGZUdGNibUJjYmx4dVpYaHdiM0owSUdOdmJuTjBJRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWElnUFNCemRIbHNaV1FvSjJScGRpY3BZRnh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1SUNCbmNtbGtMWFJsYlhCc1lYUmxMV052YkhWdGJuTTZJRzFwYm0xaGVDaHRZWGd0WTI5dWRHVnVkQ3dnTWpBd2NIZ3BJREl3TUhCNE8xeHVJQ0JoYkdsbmJpMXBkR1Z0Y3pvZ1kyVnVkR1Z5TzF4dUlDQm5ZWEE2SUNSN0tIdDBhR1Z0WlgwcElEMCtJSFJvWlcxbExuTndZV05wYm1jb015bDlPMXh1SUNCcWRYTjBhV1o1TFdOdmJuUmxiblE2SUdac1pYZ3RjM1JoY25RN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJEYUdGc2JHVnVaMlVnUFNCemRIbHNaV1FvSjJScGRpY3BZRnh1SUNCb1pXbG5hSFE2SURFd01DVTdYRzRnSUdScGMzQnNZWGs2SUdkeWFXUTdYRzVjYmlBZ2MzWm5JSHRjYmlBZ0lDQm9aV2xuYUhRNklERXdNQ1U3WEc0Z0lIMWNibUJjYmx4dWRIbHdaU0JEY21WaGRHVkRiMjF0Wlc1MFVISnZjSE1nUFNCN1hHNGdJSFJsZUhRL09pQnVaWFpsY2x4dUlDQjBhWFJzWlQ4NklHNWxkbVZ5WEc0Z0lHTm9ZV3hzWlc1blpUb2dVR2xqYXp4UmRXVnllVkpsYzNWc2REeERhR0ZzYkdWdVoyVlJkV1Z5ZVQ0c0lDZGtZWFJoSnlCOElDZHNiMkZrYVc1bkp5QjhJQ2RsY25KdmNpYytJSHdnYm5Wc2JGeHVJQ0J2YmxOMVltMXBkRG9nS0Z4dUlDQWdJR1JoZEdFNklFOXRhWFE4UVdSa1EyOXRiV1Z1ZEUxMWRHRjBhVzl1Vm1GeWFXRmliR1Z6V3lkcGJuQjFkQ2RkTENBbmFYUmxiVWxFSnlCOElDZHBkR1Z0Vkhsd1pTY2dmQ0FuY0dGeVpXNTBTVVFuSUh3Z0ozQmxaWEpKWkNjK1hHNGdJQ2tnUFQ0Z2RtOXBaRnh1ZlZ4dVhHNTBlWEJsSUVWa2FYUkRiMjF0Wlc1MFVISnZjSE1nUFNCN1hHNGdJSFJsZUhRL09pQk9iMlJsVzEwZ2ZDQnVkV3hzWEc0Z0lIUnBkR3hsUHpvZ2MzUnlhVzVuSUh3Z2JuVnNiRnh1SUNCamFHRnNiR1Z1WjJVL09pQnVaWFpsY2x4dUlDQnZibE4xWW0xcGREb2dLR1JoZEdFNklFOXRhWFE4UldScGRFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzFzbmFXNXdkWFFuWFN3Z0oybGtKejRwSUQwK0lIWnZhV1JjYm4xY2JseHVkSGx3WlNCWGNtbDBaVU52YlcxbGJuUlFjbTl3Y3lBOUlIdGNiaUFnYjI1RFlXNWpaV3c2SUNncElEMCtJSFp2YVdSY2JpQWdZMnhoYzNOT1lXMWxQem9nYzNSeWFXNW5YRzRnSUcxaGVFTnZiVzFsYm5STVpXNW5kR2c2SUc1MWJXSmxjbHh1ZlNBbUlDaERjbVZoZEdWRGIyMXRaVzUwVUhKdmNITWdmQ0JGWkdsMFEyOXRiV1Z1ZEZCeWIzQnpLVnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwSUQwZ0tIdGNiaUFnWTJ4aGMzTk9ZVzFsTEZ4dUlDQnZia05oYm1ObGJDeGNiaUFnYjI1VGRXSnRhWFFzWEc0Z0lHMWhlRU52YlcxbGJuUk1aVzVuZEdnc1hHNGdJSFJwZEd4bExGeHVJQ0IwWlhoMExGeHVJQ0JqYUdGc2JHVnVaMlZjYm4wNklGZHlhWFJsUTI5dGJXVnVkRkJ5YjNCektTQTlQaUI3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JsYkdWdFpXNTBjem9nZTFSbGVIUkdhV1ZzWkN3Z1FuVjBkRzl1ZlZ4dUlDQjlJRDBnZFhObFYyVmljMmwwWlVKMWFXeGtaWElvS1Z4dUlDQmpiMjV6ZENCN2FHRnpWWE5sY24wZ1BTQjFjMlZWYzJWeUtDbGNibHh1SUNCamIyNXpkQ0J6WTJobGJXRWdQU0IxYzJWTlpXMXZLRnh1SUNBZ0lDZ3BJRDArWEc0Z0lDQWdJQ0I2TG5WdWFXOXVLRnRjYmlBZ0lDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LUzV0WVhnb2JXRjRRMjl0YldWdWRFeGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDa3NYRzRnSUNBZ0lDQWdJQ0FnWjNWbGMzUlZjMlZ5Ym1GdFpUb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVRnVjM2RsY2pvZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsVTI5c2RYUnBiMjQ2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlVsRU9pQjZMbk4wY21sdVp5Z3BMbTV2Ym1WdGNIUjVLQ2xjYmlBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LUzV0WVhnb2JXRjRRMjl0YldWdWRFeGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJRjBwTEZ4dUlDQWdJRnR0WVhoRGIyMXRaVzUwVEdWdVozUm9YVnh1SUNBcFhHNWNiaUFnZEhsd1pTQkdiM0p0U1c1d2RYUWdQU0I2TG1sdVptVnlQSFI1Y0dWdlppQnpZMmhsYldFK1hHNGdJR052Ym5OMElIdG9ZVzVrYkdWVGRXSnRhWFFzSUdOdmJuUnliMndzSUhKbGMyVjBmU0E5SUhWelpVWnZjbTA4Um05eWJVbHVjSFYwUGloN1hHNGdJQ0FnY21WemIyeDJaWEk2SUhwdlpGSmxjMjlzZG1WeUtITmphR1Z0WVNrc1hHNGdJQ0FnWkdWbVlYVnNkRlpoYkhWbGN6b2dlMXh1SUNBZ0lDQWdZMjl0YldWdWREb2dkRzlRYkdGcGJuUmxlSFFvZEdWNGRDa2dQejhnSnljc1hHNGdJQ0FnSUNCMGFYUnNaVG9nZEdsMGJHVWdQejhnSnljc1hHNGdJQ0FnSUNCbmRXVnpkRlZ6WlhKdVlXMWxPaUFuSjF4dUlDQWdJSDBzWEc0Z0lDQWdiVzlrWlRvZ0oyRnNiQ2RjYmlBZ2ZTbGNibHh1SUNCamIyNXpkQ0J6ZFdKdGFYUWdQU0JvWVc1a2JHVlRkV0p0YVhRb0tIdGpiMjF0Wlc1MExDQXVMaTVrWVhSaGZTa2dQVDRnZTF4dUlDQWdJRzl1VTNWaWJXbDBLSHRjYmlBZ0lDQWdJQzR1TG1SaGRHRXNYRzRnSUNBZ0lDQjBaWGgwT2lCYlhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5jR0Z5WVdkeVlYQm9KeXhjYmlBZ0lDQWdJQ0FnSUNCamFHbHNaSEpsYmpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoME9pQmpiMjF0Wlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1hWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQmRYRzRnSUNBZ2ZTbGNiaUFnZlNsY2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJYY21Gd2NHVnlJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsZlNCdmJsTjFZbTFwZEQxN2MzVmliV2wwZlQ1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQW9YRzRnSUNBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUNBZ2JtRnRaVDE3SjJkMVpYTjBWWE5sY201aGJXVW5mVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdMaTR1Wm1sbGJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa1JsYVc0Z1RtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc1BWd2lUbUZ0WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV3h3WlhKVVpYaDBQWHRsY25KdmNqOHViV1Z6YzJGblpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJRzVoYldVOWV5ZDBhWFJzWlNkOVhHNGdJQ0FnSUNBZ0lHTnZiblJ5YjJ3OWUyTnZiblJ5YjJ4OVhHNGdJQ0FnSUNBZ0lISmxibVJsY2oxN0tIdG1hV1ZzWkN3Z1ptbGxiR1JUZEdGMFpUb2dlMlZ5Y205eWZYMHBJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtYRzRnSUNBZ0lDQWdJQ0FnSUNCN0xpNHVabWxsYkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUjJsaUlFUmxhVzVsYlNCQ1pXbDBjbUZuSUdWcGJtVnVJRlJwZEdWc0xsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiRDFjSWxScGRHVnNYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WlhKeWIzSS9MbTFsYzNOaFoyVjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDOCtYRzVjYmlBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUc1aGJXVTlleWRqYjIxdFpXNTBKMzFjYmlBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4VVpYaDBSbWxsYkdSY2JpQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHMTFiSFJwYkdsdVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5Wc2JGZHBaSFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzVTYjNkelBYczFmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c5WENKTGIyMXRaVzUwWVhKY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJOVhDSkNaV2wwY21GbklIWmxjbVpoYzNObGJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjajE3SVNGbGNuSnZjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxiSEJsY2xSbGVIUTllMkFrZTJacFpXeGtMblpoYkhWbExteGxibWQwYUgwZ0x5QWtlMjFoZUVOdmJXMWxiblJNWlc1bmRHaDlJRnBsYVdOb1pXNWdmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQXZQbHh1WEc0Z0lDQWdJQ0I3SVdoaGMxVnpaWElnSmlZZ1kyaGhiR3hsYm1kbFB5NWtZWFJoSUNZbUlDaGNiaUFnSUNBZ0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FnSUNBZ1BGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXc5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5b2RHMXNPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aUzVrWVhSaExtTm9ZV3hzWlc1blpTNWphR0ZzYkdWdVoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDh1Y21Wd2JHRmpaU2duSTJabVptWm1aaWNzSUNkMGNtRnVjM0JoY21WdWRDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2duZDJsa2RHZzlYQ0l5TURCY0lpY3NJQ2NuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0oyaGxhV2RvZEQxY0lqSXdNRndpSnl3Z0p5Y3BJRDgvSUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzVjYmlBZ0lDQWdJQ0FnSUNBOFEyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdKMk5vWVd4c1pXNW5aVUZ1YzNkbGNpNWphR0ZzYkdWdVoyVlRiMngxZEdsdmJpZDlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a0lIc3VMaTVtYVdWc1pIMGdiR0ZpWld3OWV5ZERZWEIwWTJoaEozMGdaWEp5YjNJOWV5RWhaWEp5YjNKOUlHaGxiSEJsY2xSbGVIUTllMlZ5Y205eVB5NXRaWE56WVdkbGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQXBmVnh1WEc0Z0lDQWdJQ0E4VjNKcGRHVkRiMjF0Wlc1MFFXTjBhVzl1Y3o1Y2JpQWdJQ0FnSUNBZ1BFSjFkSFJ2YmlCMGVYQmxQVndpYzNWaWJXbDBYQ0lnYzJsNlpUMWNJbk50WVd4c1hDSWdjM1JoY25SSlkyOXVQWHM4VFdSVFpXNWtJQzgrZlQ1Y2JpQWdJQ0FnSUNBZ0lDQkxiMjF0Wlc1MGFXVnlaVzVjYmlBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc1Y2JpQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U5WENKeVpYTmxkRndpWEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6WlhRb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1RFlXNWpaV3dvS1Z4dUlDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnYzJsNlpUMWNJbk50WVd4c1hDSmNiaUFnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQVndpZEdWNGRGd2lYRzRnSUNBZ0lDQWdJQ0FnWTI5c2IzSTlYQ0p6WldOdmJtUmhjbmxjSWo1Y2JpQWdJQ0FnSUNBZ0lDQkJZbUp5WldOb1pXNWNiaUFnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEVGamRHbHZibk0rWEc0Z0lDQWdQQzlYY21sMFpVTnZiVzFsYm5SWGNtRndjR1Z5UGx4dUlDQXBYRzU5WEc0aVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQmFVSnRReUo5ICovXCIpO1xuX2MgPSBXcml0ZUNvbW1lbnRXcmFwcGVyO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudEFjdGlvbnMgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImRpdlwiLCB7XG4gICAgdGFyZ2V0OiBcImV3a3BxdHoxXCIsXG4gICAgbGFiZWw6IFwiV3JpdGVDb21tZW50QWN0aW9uc1wiXG59KShcImp1c3RpZnktc2VsZjpmbGV4LWVuZDtkaXNwbGF5OmZsZXg7ZmxleC1mbG93OnJvdyB3cmFwO2dhcDpcIiwgKHBhcmFtKT0+e1xuICAgIGxldCB7IHRoZW1lICB9ID0gcGFyYW07XG4gICAgcmV0dXJuIHRoZW1lLnNwYWNpbmcoMSk7XG59LCBcIjtcIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOTNjbWwwWlMxamIyMXRaVzUwTDNkeWFYUmxMV052YlcxbGJuUXVkSE40SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFYUnlkV3hwWVM5RWIyTjFiV1Z1ZEhNdmQyVndkV0pzYVhOb0wyeHBZbk12WTI5dGJXVnVkSE12ZDJWaWMybDBaUzl6Y21NdmJHbGlMM2R5YVhSbExXTnZiVzFsYm5RdmQzSnBkR1V0WTI5dGJXVnVkQzUwYzNnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIdDZiMlJTWlhOdmJIWmxjbjBnWm5KdmJTQW5RR2h2YjJ0bWIzSnRMM0psYzI5c2RtVnljeTk2YjJRblhHNXBiWEJ2Y25RZ2UzTjBlV3hsWkgwZ1puSnZiU0FuUUcxMWFTOXRZWFJsY21saGJDZGNibWx0Y0c5eWRDQjdkWE5sVlhObGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOWhkWFJvWlc1MGFXTmhkR2x2Ymk5M1pXSnphWFJsSjF4dWFXMXdiM0owSUh0MWMyVlhaV0p6YVhSbFFuVnBiR1JsY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5M1pXSnphWFJsTDJKMWFXeGtaWEluWEc1cGJYQnZjblFnZTNWelpVMWxiVzk5SUdaeWIyMGdKM0psWVdOMEoxeHVhVzF3YjNKMElIdERiMjUwY205c2JHVnlMQ0IxYzJWR2IzSnRmU0JtY205dElDZHlaV0ZqZEMxb2IyOXJMV1p2Y20wblhHNXBiWEJ2Y25RZ2UwMWtVMlZ1WkgwZ1puSnZiU0FuY21WaFkzUXRhV052Ym5NdmJXUW5YRzVwYlhCdmNuUWdlMDV2WkdWOUlHWnliMjBnSjNOc1lYUmxKMXh1YVcxd2IzSjBJSHQ2ZlNCbWNtOXRJQ2Q2YjJRblhHNXBiWEJ2Y25RZ2UzUnZVR3hoYVc1MFpYaDBmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM0pwWTJoMFpYaDBKMXh1YVcxd2IzSjBJSHRSZFdWeWVWSmxjM1ZzZEgwZ1puSnZiU0FuUUdGd2IyeHNieTlqYkdsbGJuUW5YRzVwYlhCdmNuUWdlMXh1SUNCQlpHUkRiMjF0Wlc1MFRYVjBZWFJwYjI1V1lYSnBZV0pzWlhNc1hHNGdJRU5vWVd4c1pXNW5aVkYxWlhKNUxGeHVJQ0JGWkdsMFEyOXRiV1Z1ZEUxMWRHRjBhVzl1Vm1GeWFXRmliR1Z6WEc1OUlHWnliMjBnSjBCM1pYQjFZbXhwYzJndmQyVmljMmwwWlM5aGNHa25YRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RtYjNKdEp5bGdYRzRnSUdScGMzQnNZWGs2SUdkeWFXUTdYRzRnSUdkaGNEb2dKSHNvZTNSb1pXMWxmU2tnUFQ0Z2RHaGxiV1V1YzNCaFkybHVaeWd5S1gwN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYW5WemRHbG1lUzF6Wld4bU9pQm1iR1Y0TFdWdVpEdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWm14bGVDMW1iRzkzT2lCeWIzY2dkM0poY0R0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktERXBmVHRjYm1CY2JseHVaWGh3YjNKMElHTnZibk4wSUZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJZ1BTQnpkSGxzWldRb0oyUnBkaWNwWUZ4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dUlDQm5jbWxrTFhSbGJYQnNZWFJsTFdOdmJIVnRibk02SUcxcGJtMWhlQ2h0WVhndFkyOXVkR1Z1ZEN3Z01qQXdjSGdwSURJd01IQjRPMXh1SUNCaGJHbG5iaTFwZEdWdGN6b2dZMlZ1ZEdWeU8xeHVJQ0JuWVhBNklDUjdLSHQwYUdWdFpYMHBJRDArSUhSb1pXMWxMbk53WVdOcGJtY29NeWw5TzF4dUlDQnFkWE4wYVdaNUxXTnZiblJsYm5RNklHWnNaWGd0YzNSaGNuUTdYRzVnWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5SRGFHRnNiR1Z1WjJVZ1BTQnpkSGxzWldRb0oyUnBkaWNwWUZ4dUlDQm9aV2xuYUhRNklERXdNQ1U3WEc0Z0lHUnBjM0JzWVhrNklHZHlhV1E3WEc1Y2JpQWdjM1puSUh0Y2JpQWdJQ0JvWldsbmFIUTZJREV3TUNVN1hHNGdJSDFjYm1CY2JseHVkSGx3WlNCRGNtVmhkR1ZEYjIxdFpXNTBVSEp2Y0hNZ1BTQjdYRzRnSUhSbGVIUS9PaUJ1WlhabGNseHVJQ0IwYVhSc1pUODZJRzVsZG1WeVhHNGdJR05vWVd4c1pXNW5aVG9nVUdsamF6eFJkV1Z5ZVZKbGMzVnNkRHhEYUdGc2JHVnVaMlZSZFdWeWVUNHNJQ2RrWVhSaEp5QjhJQ2RzYjJGa2FXNW5KeUI4SUNkbGNuSnZjaWMrSUh3Z2JuVnNiRnh1SUNCdmJsTjFZbTFwZERvZ0tGeHVJQ0FnSUdSaGRHRTZJRTl0YVhROFFXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWeld5ZHBibkIxZENkZExDQW5hWFJsYlVsRUp5QjhJQ2RwZEdWdFZIbHdaU2NnZkNBbmNHRnlaVzUwU1VRbklId2dKM0JsWlhKSlpDYytYRzRnSUNrZ1BUNGdkbTlwWkZ4dWZWeHVYRzUwZVhCbElFVmthWFJEYjIxdFpXNTBVSEp2Y0hNZ1BTQjdYRzRnSUhSbGVIUS9PaUJPYjJSbFcxMGdmQ0J1ZFd4c1hHNGdJSFJwZEd4bFB6b2djM1J5YVc1bklId2diblZzYkZ4dUlDQmphR0ZzYkdWdVoyVS9PaUJ1WlhabGNseHVJQ0J2YmxOMVltMXBkRG9nS0dSaGRHRTZJRTl0YVhROFJXUnBkRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmxrSno0cElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQlhjbWwwWlVOdmJXMWxiblJRY205d2N5QTlJSHRjYmlBZ2IyNURZVzVqWld3NklDZ3BJRDArSUhadmFXUmNiaUFnWTJ4aGMzTk9ZVzFsUHpvZ2MzUnlhVzVuWEc0Z0lHMWhlRU52YlcxbGJuUk1aVzVuZEdnNklHNTFiV0psY2x4dWZTQW1JQ2hEY21WaGRHVkRiMjF0Wlc1MFVISnZjSE1nZkNCRlpHbDBRMjl0YldWdWRGQnliM0J6S1Z4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MElEMGdLSHRjYmlBZ1kyeGhjM05PWVcxbExGeHVJQ0J2YmtOaGJtTmxiQ3hjYmlBZ2IyNVRkV0p0YVhRc1hHNGdJRzFoZUVOdmJXMWxiblJNWlc1bmRHZ3NYRzRnSUhScGRHeGxMRnh1SUNCMFpYaDBMRnh1SUNCamFHRnNiR1Z1WjJWY2JuMDZJRmR5YVhSbFEyOXRiV1Z1ZEZCeWIzQnpLU0E5UGlCN1hHNGdJR052Ym5OMElIdGNiaUFnSUNCbGJHVnRaVzUwY3pvZ2UxUmxlSFJHYVdWc1pDd2dRblYwZEc5dWZWeHVJQ0I5SUQwZ2RYTmxWMlZpYzJsMFpVSjFhV3hrWlhJb0tWeHVJQ0JqYjI1emRDQjdhR0Z6VlhObGNuMGdQU0IxYzJWVmMyVnlLQ2xjYmx4dUlDQmpiMjV6ZENCelkyaGxiV0VnUFNCMWMyVk5aVzF2S0Z4dUlDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNCNkxuVnVhVzl1S0Z0Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2tzWEc0Z0lDQWdJQ0FnSUNBZ1ozVmxjM1JWYzJWeWJtRnRaVG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVUZ1YzNkbGNqb2dlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUI2TG5OMGNtbHVaeWdwTG01dmJtVnRjSFI1S0NsY2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUYwcExGeHVJQ0FnSUZ0dFlYaERiMjF0Wlc1MFRHVnVaM1JvWFZ4dUlDQXBYRzVjYmlBZ2RIbHdaU0JHYjNKdFNXNXdkWFFnUFNCNkxtbHVabVZ5UEhSNWNHVnZaaUJ6WTJobGJXRStYRzRnSUdOdmJuTjBJSHRvWVc1a2JHVlRkV0p0YVhRc0lHTnZiblJ5YjJ3c0lISmxjMlYwZlNBOUlIVnpaVVp2Y20wOFJtOXliVWx1Y0hWMFBpaDdYRzRnSUNBZ2NtVnpiMngyWlhJNklIcHZaRkpsYzI5c2RtVnlLSE5qYUdWdFlTa3NYRzRnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxjem9nZTF4dUlDQWdJQ0FnWTI5dGJXVnVkRG9nZEc5UWJHRnBiblJsZUhRb2RHVjRkQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQjBhWFJzWlRvZ2RHbDBiR1VnUHo4Z0p5Y3NYRzRnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lBbkoxeHVJQ0FnSUgwc1hHNGdJQ0FnYlc5a1pUb2dKMkZzYkNkY2JpQWdmU2xjYmx4dUlDQmpiMjV6ZENCemRXSnRhWFFnUFNCb1lXNWtiR1ZUZFdKdGFYUW9LSHRqYjIxdFpXNTBMQ0F1TGk1a1lYUmhmU2tnUFQ0Z2UxeHVJQ0FnSUc5dVUzVmliV2wwS0h0Y2JpQWdJQ0FnSUM0dUxtUmhkR0VzWEc0Z0lDQWdJQ0IwWlhoME9pQmJYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuY0dGeVlXZHlZWEJvSnl4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJqb2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJqYjIxdFpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdYVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0JkWEc0Z0lDQWdmU2xjYmlBZ2ZTbGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhYY21sMFpVTnZiVzFsYm5SWGNtRndjR1Z5SUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGZTQnZibE4xWW0xcGREMTdjM1ZpYldsMGZUNWNiaUFnSUNBZ0lIc2hhR0Z6VlhObGNpQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyZDFaWE4wVlhObGNtNWhiV1VuZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ3OWUyTnZiblJ5YjJ4OVhHNGdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4WGFXUjBhRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajFjSWtSbGFXNGdUbUZ0WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNQVndpVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUc1aGJXVTlleWQwYVhSc1pTZDlYRzRnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJSEpsYm1SbGNqMTdLSHRtYVdWc1pDd2dabWxsYkdSVGRHRjBaVG9nZTJWeWNtOXlmWDBwSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdMaTR1Wm1sbGJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFZ3aVIybGlJRVJsYVc1bGJTQkNaV2wwY21GbklHVnBibVZ1SUZScGRHVnNMbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lsUnBkR1ZzWENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkamIyMXRaVzUwSjMxY2JpQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwUm1sbGJHUmNiaUFnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzExYkhScGJHbHVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnNiRmRwWkhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1U2IzZHpQWHMxZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld3OVhDSkxiMjF0Wlc1MFlYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTlYQ0pDWldsMGNtRm5JSFpsY21aaGMzTmxibHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2oxN0lTRmxjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJBa2UyWnBaV3hrTG5aaGJIVmxMbXhsYm1kMGFIMGdMeUFrZTIxaGVFTnZiVzFsYm5STVpXNW5kR2g5SUZwbGFXTm9aVzVnZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0F2UGx4dVhHNGdJQ0FnSUNCN0lXaGhjMVZ6WlhJZ0ppWWdZMmhoYkd4bGJtZGxQeTVrWVhSaElDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3OWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gxOW9kRzFzT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlM1a1lYUmhMbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4dWNtVndiR0ZqWlNnbkkyWm1abVptWmljc0lDZDBjbUZ1YzNCaGNtVnVkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNnbmQybGtkR2c5WENJeU1EQmNJaWNzSUNjbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9KMmhsYVdkb2REMWNJakl3TUZ3aUp5d2dKeWNwSUQ4L0lDY25YRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUNBZ0lDQThRMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOb1lXeHNaVzVuWlVGdWMzZGxjaTVqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiaWQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwY205c1BYdGpiMjUwY205c2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtJSHN1TGk1bWFXVnNaSDBnYkdGaVpXdzlleWREWVhCMFkyaGhKMzBnWlhKeWIzSTlleUVoWlhKeWIzSjlJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FwZlZ4dVhHNGdJQ0FnSUNBOFYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJpQjBlWEJsUFZ3aWMzVmliV2wwWENJZ2MybDZaVDFjSW5OdFlXeHNYQ0lnYzNSaGNuUkpZMjl1UFhzOFRXUlRaVzVrSUM4K2ZUNWNiaUFnSUNBZ0lDQWdJQ0JMYjIxdFpXNTBhV1Z5Wlc1Y2JpQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSnlaWE5sZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURZVzVqWld3b0tWeHVJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ2MybDZaVDFjSW5OdFlXeHNYQ0pjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFZ3aWRHVjRkRndpWEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiM0k5WENKelpXTnZibVJoY25sY0lqNWNiaUFnSUNBZ0lDQWdJQ0JCWW1KeVpXTm9aVzVjYmlBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc0Z0lDQWdJQ0E4TDFkeWFYUmxRMjl0YldWdWRFRmpkR2x2Ym5NK1hHNGdJQ0FnUEM5WGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeVBseHVJQ0FwWEc1OVhHNGlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJjMEp0UXlKOSAqL1wiKTtcbl9jMSA9IFdyaXRlQ29tbWVudEFjdGlvbnM7XG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlciA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZXdrcHF0ejJcIixcbiAgICBsYWJlbDogXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyXCJcbn0pKFwiZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczptaW5tYXgobWF4LWNvbnRlbnQsMjAwcHgpIDIwMHB4O2FsaWduLWl0ZW1zOmNlbnRlcjtnYXA6XCIsIChwYXJhbSk9PntcbiAgICBsZXQgeyB0aGVtZSAgfSA9IHBhcmFtO1xuICAgIHJldHVybiB0aGVtZS5zcGFjaW5nKDMpO1xufSwgXCI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7XCIsIFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwybDBjblZzYVdFdlJHOWpkVzFsYm5SekwzZGxjSFZpYkdsemFDOXNhV0p6TDJOdmJXMWxiblJ6TDNkbFluTnBkR1V2YzNKakwyeHBZaTkzY21sMFpTMWpiMjF0Wlc1MEwzZHlhWFJsTFdOdmJXMWxiblF1ZEhONElpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZhWFJ5ZFd4cFlTOUViMk4xYldWdWRITXZkMlZ3ZFdKc2FYTm9MMnhwWW5NdlkyOXRiV1Z1ZEhNdmQyVmljMmwwWlM5emNtTXZiR2xpTDNkeWFYUmxMV052YlcxbGJuUXZkM0pwZEdVdFkyOXRiV1Z1ZEM1MGMzZ2lYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHQ2YjJSU1pYTnZiSFpsY24wZ1puSnZiU0FuUUdodmIydG1iM0p0TDNKbGMyOXNkbVZ5Y3k5NmIyUW5YRzVwYlhCdmNuUWdlM04wZVd4bFpIMGdabkp2YlNBblFHMTFhUzl0WVhSbGNtbGhiQ2RjYm1sdGNHOXlkQ0I3ZFhObFZYTmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzloZFhSb1pXNTBhV05oZEdsdmJpOTNaV0p6YVhSbEoxeHVhVzF3YjNKMElIdDFjMlZYWldKemFYUmxRblZwYkdSbGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOTNaV0p6YVhSbEwySjFhV3hrWlhJblhHNXBiWEJ2Y25RZ2UzVnpaVTFsYlc5OUlHWnliMjBnSjNKbFlXTjBKMXh1YVcxd2IzSjBJSHREYjI1MGNtOXNiR1Z5TENCMWMyVkdiM0p0ZlNCbWNtOXRJQ2R5WldGamRDMW9iMjlyTFdadmNtMG5YRzVwYlhCdmNuUWdlMDFrVTJWdVpIMGdabkp2YlNBbmNtVmhZM1F0YVdOdmJuTXZiV1FuWEc1cGJYQnZjblFnZTA1dlpHVjlJR1p5YjIwZ0ozTnNZWFJsSjF4dWFXMXdiM0owSUh0NmZTQm1jbTl0SUNkNmIyUW5YRzVwYlhCdmNuUWdlM1J2VUd4aGFXNTBaWGgwZlNCbWNtOXRJQ2RBZDJWd2RXSnNhWE5vTDNKcFkyaDBaWGgwSjF4dWFXMXdiM0owSUh0UmRXVnllVkpsYzNWc2RIMGdabkp2YlNBblFHRndiMnhzYnk5amJHbGxiblFuWEc1cGJYQnZjblFnZTF4dUlDQkJaR1JEYjIxdFpXNTBUWFYwWVhScGIyNVdZWEpwWVdKc1pYTXNYRzRnSUVOb1lXeHNaVzVuWlZGMVpYSjVMRnh1SUNCRlpHbDBRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWelhHNTlJR1p5YjIwZ0owQjNaWEIxWW14cGMyZ3ZkMlZpYzJsMFpTOWhjR2tuWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5SWGNtRndjR1Z5SUQwZ2MzUjViR1ZrS0NkbWIzSnRKeWxnWEc0Z0lHUnBjM0JzWVhrNklHZHlhV1E3WEc0Z0lHZGhjRG9nSkhzb2UzUm9aVzFsZlNrZ1BUNGdkR2hsYldVdWMzQmhZMmx1WnlneUtYMDdYRzVnWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5SQlkzUnBiMjV6SUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ2FuVnpkR2xtZVMxelpXeG1PaUJtYkdWNExXVnVaRHRjYmlBZ1pHbHpjR3hoZVRvZ1pteGxlRHRjYmlBZ1pteGxlQzFtYkc5M09pQnliM2NnZDNKaGNEdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LREVwZlR0Y2JtQmNibHh1Wlhod2IzSjBJR052Ym5OMElGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSWdQU0J6ZEhsc1pXUW9KMlJwZGljcFlGeHVJQ0JrYVhOd2JHRjVPaUJuY21sa08xeHVJQ0JuY21sa0xYUmxiWEJzWVhSbExXTnZiSFZ0Ym5NNklHMXBibTFoZUNodFlYZ3RZMjl1ZEdWdWRDd2dNakF3Y0hncElESXdNSEI0TzF4dUlDQmhiR2xuYmkxcGRHVnRjem9nWTJWdWRHVnlPMXh1SUNCbllYQTZJQ1I3S0h0MGFHVnRaWDBwSUQwK0lIUm9aVzFsTG5Od1lXTnBibWNvTXlsOU8xeHVJQ0JxZFhOMGFXWjVMV052Ym5SbGJuUTZJR1pzWlhndGMzUmhjblE3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkRhR0ZzYkdWdVoyVWdQU0J6ZEhsc1pXUW9KMlJwZGljcFlGeHVJQ0JvWldsbmFIUTZJREV3TUNVN1hHNGdJR1JwYzNCc1lYazZJR2R5YVdRN1hHNWNiaUFnYzNabklIdGNiaUFnSUNCb1pXbG5hSFE2SURFd01DVTdYRzRnSUgxY2JtQmNibHh1ZEhsd1pTQkRjbVZoZEdWRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lIUmxlSFEvT2lCdVpYWmxjbHh1SUNCMGFYUnNaVDg2SUc1bGRtVnlYRzRnSUdOb1lXeHNaVzVuWlRvZ1VHbGphenhSZFdWeWVWSmxjM1ZzZER4RGFHRnNiR1Z1WjJWUmRXVnllVDRzSUNka1lYUmhKeUI4SUNkc2IyRmthVzVuSnlCOElDZGxjbkp2Y2ljK0lId2diblZzYkZ4dUlDQnZibE4xWW0xcGREb2dLRnh1SUNBZ0lHUmhkR0U2SUU5dGFYUThRV1JrUTI5dGJXVnVkRTExZEdGMGFXOXVWbUZ5YVdGaWJHVnpXeWRwYm5CMWRDZGRMQ0FuYVhSbGJVbEVKeUI4SUNkcGRHVnRWSGx3WlNjZ2ZDQW5jR0Z5Wlc1MFNVUW5JSHdnSjNCbFpYSkpaQ2MrWEc0Z0lDa2dQVDRnZG05cFpGeHVmVnh1WEc1MGVYQmxJRVZrYVhSRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lIUmxlSFEvT2lCT2IyUmxXMTBnZkNCdWRXeHNYRzRnSUhScGRHeGxQem9nYzNSeWFXNW5JSHdnYm5Wc2JGeHVJQ0JqYUdGc2JHVnVaMlUvT2lCdVpYWmxjbHh1SUNCdmJsTjFZbTFwZERvZ0tHUmhkR0U2SUU5dGFYUThSV1JwZEVOdmJXMWxiblJOZFhSaGRHbHZibFpoY21saFlteGxjMXNuYVc1d2RYUW5YU3dnSjJsa0p6NHBJRDArSUhadmFXUmNibjFjYmx4dWRIbHdaU0JYY21sMFpVTnZiVzFsYm5SUWNtOXdjeUE5SUh0Y2JpQWdiMjVEWVc1alpXdzZJQ2dwSUQwK0lIWnZhV1JjYmlBZ1kyeGhjM05PWVcxbFB6b2djM1J5YVc1blhHNGdJRzFoZUVOdmJXMWxiblJNWlc1bmRHZzZJRzUxYldKbGNseHVmU0FtSUNoRGNtVmhkR1ZEYjIxdFpXNTBVSEp2Y0hNZ2ZDQkZaR2wwUTI5dGJXVnVkRkJ5YjNCektWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBJRDBnS0h0Y2JpQWdZMnhoYzNOT1lXMWxMRnh1SUNCdmJrTmhibU5sYkN4Y2JpQWdiMjVUZFdKdGFYUXNYRzRnSUcxaGVFTnZiVzFsYm5STVpXNW5kR2dzWEc0Z0lIUnBkR3hsTEZ4dUlDQjBaWGgwTEZ4dUlDQmphR0ZzYkdWdVoyVmNibjA2SUZkeWFYUmxRMjl0YldWdWRGQnliM0J6S1NBOVBpQjdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQmxiR1Z0Wlc1MGN6b2dlMVJsZUhSR2FXVnNaQ3dnUW5WMGRHOXVmVnh1SUNCOUlEMGdkWE5sVjJWaWMybDBaVUoxYVd4a1pYSW9LVnh1SUNCamIyNXpkQ0I3YUdGelZYTmxjbjBnUFNCMWMyVlZjMlZ5S0NsY2JseHVJQ0JqYjI1emRDQnpZMmhsYldFZ1BTQjFjMlZOWlcxdktGeHVJQ0FnSUNncElEMCtYRzRnSUNBZ0lDQjZMblZ1YVc5dUtGdGNiaUFnSUNBZ0lDQWdlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUdOdmJXMWxiblE2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTNXRZWGdvYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ2tzWEc0Z0lDQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdaM1ZsYzNSVmMyVnlibUZ0WlRvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlVGdWMzZGxjam9nZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoYkd4bGJtZGxVMjlzZFhScGIyNDZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVWxFT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDbGNiaUFnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDQWdlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUdOdmJXMWxiblE2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTNXRZWGdvYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ2tzWEc0Z0lDQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0NsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lGMHBMRnh1SUNBZ0lGdHRZWGhEYjIxdFpXNTBUR1Z1WjNSb1hWeHVJQ0FwWEc1Y2JpQWdkSGx3WlNCR2IzSnRTVzV3ZFhRZ1BTQjZMbWx1Wm1WeVBIUjVjR1Z2WmlCelkyaGxiV0UrWEc0Z0lHTnZibk4wSUh0b1lXNWtiR1ZUZFdKdGFYUXNJR052Ym5SeWIyd3NJSEpsYzJWMGZTQTlJSFZ6WlVadmNtMDhSbTl5YlVsdWNIVjBQaWg3WEc0Z0lDQWdjbVZ6YjJ4MlpYSTZJSHB2WkZKbGMyOXNkbVZ5S0hOamFHVnRZU2tzWEc0Z0lDQWdaR1ZtWVhWc2RGWmhiSFZsY3pvZ2UxeHVJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2RHOVFiR0ZwYm5SbGVIUW9kR1Y0ZENrZ1B6OGdKeWNzWEc0Z0lDQWdJQ0IwYVhSc1pUb2dkR2wwYkdVZ1B6OGdKeWNzWEc0Z0lDQWdJQ0JuZFdWemRGVnpaWEp1WVcxbE9pQW5KMXh1SUNBZ0lIMHNYRzRnSUNBZ2JXOWtaVG9nSjJGc2JDZGNiaUFnZlNsY2JseHVJQ0JqYjI1emRDQnpkV0p0YVhRZ1BTQm9ZVzVrYkdWVGRXSnRhWFFvS0h0amIyMXRaVzUwTENBdUxpNWtZWFJoZlNrZ1BUNGdlMXh1SUNBZ0lHOXVVM1ZpYldsMEtIdGNiaUFnSUNBZ0lDNHVMbVJoZEdFc1hHNGdJQ0FnSUNCMFpYaDBPaUJiWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNHRnlZV2R5WVhCb0p5eGNiaUFnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiam9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCamIyMXRaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCZFhHNGdJQ0FnZlNsY2JpQWdmU2xjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4WGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeUlHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxmU0J2YmxOMVltMXBkRDE3YzNWaWJXbDBmVDVjYmlBZ0lDQWdJSHNoYUdGelZYTmxjaUFtSmlBb1hHNGdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdKMmQxWlhOMFZYTmxjbTVoYldVbmZWeHVJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0xpNHVabWxsYkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxY0lrUmxhVzRnVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVRtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ2w5WEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkMGFYUnNaU2Q5WEc0Z0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjajE3S0h0bWFXVnNaQ3dnWm1sbGJHUlRkR0YwWlRvZ2UyVnljbTl5ZlgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBWd2lSMmxpSUVSbGFXNWxiU0JDWldsMGNtRm5JR1ZwYm1WdUlGUnBkR1ZzTGx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEMWNJbFJwZEdWc1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnNjR1Z5VkdWNGREMTdaWEp5YjNJL0xtMWxjM05oWjJWOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJRzVoYldVOWV5ZGpiMjF0Wlc1MEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUcxMWJIUnBiR2x1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNVNiM2R6UFhzMWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pMYjIxdFpXNTBZWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKQ1pXbDBjbUZuSUhabGNtWmhjM05sYmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNqMTdJU0ZsY25KdmNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUdobGJIQmxjbFJsZUhROWUyQWtlMlpwWld4a0xuWmhiSFZsTG14bGJtZDBhSDBnTHlBa2UyMWhlRU52YlcxbGJuUk1aVzVuZEdoOUlGcGxhV05vWlc1Z2ZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBdlBseHVYRzRnSUNBZ0lDQjdJV2hoYzFWelpYSWdKaVlnWTJoaGJHeGxibWRsUHk1a1lYUmhJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVdzllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTlvZEcxc09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpTNWtZWFJoTG1Ob1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOHVjbVZ3YkdGalpTZ25JMlptWm1abVppY3NJQ2QwY21GdWMzQmhjbVZ1ZENjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25kMmxrZEdnOVhDSXlNREJjSWljc0lDY25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvSjJobGFXZG9kRDFjSWpJd01Gd2lKeXdnSnljcElEOC9JQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lDQWdJQ0E4UTI5dWRISnZiR3hsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyTm9ZV3hzWlc1blpVRnVjM2RsY2k1amFHRnNiR1Z1WjJWVGIyeDFkR2x2YmlkOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGNtOXNQWHRqYjI1MGNtOXNmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrSUhzdUxpNW1hV1ZzWkgwZ2JHRmlaV3c5ZXlkRFlYQjBZMmhoSjMwZ1pYSnliM0k5ZXlFaFpYSnliM0o5SUdobGJIQmxjbFJsZUhROWUyVnljbTl5UHk1dFpYTnpZV2RsZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4TDFkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBcGZWeHVYRzRnSUNBZ0lDQThWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjejVjYmlBZ0lDQWdJQ0FnUEVKMWRIUnZiaUIwZVhCbFBWd2ljM1ZpYldsMFhDSWdjMmw2WlQxY0luTnRZV3hzWENJZ2MzUmhjblJKWTI5dVBYczhUV1JUWlc1a0lDOCtmVDVjYmlBZ0lDQWdJQ0FnSUNCTGIyMXRaVzUwYVdWeVpXNWNiaUFnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzVjYmlBZ0lDQWdJQ0FnUEVKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0p5WlhObGRGd2lYRzRnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpaWFFvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEWVc1alpXd29LVnh1SUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdjMmw2WlQxY0luTnRZV3hzWENKY2JpQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBWd2lkR1Y0ZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdZMjlzYjNJOVhDSnpaV052Ym1SaGNubGNJajVjYmlBZ0lDQWdJQ0FnSUNCQlltSnlaV05vWlc1Y2JpQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRUZqZEdsdmJuTStYRzRnSUNBZ1BDOVhjbWwwWlVOdmJXMWxiblJYY21Gd2NHVnlQbHh1SUNBcFhHNTlYRzRpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCTmtJMFF5SjkgKi9cIik7XG5fYzIgPSBXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZSA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZXdrcHF0ejNcIixcbiAgICBsYWJlbDogXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VcIlxufSkoXCJoZWlnaHQ6MTAwJTtkaXNwbGF5OmdyaWQ7c3Zne2hlaWdodDoxMDAlO31cIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOTNjbWwwWlMxamIyMXRaVzUwTDNkeWFYUmxMV052YlcxbGJuUXVkSE40SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFYUnlkV3hwWVM5RWIyTjFiV1Z1ZEhNdmQyVndkV0pzYVhOb0wyeHBZbk12WTI5dGJXVnVkSE12ZDJWaWMybDBaUzl6Y21NdmJHbGlMM2R5YVhSbExXTnZiVzFsYm5RdmQzSnBkR1V0WTI5dGJXVnVkQzUwYzNnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIdDZiMlJTWlhOdmJIWmxjbjBnWm5KdmJTQW5RR2h2YjJ0bWIzSnRMM0psYzI5c2RtVnljeTk2YjJRblhHNXBiWEJ2Y25RZ2UzTjBlV3hsWkgwZ1puSnZiU0FuUUcxMWFTOXRZWFJsY21saGJDZGNibWx0Y0c5eWRDQjdkWE5sVlhObGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOWhkWFJvWlc1MGFXTmhkR2x2Ymk5M1pXSnphWFJsSjF4dWFXMXdiM0owSUh0MWMyVlhaV0p6YVhSbFFuVnBiR1JsY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5M1pXSnphWFJsTDJKMWFXeGtaWEluWEc1cGJYQnZjblFnZTNWelpVMWxiVzk5SUdaeWIyMGdKM0psWVdOMEoxeHVhVzF3YjNKMElIdERiMjUwY205c2JHVnlMQ0IxYzJWR2IzSnRmU0JtY205dElDZHlaV0ZqZEMxb2IyOXJMV1p2Y20wblhHNXBiWEJ2Y25RZ2UwMWtVMlZ1WkgwZ1puSnZiU0FuY21WaFkzUXRhV052Ym5NdmJXUW5YRzVwYlhCdmNuUWdlMDV2WkdWOUlHWnliMjBnSjNOc1lYUmxKMXh1YVcxd2IzSjBJSHQ2ZlNCbWNtOXRJQ2Q2YjJRblhHNXBiWEJ2Y25RZ2UzUnZVR3hoYVc1MFpYaDBmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM0pwWTJoMFpYaDBKMXh1YVcxd2IzSjBJSHRSZFdWeWVWSmxjM1ZzZEgwZ1puSnZiU0FuUUdGd2IyeHNieTlqYkdsbGJuUW5YRzVwYlhCdmNuUWdlMXh1SUNCQlpHUkRiMjF0Wlc1MFRYVjBZWFJwYjI1V1lYSnBZV0pzWlhNc1hHNGdJRU5vWVd4c1pXNW5aVkYxWlhKNUxGeHVJQ0JGWkdsMFEyOXRiV1Z1ZEUxMWRHRjBhVzl1Vm1GeWFXRmliR1Z6WEc1OUlHWnliMjBnSjBCM1pYQjFZbXhwYzJndmQyVmljMmwwWlM5aGNHa25YRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RtYjNKdEp5bGdYRzRnSUdScGMzQnNZWGs2SUdkeWFXUTdYRzRnSUdkaGNEb2dKSHNvZTNSb1pXMWxmU2tnUFQ0Z2RHaGxiV1V1YzNCaFkybHVaeWd5S1gwN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYW5WemRHbG1lUzF6Wld4bU9pQm1iR1Y0TFdWdVpEdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWm14bGVDMW1iRzkzT2lCeWIzY2dkM0poY0R0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktERXBmVHRjYm1CY2JseHVaWGh3YjNKMElHTnZibk4wSUZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJZ1BTQnpkSGxzWldRb0oyUnBkaWNwWUZ4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dUlDQm5jbWxrTFhSbGJYQnNZWFJsTFdOdmJIVnRibk02SUcxcGJtMWhlQ2h0WVhndFkyOXVkR1Z1ZEN3Z01qQXdjSGdwSURJd01IQjRPMXh1SUNCaGJHbG5iaTFwZEdWdGN6b2dZMlZ1ZEdWeU8xeHVJQ0JuWVhBNklDUjdLSHQwYUdWdFpYMHBJRDArSUhSb1pXMWxMbk53WVdOcGJtY29NeWw5TzF4dUlDQnFkWE4wYVdaNUxXTnZiblJsYm5RNklHWnNaWGd0YzNSaGNuUTdYRzVnWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5SRGFHRnNiR1Z1WjJVZ1BTQnpkSGxzWldRb0oyUnBkaWNwWUZ4dUlDQm9aV2xuYUhRNklERXdNQ1U3WEc0Z0lHUnBjM0JzWVhrNklHZHlhV1E3WEc1Y2JpQWdjM1puSUh0Y2JpQWdJQ0JvWldsbmFIUTZJREV3TUNVN1hHNGdJSDFjYm1CY2JseHVkSGx3WlNCRGNtVmhkR1ZEYjIxdFpXNTBVSEp2Y0hNZ1BTQjdYRzRnSUhSbGVIUS9PaUJ1WlhabGNseHVJQ0IwYVhSc1pUODZJRzVsZG1WeVhHNGdJR05vWVd4c1pXNW5aVG9nVUdsamF6eFJkV1Z5ZVZKbGMzVnNkRHhEYUdGc2JHVnVaMlZSZFdWeWVUNHNJQ2RrWVhSaEp5QjhJQ2RzYjJGa2FXNW5KeUI4SUNkbGNuSnZjaWMrSUh3Z2JuVnNiRnh1SUNCdmJsTjFZbTFwZERvZ0tGeHVJQ0FnSUdSaGRHRTZJRTl0YVhROFFXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWeld5ZHBibkIxZENkZExDQW5hWFJsYlVsRUp5QjhJQ2RwZEdWdFZIbHdaU2NnZkNBbmNHRnlaVzUwU1VRbklId2dKM0JsWlhKSlpDYytYRzRnSUNrZ1BUNGdkbTlwWkZ4dWZWeHVYRzUwZVhCbElFVmthWFJEYjIxdFpXNTBVSEp2Y0hNZ1BTQjdYRzRnSUhSbGVIUS9PaUJPYjJSbFcxMGdmQ0J1ZFd4c1hHNGdJSFJwZEd4bFB6b2djM1J5YVc1bklId2diblZzYkZ4dUlDQmphR0ZzYkdWdVoyVS9PaUJ1WlhabGNseHVJQ0J2YmxOMVltMXBkRG9nS0dSaGRHRTZJRTl0YVhROFJXUnBkRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmxrSno0cElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQlhjbWwwWlVOdmJXMWxiblJRY205d2N5QTlJSHRjYmlBZ2IyNURZVzVqWld3NklDZ3BJRDArSUhadmFXUmNiaUFnWTJ4aGMzTk9ZVzFsUHpvZ2MzUnlhVzVuWEc0Z0lHMWhlRU52YlcxbGJuUk1aVzVuZEdnNklHNTFiV0psY2x4dWZTQW1JQ2hEY21WaGRHVkRiMjF0Wlc1MFVISnZjSE1nZkNCRlpHbDBRMjl0YldWdWRGQnliM0J6S1Z4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MElEMGdLSHRjYmlBZ1kyeGhjM05PWVcxbExGeHVJQ0J2YmtOaGJtTmxiQ3hjYmlBZ2IyNVRkV0p0YVhRc1hHNGdJRzFoZUVOdmJXMWxiblJNWlc1bmRHZ3NYRzRnSUhScGRHeGxMRnh1SUNCMFpYaDBMRnh1SUNCamFHRnNiR1Z1WjJWY2JuMDZJRmR5YVhSbFEyOXRiV1Z1ZEZCeWIzQnpLU0E5UGlCN1hHNGdJR052Ym5OMElIdGNiaUFnSUNCbGJHVnRaVzUwY3pvZ2UxUmxlSFJHYVdWc1pDd2dRblYwZEc5dWZWeHVJQ0I5SUQwZ2RYTmxWMlZpYzJsMFpVSjFhV3hrWlhJb0tWeHVJQ0JqYjI1emRDQjdhR0Z6VlhObGNuMGdQU0IxYzJWVmMyVnlLQ2xjYmx4dUlDQmpiMjV6ZENCelkyaGxiV0VnUFNCMWMyVk5aVzF2S0Z4dUlDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNCNkxuVnVhVzl1S0Z0Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2tzWEc0Z0lDQWdJQ0FnSUNBZ1ozVmxjM1JWYzJWeWJtRnRaVG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVUZ1YzNkbGNqb2dlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUI2TG5OMGNtbHVaeWdwTG01dmJtVnRjSFI1S0NsY2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUYwcExGeHVJQ0FnSUZ0dFlYaERiMjF0Wlc1MFRHVnVaM1JvWFZ4dUlDQXBYRzVjYmlBZ2RIbHdaU0JHYjNKdFNXNXdkWFFnUFNCNkxtbHVabVZ5UEhSNWNHVnZaaUJ6WTJobGJXRStYRzRnSUdOdmJuTjBJSHRvWVc1a2JHVlRkV0p0YVhRc0lHTnZiblJ5YjJ3c0lISmxjMlYwZlNBOUlIVnpaVVp2Y20wOFJtOXliVWx1Y0hWMFBpaDdYRzRnSUNBZ2NtVnpiMngyWlhJNklIcHZaRkpsYzI5c2RtVnlLSE5qYUdWdFlTa3NYRzRnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxjem9nZTF4dUlDQWdJQ0FnWTI5dGJXVnVkRG9nZEc5UWJHRnBiblJsZUhRb2RHVjRkQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQjBhWFJzWlRvZ2RHbDBiR1VnUHo4Z0p5Y3NYRzRnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lBbkoxeHVJQ0FnSUgwc1hHNGdJQ0FnYlc5a1pUb2dKMkZzYkNkY2JpQWdmU2xjYmx4dUlDQmpiMjV6ZENCemRXSnRhWFFnUFNCb1lXNWtiR1ZUZFdKdGFYUW9LSHRqYjIxdFpXNTBMQ0F1TGk1a1lYUmhmU2tnUFQ0Z2UxeHVJQ0FnSUc5dVUzVmliV2wwS0h0Y2JpQWdJQ0FnSUM0dUxtUmhkR0VzWEc0Z0lDQWdJQ0IwWlhoME9pQmJYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuY0dGeVlXZHlZWEJvSnl4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJqb2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJqYjIxdFpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdYVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0JkWEc0Z0lDQWdmU2xjYmlBZ2ZTbGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhYY21sMFpVTnZiVzFsYm5SWGNtRndjR1Z5SUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGZTQnZibE4xWW0xcGREMTdjM1ZpYldsMGZUNWNiaUFnSUNBZ0lIc2hhR0Z6VlhObGNpQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyZDFaWE4wVlhObGNtNWhiV1VuZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ3OWUyTnZiblJ5YjJ4OVhHNGdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4WGFXUjBhRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajFjSWtSbGFXNGdUbUZ0WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNQVndpVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUc1aGJXVTlleWQwYVhSc1pTZDlYRzRnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJSEpsYm1SbGNqMTdLSHRtYVdWc1pDd2dabWxsYkdSVGRHRjBaVG9nZTJWeWNtOXlmWDBwSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdMaTR1Wm1sbGJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFZ3aVIybGlJRVJsYVc1bGJTQkNaV2wwY21GbklHVnBibVZ1SUZScGRHVnNMbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lsUnBkR1ZzWENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkamIyMXRaVzUwSjMxY2JpQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwUm1sbGJHUmNiaUFnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzExYkhScGJHbHVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnNiRmRwWkhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1U2IzZHpQWHMxZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld3OVhDSkxiMjF0Wlc1MFlYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTlYQ0pDWldsMGNtRm5JSFpsY21aaGMzTmxibHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2oxN0lTRmxjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJBa2UyWnBaV3hrTG5aaGJIVmxMbXhsYm1kMGFIMGdMeUFrZTIxaGVFTnZiVzFsYm5STVpXNW5kR2g5SUZwbGFXTm9aVzVnZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0F2UGx4dVhHNGdJQ0FnSUNCN0lXaGhjMVZ6WlhJZ0ppWWdZMmhoYkd4bGJtZGxQeTVrWVhSaElDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3OWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gxOW9kRzFzT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlM1a1lYUmhMbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4dWNtVndiR0ZqWlNnbkkyWm1abVptWmljc0lDZDBjbUZ1YzNCaGNtVnVkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNnbmQybGtkR2c5WENJeU1EQmNJaWNzSUNjbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9KMmhsYVdkb2REMWNJakl3TUZ3aUp5d2dKeWNwSUQ4L0lDY25YRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUNBZ0lDQThRMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOb1lXeHNaVzVuWlVGdWMzZGxjaTVqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiaWQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwY205c1BYdGpiMjUwY205c2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtJSHN1TGk1bWFXVnNaSDBnYkdGaVpXdzlleWREWVhCMFkyaGhKMzBnWlhKeWIzSTlleUVoWlhKeWIzSjlJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FwZlZ4dVhHNGdJQ0FnSUNBOFYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJpQjBlWEJsUFZ3aWMzVmliV2wwWENJZ2MybDZaVDFjSW5OdFlXeHNYQ0lnYzNSaGNuUkpZMjl1UFhzOFRXUlRaVzVrSUM4K2ZUNWNiaUFnSUNBZ0lDQWdJQ0JMYjIxdFpXNTBhV1Z5Wlc1Y2JpQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSnlaWE5sZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WelpYUW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURZVzVqWld3b0tWeHVJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ2MybDZaVDFjSW5OdFlXeHNYQ0pjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFZ3aWRHVjRkRndpWEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiM0k5WENKelpXTnZibVJoY25sY0lqNWNiaUFnSUNBZ0lDQWdJQ0JCWW1KeVpXTm9aVzVjYmlBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc0Z0lDQWdJQ0E4TDFkeWFYUmxRMjl0YldWdWRFRmpkR2x2Ym5NK1hHNGdJQ0FnUEM5WGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeVBseHVJQ0FwWEc1OVhHNGlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJjVU54UXlKOSAqL1wiKTtcbl9jMyA9IFdyaXRlQ29tbWVudENoYWxsZW5nZTtcbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnQgPSAocGFyYW0pPT57XG4gICAgbGV0IHsgY2xhc3NOYW1lICwgb25DYW5jZWwgLCBvblN1Ym1pdCAsIG1heENvbW1lbnRMZW5ndGggLCB0aXRsZSAsIHRleHQgLCBjaGFsbGVuZ2UgIH0gPSBwYXJhbTtcbiAgICB2YXIgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2U7XG4gICAgX3MoKTtcbiAgICBjb25zdCB7IGVsZW1lbnRzOiB7IFRleHRGaWVsZCAsIEJ1dHRvbiAgfSAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKCk7XG4gICAgY29uc3QgeyBoYXNVc2VyICB9ID0gdXNlVXNlcigpO1xuICAgIGNvbnN0IHNjaGVtYSA9IHVzZU1lbW8oKCk9PnoudW5pb24oW1xuICAgICAgICAgICAgei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZ3Vlc3RVc2VybmFtZTogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgICAgIGNoYWxsZW5nZUFuc3dlcjogei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHouc3RyaW5nKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pLCBbXG4gICAgICAgIG1heENvbW1lbnRMZW5ndGhcbiAgICBdKTtcbiAgICB2YXIgX3RvUGxhaW50ZXh0O1xuICAgIGNvbnN0IHsgaGFuZGxlU3VibWl0ICwgY29udHJvbCAsIHJlc2V0ICB9ID0gdXNlRm9ybSh7XG4gICAgICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgICAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICAgICAgICBjb21tZW50OiAoX3RvUGxhaW50ZXh0ID0gdG9QbGFpbnRleHQodGV4dCkpICE9PSBudWxsICYmIF90b1BsYWludGV4dCAhPT0gdm9pZCAwID8gX3RvUGxhaW50ZXh0IDogXCJcIixcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSAhPT0gbnVsbCAmJiB0aXRsZSAhPT0gdm9pZCAwID8gdGl0bGUgOiBcIlwiLFxuICAgICAgICAgICAgZ3Vlc3RVc2VybmFtZTogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBtb2RlOiBcImFsbFwiXG4gICAgfSk7XG4gICAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KChwYXJhbSk9PntcbiAgICAgICAgbGV0IHsgY29tbWVudCAsIC4uLmRhdGEgfSA9IHBhcmFtO1xuICAgICAgICBvblN1Ym1pdCh7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgdGV4dDogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwYXJhZ3JhcGhcIixcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZV9yZXBsYWNlX3JlcGxhY2VfcmVwbGFjZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBfanN4REVWKFdyaXRlQ29tbWVudFdyYXBwZXIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uU3VibWl0OiBzdWJtaXQsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAhaGFzVXNlciAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoQ29udHJvbGxlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3RVc2VybmFtZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJEZWluIE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dDogZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwgdm9pZCAwLCB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxMzMsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUaXRlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE0OSxcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDdcbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNvbW1lbnRcIixcbiAgICAgICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogKHBhcmFtKT0+LyojX19QVVJFX18qLyB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2pzeERFVihUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluUm93czogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIktvbW1lbnRhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiQmVpdHJhZyB2ZXJmYXNzZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dDogXCJcIi5jb25jYXQoZmllbGQudmFsdWUubGVuZ3RoLCBcIiAvIFwiKS5jb25jYXQobWF4Q29tbWVudExlbmd0aCwgXCIgWmVpY2hlblwiKVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE2NCxcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDdcbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgIWhhc1VzZXIgJiYgKGNoYWxsZW5nZSA9PT0gbnVsbCB8fCBjaGFsbGVuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYWxsZW5nZS5kYXRhKSAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlciwge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihXcml0ZUNvbW1lbnRDaGFsbGVuZ2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19odG1sOiAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgPSAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlKSA9PT0gbnVsbCB8fCBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UucmVwbGFjZShcIiNmZmZmZmZcIiwgXCJ0cmFuc3BhcmVudFwiKS5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgXCJcIikucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCBcIlwiKSkgIT09IG51bGwgJiYgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgIT09IHZvaWQgMCA/IF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlX3JlcGxhY2VfcmVwbGFjZV9yZXBsYWNlIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMTFcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImNoYWxsZW5nZUFuc3dlci5jaGFsbGVuZ2VTb2x1dGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbDogY29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogKHBhcmFtKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gcmV0dXJuIF9qc3hERVYoVGV4dEZpZWxkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJDYXB0Y2hhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxOTMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDExXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwgdm9pZCAwLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTgyLFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogOVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoV3JpdGVDb21tZW50QWN0aW9ucywge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3VibWl0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEljb246IC8qI19fUFVSRV9fKi8gX2pzeERFVihNZFNlbmQsIHt9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogXCJLb21tZW50aWVyZW5cIlxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDIwNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogOVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZXNldFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJzZWNvbmRhcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBcIkFiYnJlY2hlblwiXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMjA4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwgdm9pZCAwLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMjAzLFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogN1xuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgXVxuICAgIH0sIHZvaWQgMCwgdHJ1ZSwge1xuICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgbGluZU51bWJlcjogMTMxLFxuICAgICAgICBjb2x1bW5OdW1iZXI6IDVcbiAgICB9LCB0aGlzKTtcbn07XG5fcyhXcml0ZUNvbW1lbnQsIFwiSGJsT2F3a1hqZzNPczBNZ05aY25NOXVtUlZjPVwiLCBmYWxzZSwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdXNlV2Vic2l0ZUJ1aWxkZXIsXG4gICAgICAgIHVzZVVzZXIsXG4gICAgICAgIHVzZUZvcm1cbiAgICBdO1xufSk7XG5fYzQgPSBXcml0ZUNvbW1lbnQ7XG52YXIgX2MsIF9jMSwgX2MyLCBfYzMsIF9jNDtcbiRSZWZyZXNoUmVnJChfYywgXCJXcml0ZUNvbW1lbnRXcmFwcGVyXCIpO1xuJFJlZnJlc2hSZWckKF9jMSwgXCJXcml0ZUNvbW1lbnRBY3Rpb25zXCIpO1xuJFJlZnJlc2hSZWckKF9jMiwgXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyXCIpO1xuJFJlZnJlc2hSZWckKF9jMywgXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VcIik7XG4kUmVmcmVzaFJlZyQoX2M0LCBcIldyaXRlQ29tbWVudFwiKTtcblxuXG47XG4gICAgLy8gV3JhcHBlZCBpbiBhbiBJSUZFIHRvIGF2b2lkIHBvbGx1dGluZyB0aGUgZ2xvYmFsIHNjb3BlXG4gICAgO1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIC8vIExlZ2FjeSBDU1MgaW1wbGVtZW50YXRpb25zIHdpbGwgYGV2YWxgIGJyb3dzZXIgY29kZSBpbiBhIE5vZGUuanMgY29udGV4dFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IGJlZm9yZSBjb250aW51aW5nLlxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxuICAgICAgICAgICAgJyRSZWZyZXNoSGVscGVycyQnIGluIHNlbGYpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gX193ZWJwYWNrX21vZHVsZV9fLmV4cG9ydHM7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcbiAgICAgICAgICAgIHZhciBwcmV2RXhwb3J0cyA9IChfYiA9IChfYSA9IF9fd2VicGFja19tb2R1bGVfXy5ob3QuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZFeHBvcnRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cbiAgICAgICAgICAgIC8vIHRlbXBsYXRpbmcgYW5kIGV4ZWN1dGlvbi5cbiAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5yZWdpc3RlckV4cG9ydHNGb3JSZWFjdFJlZnJlc2goY3VycmVudEV4cG9ydHMsIF9fd2VicGFja19tb2R1bGVfXy5pZCk7XG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXG4gICAgICAgICAgICAvLyBpdCBpcyBhIFJlZnJlc2ggQm91bmRhcnkuXG4gICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLmlzUmVhY3RSZWZyZXNoQm91bmRhcnkoY3VycmVudEV4cG9ydHMpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgLy8gc2lnbmF0dXJlcy5cbiAgICAgICAgICAgICAgICBfX3dlYnBhY2tfbW9kdWxlX18uaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIFVuY29uZGl0aW9uYWxseSBhY2NlcHQgYW4gdXBkYXRlIHRvIHRoaXMgbW9kdWxlLCB3ZSdsbCBjaGVjayBpZiBpdCdzXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW1wb3J0TWV0YSBpcyByZXBsYWNlZCBpbiB0aGUgbG9hZGVyXG4gICAgICAgICAgICAgICAgaW1wb3J0Lm1ldGEud2VicGFja0hvdC5hY2NlcHQoKTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXG4gICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBCb3VuZGFyeSwgbGV0dGluZyB1cyBrbm93IHdlIG5lZWQgdG8gY2hlY2sgZm9yIGludmFsaWRhdGlvbiBvclxuICAgICAgICAgICAgICAgIC8vIGVucXVldWUgYW4gdXBkYXRlLlxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGJvdW5kYXJ5IGNhbiBiZWNvbWUgaW5lbGlnaWJsZSBpZiBpdHMgZXhwb3J0cyBhcmUgaW5jb21wYXRpYmxlXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIGV4cG9ydHMuXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3UgYWRkL3JlbW92ZS9jaGFuZ2UgZXhwb3J0cywgd2UnbGwgd2FudCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyByZS1leGVjdXRlIHRoZSBpbXBvcnRpbmcgbW9kdWxlcywgYW5kIGZvcmNlIHRob3NlIGNvbXBvbmVudHMgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24sIHdlIHdhbnQgdG8gaW52YWxpZGF0ZSB0aGUgYm91bmRhcnkuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5KHByZXZFeHBvcnRzLCBjdXJyZW50RXhwb3J0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBqdXN0IGV4ZWN1dGVkIHRoZSBjb2RlIGZvciB0aGUgbW9kdWxlLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVuIHdlIHdlcmUgX3ByZXZpb3VzbHlfIGEgYm91bmRhcnksXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBhbHJlYWR5IGFjY2VwdGVkIHRoaXMgdXBkYXRlIChhY2NpZGVudGFsIHNpZGUgZWZmZWN0KS5cbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpc05vTG9uZ2VyQUJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKCk7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJpRCJ9 */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\",\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge  } = param;\n    var _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const schema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.union([\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n                guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeAnswer: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                    challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                    challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n                })\n            }),\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n            })\n        ]), [\n        maxCommentLength\n    ]);\n    var _toPlaintext;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\"\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 133,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 149,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 164,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 183,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challengeAnswer.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 193,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 182,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 204,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 208,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 203,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n        lineNumber: 131,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"OM6pQApLTVh/0ARLk0PrIi+fqg4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"HblOawkXjg3Os0MgNZcnM9umRVc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/write-comment/write-comment.tsx\n"));

/***/ })

});