"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/comment-list/comment-list.tsx":
/*!*************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-list/comment-list.tsx ***!
  \*************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentList\": function() { return /* binding */ CommentList; },\n/* harmony export */   \"CommentListActions\": function() { return /* binding */ CommentListActions; },\n/* harmony export */   \"CommentListWrapper\": function() { return /* binding */ CommentListWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/ui */ \"../../libs/ui/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var _comment_list_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comment-list.state */ \"../../libs/comments/website/src/lib/comment-list/comment-list.state.tsx\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\nconst CommentListWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_4__.styled)(\"article\", {\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\",\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(4);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtnZXRTdGF0ZUZvckVkaXRvcn0gZnJvbSAnLi9jb21tZW50LWxpc3Quc3RhdGUnXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdFdyYXBwZXIgPSBzdHlsZWQoJ2FydGljbGUnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDQpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0QWN0aW9ucyA9IHN0eWxlZCgnZGl2JylgYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3QgPSAoe1xuICBkYXRhLFxuICBsb2FkaW5nLFxuICBlcnJvcixcbiAgY2hhbGxlbmdlLFxuICBjbGFzc05hbWUsXG4gIG1heENvbW1lbnRMZW5ndGgsXG4gIGFub255bW91c0NhbkNvbW1lbnQsXG4gIGFub255bW91c0NhblJhdGUsXG4gIHVzZXJDYW5FZGl0LFxuICBhZGQsXG4gIG9uQWRkQ29tbWVudCxcbiAgZWRpdCxcbiAgb25FZGl0Q29tbWVudCxcbiAgb3BlbkVkaXRvcnNTdGF0ZTogW29wZW5Db21tZW50RWRpdG9ycywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudEVkaXRvcixcbiAgICBDb21tZW50TGlzdEl0ZW0sXG4gICAgZWxlbWVudHM6IHtBbGVydH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcbiAgY29uc3Qge2hhc1VzZXJ9ID0gdXNlVXNlcigpXG5cbiAgY29uc3Qgc2hvd1JlcGx5ID0gZ2V0U3RhdGVGb3JFZGl0b3Iob3BlbkNvbW1lbnRFZGl0b3JzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvQ29tbWVudExpc3RBY3Rpb25zPlxuICAgICAgKX1cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxDb21tZW50RWRpdG9yXG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVycm9yPXthZGQuZXJyb3J9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbkNvbW1lbnRFZGl0b3JzLCBkaXNwYXRjaF19XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgYWRkPXthZGR9XG4gICAgICAgICAgb25BZGRDb21tZW50PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgZWRpdD17ZWRpdH1cbiAgICAgICAgICBvbkVkaXRDb21tZW50PXtvbkVkaXRDb21tZW50fVxuICAgICAgICAgIGFub255bW91c0NhbkNvbW1lbnQ9e2Fub255bW91c0NhbkNvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuUmF0ZT17YW5vbnltb3VzQ2FuUmF0ZX1cbiAgICAgICAgICB1c2VyQ2FuRWRpdD17dXNlckNhbkVkaXR9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBjaGlsZHJlbj17KGNvbW1lbnQuY2hpbGRyZW4gYXMgQ29tbWVudFtdKSA/PyBbXX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvQ29tbWVudExpc3RXcmFwcGVyPlxuICApXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUWtDIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = CommentListWrapper;\nconst CommentListActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_4__.styled)(\"div\", {\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\",\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\"\n})(\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtnZXRTdGF0ZUZvckVkaXRvcn0gZnJvbSAnLi9jb21tZW50LWxpc3Quc3RhdGUnXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdFdyYXBwZXIgPSBzdHlsZWQoJ2FydGljbGUnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDQpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0QWN0aW9ucyA9IHN0eWxlZCgnZGl2JylgYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3QgPSAoe1xuICBkYXRhLFxuICBsb2FkaW5nLFxuICBlcnJvcixcbiAgY2hhbGxlbmdlLFxuICBjbGFzc05hbWUsXG4gIG1heENvbW1lbnRMZW5ndGgsXG4gIGFub255bW91c0NhbkNvbW1lbnQsXG4gIGFub255bW91c0NhblJhdGUsXG4gIHVzZXJDYW5FZGl0LFxuICBhZGQsXG4gIG9uQWRkQ29tbWVudCxcbiAgZWRpdCxcbiAgb25FZGl0Q29tbWVudCxcbiAgb3BlbkVkaXRvcnNTdGF0ZTogW29wZW5Db21tZW50RWRpdG9ycywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudEVkaXRvcixcbiAgICBDb21tZW50TGlzdEl0ZW0sXG4gICAgZWxlbWVudHM6IHtBbGVydH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcbiAgY29uc3Qge2hhc1VzZXJ9ID0gdXNlVXNlcigpXG5cbiAgY29uc3Qgc2hvd1JlcGx5ID0gZ2V0U3RhdGVGb3JFZGl0b3Iob3BlbkNvbW1lbnRFZGl0b3JzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvQ29tbWVudExpc3RBY3Rpb25zPlxuICAgICAgKX1cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxDb21tZW50RWRpdG9yXG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVycm9yPXthZGQuZXJyb3J9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbkNvbW1lbnRFZGl0b3JzLCBkaXNwYXRjaF19XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgYWRkPXthZGR9XG4gICAgICAgICAgb25BZGRDb21tZW50PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgZWRpdD17ZWRpdH1cbiAgICAgICAgICBvbkVkaXRDb21tZW50PXtvbkVkaXRDb21tZW50fVxuICAgICAgICAgIGFub255bW91c0NhbkNvbW1lbnQ9e2Fub255bW91c0NhbkNvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuUmF0ZT17YW5vbnltb3VzQ2FuUmF0ZX1cbiAgICAgICAgICB1c2VyQ2FuRWRpdD17dXNlckNhbkVkaXR9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBjaGlsZHJlbj17KGNvbW1lbnQuY2hpbGRyZW4gYXMgQ29tbWVudFtdKSA/PyBbXX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvQ29tbWVudExpc3RXcmFwcGVyPlxuICApXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYWtDIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentListActions;\nconst CommentList = (param)=>{\n    _s();\n    let { data , loading , error , challenge , className , maxCommentLength , anonymousCanComment , anonymousCanRate , userCanEdit , add , onAddComment , edit , onEditComment , openEditorsState: [openCommentEditors, dispatch]  } = param;\n    var _data_comments;\n    _s1();\n    const { CommentEditor , CommentListItem , elements: { Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser)();\n    const showReply = (0,_comment_list_state__WEBPACK_IMPORTED_MODULE_3__.getStateForEditor)(openCommentEditors)(\"add\", null);\n    const canReply = anonymousCanComment || hasUser;\n    var _comment_children;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(CommentListWrapper, {\n        className: className,\n        children: [\n            !loading && !error && !(data === null || data === void 0 ? void 0 : data.comments.length) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(Alert, {\n                severity: \"info\",\n                children: \"Keine Kommentare vorhanden.\"\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 45,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 48,\n                columnNumber: 17\n            }, undefined),\n            canReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(CommentListActions, {\n                children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(_wepublish_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n                    startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_6__.MdForum, {}, void 0, false, void 0, void 0),\n                    variant: \"text\",\n                    onClick: ()=>dispatch({\n                            type: \"add\",\n                            action: \"open\",\n                            commentId: null\n                        }),\n                    children: \"Jetzt Mitreden\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 52,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 51,\n                columnNumber: 9\n            }, undefined),\n            showReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(CommentEditor, {\n                challenge: challenge,\n                maxCommentLength: maxCommentLength,\n                onCancel: ()=>dispatch({\n                        type: \"add\",\n                        action: \"close\",\n                        commentId: null\n                    }),\n                onSubmit: onAddComment,\n                error: add.error,\n                loading: add.loading\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 68,\n                columnNumber: 9\n            }, undefined),\n            data === null || data === void 0 ? void 0 : (_data_comments = data.comments) === null || _data_comments === void 0 ? void 0 : _data_comments.map((comment)=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxDEV)(CommentListItem, {\n                    ...comment,\n                    openEditorsState: [\n                        openCommentEditors,\n                        dispatch\n                    ],\n                    challenge: challenge,\n                    add: add,\n                    onAddComment: onAddComment,\n                    edit: edit,\n                    onEditComment: onEditComment,\n                    anonymousCanComment: anonymousCanComment,\n                    anonymousCanRate: anonymousCanRate,\n                    userCanEdit: userCanEdit,\n                    maxCommentLength: maxCommentLength,\n                    children: (_comment_children = comment.children) !== null && _comment_children !== void 0 ? _comment_children : []\n                }, comment.id, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 85,\n                    columnNumber: 9\n                }, undefined))\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n        lineNumber: 43,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentList, \"53YR35ejbTE/6+AqcpTlODmllmc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c3 = CommentList;\n_s1(CommentList, \"6c1zlmIoGuMCEps/nejMKt/Eiks=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c2 = CommentList;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"CommentListWrapper\");\n$RefreshReg$(_c1, \"CommentListActions\");\n$RefreshReg$(_c2, \"CommentList\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c3;\n$RefreshReg$(_c3, \"CommentList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1saXN0L2NvbW1lbnQtbGlzdC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFvQztBQUNxQjtBQUNyQjtBQUVpRDtBQUMvQztBQUNnQjtBQUUvQyxNQUFNTSxxQkFBQUEsV0FBQUEsR0FBcUJOLHFEQUFNQSxDQUFDOzs7Ozt3QkFFaEMsQ0FBQU8sUUFBYUM7UUFBWixFQUFDQSxNQUFBQSxFQUFNLEdBQUFEO1dBQUtDLE1BQU1DLE9BQU8sQ0FBQztBQUFDLGs2M0JBQ3BDO0tBSFlIO0FBS04sTUFBTUkscUJBQUFBLFdBQUFBLEdBQXFCVixxREFBTUEsQ0FBQzs7Ozs7NjUzQkFBUTtNQUFwQ1U7QUFFTixNQUFNQyxjQUFjLENBQUFKLFFBZUk7O1FBZkgsRUFDMUJLLEtBQUFBLEVBQ0FDLFFBQUFBLEVBQ0FDLE1BQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLGlCQUFBQSxFQUNBQyxvQkFBQUEsRUFDQUMsaUJBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLElBQUFBLEVBQ0FDLGFBQUFBLEVBQ0FDLEtBQUFBLEVBQ0FDLGNBQUFBLEVBQ0FDLGtCQUFrQixDQUFDQyxvQkFBb0JDLFNBQVMsR0FDeEIsR0FBQXBCO1FBcURuQks7O0lBcERMLE1BQU0sRUFDSmdCLGNBQUFBLEVBQ0FDLGdCQUFBQSxFQUNBQyxVQUFVLEVBQUNDLE1BQUFBLEVBQU0sR0FDbEIsR0FBRzVCLDZFQUFpQkE7SUFDckIsTUFBTSxFQUFDNkIsUUFBQUEsRUFBUSxHQUFHL0IsMEVBQU9BO0lBRXpCLE1BQU1nQyxZQUFZNUIsc0VBQWlCQSxDQUFDcUIsb0JBQW9CLE9BQU8sSUFBSTtJQUNuRSxNQUFNUSxXQUFXaEIsdUJBQXVCYztRQTBEckJHO0lBeERuQixxQkFDRUMsc0VBQUFBLENBQUM5QixvQkFBQUE7UUFBbUJVLFdBQVdBOztZQUM1QixDQUFDSCxXQUFXLENBQUNDLFNBQVMsQ0FBQ0YsQ0FBQUEsU0FBQUEsSUFBQUEsSUFBQUEsU0FBQUEsS0FBQUEsSUFBQUEsS0FBQUEsSUFBQUEsS0FBTXlCLFFBQVEsQ0FBQ0MsTUFBTSxtQkFDM0NGLHNFQUFBQSxDQUFDTCxPQUFBQTtnQkFBTVEsVUFBUzswQkFBTzs7Ozs7O1lBR3hCekIsU0FBQUEsV0FBQUEsR0FBU3NCLHNFQUFBQSxDQUFDTCxPQUFBQTtnQkFBTVEsVUFBUzswQkFBU3pCLE1BQU0wQixPQUFPOzs7Ozs7WUFFL0NOLFlBQUFBLFdBQUFBLEdBQ0NFLHNFQUFBQSxDQUFDMUIsb0JBQUFBOzBCQUNDLGNBQUEwQixzRUFBQUEsQ0FBQ2xDLGlEQUFNQSxFQUFOQTtvQkFDQ3VDLFdBQUFBLFdBQUFBLEdBQVdMLHNFQUFBQSxDQUFDaEMsbURBQU9BLEVBQVBBLENBQUFBLEdBQUFBLEtBQUFBLEdBQUFBLEtBQUFBLEVBQUFBLEtBQUFBLEdBQUFBLEtBQUFBO29CQUNac0MsU0FBUTtvQkFDUkMsU0FBUyxJQUNQaEIsU0FBUzs0QkFDUGlCLE1BQU07NEJBQ05DLFFBQVE7NEJBQ1JDLFdBQVcsSUFBSTt3QkFDakI7OEJBQ0E7Ozs7Ozs7Ozs7O1lBTVBiLGFBQUFBLFdBQUFBLEdBQ0NHLHNFQUFBQSxDQUFDUixlQUFBQTtnQkFDQ2IsV0FBV0E7Z0JBQ1hFLGtCQUFrQkE7Z0JBQ2xCOEIsVUFBVSxJQUNScEIsU0FBUzt3QkFDUGlCLE1BQU07d0JBQ05DLFFBQVE7d0JBQ1JDLFdBQVcsSUFBSTtvQkFDakI7Z0JBRUZFLFVBQVUxQjtnQkFDVlIsT0FBT08sSUFBSVAsS0FBSztnQkFDaEJELFNBQVNRLElBQUlSLE9BQU87Ozs7OztZQUl2QkQsU0FBQUEsSUFBQUEsSUFBQUEsU0FBQUEsS0FBQUEsSUFBQUEsS0FBQUEsSUFBQUEsQ0FBQUEsaUJBQUFBLEtBQU15QixRQUFRLGNBQWR6QixtQkFBQUEsS0FBQUEsSUFBQUEsS0FBQUEsSUFBQUEsZUFBZ0JxQyxHQUFBQSxDQUFJZCxDQUFBQSxVQUFBQSxXQUFBQSxHQUNuQkMsc0VBQUFBLENBQUNQLGlCQUFBQTtvQkFFRSxHQUFHTSxPQUFPO29CQUNYVixrQkFBa0I7d0JBQUNDO3dCQUFvQkM7cUJBQVM7b0JBQ2hEWixXQUFXQTtvQkFDWE0sS0FBS0E7b0JBQ0xDLGNBQWNBO29CQUNkQyxNQUFNQTtvQkFDTkMsZUFBZUE7b0JBQ2ZOLHFCQUFxQkE7b0JBQ3JCQyxrQkFBa0JBO29CQUNsQkMsYUFBYUE7b0JBQ2JILGtCQUFrQkE7b0JBQ2xCaUMsVUFBVSxDQUFDZixvQkFBQUEsUUFBUWUsUUFBUSxjQUFoQmYsc0JBQUFBLEtBQUFBLElBQUFBLG9CQUFrQyxFQUFFO21CQVoxQ0EsUUFBUWdCLEVBQUU7Ozs7Ozs7Ozs7O0FBaUJ6QixFQUFDO0dBdkZZeEM7O1FBb0JQUix5RUFBaUJBO1FBQ0hGLHNFQUFPQTs7O01BckJkVTtJQUFBQSxhQUFBQSxnQ0FBQUEsS0FBQUEsRUFBQUEsV0FBQUE7O1FBb0JQUix5RUFBaUJBO1FBQ0hGLHNFQUFPQTs7O01BckJkVSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1saXN0L2NvbW1lbnQtbGlzdC50c3g/M2Q0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtnZXRTdGF0ZUZvckVkaXRvcn0gZnJvbSAnLi9jb21tZW50LWxpc3Quc3RhdGUnXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdFdyYXBwZXIgPSBzdHlsZWQoJ2FydGljbGUnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDQpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0QWN0aW9ucyA9IHN0eWxlZCgnZGl2JylgYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3QgPSAoe1xuICBkYXRhLFxuICBsb2FkaW5nLFxuICBlcnJvcixcbiAgY2hhbGxlbmdlLFxuICBjbGFzc05hbWUsXG4gIG1heENvbW1lbnRMZW5ndGgsXG4gIGFub255bW91c0NhbkNvbW1lbnQsXG4gIGFub255bW91c0NhblJhdGUsXG4gIHVzZXJDYW5FZGl0LFxuICBhZGQsXG4gIG9uQWRkQ29tbWVudCxcbiAgZWRpdCxcbiAgb25FZGl0Q29tbWVudCxcbiAgb3BlbkVkaXRvcnNTdGF0ZTogW29wZW5Db21tZW50RWRpdG9ycywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudEVkaXRvcixcbiAgICBDb21tZW50TGlzdEl0ZW0sXG4gICAgZWxlbWVudHM6IHtBbGVydH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcbiAgY29uc3Qge2hhc1VzZXJ9ID0gdXNlVXNlcigpXG5cbiAgY29uc3Qgc2hvd1JlcGx5ID0gZ2V0U3RhdGVGb3JFZGl0b3Iob3BlbkNvbW1lbnRFZGl0b3JzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvQ29tbWVudExpc3RBY3Rpb25zPlxuICAgICAgKX1cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxDb21tZW50RWRpdG9yXG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVycm9yPXthZGQuZXJyb3J9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbkNvbW1lbnRFZGl0b3JzLCBkaXNwYXRjaF19XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgYWRkPXthZGR9XG4gICAgICAgICAgb25BZGRDb21tZW50PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgZWRpdD17ZWRpdH1cbiAgICAgICAgICBvbkVkaXRDb21tZW50PXtvbkVkaXRDb21tZW50fVxuICAgICAgICAgIGFub255bW91c0NhbkNvbW1lbnQ9e2Fub255bW91c0NhbkNvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuUmF0ZT17YW5vbnltb3VzQ2FuUmF0ZX1cbiAgICAgICAgICB1c2VyQ2FuRWRpdD17dXNlckNhbkVkaXR9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBjaGlsZHJlbj17KGNvbW1lbnQuY2hpbGRyZW4gYXMgQ29tbWVudFtdKSA/PyBbXX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvQ29tbWVudExpc3RXcmFwcGVyPlxuICApXG59XG4iXSwibmFtZXMiOlsic3R5bGVkIiwidXNlVXNlciIsIkJ1dHRvbiIsInVzZVdlYnNpdGVCdWlsZGVyIiwiTWRGb3J1bSIsImdldFN0YXRlRm9yRWRpdG9yIiwiQ29tbWVudExpc3RXcmFwcGVyIiwicGFyYW0iLCJ0aGVtZSIsInNwYWNpbmciLCJDb21tZW50TGlzdEFjdGlvbnMiLCJDb21tZW50TGlzdCIsImRhdGEiLCJsb2FkaW5nIiwiZXJyb3IiLCJjaGFsbGVuZ2UiLCJjbGFzc05hbWUiLCJtYXhDb21tZW50TGVuZ3RoIiwiYW5vbnltb3VzQ2FuQ29tbWVudCIsImFub255bW91c0NhblJhdGUiLCJ1c2VyQ2FuRWRpdCIsImFkZCIsIm9uQWRkQ29tbWVudCIsImVkaXQiLCJvbkVkaXRDb21tZW50Iiwib3BlbkVkaXRvcnNTdGF0ZSIsIm9wZW5Db21tZW50RWRpdG9ycyIsImRpc3BhdGNoIiwiQ29tbWVudEVkaXRvciIsIkNvbW1lbnRMaXN0SXRlbSIsImVsZW1lbnRzIiwiQWxlcnQiLCJoYXNVc2VyIiwic2hvd1JlcGx5IiwiY2FuUmVwbHkiLCJjb21tZW50IiwiX2pzeERFViIsImNvbW1lbnRzIiwibGVuZ3RoIiwic2V2ZXJpdHkiLCJtZXNzYWdlIiwic3RhcnRJY29uIiwidmFyaWFudCIsIm9uQ2xpY2siLCJ0eXBlIiwiYWN0aW9uIiwiY29tbWVudElkIiwib25DYW5jZWwiLCJvblN1Ym1pdCIsIm1hcCIsImNoaWxkcmVuIiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-list/comment-list.tsx\n"));

/***/ })

});