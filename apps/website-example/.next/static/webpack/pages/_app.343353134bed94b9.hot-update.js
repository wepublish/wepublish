"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/write-comment/write-comment.tsx":
/*!***************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/write-comment/write-comment.tsx ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\",\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\",\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt6b2RSZXNvbHZlcn0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnXG5pbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHt1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtDb250cm9sbGVyLCB1c2VGb3JtfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nXG5pbXBvcnQge01kU2VuZH0gZnJvbSAncmVhY3QtaWNvbnMvbWQnXG5pbXBvcnQge05vZGV9IGZyb20gJ3NsYXRlJ1xuaW1wb3J0IHt6fSBmcm9tICd6b2QnXG5pbXBvcnQge3RvUGxhaW50ZXh0fSBmcm9tICdAd2VwdWJsaXNoL3JpY2h0ZXh0J1xuaW1wb3J0IHtBcG9sbG9FcnJvciwgUXVlcnlSZXN1bHR9IGZyb20gJ0BhcG9sbG8vY2xpZW50J1xuaW1wb3J0IHtcbiAgQWRkQ29tbWVudE11dGF0aW9uVmFyaWFibGVzLFxuICBDaGFsbGVuZ2VRdWVyeSxcbiAgRWRpdENvbW1lbnRNdXRhdGlvblZhcmlhYmxlc1xufSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYXBpJ1xuXG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50V3JhcHBlciA9IHN0eWxlZCgnZm9ybScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMil9O1xuYFxuXG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50QWN0aW9ucyA9IHN0eWxlZCgnZGl2JylgXG4gIGp1c3RpZnktc2VsZjogZmxleC1lbmQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZygxKX07XG5gXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50Q2hhbGxlbmdlID0gc3R5bGVkKCdkaXYnKWBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBncmlkO1xuXG4gIHN2ZyB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG5gXG5cbnR5cGUgQ3JlYXRlQ29tbWVudFByb3BzID0ge1xuICB0ZXh0PzogbmV2ZXJcbiAgdGl0bGU/OiBuZXZlclxuICBjaGFsbGVuZ2U6IFBpY2s8UXVlcnlSZXN1bHQ8Q2hhbGxlbmdlUXVlcnk+LCAnZGF0YScgfCAnbG9hZGluZycgfCAnZXJyb3InPiB8IG51bGxcbiAgb25TdWJtaXQ6IChcbiAgICBkYXRhOiBPbWl0PEFkZENvbW1lbnRNdXRhdGlvblZhcmlhYmxlc1snaW5wdXQnXSwgJ2l0ZW1JRCcgfCAnaXRlbVR5cGUnIHwgJ3BhcmVudElEJyB8ICdwZWVySWQnPlxuICApID0+IHZvaWRcbn1cblxudHlwZSBFZGl0Q29tbWVudFByb3BzID0ge1xuICB0ZXh0PzogTm9kZVtdIHwgbnVsbFxuICB0aXRsZT86IHN0cmluZyB8IG51bGxcbiAgY2hhbGxlbmdlPzogbmV2ZXJcbiAgb25TdWJtaXQ6IChkYXRhOiBPbWl0PEVkaXRDb21tZW50TXV0YXRpb25WYXJpYWJsZXNbJ2lucHV0J10sICdpZCc+KSA9PiB2b2lkXG59XG5cbnR5cGUgV3JpdGVDb21tZW50UHJvcHMgPSB7XG4gIG9uQ2FuY2VsOiAoKSA9PiB2b2lkXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xuICBtYXhDb21tZW50TGVuZ3RoOiBudW1iZXJcbiAgbG9hZGluZzogYm9vbGVhblxuICBlcnJvcj86IEFwb2xsb0Vycm9yXG59ICYgKENyZWF0ZUNvbW1lbnRQcm9wcyB8IEVkaXRDb21tZW50UHJvcHMpXG5cbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnQgPSAoe1xuICBjbGFzc05hbWUsXG4gIG9uQ2FuY2VsLFxuICBvblN1Ym1pdCxcbiAgbWF4Q29tbWVudExlbmd0aCxcbiAgdGl0bGUsXG4gIHRleHQsXG4gIGNoYWxsZW5nZSxcbiAgbG9hZGluZyxcbiAgZXJyb3Jcbn06IFdyaXRlQ29tbWVudFByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlbGVtZW50czoge1RleHRGaWVsZCwgQnV0dG9uLCBBbGVydH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcbiAgY29uc3Qge2hhc1VzZXJ9ID0gdXNlVXNlcigpXG5cbiAgY29uc3QgYW5vbnltb3VzU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgZ3Vlc3RVc2VybmFtZTogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICBjaGFsbGVuZ2U6IHoub2JqZWN0KHtcbiAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgIGNoYWxsZW5nZUlEOiB6LnN0cmluZygpLm5vbmVtcHR5KClcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgIFttYXhDb21tZW50TGVuZ3RoXVxuICApXG5cbiAgY29uc3QgbG9nZ2VkSW5TY2hlbWEgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgIHRpdGxlOiB6LnN0cmluZygpXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIHR5cGUgRm9ybUlucHV0ID0gei5pbmZlcjx0eXBlb2YgbG9nZ2VkSW5TY2hlbWE+IHwgei5pbmZlcjx0eXBlb2YgYW5vbnltb3VzU2NoZW1hPlxuICBjb25zdCBzY2hlbWEgPSBoYXNVc2VyID8gbG9nZ2VkSW5TY2hlbWEgOiBhbm9ueW1vdXNTY2hlbWFcblxuICBjb25zdCB7aGFuZGxlU3VibWl0LCBjb250cm9sLCByZXNldH0gPSB1c2VGb3JtPEZvcm1JbnB1dD4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIGNvbW1lbnQ6IHRvUGxhaW50ZXh0KHRleHQpID8/ICcnLFxuICAgICAgdGl0bGU6IHRpdGxlID8/ICcnLFxuICAgICAgZ3Vlc3RVc2VybmFtZTogJycsXG4gICAgICBjaGFsbGVuZ2U6IHtcbiAgICAgICAgY2hhbGxlbmdlSUQ6IGNoYWxsZW5nZT8uZGF0YT8uY2hhbGxlbmdlLmNoYWxsZW5nZUlEID8/ICcnLFxuICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogJydcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGU6ICdhbGwnXG4gIH0pXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBvblN1Ym1pdCh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGV4dDogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8V3JpdGVDb21tZW50V3JhcHBlciBjbGFzc05hbWU9e2NsYXNzTmFtZX0gb25TdWJtaXQ9e3N1Ym1pdH0+XG4gICAgICB7IWhhc1VzZXIgJiYgKFxuICAgICAgICA8Q29udHJvbGxlclxuICAgICAgICAgIG5hbWU9eydndWVzdFVzZXJuYW1lJ31cbiAgICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZWluIE5hbWVcIlxuICAgICAgICAgICAgICBsYWJlbD1cIk5hbWVcIlxuICAgICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgICAgaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICA8Q29udHJvbGxlclxuICAgICAgICBuYW1lPXsndGl0bGUnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkdpYiBEZWluZW0gQmVpdHJhZyBlaW5lbiBUaXRlbC5cIlxuICAgICAgICAgICAgbGFiZWw9XCJUaXRlbFwiXG4gICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuXG4gICAgICA8Q29udHJvbGxlclxuICAgICAgICBuYW1lPXsnY29tbWVudCd9XG4gICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgbWluUm93cz17NX1cbiAgICAgICAgICAgIGxhYmVsPVwiS29tbWVudGFyXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQmVpdHJhZyB2ZXJmYXNzZW5cIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtgJHtmaWVsZC52YWx1ZS5sZW5ndGh9IC8gJHttYXhDb21tZW50TGVuZ3RofSBaZWljaGVuYH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgeyFoYXNVc2VyICYmIGNoYWxsZW5nZT8uZGF0YSAmJiAoXG4gICAgICAgIDxXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgICAgIDxXcml0ZUNvbW1lbnRDaGFsbGVuZ2VcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDpcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgICA/LnJlcGxhY2UoJyNmZmZmZmYnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCAnJylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsICcnKSA/PyAnJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICAgIG5hbWU9eydjaGFsbGVuZ2UuY2hhbGxlbmdlU29sdXRpb24nfVxuICAgICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgICAgPFRleHRGaWVsZCB7Li4uZmllbGR9IGxhYmVsPXsnQ2FwdGNoYSd9IGVycm9yPXshIWVycm9yfSBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Xcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgKX1cblxuICAgICAge2Vycm9yICYmIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCI+e2Vycm9yLm1lc3NhZ2V9PC9BbGVydD59XG5cbiAgICAgIDxXcml0ZUNvbW1lbnRBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICBLb21tZW50aWVyZW5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJyZXNldFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgcmVzZXQoKVxuICAgICAgICAgICAgb25DYW5jZWwoKVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICBBYmJyZWNoZW5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L1dyaXRlQ29tbWVudEFjdGlvbnM+XG4gICAgPC9Xcml0ZUNvbW1lbnRXcmFwcGVyPlxuICApXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JtQyJ9 */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\",\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading , error  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button , Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const anonymousSchema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n            guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n            challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n            })\n        }), [\n        maxCommentLength\n    ]);\n    const loggedInSchema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n        }), [\n        maxCommentLength\n    ]);\n    const schema = hasUser ? loggedInSchema : anonymousSchema;\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\",\n            challenge: {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            }\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 146,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 162,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 177,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 196,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 206,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 195,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 216,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        disabled: loading,\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 223,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 218,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n        lineNumber: 144,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"sve6CF/uEB/epY95aivAEPLdnCA=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"caybhirfJtxpKGCp5XRzMgsw9kc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/write-comment/write-comment.tsx\n"));

/***/ })

});