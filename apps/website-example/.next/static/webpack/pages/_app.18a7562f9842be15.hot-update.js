"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/write-comment/write-comment.tsx":
/*!***************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/write-comment/write-comment.tsx ***!
  \***************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\",\n    target: \"ewkpqtz0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\",\n    target: \"ewkpqtz1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"ewkpqtz2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\",\n    target: \"ewkpqtz3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4REVWIGFzIF9qc3hERVYgfSBmcm9tIFwiQGVtb3Rpb24vcmVhY3QvanN4LWRldi1ydW50aW1lXCI7XG52YXIgX3MgPSAkUmVmcmVzaFNpZyQoKTtcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSBcIkBob29rZm9ybS9yZXNvbHZlcnMvem9kXCI7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgdXNlVXNlciB9IGZyb20gXCJAd2VwdWJsaXNoL2F1dGhlbnRpY2F0aW9uL3dlYnNpdGVcIjtcbmltcG9ydCB7IHVzZVdlYnNpdGVCdWlsZGVyIH0gZnJvbSBcIkB3ZXB1Ymxpc2gvd2Vic2l0ZS9idWlsZGVyXCI7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb250cm9sbGVyLCB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgTWRTZW5kIH0gZnJvbSBcInJlYWN0LWljb25zL21kXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgdG9QbGFpbnRleHQgfSBmcm9tIFwiQHdlcHVibGlzaC9yaWNodGV4dFwiO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudFdyYXBwZXIgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImZvcm1cIiwge1xuICAgIHRhcmdldDogXCJld2twcXR6MFwiLFxuICAgIGxhYmVsOiBcIldyaXRlQ29tbWVudFdyYXBwZXJcIlxufSkoXCJkaXNwbGF5OmdyaWQ7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygyKTtcbn0sIFwiO1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5M2NtbDBaUzFqYjIxdFpXNTBMM2R5YVhSbExXTnZiVzFsYm5RdWRITjRJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12YVhSeWRXeHBZUzlFYjJOMWJXVnVkSE12ZDJWd2RXSnNhWE5vTDJ4cFluTXZZMjl0YldWdWRITXZkMlZpYzJsMFpTOXpjbU12YkdsaUwzZHlhWFJsTFdOdmJXMWxiblF2ZDNKcGRHVXRZMjl0YldWdWRDNTBjM2dpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0NmIyUlNaWE52YkhabGNuMGdabkp2YlNBblFHaHZiMnRtYjNKdEwzSmxjMjlzZG1WeWN5OTZiMlFuWEc1cGJYQnZjblFnZTNOMGVXeGxaSDBnWm5KdmJTQW5RRzExYVM5dFlYUmxjbWxoYkNkY2JtbHRjRzl5ZENCN2RYTmxWWE5sY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5aGRYUm9aVzUwYVdOaGRHbHZiaTkzWldKemFYUmxKMXh1YVcxd2IzSjBJSHQxYzJWWFpXSnphWFJsUW5WcGJHUmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzkzWldKemFYUmxMMkoxYVd4a1pYSW5YRzVwYlhCdmNuUWdlM1Z6WlUxbGJXOTlJR1p5YjIwZ0ozSmxZV04wSjF4dWFXMXdiM0owSUh0RGIyNTBjbTlzYkdWeUxDQjFjMlZHYjNKdGZTQm1jbTl0SUNkeVpXRmpkQzFvYjI5ckxXWnZjbTBuWEc1cGJYQnZjblFnZTAxa1UyVnVaSDBnWm5KdmJTQW5jbVZoWTNRdGFXTnZibk12YldRblhHNXBiWEJ2Y25RZ2UwNXZaR1Y5SUdaeWIyMGdKM05zWVhSbEoxeHVhVzF3YjNKMElIdDZmU0JtY205dElDZDZiMlFuWEc1cGJYQnZjblFnZTNSdlVHeGhhVzUwWlhoMGZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzSnBZMmgwWlhoMEoxeHVhVzF3YjNKMElIdEJjRzlzYkc5RmNuSnZjaXdnVVhWbGNubFNaWE4xYkhSOUlHWnliMjBnSjBCaGNHOXNiRzh2WTJ4cFpXNTBKMXh1YVcxd2IzSjBJSHRjYmlBZ1FXUmtRMjl0YldWdWRFMTFkR0YwYVc5dVZtRnlhV0ZpYkdWekxGeHVJQ0JEYUdGc2JHVnVaMlZSZFdWeWVTeGNiaUFnUldScGRFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzF4dWZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzZGxZbk5wZEdVdllYQnBKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwVjNKaGNIQmxjaUE5SUhOMGVXeGxaQ2duWm05eWJTY3BZRnh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1SUNCbllYQTZJQ1I3S0h0MGFHVnRaWDBwSUQwK0lIUm9aVzFsTG5Od1lXTnBibWNvTWlsOU8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjeUE5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdwMWMzUnBabmt0YzJWc1pqb2dabXhsZUMxbGJtUTdYRzRnSUdScGMzQnNZWGs2SUdac1pYZzdYRzRnSUdac1pYZ3RabXh2ZHpvZ2NtOTNJSGR5WVhBN1hHNGdJR2RoY0RvZ0pIc29lM1JvWlcxbGZTa2dQVDRnZEdobGJXVXVjM0JoWTJsdVp5Z3hLWDA3WEc1Z1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUkRhR0ZzYkdWdVoyVlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaM0pwWkMxMFpXMXdiR0YwWlMxamIyeDFiVzV6T2lCdGFXNXRZWGdvYldGNExXTnZiblJsYm5Rc0lESXdNSEI0S1NBeU1EQndlRHRjYmlBZ1lXeHBaMjR0YVhSbGJYTTZJR05sYm5SbGNqdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRE1wZlR0Y2JpQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQm1iR1Y0TFhOMFlYSjBPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFEyaGhiR3hsYm1kbElEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhR1ZwWjJoME9pQXhNREFsTzF4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dVhHNGdJSE4yWnlCN1hHNGdJQ0FnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0I5WEc1Z1hHNWNiblI1Y0dVZ1EzSmxZWFJsUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nYm1WMlpYSmNiaUFnZEdsMGJHVS9PaUJ1WlhabGNseHVJQ0JqYUdGc2JHVnVaMlU2SUZCcFkyczhVWFZsY25sU1pYTjFiSFE4UTJoaGJHeGxibWRsVVhWbGNuaytMQ0FuWkdGMFlTY2dmQ0FuYkc5aFpHbHVaeWNnZkNBblpYSnliM0luUGlCOElHNTFiR3hjYmlBZ2IyNVRkV0p0YVhRNklDaGNiaUFnSUNCa1lYUmhPaUJQYldsMFBFRmtaRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxc25hVzV3ZFhRblhTd2dKMmwwWlcxSlJDY2dmQ0FuYVhSbGJWUjVjR1VuSUh3Z0ozQmhjbVZ1ZEVsRUp5QjhJQ2R3WldWeVNXUW5QbHh1SUNBcElEMCtJSFp2YVdSY2JuMWNibHh1ZEhsd1pTQkZaR2wwUTI5dGJXVnVkRkJ5YjNCeklEMGdlMXh1SUNCMFpYaDBQem9nVG05a1pWdGRJSHdnYm5Wc2JGeHVJQ0IwYVhSc1pUODZJSE4wY21sdVp5QjhJRzUxYkd4Y2JpQWdZMmhoYkd4bGJtZGxQem9nYm1WMlpYSmNiaUFnYjI1VGRXSnRhWFE2SUNoa1lYUmhPaUJQYldsMFBFVmthWFJEYjIxdFpXNTBUWFYwWVhScGIyNVdZWEpwWVdKc1pYTmJKMmx1Y0hWMEoxMHNJQ2RwWkNjK0tTQTlQaUIyYjJsa1hHNTlYRzVjYm5SNWNHVWdWM0pwZEdWRGIyMXRaVzUwVUhKdmNITWdQU0I3WEc0Z0lHOXVRMkZ1WTJWc09pQW9LU0E5UGlCMmIybGtYRzRnSUdOc1lYTnpUbUZ0WlQ4NklITjBjbWx1WjF4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb09pQnVkVzFpWlhKY2JpQWdiRzloWkdsdVp6b2dZbTl2YkdWaGJseHVJQ0JsY25KdmNqODZJRUZ3YjJ4c2IwVnljbTl5WEc1OUlDWWdLRU55WldGMFpVTnZiVzFsYm5SUWNtOXdjeUI4SUVWa2FYUkRiMjF0Wlc1MFVISnZjSE1wWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5RZ1BTQW9lMXh1SUNCamJHRnpjMDVoYldVc1hHNGdJRzl1UTJGdVkyVnNMRnh1SUNCdmJsTjFZbTFwZEN4Y2JpQWdiV0Y0UTI5dGJXVnVkRXhsYm1kMGFDeGNiaUFnZEdsMGJHVXNYRzRnSUhSbGVIUXNYRzRnSUdOb1lXeHNaVzVuWlN4Y2JpQWdiRzloWkdsdVp5eGNiaUFnWlhKeWIzSmNibjA2SUZkeWFYUmxRMjl0YldWdWRGQnliM0J6S1NBOVBpQjdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQmxiR1Z0Wlc1MGN6b2dlMVJsZUhSR2FXVnNaQ3dnUW5WMGRHOXVmVnh1SUNCOUlEMGdkWE5sVjJWaWMybDBaVUoxYVd4a1pYSW9LVnh1SUNCamIyNXpkQ0I3YUdGelZYTmxjbjBnUFNCMWMyVlZjMlZ5S0NsY2JseHVJQ0JqYjI1emRDQnpZMmhsYldFZ1BTQjFjMlZOWlcxdktGeHVJQ0FnSUNncElEMCtYRzRnSUNBZ0lDQjZMblZ1YVc5dUtGdGNiaUFnSUNBZ0lDQWdlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUdOdmJXMWxiblE2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTNXRZWGdvYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ2tzWEc0Z0lDQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdaM1ZsYzNSVmMyVnlibUZ0WlRvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlRvZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsVTI5c2RYUnBiMjQ2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlVsRU9pQjZMbk4wY21sdVp5Z3BMbTV2Ym1WdGNIUjVLQ2xjYmlBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LUzV0WVhnb2JXRjRRMjl0YldWdWRFeGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJRjBwTEZ4dUlDQWdJRnR0WVhoRGIyMXRaVzUwVEdWdVozUm9YVnh1SUNBcFhHNWNiaUFnZEhsd1pTQkdiM0p0U1c1d2RYUWdQU0I2TG1sdVptVnlQSFI1Y0dWdlppQnpZMmhsYldFK1hHNGdJR052Ym5OMElIdG9ZVzVrYkdWVGRXSnRhWFFzSUdOdmJuUnliMndzSUhKbGMyVjBmU0E5SUhWelpVWnZjbTA4Um05eWJVbHVjSFYwUGloN1hHNGdJQ0FnY21WemIyeDJaWEk2SUhwdlpGSmxjMjlzZG1WeUtITmphR1Z0WVNrc1hHNGdJQ0FnWkdWbVlYVnNkRlpoYkhWbGN6b2dlMXh1SUNBZ0lDQWdZMjl0YldWdWREb2dkRzlRYkdGcGJuUmxlSFFvZEdWNGRDa2dQejhnSnljc1hHNGdJQ0FnSUNCMGFYUnNaVG9nZEdsMGJHVWdQejhnSnljc1hHNGdJQ0FnSUNCbmRXVnpkRlZ6WlhKdVlXMWxPaUJvWVhOVmMyVnlJRDhnSnljZ09pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQmphR0ZzYkdWdVoyVTZJR2hoYzFWelpYSmNiaUFnSUNBZ0lDQWdQeUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0ZzYkdWdVoyVkpSRG9nWTJoaGJHeGxibWRsUHk1a1lYUmhQeTVqYUdGc2JHVnVaMlV1WTJoaGJHeGxibWRsU1VRZ1B6OGdKeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0ZzYkdWdVoyVlRiMngxZEdsdmJqb2dKeWRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lEb2dkVzVrWldacGJtVmtYRzRnSUNBZ2ZTeGNiaUFnSUNCdGIyUmxPaUFuWVd4c0oxeHVJQ0I5S1Z4dVhHNGdJR052Ym5OMElITjFZbTFwZENBOUlHaGhibVJzWlZOMVltMXBkQ2dvZTJOdmJXMWxiblFzSUM0dUxtUmhkR0Y5S1NBOVBpQjdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29aR0YwWVNsY2JseHVJQ0FnSUc5dVUzVmliV2wwS0h0Y2JpQWdJQ0FnSUM0dUxtUmhkR0VzWEc0Z0lDQWdJQ0IwWlhoME9pQmJYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuY0dGeVlXZHlZWEJvSnl4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJqb2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBPaUJqYjIxdFpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdYVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0JkWEc0Z0lDQWdmU2xjYmlBZ2ZTbGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhYY21sMFpVTnZiVzFsYm5SWGNtRndjR1Z5SUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGZTQnZibE4xWW0xcGREMTdjM1ZpYldsMGZUNWNiaUFnSUNBZ0lIc2hhR0Z6VlhObGNpQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyZDFaWE4wVlhObGNtNWhiV1VuZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ3OWUyTnZiblJ5YjJ4OVhHNGdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4WGFXUjBhRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajFjSWtSbGFXNGdUbUZ0WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNQVndpVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUc1aGJXVTlleWQwYVhSc1pTZDlYRzRnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJSEpsYm1SbGNqMTdLSHRtYVdWc1pDd2dabWxsYkdSVGRHRjBaVG9nZTJWeWNtOXlmWDBwSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdMaTR1Wm1sbGJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFZ3aVIybGlJRVJsYVc1bGJTQkNaV2wwY21GbklHVnBibVZ1SUZScGRHVnNMbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lsUnBkR1ZzWENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWc2NHVnlWR1Y0ZEQxN1pYSnliM0kvTG0xbGMzTmhaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkamIyMXRaVzUwSjMxY2JpQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwUm1sbGJHUmNiaUFnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzExYkhScGJHbHVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnNiRmRwWkhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YVc1U2IzZHpQWHMxZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld3OVhDSkxiMjF0Wlc1MFlYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTlYQ0pDWldsMGNtRm5JSFpsY21aaGMzTmxibHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2oxN0lTRmxjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJBa2UyWnBaV3hrTG5aaGJIVmxMbXhsYm1kMGFIMGdMeUFrZTIxaGVFTnZiVzFsYm5STVpXNW5kR2g5SUZwbGFXTm9aVzVnZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0F2UGx4dVhHNGdJQ0FnSUNCN0lXaGhjMVZ6WlhJZ0ppWWdZMmhoYkd4bGJtZGxQeTVrWVhSaElDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3OWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gxOW9kRzFzT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlM1a1lYUmhMbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4dWNtVndiR0ZqWlNnbkkyWm1abVptWmljc0lDZDBjbUZ1YzNCaGNtVnVkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNnbmQybGtkR2c5WENJeU1EQmNJaWNzSUNjbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9KMmhsYVdkb2REMWNJakl3TUZ3aUp5d2dKeWNwSUQ4L0lDY25YRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUNBZ0lDQThRMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOb1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWVGIyeDFkR2x2YmlkOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGNtOXNQWHRqYjI1MGNtOXNmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrSUhzdUxpNW1hV1ZzWkgwZ2JHRmlaV3c5ZXlkRFlYQjBZMmhoSjMwZ1pYSnliM0k5ZXlFaFpYSnliM0o5SUdobGJIQmxjbFJsZUhROWUyVnljbTl5UHk1dFpYTnpZV2RsZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4TDFkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBcGZWeHVYRzRnSUNBZ0lDQjdJV3h2WVdScGJtY2dKaVlnSVdWeWNtOXlJQ1ltSUNGa1lYUmhQeTVqYjIxdFpXNTBjeTVzWlc1bmRHZ2dKaVlnS0Z4dUlDQWdJQ0FnSUNBOFFXeGxjblFnYzJWMlpYSnBkSGs5WENKcGJtWnZYQ0krUzJWcGJtVWdTMjl0YldWdWRHRnlaU0IyYjNKb1lXNWtaVzR1UEM5QmJHVnlkRDVjYmlBZ0lDQWdJQ2w5WEc1Y2JpQWdJQ0FnSUR4WGNtbDBaVU52YlcxbGJuUkJZM1JwYjI1elBseHVJQ0FnSUNBZ0lDQThRblYwZEc5dUlIUjVjR1U5WENKemRXSnRhWFJjSWlCemFYcGxQVndpYzIxaGJHeGNJaUJ6ZEdGeWRFbGpiMjQ5ZXp4TlpGTmxibVFnTHo1OVBseHVJQ0FnSUNBZ0lDQWdJRXR2YlcxbGJuUnBaWEpsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JseHVJQ0FnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lDQWdkSGx3WlQxY0luSmxjMlYwWENKY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhObGRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTmhibU5sYkNncFhHNGdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNCemFYcGxQVndpYzIxaGJHeGNJbHh1SUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5WENKMFpYaDBYQ0pjYmlBZ0lDQWdJQ0FnSUNCamIyeHZjajFjSW5ObFkyOXVaR0Z5ZVZ3aVBseHVJQ0FnSUNBZ0lDQWdJRUZpWW5KbFkyaGxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0lDQWdJRHd2VjNKcGRHVkRiMjF0Wlc1MFFXTjBhVzl1Y3o1Y2JpQWdJQ0E4TDFkeWFYUmxRMjl0YldWdWRGZHlZWEJ3WlhJK1hHNGdJQ2xjYm4xY2JpSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRnBRbTFESW4wPSAqL1wiKTtcbl9jID0gV3JpdGVDb21tZW50V3JhcHBlcjtcbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRBY3Rpb25zID0gLyojX19QVVJFX18qLyBzdHlsZWQoXCJkaXZcIiwge1xuICAgIHRhcmdldDogXCJld2twcXR6MVwiLFxuICAgIGxhYmVsOiBcIldyaXRlQ29tbWVudEFjdGlvbnNcIlxufSkoXCJqdXN0aWZ5LXNlbGY6ZmxleC1lbmQ7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpyb3cgd3JhcDtnYXA6XCIsIChwYXJhbSk9PntcbiAgICBsZXQgeyB0aGVtZSAgfSA9IHBhcmFtO1xuICAgIHJldHVybiB0aGVtZS5zcGFjaW5nKDEpO1xufSwgXCI7XCIsIFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwybDBjblZzYVdFdlJHOWpkVzFsYm5SekwzZGxjSFZpYkdsemFDOXNhV0p6TDJOdmJXMWxiblJ6TDNkbFluTnBkR1V2YzNKakwyeHBZaTkzY21sMFpTMWpiMjF0Wlc1MEwzZHlhWFJsTFdOdmJXMWxiblF1ZEhONElpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZhWFJ5ZFd4cFlTOUViMk4xYldWdWRITXZkMlZ3ZFdKc2FYTm9MMnhwWW5NdlkyOXRiV1Z1ZEhNdmQyVmljMmwwWlM5emNtTXZiR2xpTDNkeWFYUmxMV052YlcxbGJuUXZkM0pwZEdVdFkyOXRiV1Z1ZEM1MGMzZ2lYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHQ2YjJSU1pYTnZiSFpsY24wZ1puSnZiU0FuUUdodmIydG1iM0p0TDNKbGMyOXNkbVZ5Y3k5NmIyUW5YRzVwYlhCdmNuUWdlM04wZVd4bFpIMGdabkp2YlNBblFHMTFhUzl0WVhSbGNtbGhiQ2RjYm1sdGNHOXlkQ0I3ZFhObFZYTmxjbjBnWm5KdmJTQW5RSGRsY0hWaWJHbHphQzloZFhSb1pXNTBhV05oZEdsdmJpOTNaV0p6YVhSbEoxeHVhVzF3YjNKMElIdDFjMlZYWldKemFYUmxRblZwYkdSbGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOTNaV0p6YVhSbEwySjFhV3hrWlhJblhHNXBiWEJ2Y25RZ2UzVnpaVTFsYlc5OUlHWnliMjBnSjNKbFlXTjBKMXh1YVcxd2IzSjBJSHREYjI1MGNtOXNiR1Z5TENCMWMyVkdiM0p0ZlNCbWNtOXRJQ2R5WldGamRDMW9iMjlyTFdadmNtMG5YRzVwYlhCdmNuUWdlMDFrVTJWdVpIMGdabkp2YlNBbmNtVmhZM1F0YVdOdmJuTXZiV1FuWEc1cGJYQnZjblFnZTA1dlpHVjlJR1p5YjIwZ0ozTnNZWFJsSjF4dWFXMXdiM0owSUh0NmZTQm1jbTl0SUNkNmIyUW5YRzVwYlhCdmNuUWdlM1J2VUd4aGFXNTBaWGgwZlNCbWNtOXRJQ2RBZDJWd2RXSnNhWE5vTDNKcFkyaDBaWGgwSjF4dWFXMXdiM0owSUh0QmNHOXNiRzlGY25KdmNpd2dVWFZsY25sU1pYTjFiSFI5SUdaeWIyMGdKMEJoY0c5c2JHOHZZMnhwWlc1MEoxeHVhVzF3YjNKMElIdGNiaUFnUVdSa1EyOXRiV1Z1ZEUxMWRHRjBhVzl1Vm1GeWFXRmliR1Z6TEZ4dUlDQkRhR0ZzYkdWdVoyVlJkV1Z5ZVN4Y2JpQWdSV1JwZEVOdmJXMWxiblJOZFhSaGRHbHZibFpoY21saFlteGxjMXh1ZlNCbWNtOXRJQ2RBZDJWd2RXSnNhWE5vTDNkbFluTnBkR1V2WVhCcEoxeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBWM0poY0hCbGNpQTlJSE4wZVd4bFpDZ25abTl5YlNjcFlGeHVJQ0JrYVhOd2JHRjVPaUJuY21sa08xeHVJQ0JuWVhBNklDUjdLSHQwYUdWdFpYMHBJRDArSUhSb1pXMWxMbk53WVdOcGJtY29NaWw5TzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN5QTlJSE4wZVd4bFpDZ25aR2wySnlsZ1hHNGdJR3AxYzNScFpua3RjMlZzWmpvZ1pteGxlQzFsYm1RN1hHNGdJR1JwYzNCc1lYazZJR1pzWlhnN1hHNGdJR1pzWlhndFpteHZkem9nY205M0lIZHlZWEE3WEc0Z0lHZGhjRG9nSkhzb2UzUm9aVzFsZlNrZ1BUNGdkR2hsYldVdWMzQmhZMmx1WnlneEtYMDdYRzVnWEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JYY21sMFpVTnZiVzFsYm5SRGFHRnNiR1Z1WjJWWGNtRndjR1Z5SUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1ozSnBaQzEwWlcxd2JHRjBaUzFqYjJ4MWJXNXpPaUJ0YVc1dFlYZ29iV0Y0TFdOdmJuUmxiblFzSURJd01IQjRLU0F5TURCd2VEdGNiaUFnWVd4cFoyNHRhWFJsYlhNNklHTmxiblJsY2p0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktETXBmVHRjYmlBZ2FuVnpkR2xtZVMxamIyNTBaVzUwT2lCbWJHVjRMWE4wWVhKME8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdWM0pwZEdWRGIyMXRaVzUwUTJoaGJHeGxibWRsSUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ2FHVnBaMmgwT2lBeE1EQWxPMXh1SUNCa2FYTndiR0Y1T2lCbmNtbGtPMXh1WEc0Z0lITjJaeUI3WEc0Z0lDQWdhR1ZwWjJoME9pQXhNREFsTzF4dUlDQjlYRzVnWEc1Y2JuUjVjR1VnUTNKbFlYUmxRMjl0YldWdWRGQnliM0J6SUQwZ2UxeHVJQ0IwWlhoMFB6b2dibVYyWlhKY2JpQWdkR2wwYkdVL09pQnVaWFpsY2x4dUlDQmphR0ZzYkdWdVoyVTZJRkJwWTJzOFVYVmxjbmxTWlhOMWJIUThRMmhoYkd4bGJtZGxVWFZsY25rK0xDQW5aR0YwWVNjZ2ZDQW5iRzloWkdsdVp5Y2dmQ0FuWlhKeWIzSW5QaUI4SUc1MWJHeGNiaUFnYjI1VGRXSnRhWFE2SUNoY2JpQWdJQ0JrWVhSaE9pQlBiV2wwUEVGa1pFTnZiVzFsYm5STmRYUmhkR2x2YmxaaGNtbGhZbXhsYzFzbmFXNXdkWFFuWFN3Z0oybDBaVzFKUkNjZ2ZDQW5hWFJsYlZSNWNHVW5JSHdnSjNCaGNtVnVkRWxFSnlCOElDZHdaV1Z5U1dRblBseHVJQ0FwSUQwK0lIWnZhV1JjYm4xY2JseHVkSGx3WlNCRlpHbDBRMjl0YldWdWRGQnliM0J6SUQwZ2UxeHVJQ0IwWlhoMFB6b2dUbTlrWlZ0ZElId2diblZzYkZ4dUlDQjBhWFJzWlQ4NklITjBjbWx1WnlCOElHNTFiR3hjYmlBZ1kyaGhiR3hsYm1kbFB6b2dibVYyWlhKY2JpQWdiMjVUZFdKdGFYUTZJQ2hrWVhSaE9pQlBiV2wwUEVWa2FYUkRiMjF0Wlc1MFRYVjBZWFJwYjI1V1lYSnBZV0pzWlhOYkoybHVjSFYwSjEwc0lDZHBaQ2MrS1NBOVBpQjJiMmxrWEc1OVhHNWNiblI1Y0dVZ1YzSnBkR1ZEYjIxdFpXNTBVSEp2Y0hNZ1BTQjdYRzRnSUc5dVEyRnVZMlZzT2lBb0tTQTlQaUIyYjJsa1hHNGdJR05zWVhOelRtRnRaVDg2SUhOMGNtbHVaMXh1SUNCdFlYaERiMjF0Wlc1MFRHVnVaM1JvT2lCdWRXMWlaWEpjYmlBZ2JHOWhaR2x1WnpvZ1ltOXZiR1ZoYmx4dUlDQmxjbkp2Y2o4NklFRndiMnhzYjBWeWNtOXlYRzU5SUNZZ0tFTnlaV0YwWlVOdmJXMWxiblJRY205d2N5QjhJRVZrYVhSRGIyMXRaVzUwVUhKdmNITXBYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblFnUFNBb2UxeHVJQ0JqYkdGemMwNWhiV1VzWEc0Z0lHOXVRMkZ1WTJWc0xGeHVJQ0J2YmxOMVltMXBkQ3hjYmlBZ2JXRjRRMjl0YldWdWRFeGxibWQwYUN4Y2JpQWdkR2wwYkdVc1hHNGdJSFJsZUhRc1hHNGdJR05vWVd4c1pXNW5aU3hjYmlBZ2JHOWhaR2x1Wnl4Y2JpQWdaWEp5YjNKY2JuMDZJRmR5YVhSbFEyOXRiV1Z1ZEZCeWIzQnpLU0E5UGlCN1hHNGdJR052Ym5OMElIdGNiaUFnSUNCbGJHVnRaVzUwY3pvZ2UxUmxlSFJHYVdWc1pDd2dRblYwZEc5dWZWeHVJQ0I5SUQwZ2RYTmxWMlZpYzJsMFpVSjFhV3hrWlhJb0tWeHVJQ0JqYjI1emRDQjdhR0Z6VlhObGNuMGdQU0IxYzJWVmMyVnlLQ2xjYmx4dUlDQmpiMjV6ZENCelkyaGxiV0VnUFNCMWMyVk5aVzF2S0Z4dUlDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNCNkxuVnVhVzl1S0Z0Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2tzWEc0Z0lDQWdJQ0FnSUNBZ1ozVmxjM1JWYzJWeWJtRnRaVG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExGeHVJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVG9nZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoYkd4bGJtZGxVMjlzZFhScGIyNDZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVWxFT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDbGNiaUFnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDQWdlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUdOdmJXMWxiblE2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTNXRZWGdvYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ2tzWEc0Z0lDQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0NsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lGMHBMRnh1SUNBZ0lGdHRZWGhEYjIxdFpXNTBUR1Z1WjNSb1hWeHVJQ0FwWEc1Y2JpQWdkSGx3WlNCR2IzSnRTVzV3ZFhRZ1BTQjZMbWx1Wm1WeVBIUjVjR1Z2WmlCelkyaGxiV0UrWEc0Z0lHTnZibk4wSUh0b1lXNWtiR1ZUZFdKdGFYUXNJR052Ym5SeWIyd3NJSEpsYzJWMGZTQTlJSFZ6WlVadmNtMDhSbTl5YlVsdWNIVjBQaWg3WEc0Z0lDQWdjbVZ6YjJ4MlpYSTZJSHB2WkZKbGMyOXNkbVZ5S0hOamFHVnRZU2tzWEc0Z0lDQWdaR1ZtWVhWc2RGWmhiSFZsY3pvZ2UxeHVJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2RHOVFiR0ZwYm5SbGVIUW9kR1Y0ZENrZ1B6OGdKeWNzWEc0Z0lDQWdJQ0IwYVhSc1pUb2dkR2wwYkdVZ1B6OGdKeWNzWEc0Z0lDQWdJQ0JuZFdWemRGVnpaWEp1WVcxbE9pQm9ZWE5WYzJWeUlEOGdKeWNnT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCamFHRnNiR1Z1WjJVNklHaGhjMVZ6WlhKY2JpQWdJQ0FnSUNBZ1B5QjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJWSlJEb2dZMmhoYkd4bGJtZGxQeTVrWVhSaFB5NWphR0ZzYkdWdVoyVXVZMmhoYkd4bGJtZGxTVVFnUHo4Z0p5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJWVGIyeDFkR2x2YmpvZ0p5ZGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnZlN4Y2JpQWdJQ0J0YjJSbE9pQW5ZV3hzSjF4dUlDQjlLVnh1WEc0Z0lHTnZibk4wSUhOMVltMXBkQ0E5SUdoaGJtUnNaVk4xWW0xcGRDZ29lMk52YlcxbGJuUXNJQzR1TG1SaGRHRjlLU0E5UGlCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb1pHRjBZU2xjYmx4dUlDQWdJRzl1VTNWaWJXbDBLSHRjYmlBZ0lDQWdJQzR1TG1SaGRHRXNYRzRnSUNBZ0lDQjBaWGgwT2lCYlhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5jR0Z5WVdkeVlYQm9KeXhjYmlBZ0lDQWdJQ0FnSUNCamFHbHNaSEpsYmpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhoME9pQmpiMjF0Wlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1hWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQmRYRzRnSUNBZ2ZTbGNiaUFnZlNsY2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJYY21Gd2NHVnlJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsZlNCdmJsTjFZbTFwZEQxN2MzVmliV2wwZlQ1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQW9YRzRnSUNBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUNBZ2JtRnRaVDE3SjJkMVpYTjBWWE5sY201aGJXVW5mVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdMaTR1Wm1sbGJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa1JsYVc0Z1RtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc1BWd2lUbUZ0WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV3h3WlhKVVpYaDBQWHRsY25KdmNqOHViV1Z6YzJGblpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJRzVoYldVOWV5ZDBhWFJzWlNkOVhHNGdJQ0FnSUNBZ0lHTnZiblJ5YjJ3OWUyTnZiblJ5YjJ4OVhHNGdJQ0FnSUNBZ0lISmxibVJsY2oxN0tIdG1hV1ZzWkN3Z1ptbGxiR1JUZEdGMFpUb2dlMlZ5Y205eWZYMHBJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtYRzRnSUNBZ0lDQWdJQ0FnSUNCN0xpNHVabWxsYkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUjJsaUlFUmxhVzVsYlNCQ1pXbDBjbUZuSUdWcGJtVnVJRlJwZEdWc0xsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiRDFjSWxScGRHVnNYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WlhKeWIzSS9MbTFsYzNOaFoyVjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDOCtYRzVjYmlBZ0lDQWdJRHhEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUc1aGJXVTlleWRqYjIxdFpXNTBKMzFjYmlBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4VVpYaDBSbWxsYkdSY2JpQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHMTFiSFJwYkdsdVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5Wc2JGZHBaSFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzVTYjNkelBYczFmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c5WENKTGIyMXRaVzUwWVhKY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJOVhDSkNaV2wwY21GbklIWmxjbVpoYzNObGJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjajE3SVNGbGNuSnZjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxiSEJsY2xSbGVIUTllMkFrZTJacFpXeGtMblpoYkhWbExteGxibWQwYUgwZ0x5QWtlMjFoZUVOdmJXMWxiblJNWlc1bmRHaDlJRnBsYVdOb1pXNWdmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQXZQbHh1WEc0Z0lDQWdJQ0I3SVdoaGMxVnpaWElnSmlZZ1kyaGhiR3hsYm1kbFB5NWtZWFJoSUNZbUlDaGNiaUFnSUNBZ0lDQWdQRmR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FnSUNBZ1BGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXc5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5b2RHMXNPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vWVd4c1pXNW5aUzVrWVhSaExtTm9ZV3hzWlc1blpTNWphR0ZzYkdWdVoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDh1Y21Wd2JHRmpaU2duSTJabVptWm1aaWNzSUNkMGNtRnVjM0JoY21WdWRDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2duZDJsa2RHZzlYQ0l5TURCY0lpY3NJQ2NuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0oyaGxhV2RvZEQxY0lqSXdNRndpSnl3Z0p5Y3BJRDgvSUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzVjYmlBZ0lDQWdJQ0FnSUNBOFEyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdKMk5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiaWQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwY205c1BYdGpiMjUwY205c2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtJSHN1TGk1bWFXVnNaSDBnYkdGaVpXdzlleWREWVhCMFkyaGhKMzBnWlhKeWIzSTlleUVoWlhKeWIzSjlJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEVOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FwZlZ4dVhHNGdJQ0FnSUNCN0lXeHZZV1JwYm1jZ0ppWWdJV1Z5Y205eUlDWW1JQ0ZrWVhSaFB5NWpiMjF0Wlc1MGN5NXNaVzVuZEdnZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4UVd4bGNuUWdjMlYyWlhKcGRIazlYQ0pwYm1adlhDSStTMlZwYm1VZ1MyOXRiV1Z1ZEdGeVpTQjJiM0pvWVc1a1pXNHVQQzlCYkdWeWRENWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhYY21sMFpVTnZiVzFsYm5SQlkzUnBiMjV6UGx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1SUhSNWNHVTlYQ0p6ZFdKdGFYUmNJaUJ6YVhwbFBWd2ljMjFoYkd4Y0lpQnpkR0Z5ZEVsamIyNDllenhOWkZObGJtUWdMejU5UGx4dUlDQWdJQ0FnSUNBZ0lFdHZiVzFsYm5ScFpYSmxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5KbGMyVjBYQ0pjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOaGJtTmxiQ2dwWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbFBWd2ljMjFoYkd4Y0lseHVJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTlYQ0owWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMWNJbk5sWTI5dVpHRnllVndpUGx4dUlDQWdJQ0FnSUNBZ0lFRmlZbkpsWTJobGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lEd3ZWM0pwZEdWRGIyMXRaVzUwUVdOMGFXOXVjejVjYmlBZ0lDQThMMWR5YVhSbFEyOXRiV1Z1ZEZkeVlYQndaWEkrWEc0Z0lDbGNibjFjYmlKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGelFtMURJbjA9ICovXCIpO1xuX2MxID0gV3JpdGVDb21tZW50QWN0aW9ucztcbmV4cG9ydCBjb25zdCBXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyID0gLyojX19QVVJFX18qLyBzdHlsZWQoXCJkaXZcIiwge1xuICAgIHRhcmdldDogXCJld2twcXR6MlwiLFxuICAgIGxhYmVsOiBcIldyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXJcIlxufSkoXCJkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOm1pbm1heChtYXgtY29udGVudCwyMDBweCkgMjAwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2dhcDpcIiwgKHBhcmFtKT0+e1xuICAgIGxldCB7IHRoZW1lICB9ID0gcGFyYW07XG4gICAgcmV0dXJuIHRoZW1lLnNwYWNpbmcoMyk7XG59LCBcIjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDtcIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOTNjbWwwWlMxamIyMXRaVzUwTDNkeWFYUmxMV052YlcxbGJuUXVkSE40SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFYUnlkV3hwWVM5RWIyTjFiV1Z1ZEhNdmQyVndkV0pzYVhOb0wyeHBZbk12WTI5dGJXVnVkSE12ZDJWaWMybDBaUzl6Y21NdmJHbGlMM2R5YVhSbExXTnZiVzFsYm5RdmQzSnBkR1V0WTI5dGJXVnVkQzUwYzNnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIdDZiMlJTWlhOdmJIWmxjbjBnWm5KdmJTQW5RR2h2YjJ0bWIzSnRMM0psYzI5c2RtVnljeTk2YjJRblhHNXBiWEJ2Y25RZ2UzTjBlV3hsWkgwZ1puSnZiU0FuUUcxMWFTOXRZWFJsY21saGJDZGNibWx0Y0c5eWRDQjdkWE5sVlhObGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOWhkWFJvWlc1MGFXTmhkR2x2Ymk5M1pXSnphWFJsSjF4dWFXMXdiM0owSUh0MWMyVlhaV0p6YVhSbFFuVnBiR1JsY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5M1pXSnphWFJsTDJKMWFXeGtaWEluWEc1cGJYQnZjblFnZTNWelpVMWxiVzk5SUdaeWIyMGdKM0psWVdOMEoxeHVhVzF3YjNKMElIdERiMjUwY205c2JHVnlMQ0IxYzJWR2IzSnRmU0JtY205dElDZHlaV0ZqZEMxb2IyOXJMV1p2Y20wblhHNXBiWEJ2Y25RZ2UwMWtVMlZ1WkgwZ1puSnZiU0FuY21WaFkzUXRhV052Ym5NdmJXUW5YRzVwYlhCdmNuUWdlMDV2WkdWOUlHWnliMjBnSjNOc1lYUmxKMXh1YVcxd2IzSjBJSHQ2ZlNCbWNtOXRJQ2Q2YjJRblhHNXBiWEJ2Y25RZ2UzUnZVR3hoYVc1MFpYaDBmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM0pwWTJoMFpYaDBKMXh1YVcxd2IzSjBJSHRCY0c5c2JHOUZjbkp2Y2l3Z1VYVmxjbmxTWlhOMWJIUjlJR1p5YjIwZ0owQmhjRzlzYkc4dlkyeHBaVzUwSjF4dWFXMXdiM0owSUh0Y2JpQWdRV1JrUTI5dGJXVnVkRTExZEdGMGFXOXVWbUZ5YVdGaWJHVnpMRnh1SUNCRGFHRnNiR1Z1WjJWUmRXVnllU3hjYmlBZ1JXUnBkRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxeHVmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM2RsWW5OcGRHVXZZWEJwSjF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFYzSmhjSEJsY2lBOUlITjBlV3hsWkNnblptOXliU2NwWUZ4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dUlDQm5ZWEE2SUNSN0tIdDBhR1Z0WlgwcElEMCtJSFJvWlcxbExuTndZV05wYm1jb01pbDlPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFFXTjBhVzl1Y3lBOUlITjBlV3hsWkNnblpHbDJKeWxnWEc0Z0lHcDFjM1JwWm5rdGMyVnNaam9nWm14bGVDMWxibVE3WEc0Z0lHUnBjM0JzWVhrNklHWnNaWGc3WEc0Z0lHWnNaWGd0Wm14dmR6b2djbTkzSUhkeVlYQTdYRzRnSUdkaGNEb2dKSHNvZTNSb1pXMWxmU2tnUFQ0Z2RHaGxiV1V1YzNCaFkybHVaeWd4S1gwN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJEYUdGc2JHVnVaMlZYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjNKcFpDMTBaVzF3YkdGMFpTMWpiMngxYlc1ek9pQnRhVzV0WVhnb2JXRjRMV052Ym5SbGJuUXNJREl3TUhCNEtTQXlNREJ3ZUR0Y2JpQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RNcGZUdGNiaUFnYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJtYkdWNExYTjBZWEowTzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBRMmhoYkd4bGJtZGxJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0JrYVhOd2JHRjVPaUJuY21sa08xeHVYRzRnSUhOMlp5QjdYRzRnSUNBZ2FHVnBaMmgwT2lBeE1EQWxPMXh1SUNCOVhHNWdYRzVjYm5SNWNHVWdRM0psWVhSbFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ2JtVjJaWEpjYmlBZ2RHbDBiR1UvT2lCdVpYWmxjbHh1SUNCamFHRnNiR1Z1WjJVNklGQnBZMnM4VVhWbGNubFNaWE4xYkhROFEyaGhiR3hsYm1kbFVYVmxjbmsrTENBblpHRjBZU2NnZkNBbmJHOWhaR2x1WnljZ2ZDQW5aWEp5YjNJblBpQjhJRzUxYkd4Y2JpQWdiMjVUZFdKdGFYUTZJQ2hjYmlBZ0lDQmtZWFJoT2lCUGJXbDBQRUZrWkVOdmJXMWxiblJOZFhSaGRHbHZibFpoY21saFlteGxjMXNuYVc1d2RYUW5YU3dnSjJsMFpXMUpSQ2NnZkNBbmFYUmxiVlI1Y0dVbklId2dKM0JoY21WdWRFbEVKeUI4SUNkd1pXVnlTV1FuUGx4dUlDQXBJRDArSUhadmFXUmNibjFjYmx4dWRIbHdaU0JGWkdsMFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ1RtOWtaVnRkSUh3Z2JuVnNiRnh1SUNCMGFYUnNaVDg2SUhOMGNtbHVaeUI4SUc1MWJHeGNiaUFnWTJoaGJHeGxibWRsUHpvZ2JtVjJaWEpjYmlBZ2IyNVRkV0p0YVhRNklDaGtZWFJoT2lCUGJXbDBQRVZrYVhSRGIyMXRaVzUwVFhWMFlYUnBiMjVXWVhKcFlXSnNaWE5iSjJsdWNIVjBKMTBzSUNkcFpDYytLU0E5UGlCMmIybGtYRzU5WEc1Y2JuUjVjR1VnVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1nUFNCN1hHNGdJRzl1UTJGdVkyVnNPaUFvS1NBOVBpQjJiMmxrWEc0Z0lHTnNZWE56VG1GdFpUODZJSE4wY21sdVoxeHVJQ0J0WVhoRGIyMXRaVzUwVEdWdVozUm9PaUJ1ZFcxaVpYSmNiaUFnYkc5aFpHbHVaem9nWW05dmJHVmhibHh1SUNCbGNuSnZjajg2SUVGd2IyeHNiMFZ5Y205eVhHNTlJQ1lnS0VOeVpXRjBaVU52YlcxbGJuUlFjbTl3Y3lCOElFVmthWFJEYjIxdFpXNTBVSEp2Y0hNcFhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUWdQU0FvZTF4dUlDQmpiR0Z6YzA1aGJXVXNYRzRnSUc5dVEyRnVZMlZzTEZ4dUlDQnZibE4xWW0xcGRDeGNiaUFnYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ3hjYmlBZ2RHbDBiR1VzWEc0Z0lIUmxlSFFzWEc0Z0lHTm9ZV3hzWlc1blpTeGNiaUFnYkc5aFpHbHVaeXhjYmlBZ1pYSnliM0pjYm4wNklGZHlhWFJsUTI5dGJXVnVkRkJ5YjNCektTQTlQaUI3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JsYkdWdFpXNTBjem9nZTFSbGVIUkdhV1ZzWkN3Z1FuVjBkRzl1ZlZ4dUlDQjlJRDBnZFhObFYyVmljMmwwWlVKMWFXeGtaWElvS1Z4dUlDQmpiMjV6ZENCN2FHRnpWWE5sY24wZ1BTQjFjMlZWYzJWeUtDbGNibHh1SUNCamIyNXpkQ0J6WTJobGJXRWdQU0IxYzJWTlpXMXZLRnh1SUNBZ0lDZ3BJRDArWEc0Z0lDQWdJQ0I2TG5WdWFXOXVLRnRjYmlBZ0lDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LUzV0WVhnb2JXRjRRMjl0YldWdWRFeGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDa3NYRzRnSUNBZ0lDQWdJQ0FnWjNWbGMzUlZjMlZ5Ym1GdFpUb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpUb2dlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUI2TG5OMGNtbHVaeWdwTG01dmJtVnRjSFI1S0NsY2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUYwcExGeHVJQ0FnSUZ0dFlYaERiMjF0Wlc1MFRHVnVaM1JvWFZ4dUlDQXBYRzVjYmlBZ2RIbHdaU0JHYjNKdFNXNXdkWFFnUFNCNkxtbHVabVZ5UEhSNWNHVnZaaUJ6WTJobGJXRStYRzRnSUdOdmJuTjBJSHRvWVc1a2JHVlRkV0p0YVhRc0lHTnZiblJ5YjJ3c0lISmxjMlYwZlNBOUlIVnpaVVp2Y20wOFJtOXliVWx1Y0hWMFBpaDdYRzRnSUNBZ2NtVnpiMngyWlhJNklIcHZaRkpsYzI5c2RtVnlLSE5qYUdWdFlTa3NYRzRnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxjem9nZTF4dUlDQWdJQ0FnWTI5dGJXVnVkRG9nZEc5UWJHRnBiblJsZUhRb2RHVjRkQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQjBhWFJzWlRvZ2RHbDBiR1VnUHo4Z0p5Y3NYRzRnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lCb1lYTlZjMlZ5SUQ4Z0p5Y2dPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0JqYUdGc2JHVnVaMlU2SUdoaGMxVnpaWEpjYmlBZ0lDQWdJQ0FnUHlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZKUkRvZ1kyaGhiR3hsYm1kbFB5NWtZWFJoUHk1amFHRnNiR1Z1WjJVdVkyaGhiR3hsYm1kbFNVUWdQejhnSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiam9nSnlkY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdmU3hjYmlBZ0lDQnRiMlJsT2lBbllXeHNKMXh1SUNCOUtWeHVYRzRnSUdOdmJuTjBJSE4xWW0xcGRDQTlJR2hoYm1Sc1pWTjFZbTFwZENnb2UyTnZiVzFsYm5Rc0lDNHVMbVJoZEdGOUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvWkdGMFlTbGNibHh1SUNBZ0lHOXVVM1ZpYldsMEtIdGNiaUFnSUNBZ0lDNHVMbVJoZEdFc1hHNGdJQ0FnSUNCMFpYaDBPaUJiWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNHRnlZV2R5WVhCb0p5eGNiaUFnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiam9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCamIyMXRaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCZFhHNGdJQ0FnZlNsY2JpQWdmU2xjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4WGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeUlHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxmU0J2YmxOMVltMXBkRDE3YzNWaWJXbDBmVDVjYmlBZ0lDQWdJSHNoYUdGelZYTmxjaUFtSmlBb1hHNGdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdKMmQxWlhOMFZYTmxjbTVoYldVbmZWeHVJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0xpNHVabWxsYkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxY0lrUmxhVzRnVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVRtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ2w5WEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkMGFYUnNaU2Q5WEc0Z0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjajE3S0h0bWFXVnNaQ3dnWm1sbGJHUlRkR0YwWlRvZ2UyVnljbTl5ZlgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBWd2lSMmxpSUVSbGFXNWxiU0JDWldsMGNtRm5JR1ZwYm1WdUlGUnBkR1ZzTGx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEMWNJbFJwZEdWc1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnNjR1Z5VkdWNGREMTdaWEp5YjNJL0xtMWxjM05oWjJWOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJRzVoYldVOWV5ZGpiMjF0Wlc1MEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUcxMWJIUnBiR2x1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNVNiM2R6UFhzMWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pMYjIxdFpXNTBZWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKQ1pXbDBjbUZuSUhabGNtWmhjM05sYmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNqMTdJU0ZsY25KdmNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUdobGJIQmxjbFJsZUhROWUyQWtlMlpwWld4a0xuWmhiSFZsTG14bGJtZDBhSDBnTHlBa2UyMWhlRU52YlcxbGJuUk1aVzVuZEdoOUlGcGxhV05vWlc1Z2ZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBdlBseHVYRzRnSUNBZ0lDQjdJV2hoYzFWelpYSWdKaVlnWTJoaGJHeGxibWRsUHk1a1lYUmhJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVdzllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTlvZEcxc09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpTNWtZWFJoTG1Ob1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOHVjbVZ3YkdGalpTZ25JMlptWm1abVppY3NJQ2QwY21GdWMzQmhjbVZ1ZENjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25kMmxrZEdnOVhDSXlNREJjSWljc0lDY25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvSjJobGFXZG9kRDFjSWpJd01Gd2lKeXdnSnljcElEOC9JQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lDQWdJQ0E4UTI5dWRISnZiR3hsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyTm9ZV3hzWlc1blpTNWphR0ZzYkdWdVoyVlRiMngxZEdsdmJpZDlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a0lIc3VMaTVtYVdWc1pIMGdiR0ZpWld3OWV5ZERZWEIwWTJoaEozMGdaWEp5YjNJOWV5RWhaWEp5YjNKOUlHaGxiSEJsY2xSbGVIUTllMlZ5Y205eVB5NXRaWE56WVdkbGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQXBmVnh1WEc0Z0lDQWdJQ0I3SVd4dllXUnBibWNnSmlZZ0lXVnljbTl5SUNZbUlDRmtZWFJoUHk1amIyMXRaVzUwY3k1c1pXNW5kR2dnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThRV3hsY25RZ2MyVjJaWEpwZEhrOVhDSnBibVp2WENJK1MyVnBibVVnUzI5dGJXVnVkR0Z5WlNCMmIzSm9ZVzVrWlc0dVBDOUJiR1Z5ZEQ1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpQbHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQnphWHBsUFZ3aWMyMWhiR3hjSWlCemRHRnlkRWxqYjI0OWV6eE5aRk5sYm1RZ0x6NTlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRmR5WVhCd1pYSStYRzRnSUNsY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUUyUWpSREluMD0gKi9cIik7XG5fYzIgPSBXcml0ZUNvbW1lbnRDaGFsbGVuZ2VXcmFwcGVyO1xuZXhwb3J0IGNvbnN0IFdyaXRlQ29tbWVudENoYWxsZW5nZSA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZXdrcHF0ejNcIixcbiAgICBsYWJlbDogXCJXcml0ZUNvbW1lbnRDaGFsbGVuZ2VcIlxufSkoXCJoZWlnaHQ6MTAwJTtkaXNwbGF5OmdyaWQ7c3Zne2hlaWdodDoxMDAlO31cIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOTNjbWwwWlMxamIyMXRaVzUwTDNkeWFYUmxMV052YlcxbGJuUXVkSE40SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFYUnlkV3hwWVM5RWIyTjFiV1Z1ZEhNdmQyVndkV0pzYVhOb0wyeHBZbk12WTI5dGJXVnVkSE12ZDJWaWMybDBaUzl6Y21NdmJHbGlMM2R5YVhSbExXTnZiVzFsYm5RdmQzSnBkR1V0WTI5dGJXVnVkQzUwYzNnaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIdDZiMlJTWlhOdmJIWmxjbjBnWm5KdmJTQW5RR2h2YjJ0bWIzSnRMM0psYzI5c2RtVnljeTk2YjJRblhHNXBiWEJ2Y25RZ2UzTjBlV3hsWkgwZ1puSnZiU0FuUUcxMWFTOXRZWFJsY21saGJDZGNibWx0Y0c5eWRDQjdkWE5sVlhObGNuMGdabkp2YlNBblFIZGxjSFZpYkdsemFDOWhkWFJvWlc1MGFXTmhkR2x2Ymk5M1pXSnphWFJsSjF4dWFXMXdiM0owSUh0MWMyVlhaV0p6YVhSbFFuVnBiR1JsY24wZ1puSnZiU0FuUUhkbGNIVmliR2x6YUM5M1pXSnphWFJsTDJKMWFXeGtaWEluWEc1cGJYQnZjblFnZTNWelpVMWxiVzk5SUdaeWIyMGdKM0psWVdOMEoxeHVhVzF3YjNKMElIdERiMjUwY205c2JHVnlMQ0IxYzJWR2IzSnRmU0JtY205dElDZHlaV0ZqZEMxb2IyOXJMV1p2Y20wblhHNXBiWEJ2Y25RZ2UwMWtVMlZ1WkgwZ1puSnZiU0FuY21WaFkzUXRhV052Ym5NdmJXUW5YRzVwYlhCdmNuUWdlMDV2WkdWOUlHWnliMjBnSjNOc1lYUmxKMXh1YVcxd2IzSjBJSHQ2ZlNCbWNtOXRJQ2Q2YjJRblhHNXBiWEJ2Y25RZ2UzUnZVR3hoYVc1MFpYaDBmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM0pwWTJoMFpYaDBKMXh1YVcxd2IzSjBJSHRCY0c5c2JHOUZjbkp2Y2l3Z1VYVmxjbmxTWlhOMWJIUjlJR1p5YjIwZ0owQmhjRzlzYkc4dlkyeHBaVzUwSjF4dWFXMXdiM0owSUh0Y2JpQWdRV1JrUTI5dGJXVnVkRTExZEdGMGFXOXVWbUZ5YVdGaWJHVnpMRnh1SUNCRGFHRnNiR1Z1WjJWUmRXVnllU3hjYmlBZ1JXUnBkRU52YlcxbGJuUk5kWFJoZEdsdmJsWmhjbWxoWW14bGMxeHVmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM2RsWW5OcGRHVXZZWEJwSjF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFYzSmhjSEJsY2lBOUlITjBlV3hsWkNnblptOXliU2NwWUZ4dUlDQmthWE53YkdGNU9pQm5jbWxrTzF4dUlDQm5ZWEE2SUNSN0tIdDBhR1Z0WlgwcElEMCtJSFJvWlcxbExuTndZV05wYm1jb01pbDlPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVjNKcGRHVkRiMjF0Wlc1MFFXTjBhVzl1Y3lBOUlITjBlV3hsWkNnblpHbDJKeWxnWEc0Z0lHcDFjM1JwWm5rdGMyVnNaam9nWm14bGVDMWxibVE3WEc0Z0lHUnBjM0JzWVhrNklHWnNaWGc3WEc0Z0lHWnNaWGd0Wm14dmR6b2djbTkzSUhkeVlYQTdYRzRnSUdkaGNEb2dKSHNvZTNSb1pXMWxmU2tnUFQ0Z2RHaGxiV1V1YzNCaFkybHVaeWd4S1gwN1hHNWdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlhjbWwwWlVOdmJXMWxiblJEYUdGc2JHVnVaMlZYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjNKcFpDMTBaVzF3YkdGMFpTMWpiMngxYlc1ek9pQnRhVzV0WVhnb2JXRjRMV052Ym5SbGJuUXNJREl3TUhCNEtTQXlNREJ3ZUR0Y2JpQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RNcGZUdGNiaUFnYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJtYkdWNExYTjBZWEowTzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1YzSnBkR1ZEYjIxdFpXNTBRMmhoYkd4bGJtZGxJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0JrYVhOd2JHRjVPaUJuY21sa08xeHVYRzRnSUhOMlp5QjdYRzRnSUNBZ2FHVnBaMmgwT2lBeE1EQWxPMXh1SUNCOVhHNWdYRzVjYm5SNWNHVWdRM0psWVhSbFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ2JtVjJaWEpjYmlBZ2RHbDBiR1UvT2lCdVpYWmxjbHh1SUNCamFHRnNiR1Z1WjJVNklGQnBZMnM4VVhWbGNubFNaWE4xYkhROFEyaGhiR3hsYm1kbFVYVmxjbmsrTENBblpHRjBZU2NnZkNBbmJHOWhaR2x1WnljZ2ZDQW5aWEp5YjNJblBpQjhJRzUxYkd4Y2JpQWdiMjVUZFdKdGFYUTZJQ2hjYmlBZ0lDQmtZWFJoT2lCUGJXbDBQRUZrWkVOdmJXMWxiblJOZFhSaGRHbHZibFpoY21saFlteGxjMXNuYVc1d2RYUW5YU3dnSjJsMFpXMUpSQ2NnZkNBbmFYUmxiVlI1Y0dVbklId2dKM0JoY21WdWRFbEVKeUI4SUNkd1pXVnlTV1FuUGx4dUlDQXBJRDArSUhadmFXUmNibjFjYmx4dWRIbHdaU0JGWkdsMFEyOXRiV1Z1ZEZCeWIzQnpJRDBnZTF4dUlDQjBaWGgwUHpvZ1RtOWtaVnRkSUh3Z2JuVnNiRnh1SUNCMGFYUnNaVDg2SUhOMGNtbHVaeUI4SUc1MWJHeGNiaUFnWTJoaGJHeGxibWRsUHpvZ2JtVjJaWEpjYmlBZ2IyNVRkV0p0YVhRNklDaGtZWFJoT2lCUGJXbDBQRVZrYVhSRGIyMXRaVzUwVFhWMFlYUnBiMjVXWVhKcFlXSnNaWE5iSjJsdWNIVjBKMTBzSUNkcFpDYytLU0E5UGlCMmIybGtYRzU5WEc1Y2JuUjVjR1VnVjNKcGRHVkRiMjF0Wlc1MFVISnZjSE1nUFNCN1hHNGdJRzl1UTJGdVkyVnNPaUFvS1NBOVBpQjJiMmxrWEc0Z0lHTnNZWE56VG1GdFpUODZJSE4wY21sdVoxeHVJQ0J0WVhoRGIyMXRaVzUwVEdWdVozUm9PaUJ1ZFcxaVpYSmNiaUFnYkc5aFpHbHVaem9nWW05dmJHVmhibHh1SUNCbGNuSnZjajg2SUVGd2IyeHNiMFZ5Y205eVhHNTlJQ1lnS0VOeVpXRjBaVU52YlcxbGJuUlFjbTl3Y3lCOElFVmthWFJEYjIxdFpXNTBVSEp2Y0hNcFhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCWGNtbDBaVU52YlcxbGJuUWdQU0FvZTF4dUlDQmpiR0Z6YzA1aGJXVXNYRzRnSUc5dVEyRnVZMlZzTEZ4dUlDQnZibE4xWW0xcGRDeGNiaUFnYldGNFEyOXRiV1Z1ZEV4bGJtZDBhQ3hjYmlBZ2RHbDBiR1VzWEc0Z0lIUmxlSFFzWEc0Z0lHTm9ZV3hzWlc1blpTeGNiaUFnYkc5aFpHbHVaeXhjYmlBZ1pYSnliM0pjYm4wNklGZHlhWFJsUTI5dGJXVnVkRkJ5YjNCektTQTlQaUI3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JsYkdWdFpXNTBjem9nZTFSbGVIUkdhV1ZzWkN3Z1FuVjBkRzl1ZlZ4dUlDQjlJRDBnZFhObFYyVmljMmwwWlVKMWFXeGtaWElvS1Z4dUlDQmpiMjV6ZENCN2FHRnpWWE5sY24wZ1BTQjFjMlZWYzJWeUtDbGNibHh1SUNCamIyNXpkQ0J6WTJobGJXRWdQU0IxYzJWTlpXMXZLRnh1SUNBZ0lDZ3BJRDArWEc0Z0lDQWdJQ0I2TG5WdWFXOXVLRnRjYmlBZ0lDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiVzFsYm5RNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LUzV0WVhnb2JXRjRRMjl0YldWdWRFeGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDa3NYRzRnSUNBZ0lDQWdJQ0FnWjNWbGMzUlZjMlZ5Ym1GdFpUb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpUb2dlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUI2TG5OMGNtbHVaeWdwTG01dmJtVnRjSFI1S0NsY2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1M1dFlYZ29iV0Y0UTI5dGJXVnVkRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUYwcExGeHVJQ0FnSUZ0dFlYaERiMjF0Wlc1MFRHVnVaM1JvWFZ4dUlDQXBYRzVjYmlBZ2RIbHdaU0JHYjNKdFNXNXdkWFFnUFNCNkxtbHVabVZ5UEhSNWNHVnZaaUJ6WTJobGJXRStYRzRnSUdOdmJuTjBJSHRvWVc1a2JHVlRkV0p0YVhRc0lHTnZiblJ5YjJ3c0lISmxjMlYwZlNBOUlIVnpaVVp2Y20wOFJtOXliVWx1Y0hWMFBpaDdYRzRnSUNBZ2NtVnpiMngyWlhJNklIcHZaRkpsYzI5c2RtVnlLSE5qYUdWdFlTa3NYRzRnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxjem9nZTF4dUlDQWdJQ0FnWTI5dGJXVnVkRG9nZEc5UWJHRnBiblJsZUhRb2RHVjRkQ2tnUHo4Z0p5Y3NYRzRnSUNBZ0lDQjBhWFJzWlRvZ2RHbDBiR1VnUHo4Z0p5Y3NYRzRnSUNBZ0lDQm5kV1Z6ZEZWelpYSnVZVzFsT2lCb1lYTlZjMlZ5SUQ4Z0p5Y2dPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0JqYUdGc2JHVnVaMlU2SUdoaGMxVnpaWEpjYmlBZ0lDQWdJQ0FnUHlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZKUkRvZ1kyaGhiR3hsYm1kbFB5NWtZWFJoUHk1amFHRnNiR1Z1WjJVdVkyaGhiR3hsYm1kbFNVUWdQejhnSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZUYjJ4MWRHbHZiam9nSnlkY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdmU3hjYmlBZ0lDQnRiMlJsT2lBbllXeHNKMXh1SUNCOUtWeHVYRzRnSUdOdmJuTjBJSE4xWW0xcGRDQTlJR2hoYm1Sc1pWTjFZbTFwZENnb2UyTnZiVzFsYm5Rc0lDNHVMbVJoZEdGOUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvWkdGMFlTbGNibHh1SUNBZ0lHOXVVM1ZpYldsMEtIdGNiaUFnSUNBZ0lDNHVMbVJoZEdFc1hHNGdJQ0FnSUNCMFpYaDBPaUJiWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNHRnlZV2R5WVhCb0p5eGNiaUFnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiam9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCamIyMXRaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCZFhHNGdJQ0FnZlNsY2JpQWdmU2xjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4WGNtbDBaVU52YlcxbGJuUlhjbUZ3Y0dWeUlHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxmU0J2YmxOMVltMXBkRDE3YzNWaWJXbDBmVDVjYmlBZ0lDQWdJSHNoYUdGelZYTmxjaUFtSmlBb1hHNGdJQ0FnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdKMmQxWlhOMFZYTmxjbTVoYldVbmZWeHVJQ0FnSUNBZ0lDQWdJR052Ym5SeWIydzllMk52Ym5SeWIyeDlYRzRnSUNBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0xpNHVabWxsYkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxY0lrUmxhVzRnVG1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVRtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ2w5WEc1Y2JpQWdJQ0FnSUR4RGIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lHNWhiV1U5ZXlkMGFYUnNaU2Q5WEc0Z0lDQWdJQ0FnSUdOdmJuUnliMnc5ZTJOdmJuUnliMng5WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjajE3S0h0bWFXVnNaQ3dnWm1sbGJHUlRkR0YwWlRvZ2UyVnljbTl5ZlgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3TGk0dVptbGxiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBWd2lSMmxpSUVSbGFXNWxiU0JDWldsMGNtRm5JR1ZwYm1WdUlGUnBkR1ZzTGx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEMWNJbFJwZEdWc1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnNjR1Z5VkdWNGREMTdaWEp5YjNJL0xtMWxjM05oWjJWOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJRzVoYldVOWV5ZGpiMjF0Wlc1MEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUcxMWJIUnBiR2x1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNVNiM2R6UFhzMWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pMYjIxdFpXNTBZWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKQ1pXbDBjbUZuSUhabGNtWmhjM05sYmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNqMTdJU0ZsY25KdmNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUdobGJIQmxjbFJsZUhROWUyQWtlMlpwWld4a0xuWmhiSFZsTG14bGJtZDBhSDBnTHlBa2UyMWhlRU52YlcxbGJuUk1aVzVuZEdoOUlGcGxhV05vWlc1Z2ZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBdlBseHVYRzRnSUNBZ0lDQjdJV2hoYzFWelpYSWdKaVlnWTJoaGJHeGxibWRsUHk1a1lYUmhJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BGZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQWdJQ0FnUEZkeWFYUmxRMjl0YldWdWRFTm9ZV3hzWlc1blpWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVdzllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTlvZEcxc09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpTNWtZWFJoTG1Ob1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOHVjbVZ3YkdGalpTZ25JMlptWm1abVppY3NJQ2QwY21GdWMzQmhjbVZ1ZENjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ25kMmxrZEdnOVhDSXlNREJjSWljc0lDY25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvSjJobGFXZG9kRDFjSWpJd01Gd2lKeXdnSnljcElEOC9JQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lDQWdJQ0E4UTI5dWRISnZiR3hsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN0oyTm9ZV3hzWlc1blpTNWphR0ZzYkdWdVoyVlRiMngxZEdsdmJpZDlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a0lIc3VMaTVtYVdWc1pIMGdiR0ZpWld3OWV5ZERZWEIwWTJoaEozMGdaWEp5YjNJOWV5RWhaWEp5YjNKOUlHaGxiSEJsY2xSbGVIUTllMlZ5Y205eVB5NXRaWE56WVdkbGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRU5vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQXBmVnh1WEc0Z0lDQWdJQ0I3SVd4dllXUnBibWNnSmlZZ0lXVnljbTl5SUNZbUlDRmtZWFJoUHk1amIyMXRaVzUwY3k1c1pXNW5kR2dnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThRV3hsY25RZ2MyVjJaWEpwZEhrOVhDSnBibVp2WENJK1MyVnBibVVnUzI5dGJXVnVkR0Z5WlNCMmIzSm9ZVzVrWlc0dVBDOUJiR1Z5ZEQ1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lEeFhjbWwwWlVOdmJXMWxiblJCWTNScGIyNXpQbHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVJSFI1Y0dVOVhDSnpkV0p0YVhSY0lpQnphWHBsUFZ3aWMyMWhiR3hjSWlCemRHRnlkRWxqYjI0OWV6eE5aRk5sYm1RZ0x6NTlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlYzSnBkR1ZEYjIxdFpXNTBRV04wYVc5dWN6NWNiaUFnSUNBOEwxZHlhWFJsUTI5dGJXVnVkRmR5WVhCd1pYSStYRzRnSUNsY2JuMWNiaUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZ4UTNGREluMD0gKi9cIik7XG5fYzMgPSBXcml0ZUNvbW1lbnRDaGFsbGVuZ2U7XG5leHBvcnQgY29uc3QgV3JpdGVDb21tZW50ID0gKHBhcmFtKT0+e1xuICAgIGxldCB7IGNsYXNzTmFtZSAsIG9uQ2FuY2VsICwgb25TdWJtaXQgLCBtYXhDb21tZW50TGVuZ3RoICwgdGl0bGUgLCB0ZXh0ICwgY2hhbGxlbmdlICwgbG9hZGluZyAsIGVycm9yICB9ID0gcGFyYW07XG4gICAgdmFyIF9jaGFsbGVuZ2VfZGF0YSwgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2U7XG4gICAgX3MoKTtcbiAgICBjb25zdCB7IGVsZW1lbnRzOiB7IFRleHRGaWVsZCAsIEJ1dHRvbiAgfSAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKCk7XG4gICAgY29uc3QgeyBoYXNVc2VyICB9ID0gdXNlVXNlcigpO1xuICAgIGNvbnN0IHNjaGVtYSA9IHVzZU1lbW8oKCk9PnoudW5pb24oW1xuICAgICAgICAgICAgei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZ3Vlc3RVc2VybmFtZTogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgICAgIGNoYWxsZW5nZTogei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogei5zdHJpbmcoKS5ub25lbXB0eSgpLFxuICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHouc3RyaW5nKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pLCBbXG4gICAgICAgIG1heENvbW1lbnRMZW5ndGhcbiAgICBdKTtcbiAgICB2YXIgX3RvUGxhaW50ZXh0LCBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZUlEO1xuICAgIGNvbnN0IHsgaGFuZGxlU3VibWl0ICwgY29udHJvbCAsIHJlc2V0ICB9ID0gdXNlRm9ybSh7XG4gICAgICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgICAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICAgICAgICBjb21tZW50OiAoX3RvUGxhaW50ZXh0ID0gdG9QbGFpbnRleHQodGV4dCkpICE9PSBudWxsICYmIF90b1BsYWludGV4dCAhPT0gdm9pZCAwID8gX3RvUGxhaW50ZXh0IDogXCJcIixcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSAhPT0gbnVsbCAmJiB0aXRsZSAhPT0gdm9pZCAwID8gdGl0bGUgOiBcIlwiLFxuICAgICAgICAgICAgZ3Vlc3RVc2VybmFtZTogaGFzVXNlciA/IFwiXCIgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjaGFsbGVuZ2U6IGhhc1VzZXIgPyB7XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlSUQ6IChfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZUlEID0gY2hhbGxlbmdlID09PSBudWxsIHx8IGNoYWxsZW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9jaGFsbGVuZ2VfZGF0YSA9IGNoYWxsZW5nZS5kYXRhKSA9PT0gbnVsbCB8fCBfY2hhbGxlbmdlX2RhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jaGFsbGVuZ2VfZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlSUQpICE9PSBudWxsICYmIF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlSUQgIT09IHZvaWQgMCA/IF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlSUQgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGNoYWxsZW5nZVNvbHV0aW9uOiBcIlwiXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIG1vZGU6IFwiYWxsXCJcbiAgICB9KTtcbiAgICBjb25zdCBzdWJtaXQgPSBoYW5kbGVTdWJtaXQoKHBhcmFtKT0+e1xuICAgICAgICBsZXQgeyBjb21tZW50ICwgLi4uZGF0YTEgfSA9IHBhcmFtO1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhMSk7XG4gICAgICAgIG9uU3VibWl0KHtcbiAgICAgICAgICAgIC4uLmRhdGExLFxuICAgICAgICAgICAgdGV4dDogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwYXJhZ3JhcGhcIixcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZV9yZXBsYWNlX3JlcGxhY2VfcmVwbGFjZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBfanN4REVWKFdyaXRlQ29tbWVudFdyYXBwZXIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uU3VibWl0OiBzdWJtaXQsXG4gICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAhaGFzVXNlciAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoQ29udHJvbGxlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3RVc2VybmFtZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJEZWluIE5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dDogZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwgdm9pZCAwLCB2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxNDUsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUaXRlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE2MSxcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDdcbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNvbW1lbnRcIixcbiAgICAgICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogKHBhcmFtKT0+LyojX19QVVJFX18qLyB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2pzeERFVihUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluUm93czogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIktvbW1lbnRhclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiQmVpdHJhZyB2ZXJmYXNzZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dDogXCJcIi5jb25jYXQoZmllbGQudmFsdWUubGVuZ3RoLCBcIiAvIFwiKS5jb25jYXQobWF4Q29tbWVudExlbmd0aCwgXCIgWmVpY2hlblwiKVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE3NixcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDdcbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgIWhhc1VzZXIgJiYgKGNoYWxsZW5nZSA9PT0gbnVsbCB8fCBjaGFsbGVuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYWxsZW5nZS5kYXRhKSAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoV3JpdGVDb21tZW50Q2hhbGxlbmdlV3JhcHBlciwge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihXcml0ZUNvbW1lbnRDaGFsbGVuZ2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19odG1sOiAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgPSAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlKSA9PT0gbnVsbCB8fCBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UucmVwbGFjZShcIiNmZmZmZmZcIiwgXCJ0cmFuc3BhcmVudFwiKS5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgXCJcIikucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCBcIlwiKSkgIT09IG51bGwgJiYgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgIT09IHZvaWQgMCA/IF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlX3JlcGxhY2VfcmVwbGFjZV9yZXBsYWNlIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE5NSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogMTFcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImNoYWxsZW5nZS5jaGFsbGVuZ2VTb2x1dGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbDogY29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogKHBhcmFtKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gcmV0dXJuIF9qc3hERVYoVGV4dEZpZWxkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJDYXB0Y2hhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAhIWVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDExXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSwgdm9pZCAwLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTk0LFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogOVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAhbG9hZGluZyAmJiAhZXJyb3IgJiYgIShkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY29tbWVudHMubGVuZ3RoKSAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoQWxlcnQsIHtcbiAgICAgICAgICAgICAgICBzZXZlcml0eTogXCJpbmZvXCIsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFwiS2VpbmUgS29tbWVudGFyZSB2b3JoYW5kZW4uXCJcbiAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMTYsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihXcml0ZUNvbW1lbnRBY3Rpb25zLCB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdWJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SWNvbjogLyojX19QVVJFX18qLyBfanN4REVWKE1kU2VuZCwge30sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBcIktvbW1lbnRpZXJlblwiXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMjIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlc2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInNlY29uZGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFwiQWJicmVjaGVuXCJcbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQudHN4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMjQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IDlcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LCB2b2lkIDAsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudC50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyMTksXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA3XG4gICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICBdXG4gICAgfSwgdm9pZCAwLCB0cnVlLCB7XG4gICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvd3JpdGUtY29tbWVudC93cml0ZS1jb21tZW50LnRzeFwiLFxuICAgICAgICBsaW5lTnVtYmVyOiAxNDMsXG4gICAgICAgIGNvbHVtbk51bWJlcjogNVxuICAgIH0sIHRoaXMpO1xufTtcbl9zKFdyaXRlQ29tbWVudCwgXCJIYmxPYXdrWGpnM09zME1nTlpjbk05dW1SVmM9XCIsIGZhbHNlLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICB1c2VXZWJzaXRlQnVpbGRlcixcbiAgICAgICAgdXNlVXNlcixcbiAgICAgICAgdXNlRm9ybVxuICAgIF07XG59KTtcbl9jNCA9IFdyaXRlQ29tbWVudDtcbnZhciBfYywgX2MxLCBfYzIsIF9jMywgX2M0O1xuJFJlZnJlc2hSZWckKF9jLCBcIldyaXRlQ29tbWVudFdyYXBwZXJcIik7XG4kUmVmcmVzaFJlZyQoX2MxLCBcIldyaXRlQ29tbWVudEFjdGlvbnNcIik7XG4kUmVmcmVzaFJlZyQoX2MyLCBcIldyaXRlQ29tbWVudENoYWxsZW5nZVdyYXBwZXJcIik7XG4kUmVmcmVzaFJlZyQoX2MzLCBcIldyaXRlQ29tbWVudENoYWxsZW5nZVwiKTtcbiRSZWZyZXNoUmVnJChfYzQsIFwiV3JpdGVDb21tZW50XCIpO1xuXG5cbjtcbiAgICAvLyBXcmFwcGVkIGluIGFuIElJRkUgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBnbG9iYWwgc2NvcGVcbiAgICA7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLy8gTGVnYWN5IENTUyBpbXBsZW1lbnRhdGlvbnMgd2lsbCBgZXZhbGAgYnJvd3NlciBjb2RlIGluIGEgTm9kZS5qcyBjb250ZXh0XG4gICAgICAgIC8vIHRvIGV4dHJhY3QgQ1NTLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIG5lZWQgdG8gY2hlY2sgd2UncmUgaW4gYVxuICAgICAgICAvLyBicm93c2VyIGNvbnRleHQgYmVmb3JlIGNvbnRpbnVpbmcuXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIC8vIEFNUCAvIE5vLUpTIG1vZGUgZG9lcyBub3QgaW5qZWN0IHRoZXNlIGhlbHBlcnM6XG4gICAgICAgICAgICAnJFJlZnJlc2hIZWxwZXJzJCcgaW4gc2VsZikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBfX3dlYnBhY2tfbW9kdWxlX18gaXMgZ2xvYmFsXG4gICAgICAgICAgICB2YXIgY3VycmVudEV4cG9ydHMgPSBfX3dlYnBhY2tfbW9kdWxlX18uZXhwb3J0cztcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxuICAgICAgICAgICAgdmFyIHByZXZFeHBvcnRzID0gKF9iID0gKF9hID0gX193ZWJwYWNrX21vZHVsZV9fLmhvdC5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJldkV4cG9ydHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBoYXBwZW4gaW4gTWFpblRlbXBsYXRlIGJlY2F1c2UgdGhlIGV4cG9ydHMgbWlzbWF0Y2ggYmV0d2VlblxuICAgICAgICAgICAgLy8gdGVtcGxhdGluZyBhbmQgZXhlY3V0aW9uLlxuICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChjdXJyZW50RXhwb3J0cywgX193ZWJwYWNrX21vZHVsZV9fLmlkKTtcbiAgICAgICAgICAgIC8vIEEgbW9kdWxlIGNhbiBiZSBhY2NlcHRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIGl0cyBleHBvcnRzLCBlLmcuIHdoZW5cbiAgICAgICAgICAgIC8vIGl0IGlzIGEgUmVmcmVzaCBCb3VuZGFyeS5cbiAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShjdXJyZW50RXhwb3J0cykpIHtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBwcmV2aW91cyBleHBvcnRzIG9uIHVwZGF0ZSBzbyB3ZSBjYW4gY29tcGFyZSB0aGUgYm91bmRhcnlcbiAgICAgICAgICAgICAgICAvLyBzaWduYXR1cmVzLlxuICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZXZFeHBvcnRzID0gY3VycmVudEV4cG9ydHM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gVW5jb25kaXRpb25hbGx5IGFjY2VwdCBhbiB1cGRhdGUgdG8gdGhpcyBtb2R1bGUsIHdlJ2xsIGNoZWNrIGlmIGl0J3NcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCBhIFJlZnJlc2ggQm91bmRhcnkgbGF0ZXIuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBpbXBvcnRNZXRhIGlzIHJlcGxhY2VkIGluIHRoZSBsb2FkZXJcbiAgICAgICAgICAgICAgICBpbXBvcnQubWV0YS53ZWJwYWNrSG90LmFjY2VwdCgpO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgc2V0IHdoZW4gdGhlIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBtb2R1bGUgd2FzIGFcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIEJvdW5kYXJ5LCBsZXR0aW5nIHVzIGtub3cgd2UgbmVlZCB0byBjaGVjayBmb3IgaW52YWxpZGF0aW9uIG9yXG4gICAgICAgICAgICAgICAgLy8gZW5xdWV1ZSBhbiB1cGRhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFeHBvcnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYm91bmRhcnkgY2FuIGJlY29tZSBpbmVsaWdpYmxlIGlmIGl0cyBleHBvcnRzIGFyZSBpbmNvbXBhdGlibGVcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgZXhwb3J0cy5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhZGQvcmVtb3ZlL2NoYW5nZSBleHBvcnRzLCB3ZSdsbCB3YW50IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlLWV4ZWN1dGUgdGhlIGltcG9ydGluZyBtb2R1bGVzLCBhbmQgZm9yY2UgdGhvc2UgY29tcG9uZW50cyB0b1xuICAgICAgICAgICAgICAgICAgICAvLyByZS1yZW5kZXIuIFNpbWlsYXJseSwgaWYgeW91IGNvbnZlcnQgYSBjbGFzcyBjb21wb25lbnQgdG8gYVxuICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiwgd2Ugd2FudCB0byBpbnZhbGlkYXRlIHRoZSBib3VuZGFyeS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5zaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIGN1cnJlbnRFeHBvcnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX193ZWJwYWNrX21vZHVsZV9fLmhvdC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLiRSZWZyZXNoSGVscGVycyQuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGp1c3QgZXhlY3V0ZWQgdGhlIGNvZGUgZm9yIHRoZSBtb2R1bGUsIGl0J3MgcG9zc2libGUgdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAvLyBuZXcgZXhwb3J0cyBtYWRlIGl0IGluZWxpZ2libGUgZm9yIGJlaW5nIGEgYm91bmRhcnkuXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IHRoZSBjYXNlIHdoZW4gd2Ugd2VyZSBfcHJldmlvdXNseV8gYSBib3VuZGFyeSxcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGFscmVhZHkgYWNjZXB0ZWQgdGhpcyB1cGRhdGUgKGFjY2lkZW50YWwgc2lkZSBlZmZlY3QpLlxuICAgICAgICAgICAgICAgIHZhciBpc05vTG9uZ2VyQUJvdW5kYXJ5ID0gcHJldkV4cG9ydHMgIT09IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGlzTm9Mb25nZXJBQm91bmRhcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgX193ZWJwYWNrX21vZHVsZV9fLmhvdC5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkoKTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ21EIn0= */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading , error  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const schema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.union([\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n                guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                    challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                    challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n                })\n            }),\n            zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n                title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n            })\n        ]), [\n        maxCommentLength\n    ]);\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: hasUser ? \"\" : undefined,\n            challenge: hasUser ? {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            } : undefined\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data1 } = param;\n        console.log(data1);\n        onSubmit({\n            ...data1,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 145,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 161,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 176,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 195,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 205,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 194,\n                columnNumber: 9\n            }, undefined),\n            !loading && !error && !(data === null || data === void 0 ? void 0 : data.comments.length) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                severity: \"info\",\n                children: \"Keine Kommentare vorhanden.\"\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 216,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 220,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                        lineNumber: 224,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n                lineNumber: 219,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/write-comment/write-comment.tsx\",\n        lineNumber: 143,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"OM6pQApLTVh/0ARLk0PrIi+fqg4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"HblOawkXjg3Os0MgNZcnM9umRVc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data1) {\n                data1.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/write-comment/write-comment.tsx\n"));

/***/ })

});