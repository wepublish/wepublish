"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/index.ts":
/*!************************************************!*\
  !*** ../../libs/comments/website/src/index.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_comment_list_comment_list_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/comment-list/comment-list-item */ \"../../libs/comments/website/src/lib/comment-list/comment-list-item.tsx\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _lib_comment_list_comment_list_item__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _lib_comment_list_comment_list_item__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _lib_comment_list_comment_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/comment-list/comment-list */ \"../../libs/comments/website/src/lib/comment-list/comment-list.tsx\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _lib_comment_list_comment_list__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _lib_comment_list_comment_list__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _lib_comment_list_comment_list_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/comment-list/comment-list-container */ \"../../libs/comments/website/src/lib/comment-list/comment-list-container.tsx\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _lib_comment_list_comment_list_container__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _lib_comment_list_comment_list_container__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _lib_comment_editor_comment_editor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/comment-editor/comment-editor */ \"../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _lib_comment_editor_comment_editor__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _lib_comment_editor_comment_editor__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9pbmRleC50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFvRDtBQUNMO0FBQ1U7QUFFTiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9pbmRleC50cz8wMmQ4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vbGliL2NvbW1lbnQtbGlzdC9jb21tZW50LWxpc3QtaXRlbSdcbmV4cG9ydCAqIGZyb20gJy4vbGliL2NvbW1lbnQtbGlzdC9jb21tZW50LWxpc3QnXG5leHBvcnQgKiBmcm9tICcuL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LWNvbnRhaW5lcidcblxuZXhwb3J0ICogZnJvbSAnLi9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3InXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/index.ts\n"));

/***/ }),

/***/ "../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx":
/*!*****************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx ***!
  \*****************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentEditor\": function() { return /* binding */ CommentEditor; },\n/* harmony export */   \"CommentEditorActions\": function() { return /* binding */ CommentEditorActions; },\n/* harmony export */   \"CommentEditorChallenge\": function() { return /* binding */ CommentEditorChallenge; },\n/* harmony export */   \"CommentEditorChallengeWrapper\": function() { return /* binding */ CommentEditorChallengeWrapper; },\n/* harmony export */   \"CommentEditorWrapper\": function() { return /* binding */ CommentEditorWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst CommentEditorWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"e170ldgs0\",\n    label: \"CommentEditorWrapper\",\n    target: \"e170ldgs0\",\n    label: \"CommentEditorWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXR9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnN0IHN1Ym1pdCA9IGhhbmRsZVN1Ym1pdCgoe2NvbW1lbnQsIC4uLmRhdGF9KSA9PiB7XG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPENvbW1lbnRFZGl0b3JXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvblN1Ym1pdD17c3VibWl0fT5cbiAgICAgIHshaGFzVXNlciAmJiAoXG4gICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgbmFtZT17J2d1ZXN0VXNlcm5hbWUnfVxuICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlaW4gTmFtZVwiXG4gICAgICAgICAgICAgIGxhYmVsPVwiTmFtZVwiXG4gICAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eyd0aXRsZSd9XG4gICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR2liIERlaW5lbSBCZWl0cmFnIGVpbmVuIFRpdGVsLlwiXG4gICAgICAgICAgICBsYWJlbD1cIlRpdGVsXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eydjb21tZW50J31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICBtaW5Sb3dzPXs1fVxuICAgICAgICAgICAgbGFiZWw9XCJLb21tZW50YXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCZWl0cmFnIHZlcmZhc3NlblwiXG4gICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgIGhlbHBlclRleHQ9e2Ake2ZpZWxkLnZhbHVlLmxlbmd0aH0gLyAke21heENvbW1lbnRMZW5ndGh9IFplaWNoZW5gfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuXG4gICAgICB7IWhhc1VzZXIgJiYgY2hhbGxlbmdlPy5kYXRhICYmIChcbiAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgICAgIDxDb21tZW50RWRpdG9yQ2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICBLb21tZW50aWVyZW5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJyZXNldFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgcmVzZXQoKVxuICAgICAgICAgICAgb25DYW5jZWwoKVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICBBYmJyZWNoZW5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0NvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgIDwvQ29tbWVudEVkaXRvcldyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVb0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = CommentEditorWrapper;\nconst CommentEditorActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs1\",\n    label: \"CommentEditorActions\",\n    target: \"e170ldgs1\",\n    label: \"CommentEditorActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXR9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnN0IHN1Ym1pdCA9IGhhbmRsZVN1Ym1pdCgoe2NvbW1lbnQsIC4uLmRhdGF9KSA9PiB7XG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPENvbW1lbnRFZGl0b3JXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvblN1Ym1pdD17c3VibWl0fT5cbiAgICAgIHshaGFzVXNlciAmJiAoXG4gICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgbmFtZT17J2d1ZXN0VXNlcm5hbWUnfVxuICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlaW4gTmFtZVwiXG4gICAgICAgICAgICAgIGxhYmVsPVwiTmFtZVwiXG4gICAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eyd0aXRsZSd9XG4gICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR2liIERlaW5lbSBCZWl0cmFnIGVpbmVuIFRpdGVsLlwiXG4gICAgICAgICAgICBsYWJlbD1cIlRpdGVsXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eydjb21tZW50J31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICBtaW5Sb3dzPXs1fVxuICAgICAgICAgICAgbGFiZWw9XCJLb21tZW50YXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCZWl0cmFnIHZlcmZhc3NlblwiXG4gICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgIGhlbHBlclRleHQ9e2Ake2ZpZWxkLnZhbHVlLmxlbmd0aH0gLyAke21heENvbW1lbnRMZW5ndGh9IFplaWNoZW5gfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuXG4gICAgICB7IWhhc1VzZXIgJiYgY2hhbGxlbmdlPy5kYXRhICYmIChcbiAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgICAgIDxDb21tZW50RWRpdG9yQ2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICBLb21tZW50aWVyZW5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJyZXNldFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgcmVzZXQoKVxuICAgICAgICAgICAgb25DYW5jZWwoKVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICBBYmJyZWNoZW5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0NvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgIDwvQ29tbWVudEVkaXRvcldyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlb0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentEditorActions;\nconst CommentEditorChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs2\",\n    label: \"CommentEditorChallengeWrapper\",\n    target: \"e170ldgs2\",\n    label: \"CommentEditorChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXR9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnN0IHN1Ym1pdCA9IGhhbmRsZVN1Ym1pdCgoe2NvbW1lbnQsIC4uLmRhdGF9KSA9PiB7XG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPENvbW1lbnRFZGl0b3JXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvblN1Ym1pdD17c3VibWl0fT5cbiAgICAgIHshaGFzVXNlciAmJiAoXG4gICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgbmFtZT17J2d1ZXN0VXNlcm5hbWUnfVxuICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlaW4gTmFtZVwiXG4gICAgICAgICAgICAgIGxhYmVsPVwiTmFtZVwiXG4gICAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eyd0aXRsZSd9XG4gICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR2liIERlaW5lbSBCZWl0cmFnIGVpbmVuIFRpdGVsLlwiXG4gICAgICAgICAgICBsYWJlbD1cIlRpdGVsXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eydjb21tZW50J31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICBtaW5Sb3dzPXs1fVxuICAgICAgICAgICAgbGFiZWw9XCJLb21tZW50YXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCZWl0cmFnIHZlcmZhc3NlblwiXG4gICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgIGhlbHBlclRleHQ9e2Ake2ZpZWxkLnZhbHVlLmxlbmd0aH0gLyAke21heENvbW1lbnRMZW5ndGh9IFplaWNoZW5gfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuXG4gICAgICB7IWhhc1VzZXIgJiYgY2hhbGxlbmdlPy5kYXRhICYmIChcbiAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgICAgIDxDb21tZW50RWRpdG9yQ2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICBLb21tZW50aWVyZW5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJyZXNldFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgcmVzZXQoKVxuICAgICAgICAgICAgb25DYW5jZWwoKVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICBBYmJyZWNoZW5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0NvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgIDwvQ29tbWVudEVkaXRvcldyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQjZDIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = CommentEditorChallengeWrapper;\nconst CommentEditorChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs3\",\n    label: \"CommentEditorChallenge\",\n    target: \"e170ldgs3\",\n    label: \"CommentEditorChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXR9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnN0IHN1Ym1pdCA9IGhhbmRsZVN1Ym1pdCgoe2NvbW1lbnQsIC4uLmRhdGF9KSA9PiB7XG4gICAgb25TdWJtaXQoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRleHQ6IGNvbW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPENvbW1lbnRFZGl0b3JXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBvblN1Ym1pdD17c3VibWl0fT5cbiAgICAgIHshaGFzVXNlciAmJiAoXG4gICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgbmFtZT17J2d1ZXN0VXNlcm5hbWUnfVxuICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlaW4gTmFtZVwiXG4gICAgICAgICAgICAgIGxhYmVsPVwiTmFtZVwiXG4gICAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eyd0aXRsZSd9XG4gICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR2liIERlaW5lbSBCZWl0cmFnIGVpbmVuIFRpdGVsLlwiXG4gICAgICAgICAgICBsYWJlbD1cIlRpdGVsXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIDxDb250cm9sbGVyXG4gICAgICAgIG5hbWU9eydjb21tZW50J31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIG11bHRpbGluZVxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICBtaW5Sb3dzPXs1fVxuICAgICAgICAgICAgbGFiZWw9XCJLb21tZW50YXJcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJCZWl0cmFnIHZlcmZhc3NlblwiXG4gICAgICAgICAgICBlcnJvcj17ISFlcnJvcn1cbiAgICAgICAgICAgIGhlbHBlclRleHQ9e2Ake2ZpZWxkLnZhbHVlLmxlbmd0aH0gLyAke21heENvbW1lbnRMZW5ndGh9IFplaWNoZW5gfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAvPlxuXG4gICAgICB7IWhhc1VzZXIgJiYgY2hhbGxlbmdlPy5kYXRhICYmIChcbiAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyPlxuICAgICAgICAgIDxDb21tZW50RWRpdG9yQ2hhbGxlbmdlXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICBfX2h0bWw6XG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlLmRhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZVxuICAgICAgICAgICAgICAgICAgPy5yZXBsYWNlKCcjZmZmZmZmJywgJ3RyYW5zcGFyZW50JylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgJycpXG4gICAgICAgICAgICAgICAgICAucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCAnJykgPz8gJydcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxDb250cm9sbGVyXG4gICAgICAgICAgICBuYW1lPXsnY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uJ31cbiAgICAgICAgICAgIGNvbnRyb2w9e2NvbnRyb2x9XG4gICAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICAgIDxUZXh0RmllbGQgey4uLmZpZWxkfSBsYWJlbD17J0NhcHRjaGEnfSBlcnJvcj17ISFlcnJvcn0gaGVscGVyVGV4dD17ZXJyb3I/Lm1lc3NhZ2V9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBzaXplPVwic21hbGxcIiBzdGFydEljb249ezxNZFNlbmQgLz59IGRpc2FibGVkPXtsb2FkaW5nfT5cbiAgICAgICAgICBLb21tZW50aWVyZW5cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJyZXNldFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgcmVzZXQoKVxuICAgICAgICAgICAgb25DYW5jZWwoKVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICBBYmJyZWNoZW5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0NvbW1lbnRFZGl0b3JBY3Rpb25zPlxuICAgIDwvQ29tbWVudEVkaXRvcldyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QnNDIn0= */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = CommentEditorChallenge;\nconst CommentEditor = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading , error  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button , Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const anonymousSchema = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n            guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n            challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n            })\n        }), [\n        maxCommentLength\n    ]);\n    const loggedInSchema = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n        }), [\n        maxCommentLength\n    ]);\n    const schema = hasUser ? loggedInSchema : anonymousSchema;\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_2__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\",\n            challenge: {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            }\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 115,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 131,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 146,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 165,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 175,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 164,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 185,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        disabled: loading,\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 188,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 192,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 187,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n        lineNumber: 113,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentEditor, \"sve6CF/uEB/epY95aivAEPLdnCA=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = CommentEditor;\n_s1(CommentEditor, \"caybhirfJtxpKGCp5XRzMgsw9kc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = CommentEditor;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CommentEditorWrapper\");\n$RefreshReg$(_c1, \"CommentEditorActions\");\n$RefreshReg$(_c2, \"CommentEditorChallengeWrapper\");\n$RefreshReg$(_c3, \"CommentEditorChallenge\");\n$RefreshReg$(_c4, \"CommentEditor\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"CommentEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx\n"));

/***/ })

});