"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/comment-list/comment-list.tsx":
/*!*************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-list/comment-list.tsx ***!
  \*************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentList\": function() { return /* binding */ CommentList; },\n/* harmony export */   \"CommentListActions\": function() { return /* binding */ CommentListActions; },\n/* harmony export */   \"CommentListWrapper\": function() { return /* binding */ CommentListWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/ui */ \"../../libs/ui/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var _write_comment_write_comment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../write-comment/write-comment */ \"../../libs/comments/website/src/lib/write-comment/write-comment.tsx\");\n/* harmony import */ var _comment_list_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comment-list.state */ \"../../libs/comments/website/src/lib/comment-list/comment-list.state.tsx\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\nconst CommentListWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"article\", {\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\",\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(4);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtXcml0ZUNvbW1lbnR9IGZyb20gJy4uL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudCdcbmltcG9ydCB7Z2V0U3RhdGVGb3JFZGl0b3J9IGZyb20gJy4vY29tbWVudC1saXN0LnN0YXRlJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RXcmFwcGVyID0gc3R5bGVkKCdhcnRpY2xlJylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZyg0KX07XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEFjdGlvbnMgPSBzdHlsZWQoJ2RpdicpYGBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0ID0gKHtcbiAgZGF0YSxcbiAgbG9hZGluZyxcbiAgZXJyb3IsXG4gIGNoYWxsZW5nZSxcbiAgY2xhc3NOYW1lLFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICBhbm9ueW1vdXNDYW5Db21tZW50LFxuICBhbm9ueW1vdXNDYW5SYXRlLFxuICB1c2VyQ2FuRWRpdCxcbiAgYWRkLFxuICBvbkFkZENvbW1lbnQsXG4gIGVkaXQsXG4gIG9uRWRpdENvbW1lbnQsXG4gIG9wZW5FZGl0b3JzU3RhdGU6IFtvcGVuV3JpdGVDb21tZW50cywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudExpc3RJdGVtLFxuICAgIGVsZW1lbnRzOiB7QWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IHNob3dSZXBseSA9IGdldFN0YXRlRm9yRWRpdG9yKG9wZW5Xcml0ZUNvbW1lbnRzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L0NvbW1lbnRMaXN0QWN0aW9ucz5cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxXcml0ZUNvbW1lbnRcbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnY2xvc2UnLFxuICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uU3VibWl0PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXX1cbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBhZGQ9e2FkZH1cbiAgICAgICAgICBvbkFkZENvbW1lbnQ9e29uQWRkQ29tbWVudH1cbiAgICAgICAgICBlZGl0PXtlZGl0fVxuICAgICAgICAgIG9uRWRpdENvbW1lbnQ9e29uRWRpdENvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuQ29tbWVudD17YW5vbnltb3VzQ2FuQ29tbWVudH1cbiAgICAgICAgICBhbm9ueW1vdXNDYW5SYXRlPXthbm9ueW1vdXNDYW5SYXRlfVxuICAgICAgICAgIHVzZXJDYW5FZGl0PXt1c2VyQ2FuRWRpdH1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIGNoaWxkcmVuPXsoY29tbWVudC5jaGlsZHJlbiBhcyBDb21tZW50W10pID8/IFtdfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9Db21tZW50TGlzdFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTa0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = CommentListWrapper;\nconst CommentListActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\",\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\"\n})(\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtXcml0ZUNvbW1lbnR9IGZyb20gJy4uL3dyaXRlLWNvbW1lbnQvd3JpdGUtY29tbWVudCdcbmltcG9ydCB7Z2V0U3RhdGVGb3JFZGl0b3J9IGZyb20gJy4vY29tbWVudC1saXN0LnN0YXRlJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RXcmFwcGVyID0gc3R5bGVkKCdhcnRpY2xlJylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZyg0KX07XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEFjdGlvbnMgPSBzdHlsZWQoJ2RpdicpYGBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0ID0gKHtcbiAgZGF0YSxcbiAgbG9hZGluZyxcbiAgZXJyb3IsXG4gIGNoYWxsZW5nZSxcbiAgY2xhc3NOYW1lLFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICBhbm9ueW1vdXNDYW5Db21tZW50LFxuICBhbm9ueW1vdXNDYW5SYXRlLFxuICB1c2VyQ2FuRWRpdCxcbiAgYWRkLFxuICBvbkFkZENvbW1lbnQsXG4gIGVkaXQsXG4gIG9uRWRpdENvbW1lbnQsXG4gIG9wZW5FZGl0b3JzU3RhdGU6IFtvcGVuV3JpdGVDb21tZW50cywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudExpc3RJdGVtLFxuICAgIGVsZW1lbnRzOiB7QWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IHNob3dSZXBseSA9IGdldFN0YXRlRm9yRWRpdG9yKG9wZW5Xcml0ZUNvbW1lbnRzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L0NvbW1lbnRMaXN0QWN0aW9ucz5cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxXcml0ZUNvbW1lbnRcbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnY2xvc2UnLFxuICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uU3VibWl0PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXX1cbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBhZGQ9e2FkZH1cbiAgICAgICAgICBvbkFkZENvbW1lbnQ9e29uQWRkQ29tbWVudH1cbiAgICAgICAgICBlZGl0PXtlZGl0fVxuICAgICAgICAgIG9uRWRpdENvbW1lbnQ9e29uRWRpdENvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuQ29tbWVudD17YW5vbnltb3VzQ2FuQ29tbWVudH1cbiAgICAgICAgICBhbm9ueW1vdXNDYW5SYXRlPXthbm9ueW1vdXNDYW5SYXRlfVxuICAgICAgICAgIHVzZXJDYW5FZGl0PXt1c2VyQ2FuRWRpdH1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIGNoaWxkcmVuPXsoY29tbWVudC5jaGlsZHJlbiBhcyBDb21tZW50W10pID8/IFtdfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9Db21tZW50TGlzdFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFja0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentListActions;\nconst CommentList = (param)=>{\n    _s();\n    let { data , loading , error , challenge , className , maxCommentLength , anonymousCanComment , anonymousCanRate , userCanEdit , add , onAddComment , edit , onEditComment , openEditorsState: [openWriteComments, dispatch]  } = param;\n    var _data_comments;\n    _s1();\n    const { CommentListItem , elements: { Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser)();\n    const showReply = (0,_comment_list_state__WEBPACK_IMPORTED_MODULE_4__.getStateForEditor)(openWriteComments)(\"add\", null);\n    const canReply = anonymousCanComment || hasUser;\n    var _comment_children;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListWrapper, {\n        className: className,\n        children: [\n            !loading && !error && !(data === null || data === void 0 ? void 0 : data.comments.length) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Alert, {\n                severity: \"info\",\n                children: \"Keine Kommentare vorhanden.\"\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 45,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 48,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListActions, {\n                children: canReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_wepublish_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n                    startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_7__.MdForum, {}, void 0, false, void 0, void 0),\n                    variant: \"text\",\n                    onClick: ()=>dispatch({\n                            type: \"add\",\n                            action: \"open\",\n                            commentId: null\n                        }),\n                    children: \"Jetzt Mitreden\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 52,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 50,\n                columnNumber: 7\n            }, undefined),\n            showReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_write_comment_write_comment__WEBPACK_IMPORTED_MODULE_3__.WriteComment, {\n                challenge: challenge,\n                maxCommentLength: maxCommentLength,\n                onCancel: ()=>dispatch({\n                        type: \"add\",\n                        action: \"close\",\n                        commentId: null\n                    }),\n                onSubmit: onAddComment,\n                loading: add.loading\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 68,\n                columnNumber: 9\n            }, undefined),\n            data === null || data === void 0 ? void 0 : (_data_comments = data.comments) === null || _data_comments === void 0 ? void 0 : _data_comments.map((comment)=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListItem, {\n                    ...comment,\n                    openEditorsState: [\n                        openWriteComments,\n                        dispatch\n                    ],\n                    challenge: challenge,\n                    add: add,\n                    onAddComment: onAddComment,\n                    edit: edit,\n                    onEditComment: onEditComment,\n                    anonymousCanComment: anonymousCanComment,\n                    anonymousCanRate: anonymousCanRate,\n                    userCanEdit: userCanEdit,\n                    maxCommentLength: maxCommentLength,\n                    children: (_comment_children = comment.children) !== null && _comment_children !== void 0 ? _comment_children : []\n                }, comment.id, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 84,\n                    columnNumber: 9\n                }, undefined))\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n        lineNumber: 43,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentList, \"LE3DKG0bYLJRy4rBD+UvZEygeNI=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c3 = CommentList;\n_s1(CommentList, \"lJHe4oTKl5CcRCpSGvovjzhBJO4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c2 = CommentList;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"CommentListWrapper\");\n$RefreshReg$(_c1, \"CommentListActions\");\n$RefreshReg$(_c2, \"CommentList\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c3;\n$RefreshReg$(_c3, \"CommentList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1saXN0L2NvbW1lbnQtbGlzdC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0M7QUFDcUI7QUFDckI7QUFFaUQ7QUFDL0M7QUFDcUI7QUFDTDtBQUUvQyxNQUFNTyxxQkFBQUEsV0FBQUEsR0FBcUJQLHFEQUFNQSxDQUFDOzs7Ozt3QkFFaEMsQ0FBQVEsUUFBYUM7UUFBWixFQUFDQSxNQUFBQSxFQUFNLEdBQUFEO1dBQUtDLE1BQU1DLE9BQU8sQ0FBQztBQUFDLDg5M0JBQ3BDO0tBSFlIO0FBS04sTUFBTUkscUJBQUFBLFdBQUFBLEdBQXFCWCxxREFBTUEsQ0FBQzs7Ozs7eTkzQkFBUTtNQUFwQ1c7QUFFTixNQUFNQyxjQUFjLENBQUFKLFFBZUk7O1FBZkgsRUFDMUJLLEtBQUFBLEVBQ0FDLFFBQUFBLEVBQ0FDLE1BQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLGlCQUFBQSxFQUNBQyxvQkFBQUEsRUFDQUMsaUJBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLElBQUFBLEVBQ0FDLGFBQUFBLEVBQ0FDLEtBQUFBLEVBQ0FDLGNBQUFBLEVBQ0FDLGtCQUFrQixDQUFDQyxtQkFBbUJDLFNBQVMsR0FDdkIsR0FBQXBCO1FBbURuQks7O0lBbERMLE1BQU0sRUFDSmdCLGdCQUFBQSxFQUNBQyxVQUFVLEVBQUNDLE1BQUFBLEVBQU0sR0FDbEIsR0FBRzVCLDZFQUFpQkE7SUFDckIsTUFBTSxFQUFDNkIsUUFBQUEsRUFBUSxHQUFHL0IsMEVBQU9BO0lBRXpCLE1BQU1nQyxZQUFZM0Isc0VBQWlCQSxDQUFDcUIsbUJBQW1CLE9BQU8sSUFBSTtJQUNsRSxNQUFNTyxXQUFXZix1QkFBdUJhO1FBeURyQkc7SUF2RG5CLHFCQUNFQyxzRUFBQUEsQ0FBQzdCLG9CQUFBQTtRQUFtQlUsV0FBV0E7O1lBQzVCLENBQUNILFdBQVcsQ0FBQ0MsU0FBUyxDQUFDRixDQUFBQSxTQUFBQSxJQUFBQSxJQUFBQSxTQUFBQSxLQUFBQSxJQUFBQSxLQUFBQSxJQUFBQSxLQUFNd0IsUUFBUSxDQUFDQyxNQUFNLG1CQUMzQ0Ysc0VBQUFBLENBQUNMLE9BQUFBO2dCQUFNUSxVQUFTOzBCQUFPOzs7Ozs7WUFHeEJ4QixTQUFBQSxXQUFBQSxHQUFTcUIsc0VBQUFBLENBQUNMLE9BQUFBO2dCQUFNUSxVQUFTOzBCQUFTeEIsTUFBTXlCLE9BQU87Ozs7OzswQkFFaERKLHNFQUFBQSxDQUFDekIsb0JBQUFBOzBCQUNFdUIsWUFBQUEsV0FBQUEsR0FDQ0Usc0VBQUFBLENBQUNsQyxpREFBTUEsRUFBTkE7b0JBQ0N1QyxXQUFBQSxXQUFBQSxHQUFXTCxzRUFBQUEsQ0FBQ2hDLG1EQUFPQSxFQUFQQSxDQUFBQSxHQUFBQSxLQUFBQSxHQUFBQSxLQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxLQUFBQTtvQkFDWnNDLFNBQVE7b0JBQ1JDLFNBQVMsSUFDUGYsU0FBUzs0QkFDUGdCLE1BQU07NEJBQ05DLFFBQVE7NEJBQ1JDLFdBQVcsSUFBSTt3QkFDakI7OEJBQ0E7Ozs7Ozs7Ozs7O1lBTVBiLGFBQUFBLFdBQUFBLEdBQ0NHLHNFQUFBQSxDQUFDL0Isc0VBQVlBLEVBQVpBO2dCQUNDVyxXQUFXQTtnQkFDWEUsa0JBQWtCQTtnQkFDbEI2QixVQUFVLElBQ1JuQixTQUFTO3dCQUNQZ0IsTUFBTTt3QkFDTkMsUUFBUTt3QkFDUkMsV0FBVyxJQUFJO29CQUNqQjtnQkFFRkUsVUFBVXpCO2dCQUNWVCxTQUFTUSxJQUFJUixPQUFPOzs7Ozs7WUFJdkJELFNBQUFBLElBQUFBLElBQUFBLFNBQUFBLEtBQUFBLElBQUFBLEtBQUFBLElBQUFBLENBQUFBLGlCQUFBQSxLQUFNd0IsUUFBUSxjQUFkeEIsbUJBQUFBLEtBQUFBLElBQUFBLEtBQUFBLElBQUFBLGVBQWdCb0MsR0FBQUEsQ0FBSWQsQ0FBQUEsVUFBQUEsV0FBQUEsR0FDbkJDLHNFQUFBQSxDQUFDUCxpQkFBQUE7b0JBRUUsR0FBR00sT0FBTztvQkFDWFQsa0JBQWtCO3dCQUFDQzt3QkFBbUJDO3FCQUFTO29CQUMvQ1osV0FBV0E7b0JBQ1hNLEtBQUtBO29CQUNMQyxjQUFjQTtvQkFDZEMsTUFBTUE7b0JBQ05DLGVBQWVBO29CQUNmTixxQkFBcUJBO29CQUNyQkMsa0JBQWtCQTtvQkFDbEJDLGFBQWFBO29CQUNiSCxrQkFBa0JBO29CQUNsQmdDLFVBQVUsQ0FBQ2Ysb0JBQUFBLFFBQVFlLFFBQVEsY0FBaEJmLHNCQUFBQSxLQUFBQSxJQUFBQSxvQkFBa0MsRUFBRTttQkFaMUNBLFFBQVFnQixFQUFFOzs7Ozs7Ozs7OztBQWlCekIsRUFBQztHQXJGWXZDOztRQW1CUFQseUVBQWlCQTtRQUNIRixzRUFBT0E7OztNQXBCZFc7SUFBQUEsYUFBQUEsZ0NBQUFBLEtBQUFBLEVBQUFBLFdBQUFBOztRQW1CUFQseUVBQWlCQTtRQUNIRixzRUFBT0E7OztNQXBCZFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtbGlzdC9jb21tZW50LWxpc3QudHN4PzNkNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7QnV0dG9ufSBmcm9tICdAd2VwdWJsaXNoL3VpJ1xuaW1wb3J0IHtDb21tZW50fSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYXBpJ1xuaW1wb3J0IHtCdWlsZGVyQ29tbWVudExpc3RQcm9wcywgdXNlV2Vic2l0ZUJ1aWxkZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9idWlsZGVyJ1xuaW1wb3J0IHtNZEZvcnVtfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7V3JpdGVDb21tZW50fSBmcm9tICcuLi93cml0ZS1jb21tZW50L3dyaXRlLWNvbW1lbnQnXG5pbXBvcnQge2dldFN0YXRlRm9yRWRpdG9yfSBmcm9tICcuL2NvbW1lbnQtbGlzdC5zdGF0ZSdcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0V3JhcHBlciA9IHN0eWxlZCgnYXJ0aWNsZScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoNCl9O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBgXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdCA9ICh7XG4gIGRhdGEsXG4gIGxvYWRpbmcsXG4gIGVycm9yLFxuICBjaGFsbGVuZ2UsXG4gIGNsYXNzTmFtZSxcbiAgbWF4Q29tbWVudExlbmd0aCxcbiAgYW5vbnltb3VzQ2FuQ29tbWVudCxcbiAgYW5vbnltb3VzQ2FuUmF0ZSxcbiAgdXNlckNhbkVkaXQsXG4gIGFkZCxcbiAgb25BZGRDb21tZW50LFxuICBlZGl0LFxuICBvbkVkaXRDb21tZW50LFxuICBvcGVuRWRpdG9yc1N0YXRlOiBbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXVxufTogQnVpbGRlckNvbW1lbnRMaXN0UHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIENvbW1lbnRMaXN0SXRlbSxcbiAgICBlbGVtZW50czoge0FsZXJ0fVxuICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKVxuICBjb25zdCB7aGFzVXNlcn0gPSB1c2VVc2VyKClcblxuICBjb25zdCBzaG93UmVwbHkgPSBnZXRTdGF0ZUZvckVkaXRvcihvcGVuV3JpdGVDb21tZW50cykoJ2FkZCcsIG51bGwpXG4gIGNvbnN0IGNhblJlcGx5ID0gYW5vbnltb3VzQ2FuQ29tbWVudCB8fCBoYXNVc2VyXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudExpc3RXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIHshbG9hZGluZyAmJiAhZXJyb3IgJiYgIWRhdGE/LmNvbW1lbnRzLmxlbmd0aCAmJiAoXG4gICAgICAgIDxBbGVydCBzZXZlcml0eT1cImluZm9cIj5LZWluZSBLb21tZW50YXJlIHZvcmhhbmRlbi48L0FsZXJ0PlxuICAgICAgKX1cblxuICAgICAge2Vycm9yICYmIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCI+e2Vycm9yLm1lc3NhZ2V9PC9BbGVydD59XG5cbiAgICAgIDxDb21tZW50TGlzdEFjdGlvbnM+XG4gICAgICAgIHtjYW5SZXBseSAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgc3RhcnRJY29uPXs8TWRGb3J1bSAvPn1cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvcGVuJyxcbiAgICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0+XG4gICAgICAgICAgICBKZXR6dCBNaXRyZWRlblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9Db21tZW50TGlzdEFjdGlvbnM+XG5cbiAgICAgIHtzaG93UmVwbHkgJiYgKFxuICAgICAgICA8V3JpdGVDb21tZW50XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGxvYWRpbmc9e2FkZC5sb2FkaW5nfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAge2RhdGE/LmNvbW1lbnRzPy5tYXAoY29tbWVudCA9PiAoXG4gICAgICAgIDxDb21tZW50TGlzdEl0ZW1cbiAgICAgICAgICBrZXk9e2NvbW1lbnQuaWR9XG4gICAgICAgICAgey4uLmNvbW1lbnR9XG4gICAgICAgICAgb3BlbkVkaXRvcnNTdGF0ZT17W29wZW5Xcml0ZUNvbW1lbnRzLCBkaXNwYXRjaF19XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgYWRkPXthZGR9XG4gICAgICAgICAgb25BZGRDb21tZW50PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgZWRpdD17ZWRpdH1cbiAgICAgICAgICBvbkVkaXRDb21tZW50PXtvbkVkaXRDb21tZW50fVxuICAgICAgICAgIGFub255bW91c0NhbkNvbW1lbnQ9e2Fub255bW91c0NhbkNvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuUmF0ZT17YW5vbnltb3VzQ2FuUmF0ZX1cbiAgICAgICAgICB1c2VyQ2FuRWRpdD17dXNlckNhbkVkaXR9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBjaGlsZHJlbj17KGNvbW1lbnQuY2hpbGRyZW4gYXMgQ29tbWVudFtdKSA/PyBbXX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvQ29tbWVudExpc3RXcmFwcGVyPlxuICApXG59XG4iXSwibmFtZXMiOlsic3R5bGVkIiwidXNlVXNlciIsIkJ1dHRvbiIsInVzZVdlYnNpdGVCdWlsZGVyIiwiTWRGb3J1bSIsIldyaXRlQ29tbWVudCIsImdldFN0YXRlRm9yRWRpdG9yIiwiQ29tbWVudExpc3RXcmFwcGVyIiwicGFyYW0iLCJ0aGVtZSIsInNwYWNpbmciLCJDb21tZW50TGlzdEFjdGlvbnMiLCJDb21tZW50TGlzdCIsImRhdGEiLCJsb2FkaW5nIiwiZXJyb3IiLCJjaGFsbGVuZ2UiLCJjbGFzc05hbWUiLCJtYXhDb21tZW50TGVuZ3RoIiwiYW5vbnltb3VzQ2FuQ29tbWVudCIsImFub255bW91c0NhblJhdGUiLCJ1c2VyQ2FuRWRpdCIsImFkZCIsIm9uQWRkQ29tbWVudCIsImVkaXQiLCJvbkVkaXRDb21tZW50Iiwib3BlbkVkaXRvcnNTdGF0ZSIsIm9wZW5Xcml0ZUNvbW1lbnRzIiwiZGlzcGF0Y2giLCJDb21tZW50TGlzdEl0ZW0iLCJlbGVtZW50cyIsIkFsZXJ0IiwiaGFzVXNlciIsInNob3dSZXBseSIsImNhblJlcGx5IiwiY29tbWVudCIsIl9qc3hERVYiLCJjb21tZW50cyIsImxlbmd0aCIsInNldmVyaXR5IiwibWVzc2FnZSIsInN0YXJ0SWNvbiIsInZhcmlhbnQiLCJvbkNsaWNrIiwidHlwZSIsImFjdGlvbiIsImNvbW1lbnRJZCIsIm9uQ2FuY2VsIiwib25TdWJtaXQiLCJtYXAiLCJjaGlsZHJlbiIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-list/comment-list.tsx\n"));

/***/ })

});