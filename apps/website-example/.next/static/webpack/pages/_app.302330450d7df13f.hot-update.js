"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/comment-editor/write-comment.tsx":
/*!****************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-editor/write-comment.tsx ***!
  \****************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WriteComment\": function() { return /* binding */ WriteComment; },\n/* harmony export */   \"WriteCommentActions\": function() { return /* binding */ WriteCommentActions; },\n/* harmony export */   \"WriteCommentChallenge\": function() { return /* binding */ WriteCommentChallenge; },\n/* harmony export */   \"WriteCommentChallengeWrapper\": function() { return /* binding */ WriteCommentChallengeWrapper; },\n/* harmony export */   \"WriteCommentWrapper\": function() { return /* binding */ WriteCommentWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst WriteCommentWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"eyixflk0\",\n    label: \"WriteCommentWrapper\",\n    target: \"eyixflk0\",\n    label: \"WriteCommentWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = WriteCommentWrapper;\nconst WriteCommentActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"eyixflk1\",\n    label: \"WriteCommentActions\",\n    target: \"eyixflk1\",\n    label: \"WriteCommentActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = WriteCommentActions;\nconst WriteCommentChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"eyixflk2\",\n    label: \"WriteCommentChallengeWrapper\",\n    target: \"eyixflk2\",\n    label: \"WriteCommentChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = WriteCommentChallengeWrapper;\nconst WriteCommentChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"eyixflk3\",\n    label: \"WriteCommentChallenge\",\n    target: \"eyixflk3\",\n    label: \"WriteCommentChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = WriteCommentChallenge;\nconst WriteComment = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading , error  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button , Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const anonymousSchema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n            guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n            challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n            })\n        }), [\n        maxCommentLength\n    ]);\n    const loggedInSchema = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n        }), [\n        maxCommentLength\n    ]);\n    const schema = hasUser ? loggedInSchema : anonymousSchema;\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_4__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\",\n            challenge: {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            }\n        },\n        mode: \"all\"\n    });\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 146,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 162,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 177,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                        lineNumber: 196,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                        lineNumber: 206,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 195,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 216,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(WriteCommentActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        disabled: loading,\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                        lineNumber: 223,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n                lineNumber: 218,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/write-comment.tsx\",\n        lineNumber: 144,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WriteComment, \"sve6CF/uEB/epY95aivAEPLdnCA=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = WriteComment;\n_s1(WriteComment, \"caybhirfJtxpKGCp5XRzMgsw9kc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = WriteComment;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"WriteCommentWrapper\");\n$RefreshReg$(_c1, \"WriteCommentActions\");\n$RefreshReg$(_c2, \"WriteCommentChallengeWrapper\");\n$RefreshReg$(_c3, \"WriteCommentChallenge\");\n$RefreshReg$(_c4, \"WriteComment\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"WriteComment\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-editor/write-comment.tsx\n"));

/***/ }),

/***/ "../../libs/comments/website/src/lib/comment-list/comment-list-item.tsx":
/*!******************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-list/comment-list-item.tsx ***!
  \******************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentListItem\": function() { return /* binding */ CommentListItem; },\n/* harmony export */   \"CommentListItemActions\": function() { return /* binding */ CommentListItemActions; },\n/* harmony export */   \"CommentListItemChildren\": function() { return /* binding */ CommentListItemChildren; },\n/* harmony export */   \"CommentListItemContent\": function() { return /* binding */ CommentListItemContent; },\n/* harmony export */   \"CommentListItemFlair\": function() { return /* binding */ CommentListItemFlair; },\n/* harmony export */   \"CommentListItemHeader\": function() { return /* binding */ CommentListItemHeader; },\n/* harmony export */   \"CommentListItemHeaderContent\": function() { return /* binding */ CommentListItemHeaderContent; },\n/* harmony export */   \"CommentListItemName\": function() { return /* binding */ CommentListItemName; },\n/* harmony export */   \"CommentListItemVerifiedBadge\": function() { return /* binding */ CommentListItemVerifiedBadge; },\n/* harmony export */   \"CommentListItemWrapper\": function() { return /* binding */ CommentListItemWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ \"../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/website/api */ \"../../libs/website/api/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ramda */ \"../../node_modules/ramda/es/index.js\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var _comment_editor_write_comment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../comment-editor/write-comment */ \"../../libs/comments/website/src/lib/comment-editor/write-comment.tsx\");\n/* harmony import */ var _comment_list_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comment-list.state */ \"../../libs/comments/website/src/lib/comment-list/comment-list.state.tsx\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nvar _s2 = $RefreshSig$(), _s11 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst avatarStyles = /*#__PURE__*/ (0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)(\"width:46px;height:46px;border-radius:50%;\", \"avatarStyles\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"label:avatarStyles\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nconst CommentListItemWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"article\", {\n    target: \"e1l2e89y0\",\n    label: \"CommentListItemWrapper\",\n    target: \"e1l2e89y0\",\n    label: \"CommentListItemWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = CommentListItemWrapper;\nconst CommentListItemHeader = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"header\", {\n    target: \"e1l2e89y1\",\n    label: \"CommentListItemHeader\",\n    target: \"e1l2e89y1\",\n    label: \"CommentListItemHeader\"\n})(\"display:grid;grid-template-columns:max-content 1fr;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";align-items:center;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentListItemHeader;\nconst CommentListItemHeaderContent = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y2\",\n    label: \"CommentListItemHeaderContent\",\n    target: \"e1l2e89y2\",\n    label: \"CommentListItemHeaderContent\"\n})(\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = CommentListItemHeaderContent;\nconst CommentListItemName = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y3\",\n    label: \"CommentListItemName\",\n    target: \"e1l2e89y3\",\n    label: \"CommentListItemName\"\n})(\"display:grid;grid-auto-flow:column;grid-auto-columns:max-content;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";align-items:center;font-weight:\", (param)=>{\n    let { theme  } = param;\n    return theme.typography.fontWeightBold;\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = CommentListItemName;\nconst CommentListItemVerifiedBadge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y4\",\n    label: \"CommentListItemVerifiedBadge\",\n    target: \"e1l2e89y4\",\n    label: \"CommentListItemVerifiedBadge\"\n})(\"display:grid;align-items:center;color:\", (param)=>{\n    let { theme  } = param;\n    return theme.palette.info.main;\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c4 = CommentListItemVerifiedBadge;\nconst CommentListItemFlair = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y5\",\n    label: \"CommentListItemFlair\",\n    target: \"e1l2e89y5\",\n    label: \"CommentListItemFlair\"\n})(\"font-size:0.75em;\", (param)=>{\n    let { isGuest , theme  } = param;\n    return isGuest && /*#__PURE__*/ (0,_emotion_react__WEBPACK_IMPORTED_MODULE_6__.css)(\"color:\", theme.palette.primary.main, \";\", \"CommentListItemFlair\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n}, \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LWl0ZW0udHN4Iiwic291cmNlcyI6WyIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtbGlzdC9jb21tZW50LWxpc3QtaXRlbS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjc3N9IGZyb20gJ0BlbW90aW9uL3JlYWN0J1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7Q29tbWVudEF1dGhvclR5cGUsIENvbW1lbnRTdGF0ZX0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2FwaSdcbmltcG9ydCB7QnVpbGRlckNvbW1lbnRMaXN0SXRlbVByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge2NvbmR9IGZyb20gJ3JhbWRhJ1xuaW1wb3J0IHtNZEVkaXQsIE1kUGVyc29uLCBNZFJlcGx5LCBNZFZlcmlmaWVkfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7V3JpdGVDb21tZW50fSBmcm9tICcuLi9jb21tZW50LWVkaXRvci93cml0ZS1jb21tZW50J1xuaW1wb3J0IHtnZXRTdGF0ZUZvckVkaXRvcn0gZnJvbSAnLi9jb21tZW50LWxpc3Quc3RhdGUnXG5cbmNvbnN0IGF2YXRhclN0eWxlcyA9IGNzc2BcbiAgd2lkdGg6IDQ2cHg7XG4gIGhlaWdodDogNDZweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RJdGVtV3JhcHBlciA9IHN0eWxlZCgnYXJ0aWNsZScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMil9O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RJdGVtSGVhZGVyID0gc3R5bGVkKCdoZWFkZXInKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtYXgtY29udGVudCAxZnI7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZygyKX07XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEl0ZW1IZWFkZXJDb250ZW50ID0gc3R5bGVkKCdkaXYnKWBgXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEl0ZW1OYW1lID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgZ3JpZC1hdXRvLWNvbHVtbnM6IG1heC1jb250ZW50O1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMSl9O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXdlaWdodDogJHsoe3RoZW1lfSkgPT4gdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZH07XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEl0ZW1WZXJpZmllZEJhZGdlID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgY29sb3I6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnBhbGV0dGUuaW5mby5tYWlufTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0SXRlbUZsYWlyID0gc3R5bGVkKCdkaXYnKTx7aXNHdWVzdDogYm9vbGVhbn0+YFxuICBmb250LXNpemU6IDAuNzVlbTtcblxuICAkeyh7aXNHdWVzdCwgdGhlbWV9KSA9PlxuICAgIGlzR3Vlc3QgJiZcbiAgICBjc3NgXG4gICAgICBjb2xvcjogJHt0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbn07XG4gICAgYH1cbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0SXRlbUNvbnRlbnQgPSBzdHlsZWQoJ2RpdicpYGBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0SXRlbUNoaWxkcmVuID0gc3R5bGVkKCdhc2lkZScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMyl9O1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICMwMDA7XG4gIHBhZGRpbmc6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoMyl9O1xuICBwYWRkaW5nLXJpZ2h0OiAwO1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RJdGVtQWN0aW9ucyA9IHN0eWxlZCgnZGl2JylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZygxKX07XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEl0ZW0gPSAoe1xuICBpZCxcbiAgY2xhc3NOYW1lLFxuICB0ZXh0LFxuICBhdXRob3JUeXBlLFxuICB1c2VyLFxuICBndWVzdFVzZXJJbWFnZSxcbiAgZ3Vlc3RVc2VybmFtZSxcbiAgdGl0bGUsXG4gIHNvdXJjZSxcbiAgc3RhdGUsXG4gIGNoaWxkcmVuLFxuICBhbm9ueW1vdXNDYW5Db21tZW50LFxuICBhbm9ueW1vdXNDYW5SYXRlLFxuICB1c2VyQ2FuRWRpdCxcbiAgbWF4Q29tbWVudExlbmd0aCxcbiAgY2hhbGxlbmdlLFxuICBhZGQsXG4gIG9uQWRkQ29tbWVudCxcbiAgZWRpdCxcbiAgb25FZGl0Q29tbWVudCxcbiAgb3BlbkVkaXRvcnNTdGF0ZTogW29wZW5Xcml0ZUNvbW1lbnRzLCBkaXNwYXRjaF1cbn06IEJ1aWxkZXJDb21tZW50TGlzdEl0ZW1Qcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudExpc3RJdGVtOiBCdWlsZGVyQ29tbWVudExpc3RJdGVtLFxuICAgIGVsZW1lbnRzOiB7UGFyYWdyYXBoLCBJbWFnZSwgQnV0dG9ufSxcbiAgICBibG9ja3M6IHtSaWNoVGV4dH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcblxuICBjb25zdCB7aGFzVXNlcjogaGFzTG9nZ2VkSW5Vc2VyLCB1c2VyOiBsb2dnZWRJblVzZXJ9ID0gdXNlVXNlcigpXG5cbiAgY29uc3QgaW1hZ2UgPSB1c2VyPy5pbWFnZSA/PyBndWVzdFVzZXJJbWFnZVxuICBjb25zdCBpc1ZlcmlmaWVkID0gYXV0aG9yVHlwZSA9PT0gQ29tbWVudEF1dGhvclR5cGUuVmVyaWZpZWRVc2VyXG4gIGNvbnN0IGlzR3Vlc3QgPSBhdXRob3JUeXBlID09PSBDb21tZW50QXV0aG9yVHlwZS5HdWVzdFVzZXJcbiAgY29uc3QgZmxhaXIgPSB1c2VyPy5mbGFpciA/PyBzb3VyY2VcbiAgY29uc3QgbmFtZSA9IHVzZXIgPyBgJHt1c2VyLnByZWZlcnJlZE5hbWUgfHwgdXNlci5maXJzdE5hbWV9ICR7dXNlci5uYW1lfWAgOiBndWVzdFVzZXJuYW1lXG5cbiAgY29uc3QgY2FuRWRpdCA9XG4gICAgaGFzTG9nZ2VkSW5Vc2VyICYmXG4gICAgbG9nZ2VkSW5Vc2VyPy5pZCA9PT0gdXNlcj8uaWQgJiZcbiAgICAodXNlckNhbkVkaXQgfHwgc3RhdGUgPT09IENvbW1lbnRTdGF0ZS5QZW5kaW5nVXNlckNoYW5nZXMpXG4gIGNvbnN0IGNhblJlcGx5ID0gYW5vbnltb3VzQ2FuQ29tbWVudCB8fCBoYXNMb2dnZWRJblVzZXJcbiAgY29uc3QgaGFzQWN0aW9ucyA9IGNhbkVkaXQgfHwgY2FuUmVwbHlcblxuICBjb25zdCBzaG93UmVwbHkgPSBnZXRTdGF0ZUZvckVkaXRvcihvcGVuV3JpdGVDb21tZW50cykoJ2FkZCcsIGlkKVxuICBjb25zdCBzaG93RWRpdCA9IGdldFN0YXRlRm9yRWRpdG9yKG9wZW5Xcml0ZUNvbW1lbnRzKSgnZWRpdCcsIGlkKVxuXG4gIHJldHVybiAoXG4gICAgPENvbW1lbnRMaXN0SXRlbVdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgPENvbW1lbnRMaXN0SXRlbUhlYWRlcj5cbiAgICAgICAge2ltYWdlICYmIDxJbWFnZSBpbWFnZT17aW1hZ2V9IHNxdWFyZSBjc3M9e2F2YXRhclN0eWxlc30gLz59XG4gICAgICAgIHshaW1hZ2UgJiYgPE1kUGVyc29uIGNzcz17YXZhdGFyU3R5bGVzfSAvPn1cblxuICAgICAgICA8Q29tbWVudExpc3RJdGVtSGVhZGVyQ29udGVudD5cbiAgICAgICAgICA8Q29tbWVudExpc3RJdGVtTmFtZT5cbiAgICAgICAgICAgIHtuYW1lfVxuXG4gICAgICAgICAgICB7aXNWZXJpZmllZCAmJiAoXG4gICAgICAgICAgICAgIDxDb21tZW50TGlzdEl0ZW1WZXJpZmllZEJhZGdlPlxuICAgICAgICAgICAgICAgIDxNZFZlcmlmaWVkIHRpdGxlPVwiTWVtYmVyXCIgLz5cbiAgICAgICAgICAgICAgPC9Db21tZW50TGlzdEl0ZW1WZXJpZmllZEJhZGdlPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0NvbW1lbnRMaXN0SXRlbU5hbWU+XG5cbiAgICAgICAgICB7ZmxhaXIgJiYgPENvbW1lbnRMaXN0SXRlbUZsYWlyIGlzR3Vlc3Q9e2lzR3Vlc3R9PntmbGFpcn08L0NvbW1lbnRMaXN0SXRlbUZsYWlyPn1cbiAgICAgICAgPC9Db21tZW50TGlzdEl0ZW1IZWFkZXJDb250ZW50PlxuICAgICAgPC9Db21tZW50TGlzdEl0ZW1IZWFkZXI+XG5cbiAgICAgIDxDb21tZW50TGlzdEl0ZW1TdGF0ZVdhcm5pbmdzIHN0YXRlPXtzdGF0ZX0gLz5cblxuICAgICAgeyFzaG93RWRpdCAmJiAoXG4gICAgICAgIDxDb21tZW50TGlzdEl0ZW1Db250ZW50PlxuICAgICAgICAgIHt0aXRsZSAmJiAoXG4gICAgICAgICAgICA8UGFyYWdyYXBoIGNvbXBvbmVudD1cImgxXCIgZ3V0dGVyQm90dG9tPXtmYWxzZX0+XG4gICAgICAgICAgICAgIDxzdHJvbmc+e3RpdGxlfTwvc3Ryb25nPlxuICAgICAgICAgICAgPC9QYXJhZ3JhcGg+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8UmljaFRleHQgcmljaFRleHQ9e3RleHQgPz8gW119IC8+XG4gICAgICAgIDwvQ29tbWVudExpc3RJdGVtQ29udGVudD5cbiAgICAgICl9XG5cbiAgICAgIHtzaG93RWRpdCAmJiAoXG4gICAgICAgIDxXcml0ZUNvbW1lbnRcbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgdGV4dD17dGV4dH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2VkaXQnLFxuICAgICAgICAgICAgICBhY3Rpb246ICdjbG9zZScsXG4gICAgICAgICAgICAgIGNvbW1lbnRJZDogaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uU3VibWl0PXtkYXRhID0+IG9uRWRpdENvbW1lbnQoey4uLmRhdGEsIGlkfSl9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBlcnJvcj17ZWRpdC5lcnJvcn1cbiAgICAgICAgICBsb2FkaW5nPXtlZGl0LmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7aGFzQWN0aW9ucyAmJiAoXG4gICAgICAgIDxDb21tZW50TGlzdEl0ZW1BY3Rpb25zPlxuICAgICAgICAgIHtjYW5SZXBseSAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIHN0YXJ0SWNvbj17PE1kUmVwbHkgLz59XG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgICAgY29tbWVudElkOiBpZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0+XG4gICAgICAgICAgICAgIEFudHdvcnRlblxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIHtjYW5FZGl0ICYmIChcbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgc3RhcnRJY29uPXs8TWRFZGl0IC8+fVxuICAgICAgICAgICAgICB2YXJpYW50PVwidGV4dFwiXG4gICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ2VkaXQnLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnb3BlbicsXG4gICAgICAgICAgICAgICAgICBjb21tZW50SWQ6IGlkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgRWRpdGllcmVuXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICApfVxuICAgICAgICA8L0NvbW1lbnRMaXN0SXRlbUFjdGlvbnM+XG4gICAgICApfVxuXG4gICAgICB7c2hvd1JlcGx5ICYmIChcbiAgICAgICAgPFdyaXRlQ29tbWVudFxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnY2xvc2UnLFxuICAgICAgICAgICAgICBjb21tZW50SWQ6IGlkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17ZGF0YSA9PiBvbkFkZENvbW1lbnQoey4uLmRhdGEsIHBhcmVudElEOiBpZH0pfVxuICAgICAgICAgIG1heENvbW1lbnRMZW5ndGg9e21heENvbW1lbnRMZW5ndGh9XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgZXJyb3I9e2FkZC5lcnJvcn1cbiAgICAgICAgICBsb2FkaW5nPXthZGQubG9hZGluZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHshIWNoaWxkcmVuPy5sZW5ndGggJiYgKFxuICAgICAgICA8Q29tbWVudExpc3RJdGVtQ2hpbGRyZW4+XG4gICAgICAgICAge2NoaWxkcmVuLm1hcChjaGlsZCA9PiAoXG4gICAgICAgICAgICA8QnVpbGRlckNvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgICAgICBrZXk9e2NoaWxkLmlkfVxuICAgICAgICAgICAgICB7Li4uY2hpbGR9XG4gICAgICAgICAgICAgIG9wZW5FZGl0b3JzU3RhdGU9e1tvcGVuV3JpdGVDb21tZW50cywgZGlzcGF0Y2hdfVxuICAgICAgICAgICAgICBhZGQ9e2FkZH1cbiAgICAgICAgICAgICAgb25BZGRDb21tZW50PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgICAgIGVkaXQ9e2VkaXR9XG4gICAgICAgICAgICAgIG9uRWRpdENvbW1lbnQ9e29uRWRpdENvbW1lbnR9XG4gICAgICAgICAgICAgIGNoYWxsZW5nZT17Y2hhbGxlbmdlfVxuICAgICAgICAgICAgICBhbm9ueW1vdXNDYW5Db21tZW50PXthbm9ueW1vdXNDYW5Db21tZW50fVxuICAgICAgICAgICAgICBhbm9ueW1vdXNDYW5SYXRlPXthbm9ueW1vdXNDYW5SYXRlfVxuICAgICAgICAgICAgICB1c2VyQ2FuRWRpdD17dXNlckNhbkVkaXR9XG4gICAgICAgICAgICAgIG1heENvbW1lbnRMZW5ndGg9e21heENvbW1lbnRMZW5ndGh9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9Db21tZW50TGlzdEl0ZW1DaGlsZHJlbj5cbiAgICAgICl9XG4gICAgPC9Db21tZW50TGlzdEl0ZW1XcmFwcGVyPlxuICApXG59XG5cbmNvbnN0IENvbW1lbnRMaXN0SXRlbVN0YXRlV2FybmluZ3MgPSAocHJvcHM6IFBpY2s8QnVpbGRlckNvbW1lbnRMaXN0SXRlbVByb3BzLCAnc3RhdGUnPikgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtBbGVydH1cbiAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKClcblxuICByZXR1cm4gY29uZChbXG4gICAgW1xuICAgICAgKHtzdGF0ZX0pID0+IHN0YXRlID09PSBDb21tZW50U3RhdGUuUGVuZGluZ0FwcHJvdmFsLFxuICAgICAgKCkgPT4gPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktvbW1lbnRhciB3YXJ0ZXQgYXVmIEZyZWlzY2hhbHR1bmcuPC9BbGVydD5cbiAgICBdLFxuICAgIFtcbiAgICAgICh7c3RhdGV9KSA9PiBzdGF0ZSA9PT0gQ29tbWVudFN0YXRlLlBlbmRpbmdVc2VyQ2hhbmdlcyxcbiAgICAgICgpID0+IDxBbGVydCBzZXZlcml0eT1cIndhcm5pbmdcIj5Lb21tZW50YXIgbXVzcyBlZGl0aWVydCB3ZXJkZW4gYmV2b3IgRnJlaXNjaGFsdHVuZy48L0FsZXJ0PlxuICAgIF0sXG4gICAgW1xuICAgICAgKHtzdGF0ZX0pID0+IHN0YXRlID09PSBDb21tZW50U3RhdGUuUmVqZWN0ZWQsXG4gICAgICAoKSA9PiA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiPktvbW1lbnRhciB3dXJkZSBuaWNodCBmcmVpZ2VzY2hhbHRlbi48L0FsZXJ0PlxuICAgIF1cbiAgXSkocHJvcHMpXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkNvQyJ9 */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c5 = CommentListItemFlair;\nconst CommentListItemContent = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y6\",\n    label: \"CommentListItemContent\",\n    target: \"e1l2e89y6\",\n    label: \"CommentListItemContent\"\n})(\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c6 = CommentListItemContent;\nconst CommentListItemChildren = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"aside\", {\n    target: \"e1l2e89y7\",\n    label: \"CommentListItemChildren\",\n    target: \"e1l2e89y7\",\n    label: \"CommentListItemChildren\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";border-left:2px solid #000;padding:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";padding-right:0;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c7 = CommentListItemChildren;\nconst CommentListItemActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_7__.styled)(\"div\", {\n    target: \"e1l2e89y8\",\n    label: \"CommentListItemActions\",\n    target: \"e1l2e89y8\",\n    label: \"CommentListItemActions\"\n})(\"display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c8 = CommentListItemActions;\nconst CommentListItem = (param)=>{\n    _s();\n    let { id , className , text , authorType , user , guestUserImage , guestUsername , title , source , state , children , anonymousCanComment , anonymousCanRate , userCanEdit , maxCommentLength , challenge , add , onAddComment , edit , onEditComment , openEditorsState: [openWriteComments, dispatch]  } = param;\n    _s2();\n    const { CommentListItem: BuilderCommentListItem , elements: { Paragraph , Image , Button  } , blocks: { RichText  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser: hasLoggedInUser , user: loggedInUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser)();\n    var _user_image;\n    const image = (_user_image = user === null || user === void 0 ? void 0 : user.image) !== null && _user_image !== void 0 ? _user_image : guestUserImage;\n    const isVerified = authorType === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentAuthorType.VerifiedUser;\n    const isGuest = authorType === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentAuthorType.GuestUser;\n    var _user_flair;\n    const flair = (_user_flair = user === null || user === void 0 ? void 0 : user.flair) !== null && _user_flair !== void 0 ? _user_flair : source;\n    const name = user ? \"\".concat(user.preferredName || user.firstName, \" \").concat(user.name) : guestUsername;\n    const canEdit = hasLoggedInUser && (loggedInUser === null || loggedInUser === void 0 ? void 0 : loggedInUser.id) === (user === null || user === void 0 ? void 0 : user.id) && (userCanEdit || state === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentState.PendingUserChanges);\n    const canReply = anonymousCanComment || hasLoggedInUser;\n    const hasActions = canEdit || canReply;\n    const showReply = (0,_comment_list_state__WEBPACK_IMPORTED_MODULE_5__.getStateForEditor)(openWriteComments)(\"add\", id);\n    const showEdit = (0,_comment_list_state__WEBPACK_IMPORTED_MODULE_5__.getStateForEditor)(openWriteComments)(\"edit\", id);\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemWrapper, {\n        className: className,\n        children: [\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemHeader, {\n                children: [\n                    image && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Image, {\n                        image: image,\n                        square: true,\n                        css: avatarStyles\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 122,\n                        columnNumber: 19\n                    }, undefined),\n                    !image && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdPerson, {\n                        css: avatarStyles\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 123,\n                        columnNumber: 20\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemHeaderContent, {\n                        children: [\n                            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemName, {\n                                children: [\n                                    name,\n                                    isVerified && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemVerifiedBadge, {\n                                        children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdVerified, {\n                                            title: \"Member\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                                            lineNumber: 131,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                                        lineNumber: 130,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                                lineNumber: 126,\n                                columnNumber: 11\n                            }, undefined),\n                            flair && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemFlair, {\n                                isGuest: isGuest,\n                                children: flair\n                            }, void 0, false, {\n                                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                                lineNumber: 136,\n                                columnNumber: 21\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 125,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 121,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemStateWarnings, {\n                state: state\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 140,\n                columnNumber: 7\n            }, undefined),\n            !showEdit && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemContent, {\n                children: [\n                    title && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Paragraph, {\n                        component: \"h1\",\n                        gutterBottom: false,\n                        children: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(\"strong\", {\n                            children: title\n                        }, void 0, false, {\n                            fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                            lineNumber: 146,\n                            columnNumber: 15\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 145,\n                        columnNumber: 13\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(RichText, {\n                        richText: text !== null && text !== void 0 ? text : []\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 149,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 143,\n                columnNumber: 9\n            }, undefined),\n            showEdit && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(_comment_editor_write_comment__WEBPACK_IMPORTED_MODULE_4__.WriteComment, {\n                title: title,\n                text: text,\n                onCancel: ()=>dispatch({\n                        type: \"edit\",\n                        action: \"close\",\n                        commentId: id\n                    }),\n                onSubmit: (data)=>onEditComment({\n                        ...data,\n                        id\n                    }),\n                maxCommentLength: maxCommentLength,\n                error: edit.error,\n                loading: edit.loading\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 154,\n                columnNumber: 9\n            }, undefined),\n            hasActions && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemActions, {\n                children: [\n                    canReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdReply, {}, void 0, false, void 0, void 0),\n                        variant: \"text\",\n                        size: \"small\",\n                        onClick: ()=>dispatch({\n                                type: \"add\",\n                                action: \"open\",\n                                commentId: id\n                            }),\n                        children: \"Antworten\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 174,\n                        columnNumber: 13\n                    }, undefined),\n                    canEdit && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdEdit, {}, void 0, false, void 0, void 0),\n                        variant: \"text\",\n                        size: \"small\",\n                        onClick: ()=>dispatch({\n                                type: \"edit\",\n                                action: \"open\",\n                                commentId: id\n                            }),\n                        children: \"Editieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 190,\n                        columnNumber: 13\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 172,\n                columnNumber: 9\n            }, undefined),\n            showReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(_comment_editor_write_comment__WEBPACK_IMPORTED_MODULE_4__.WriteComment, {\n                onCancel: ()=>dispatch({\n                        type: \"add\",\n                        action: \"close\",\n                        commentId: id\n                    }),\n                onSubmit: (data)=>onAddComment({\n                        ...data,\n                        parentID: id\n                    }),\n                maxCommentLength: maxCommentLength,\n                challenge: challenge,\n                error: add.error,\n                loading: add.loading\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 208,\n                columnNumber: 9\n            }, undefined),\n            !!(children === null || children === void 0 ? void 0 : children.length) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentListItemChildren, {\n                children: children.map((child)=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(BuilderCommentListItem, {\n                        ...child,\n                        openEditorsState: [\n                            openWriteComments,\n                            dispatch\n                        ],\n                        add: add,\n                        onAddComment: onAddComment,\n                        edit: edit,\n                        onEditComment: onEditComment,\n                        challenge: challenge,\n                        anonymousCanComment: anonymousCanComment,\n                        anonymousCanRate: anonymousCanRate,\n                        userCanEdit: userCanEdit,\n                        maxCommentLength: maxCommentLength,\n                        className: className\n                    }, child.id, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                        lineNumber: 227,\n                        columnNumber: 13\n                    }, undefined))\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                lineNumber: 225,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n        lineNumber: 120,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentListItem, \"KPWem+m9UFB5zTzVWY3snXabCnY=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c11 = CommentListItem;\n_s2(CommentListItem, \"pki2/crAsTof2weZB0nKtcphzzs=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c9 = CommentListItem;\nconst CommentListItemStateWarnings = (props)=>{\n    _s1();\n    _s11();\n    const { elements: { Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    return (0,ramda__WEBPACK_IMPORTED_MODULE_3__.cond)([\n        [\n            (param)=>{\n                let { state  } = param;\n                return state === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentState.PendingApproval;\n            },\n            ()=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                    severity: \"info\",\n                    children: \"Kommentar wartet auf Freischaltung.\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                    lineNumber: 257,\n                    columnNumber: 13\n                }, undefined)\n        ],\n        [\n            (param)=>{\n                let { state  } = param;\n                return state === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentState.PendingUserChanges;\n            },\n            ()=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                    severity: \"warning\",\n                    children: \"Kommentar muss editiert werden bevor Freischaltung.\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                    lineNumber: 261,\n                    columnNumber: 13\n                }, undefined)\n        ],\n        [\n            (param)=>{\n                let { state  } = param;\n                return state === _wepublish_website_api__WEBPACK_IMPORTED_MODULE_1__.CommentState.Rejected;\n            },\n            ()=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                    severity: \"error\",\n                    children: \"Kommentar wurde nicht freigeschalten.\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list-item.tsx\",\n                    lineNumber: 265,\n                    columnNumber: 13\n                }, undefined)\n        ]\n    ])(props);\n};\n_s1(CommentListItemStateWarnings, \"i3G5A51PvccMdxUOvJGEV3A0CB0=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder\n    ];\n});\n_c12 = CommentListItemStateWarnings;\n_s11(CommentListItemStateWarnings, \"EshLfGCKvvLudLOl1CFb19aQkf0=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder\n    ];\n});\n_c10 = CommentListItemStateWarnings;\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"CommentListItemWrapper\");\n$RefreshReg$(_c1, \"CommentListItemHeader\");\n$RefreshReg$(_c2, \"CommentListItemHeaderContent\");\n$RefreshReg$(_c3, \"CommentListItemName\");\n$RefreshReg$(_c4, \"CommentListItemVerifiedBadge\");\n$RefreshReg$(_c5, \"CommentListItemFlair\");\n$RefreshReg$(_c6, \"CommentListItemContent\");\n$RefreshReg$(_c7, \"CommentListItemChildren\");\n$RefreshReg$(_c8, \"CommentListItemActions\");\n$RefreshReg$(_c9, \"CommentListItem\");\n$RefreshReg$(_c10, \"CommentListItemStateWarnings\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c11, _c12;\n$RefreshReg$(_c11, \"CommentListItem\");\n$RefreshReg$(_c12, \"CommentListItemStateWarnings\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-list/comment-list-item.tsx\n"));

/***/ }),

/***/ "../../libs/comments/website/src/lib/comment-list/comment-list.tsx":
/*!*************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-list/comment-list.tsx ***!
  \*************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentList\": function() { return /* binding */ CommentList; },\n/* harmony export */   \"CommentListActions\": function() { return /* binding */ CommentListActions; },\n/* harmony export */   \"CommentListWrapper\": function() { return /* binding */ CommentListWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/ui */ \"../../libs/ui/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var _comment_editor_write_comment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../comment-editor/write-comment */ \"../../libs/comments/website/src/lib/comment-editor/write-comment.tsx\");\n/* harmony import */ var _comment_list_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./comment-list.state */ \"../../libs/comments/website/src/lib/comment-list/comment-list.state.tsx\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\nconst CommentListWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"article\", {\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\",\n    target: \"e1eypmhk0\",\n    label: \"CommentListWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(4);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtXcml0ZUNvbW1lbnR9IGZyb20gJy4uL2NvbW1lbnQtZWRpdG9yL3dyaXRlLWNvbW1lbnQnXG5pbXBvcnQge2dldFN0YXRlRm9yRWRpdG9yfSBmcm9tICcuL2NvbW1lbnQtbGlzdC5zdGF0ZSdcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0V3JhcHBlciA9IHN0eWxlZCgnYXJ0aWNsZScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoNCl9O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBgXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdCA9ICh7XG4gIGRhdGEsXG4gIGxvYWRpbmcsXG4gIGVycm9yLFxuICBjaGFsbGVuZ2UsXG4gIGNsYXNzTmFtZSxcbiAgbWF4Q29tbWVudExlbmd0aCxcbiAgYW5vbnltb3VzQ2FuQ29tbWVudCxcbiAgYW5vbnltb3VzQ2FuUmF0ZSxcbiAgdXNlckNhbkVkaXQsXG4gIGFkZCxcbiAgb25BZGRDb21tZW50LFxuICBlZGl0LFxuICBvbkVkaXRDb21tZW50LFxuICBvcGVuRWRpdG9yc1N0YXRlOiBbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXVxufTogQnVpbGRlckNvbW1lbnRMaXN0UHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIENvbW1lbnRMaXN0SXRlbSxcbiAgICBlbGVtZW50czoge0FsZXJ0fVxuICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKVxuICBjb25zdCB7aGFzVXNlcn0gPSB1c2VVc2VyKClcblxuICBjb25zdCBzaG93UmVwbHkgPSBnZXRTdGF0ZUZvckVkaXRvcihvcGVuV3JpdGVDb21tZW50cykoJ2FkZCcsIG51bGwpXG4gIGNvbnN0IGNhblJlcGx5ID0gYW5vbnltb3VzQ2FuQ29tbWVudCB8fCBoYXNVc2VyXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudExpc3RXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIHshbG9hZGluZyAmJiAhZXJyb3IgJiYgIWRhdGE/LmNvbW1lbnRzLmxlbmd0aCAmJiAoXG4gICAgICAgIDxBbGVydCBzZXZlcml0eT1cImluZm9cIj5LZWluZSBLb21tZW50YXJlIHZvcmhhbmRlbi48L0FsZXJ0PlxuICAgICAgKX1cblxuICAgICAge2Vycm9yICYmIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCI+e2Vycm9yLm1lc3NhZ2V9PC9BbGVydD59XG5cbiAgICAgIDxDb21tZW50TGlzdEFjdGlvbnM+XG4gICAgICAgIHtjYW5SZXBseSAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgc3RhcnRJY29uPXs8TWRGb3J1bSAvPn1cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvcGVuJyxcbiAgICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0+XG4gICAgICAgICAgICBKZXR6dCBNaXRyZWRlblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9Db21tZW50TGlzdEFjdGlvbnM+XG5cbiAgICAgIHtzaG93UmVwbHkgJiYgKFxuICAgICAgICA8V3JpdGVDb21tZW50XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVycm9yPXthZGQuZXJyb3J9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXX1cbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBhZGQ9e2FkZH1cbiAgICAgICAgICBvbkFkZENvbW1lbnQ9e29uQWRkQ29tbWVudH1cbiAgICAgICAgICBlZGl0PXtlZGl0fVxuICAgICAgICAgIG9uRWRpdENvbW1lbnQ9e29uRWRpdENvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuQ29tbWVudD17YW5vbnltb3VzQ2FuQ29tbWVudH1cbiAgICAgICAgICBhbm9ueW1vdXNDYW5SYXRlPXthbm9ueW1vdXNDYW5SYXRlfVxuICAgICAgICAgIHVzZXJDYW5FZGl0PXt1c2VyQ2FuRWRpdH1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIGNoaWxkcmVuPXsoY29tbWVudC5jaGlsZHJlbiBhcyBDb21tZW50W10pID8/IFtdfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9Db21tZW50TGlzdFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTa0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c = CommentListWrapper;\nconst CommentListActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\",\n    target: \"e1eypmhk1\",\n    label: \"CommentListActions\"\n})(\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCIsInNvdXJjZXMiOlsiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3N0eWxlZH0gZnJvbSAnQG11aS9tYXRlcmlhbCdcbmltcG9ydCB7dXNlVXNlcn0gZnJvbSAnQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlJ1xuaW1wb3J0IHtCdXR0b259IGZyb20gJ0B3ZXB1Ymxpc2gvdWknXG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJ0B3ZXB1Ymxpc2gvd2Vic2l0ZS9hcGknXG5pbXBvcnQge0J1aWxkZXJDb21tZW50TGlzdFByb3BzLCB1c2VXZWJzaXRlQnVpbGRlcn0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2J1aWxkZXInXG5pbXBvcnQge01kRm9ydW19IGZyb20gJ3JlYWN0LWljb25zL21kJ1xuaW1wb3J0IHtXcml0ZUNvbW1lbnR9IGZyb20gJy4uL2NvbW1lbnQtZWRpdG9yL3dyaXRlLWNvbW1lbnQnXG5pbXBvcnQge2dldFN0YXRlRm9yRWRpdG9yfSBmcm9tICcuL2NvbW1lbnQtbGlzdC5zdGF0ZSdcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0V3JhcHBlciA9IHN0eWxlZCgnYXJ0aWNsZScpYFxuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6ICR7KHt0aGVtZX0pID0+IHRoZW1lLnNwYWNpbmcoNCl9O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBgXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdCA9ICh7XG4gIGRhdGEsXG4gIGxvYWRpbmcsXG4gIGVycm9yLFxuICBjaGFsbGVuZ2UsXG4gIGNsYXNzTmFtZSxcbiAgbWF4Q29tbWVudExlbmd0aCxcbiAgYW5vbnltb3VzQ2FuQ29tbWVudCxcbiAgYW5vbnltb3VzQ2FuUmF0ZSxcbiAgdXNlckNhbkVkaXQsXG4gIGFkZCxcbiAgb25BZGRDb21tZW50LFxuICBlZGl0LFxuICBvbkVkaXRDb21tZW50LFxuICBvcGVuRWRpdG9yc1N0YXRlOiBbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXVxufTogQnVpbGRlckNvbW1lbnRMaXN0UHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIENvbW1lbnRMaXN0SXRlbSxcbiAgICBlbGVtZW50czoge0FsZXJ0fVxuICB9ID0gdXNlV2Vic2l0ZUJ1aWxkZXIoKVxuICBjb25zdCB7aGFzVXNlcn0gPSB1c2VVc2VyKClcblxuICBjb25zdCBzaG93UmVwbHkgPSBnZXRTdGF0ZUZvckVkaXRvcihvcGVuV3JpdGVDb21tZW50cykoJ2FkZCcsIG51bGwpXG4gIGNvbnN0IGNhblJlcGx5ID0gYW5vbnltb3VzQ2FuQ29tbWVudCB8fCBoYXNVc2VyXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudExpc3RXcmFwcGVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgIHshbG9hZGluZyAmJiAhZXJyb3IgJiYgIWRhdGE/LmNvbW1lbnRzLmxlbmd0aCAmJiAoXG4gICAgICAgIDxBbGVydCBzZXZlcml0eT1cImluZm9cIj5LZWluZSBLb21tZW50YXJlIHZvcmhhbmRlbi48L0FsZXJ0PlxuICAgICAgKX1cblxuICAgICAge2Vycm9yICYmIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCI+e2Vycm9yLm1lc3NhZ2V9PC9BbGVydD59XG5cbiAgICAgIDxDb21tZW50TGlzdEFjdGlvbnM+XG4gICAgICAgIHtjYW5SZXBseSAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgc3RhcnRJY29uPXs8TWRGb3J1bSAvPn1cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvcGVuJyxcbiAgICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0+XG4gICAgICAgICAgICBKZXR6dCBNaXRyZWRlblxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9Db21tZW50TGlzdEFjdGlvbnM+XG5cbiAgICAgIHtzaG93UmVwbHkgJiYgKFxuICAgICAgICA8V3JpdGVDb21tZW50XG4gICAgICAgICAgY2hhbGxlbmdlPXtjaGFsbGVuZ2V9XG4gICAgICAgICAgbWF4Q29tbWVudExlbmd0aD17bWF4Q29tbWVudExlbmd0aH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgICAgICAgY29tbWVudElkOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBvblN1Ym1pdD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVycm9yPXthZGQuZXJyb3J9XG4gICAgICAgICAgbG9hZGluZz17YWRkLmxvYWRpbmd9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YT8uY29tbWVudHM/Lm1hcChjb21tZW50ID0+IChcbiAgICAgICAgPENvbW1lbnRMaXN0SXRlbVxuICAgICAgICAgIGtleT17Y29tbWVudC5pZH1cbiAgICAgICAgICB7Li4uY29tbWVudH1cbiAgICAgICAgICBvcGVuRWRpdG9yc1N0YXRlPXtbb3BlbldyaXRlQ29tbWVudHMsIGRpc3BhdGNoXX1cbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBhZGQ9e2FkZH1cbiAgICAgICAgICBvbkFkZENvbW1lbnQ9e29uQWRkQ29tbWVudH1cbiAgICAgICAgICBlZGl0PXtlZGl0fVxuICAgICAgICAgIG9uRWRpdENvbW1lbnQ9e29uRWRpdENvbW1lbnR9XG4gICAgICAgICAgYW5vbnltb3VzQ2FuQ29tbWVudD17YW5vbnltb3VzQ2FuQ29tbWVudH1cbiAgICAgICAgICBhbm9ueW1vdXNDYW5SYXRlPXthbm9ueW1vdXNDYW5SYXRlfVxuICAgICAgICAgIHVzZXJDYW5FZGl0PXt1c2VyQ2FuRWRpdH1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIGNoaWxkcmVuPXsoY29tbWVudC5jaGlsZHJlbiBhcyBDb21tZW50W10pID8/IFtdfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9Db21tZW50TGlzdFdyYXBwZXI+XG4gIClcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFja0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentListActions;\nconst CommentList = (param)=>{\n    _s();\n    let { data , loading , error , challenge , className , maxCommentLength , anonymousCanComment , anonymousCanRate , userCanEdit , add , onAddComment , edit , onEditComment , openEditorsState: [openWriteComments, dispatch]  } = param;\n    var _data_comments;\n    _s1();\n    const { CommentListItem , elements: { Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser)();\n    const showReply = (0,_comment_list_state__WEBPACK_IMPORTED_MODULE_4__.getStateForEditor)(openWriteComments)(\"add\", null);\n    const canReply = anonymousCanComment || hasUser;\n    var _comment_children;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListWrapper, {\n        className: className,\n        children: [\n            !loading && !error && !(data === null || data === void 0 ? void 0 : data.comments.length) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Alert, {\n                severity: \"info\",\n                children: \"Keine Kommentare vorhanden.\"\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 45,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 48,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListActions, {\n                children: canReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_wepublish_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n                    startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_7__.MdForum, {}, void 0, false, void 0, void 0),\n                    variant: \"text\",\n                    onClick: ()=>dispatch({\n                            type: \"add\",\n                            action: \"open\",\n                            commentId: null\n                        }),\n                    children: \"Jetzt Mitreden\"\n                }, void 0, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 52,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 50,\n                columnNumber: 7\n            }, undefined),\n            showReply && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(_comment_editor_write_comment__WEBPACK_IMPORTED_MODULE_3__.WriteComment, {\n                challenge: challenge,\n                maxCommentLength: maxCommentLength,\n                onCancel: ()=>dispatch({\n                        type: \"add\",\n                        action: \"close\",\n                        commentId: null\n                    }),\n                onSubmit: onAddComment,\n                error: add.error,\n                loading: add.loading\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                lineNumber: 68,\n                columnNumber: 9\n            }, undefined),\n            data === null || data === void 0 ? void 0 : (_data_comments = data.comments) === null || _data_comments === void 0 ? void 0 : _data_comments.map((comment)=>/*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxDEV)(CommentListItem, {\n                    ...comment,\n                    openEditorsState: [\n                        openWriteComments,\n                        dispatch\n                    ],\n                    challenge: challenge,\n                    add: add,\n                    onAddComment: onAddComment,\n                    edit: edit,\n                    onEditComment: onEditComment,\n                    anonymousCanComment: anonymousCanComment,\n                    anonymousCanRate: anonymousCanRate,\n                    userCanEdit: userCanEdit,\n                    maxCommentLength: maxCommentLength,\n                    children: (_comment_children = comment.children) !== null && _comment_children !== void 0 ? _comment_children : []\n                }, comment.id, false, {\n                    fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n                    lineNumber: 85,\n                    columnNumber: 9\n                }, undefined))\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-list/comment-list.tsx\",\n        lineNumber: 43,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentList, \"LE3DKG0bYLJRy4rBD+UvZEygeNI=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c3 = CommentList;\n_s1(CommentList, \"lJHe4oTKl5CcRCpSGvovjzhBJO4=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_2__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_0__.useUser\n    ];\n});\n_c2 = CommentList;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"CommentListWrapper\");\n$RefreshReg$(_c1, \"CommentListActions\");\n$RefreshReg$(_c2, \"CommentList\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c3;\n$RefreshReg$(_c3, \"CommentList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1saXN0L2NvbW1lbnQtbGlzdC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0M7QUFDcUI7QUFDckI7QUFFaUQ7QUFDL0M7QUFDc0I7QUFDTjtBQUUvQyxNQUFNTyxxQkFBQUEsV0FBQUEsR0FBcUJQLHFEQUFNQSxDQUFDOzs7Ozt3QkFFaEMsQ0FBQVEsUUFBYUM7UUFBWixFQUFDQSxNQUFBQSxFQUFNLEdBQUFEO1dBQUtDLE1BQU1DLE9BQU8sQ0FBQztBQUFDLDhwNEJBQ3BDO0tBSFlIO0FBS04sTUFBTUkscUJBQUFBLFdBQUFBLEdBQXFCWCxxREFBTUEsQ0FBQzs7Ozs7NnA0QkFBUTtNQUFwQ1c7QUFFTixNQUFNQyxjQUFjLENBQUFKLFFBZUk7O1FBZkgsRUFDMUJLLEtBQUFBLEVBQ0FDLFFBQUFBLEVBQ0FDLE1BQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLGlCQUFBQSxFQUNBQyxvQkFBQUEsRUFDQUMsaUJBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLElBQUFBLEVBQ0FDLGFBQUFBLEVBQ0FDLEtBQUFBLEVBQ0FDLGNBQUFBLEVBQ0FDLGtCQUFrQixDQUFDQyxtQkFBbUJDLFNBQVMsR0FDdkIsR0FBQXBCO1FBb0RuQks7O0lBbkRMLE1BQU0sRUFDSmdCLGdCQUFBQSxFQUNBQyxVQUFVLEVBQUNDLE1BQUFBLEVBQU0sR0FDbEIsR0FBRzVCLDZFQUFpQkE7SUFDckIsTUFBTSxFQUFDNkIsUUFBQUEsRUFBUSxHQUFHL0IsMEVBQU9BO0lBRXpCLE1BQU1nQyxZQUFZM0Isc0VBQWlCQSxDQUFDcUIsbUJBQW1CLE9BQU8sSUFBSTtJQUNsRSxNQUFNTyxXQUFXZix1QkFBdUJhO1FBMERyQkc7SUF4RG5CLHFCQUNFQyxzRUFBQUEsQ0FBQzdCLG9CQUFBQTtRQUFtQlUsV0FBV0E7O1lBQzVCLENBQUNILFdBQVcsQ0FBQ0MsU0FBUyxDQUFDRixDQUFBQSxTQUFBQSxJQUFBQSxJQUFBQSxTQUFBQSxLQUFBQSxJQUFBQSxLQUFBQSxJQUFBQSxLQUFNd0IsUUFBUSxDQUFDQyxNQUFNLG1CQUMzQ0Ysc0VBQUFBLENBQUNMLE9BQUFBO2dCQUFNUSxVQUFTOzBCQUFPOzs7Ozs7WUFHeEJ4QixTQUFBQSxXQUFBQSxHQUFTcUIsc0VBQUFBLENBQUNMLE9BQUFBO2dCQUFNUSxVQUFTOzBCQUFTeEIsTUFBTXlCLE9BQU87Ozs7OzswQkFFaERKLHNFQUFBQSxDQUFDekIsb0JBQUFBOzBCQUNFdUIsWUFBQUEsV0FBQUEsR0FDQ0Usc0VBQUFBLENBQUNsQyxpREFBTUEsRUFBTkE7b0JBQ0N1QyxXQUFBQSxXQUFBQSxHQUFXTCxzRUFBQUEsQ0FBQ2hDLG1EQUFPQSxFQUFQQSxDQUFBQSxHQUFBQSxLQUFBQSxHQUFBQSxLQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxLQUFBQTtvQkFDWnNDLFNBQVE7b0JBQ1JDLFNBQVMsSUFDUGYsU0FBUzs0QkFDUGdCLE1BQU07NEJBQ05DLFFBQVE7NEJBQ1JDLFdBQVcsSUFBSTt3QkFDakI7OEJBQ0E7Ozs7Ozs7Ozs7O1lBTVBiLGFBQUFBLFdBQUFBLEdBQ0NHLHNFQUFBQSxDQUFDL0IsdUVBQVlBLEVBQVpBO2dCQUNDVyxXQUFXQTtnQkFDWEUsa0JBQWtCQTtnQkFDbEI2QixVQUFVLElBQ1JuQixTQUFTO3dCQUNQZ0IsTUFBTTt3QkFDTkMsUUFBUTt3QkFDUkMsV0FBVyxJQUFJO29CQUNqQjtnQkFFRkUsVUFBVXpCO2dCQUNWUixPQUFPTyxJQUFJUCxLQUFLO2dCQUNoQkQsU0FBU1EsSUFBSVIsT0FBTzs7Ozs7O1lBSXZCRCxTQUFBQSxJQUFBQSxJQUFBQSxTQUFBQSxLQUFBQSxJQUFBQSxLQUFBQSxJQUFBQSxDQUFBQSxpQkFBQUEsS0FBTXdCLFFBQVEsY0FBZHhCLG1CQUFBQSxLQUFBQSxJQUFBQSxLQUFBQSxJQUFBQSxlQUFnQm9DLEdBQUFBLENBQUlkLENBQUFBLFVBQUFBLFdBQUFBLEdBQ25CQyxzRUFBQUEsQ0FBQ1AsaUJBQUFBO29CQUVFLEdBQUdNLE9BQU87b0JBQ1hULGtCQUFrQjt3QkFBQ0M7d0JBQW1CQztxQkFBUztvQkFDL0NaLFdBQVdBO29CQUNYTSxLQUFLQTtvQkFDTEMsY0FBY0E7b0JBQ2RDLE1BQU1BO29CQUNOQyxlQUFlQTtvQkFDZk4scUJBQXFCQTtvQkFDckJDLGtCQUFrQkE7b0JBQ2xCQyxhQUFhQTtvQkFDYkgsa0JBQWtCQTtvQkFDbEJnQyxVQUFVLENBQUNmLG9CQUFBQSxRQUFRZSxRQUFRLGNBQWhCZixzQkFBQUEsS0FBQUEsSUFBQUEsb0JBQWtDLEVBQUU7bUJBWjFDQSxRQUFRZ0IsRUFBRTs7Ozs7Ozs7Ozs7QUFpQnpCLEVBQUM7R0F0Rll2Qzs7UUFtQlBULHlFQUFpQkE7UUFDSEYsc0VBQU9BOzs7TUFwQmRXO0lBQUFBLGFBQUFBLGdDQUFBQSxLQUFBQSxFQUFBQSxXQUFBQTs7UUFtQlBULHlFQUFpQkE7UUFDSEYsc0VBQU9BOzs7TUFwQmRXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWxpc3QvY29tbWVudC1saXN0LnRzeD8zZDQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3R5bGVkfSBmcm9tICdAbXVpL21hdGVyaWFsJ1xuaW1wb3J0IHt1c2VVc2VyfSBmcm9tICdAd2VwdWJsaXNoL2F1dGhlbnRpY2F0aW9uL3dlYnNpdGUnXG5pbXBvcnQge0J1dHRvbn0gZnJvbSAnQHdlcHVibGlzaC91aSdcbmltcG9ydCB7Q29tbWVudH0gZnJvbSAnQHdlcHVibGlzaC93ZWJzaXRlL2FwaSdcbmltcG9ydCB7QnVpbGRlckNvbW1lbnRMaXN0UHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7TWRGb3J1bX0gZnJvbSAncmVhY3QtaWNvbnMvbWQnXG5pbXBvcnQge1dyaXRlQ29tbWVudH0gZnJvbSAnLi4vY29tbWVudC1lZGl0b3Ivd3JpdGUtY29tbWVudCdcbmltcG9ydCB7Z2V0U3RhdGVGb3JFZGl0b3J9IGZyb20gJy4vY29tbWVudC1saXN0LnN0YXRlJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudExpc3RXcmFwcGVyID0gc3R5bGVkKCdhcnRpY2xlJylgXG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogJHsoe3RoZW1lfSkgPT4gdGhlbWUuc3BhY2luZyg0KX07XG5gXG5cbmV4cG9ydCBjb25zdCBDb21tZW50TGlzdEFjdGlvbnMgPSBzdHlsZWQoJ2RpdicpYGBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRMaXN0ID0gKHtcbiAgZGF0YSxcbiAgbG9hZGluZyxcbiAgZXJyb3IsXG4gIGNoYWxsZW5nZSxcbiAgY2xhc3NOYW1lLFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICBhbm9ueW1vdXNDYW5Db21tZW50LFxuICBhbm9ueW1vdXNDYW5SYXRlLFxuICB1c2VyQ2FuRWRpdCxcbiAgYWRkLFxuICBvbkFkZENvbW1lbnQsXG4gIGVkaXQsXG4gIG9uRWRpdENvbW1lbnQsXG4gIG9wZW5FZGl0b3JzU3RhdGU6IFtvcGVuV3JpdGVDb21tZW50cywgZGlzcGF0Y2hdXG59OiBCdWlsZGVyQ29tbWVudExpc3RQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgQ29tbWVudExpc3RJdGVtLFxuICAgIGVsZW1lbnRzOiB7QWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IHNob3dSZXBseSA9IGdldFN0YXRlRm9yRWRpdG9yKG9wZW5Xcml0ZUNvbW1lbnRzKSgnYWRkJywgbnVsbClcbiAgY29uc3QgY2FuUmVwbHkgPSBhbm9ueW1vdXNDYW5Db21tZW50IHx8IGhhc1VzZXJcblxuICByZXR1cm4gKFxuICAgIDxDb21tZW50TGlzdFdyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAhZGF0YT8uY29tbWVudHMubGVuZ3RoICYmIChcbiAgICAgICAgPEFsZXJ0IHNldmVyaXR5PVwiaW5mb1wiPktlaW5lIEtvbW1lbnRhcmUgdm9yaGFuZGVuLjwvQWxlcnQ+XG4gICAgICApfVxuXG4gICAgICB7ZXJyb3IgJiYgPEFsZXJ0IHNldmVyaXR5PVwiZXJyb3JcIj57ZXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cblxuICAgICAgPENvbW1lbnRMaXN0QWN0aW9ucz5cbiAgICAgICAge2NhblJlcGx5ICYmIChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICBzdGFydEljb249ezxNZEZvcnVtIC8+fVxuICAgICAgICAgICAgdmFyaWFudD1cInRleHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29wZW4nLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRJZDogbnVsbFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgIEpldHp0IE1pdHJlZGVuXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L0NvbW1lbnRMaXN0QWN0aW9ucz5cblxuICAgICAge3Nob3dSZXBseSAmJiAoXG4gICAgICAgIDxXcml0ZUNvbW1lbnRcbiAgICAgICAgICBjaGFsbGVuZ2U9e2NoYWxsZW5nZX1cbiAgICAgICAgICBtYXhDb21tZW50TGVuZ3RoPXttYXhDb21tZW50TGVuZ3RofVxuICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PlxuICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnY2xvc2UnLFxuICAgICAgICAgICAgICBjb21tZW50SWQ6IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uU3VibWl0PXtvbkFkZENvbW1lbnR9XG4gICAgICAgICAgZXJyb3I9e2FkZC5lcnJvcn1cbiAgICAgICAgICBsb2FkaW5nPXthZGQubG9hZGluZ31cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIHtkYXRhPy5jb21tZW50cz8ubWFwKGNvbW1lbnQgPT4gKFxuICAgICAgICA8Q29tbWVudExpc3RJdGVtXG4gICAgICAgICAga2V5PXtjb21tZW50LmlkfVxuICAgICAgICAgIHsuLi5jb21tZW50fVxuICAgICAgICAgIG9wZW5FZGl0b3JzU3RhdGU9e1tvcGVuV3JpdGVDb21tZW50cywgZGlzcGF0Y2hdfVxuICAgICAgICAgIGNoYWxsZW5nZT17Y2hhbGxlbmdlfVxuICAgICAgICAgIGFkZD17YWRkfVxuICAgICAgICAgIG9uQWRkQ29tbWVudD17b25BZGRDb21tZW50fVxuICAgICAgICAgIGVkaXQ9e2VkaXR9XG4gICAgICAgICAgb25FZGl0Q29tbWVudD17b25FZGl0Q29tbWVudH1cbiAgICAgICAgICBhbm9ueW1vdXNDYW5Db21tZW50PXthbm9ueW1vdXNDYW5Db21tZW50fVxuICAgICAgICAgIGFub255bW91c0NhblJhdGU9e2Fub255bW91c0NhblJhdGV9XG4gICAgICAgICAgdXNlckNhbkVkaXQ9e3VzZXJDYW5FZGl0fVxuICAgICAgICAgIG1heENvbW1lbnRMZW5ndGg9e21heENvbW1lbnRMZW5ndGh9XG4gICAgICAgICAgY2hpbGRyZW49eyhjb21tZW50LmNoaWxkcmVuIGFzIENvbW1lbnRbXSkgPz8gW119XG4gICAgICAgIC8+XG4gICAgICApKX1cbiAgICA8L0NvbW1lbnRMaXN0V3JhcHBlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbInN0eWxlZCIsInVzZVVzZXIiLCJCdXR0b24iLCJ1c2VXZWJzaXRlQnVpbGRlciIsIk1kRm9ydW0iLCJXcml0ZUNvbW1lbnQiLCJnZXRTdGF0ZUZvckVkaXRvciIsIkNvbW1lbnRMaXN0V3JhcHBlciIsInBhcmFtIiwidGhlbWUiLCJzcGFjaW5nIiwiQ29tbWVudExpc3RBY3Rpb25zIiwiQ29tbWVudExpc3QiLCJkYXRhIiwibG9hZGluZyIsImVycm9yIiwiY2hhbGxlbmdlIiwiY2xhc3NOYW1lIiwibWF4Q29tbWVudExlbmd0aCIsImFub255bW91c0NhbkNvbW1lbnQiLCJhbm9ueW1vdXNDYW5SYXRlIiwidXNlckNhbkVkaXQiLCJhZGQiLCJvbkFkZENvbW1lbnQiLCJlZGl0Iiwib25FZGl0Q29tbWVudCIsIm9wZW5FZGl0b3JzU3RhdGUiLCJvcGVuV3JpdGVDb21tZW50cyIsImRpc3BhdGNoIiwiQ29tbWVudExpc3RJdGVtIiwiZWxlbWVudHMiLCJBbGVydCIsImhhc1VzZXIiLCJzaG93UmVwbHkiLCJjYW5SZXBseSIsImNvbW1lbnQiLCJfanN4REVWIiwiY29tbWVudHMiLCJsZW5ndGgiLCJzZXZlcml0eSIsIm1lc3NhZ2UiLCJzdGFydEljb24iLCJ2YXJpYW50Iiwib25DbGljayIsInR5cGUiLCJhY3Rpb24iLCJjb21tZW50SWQiLCJvbkNhbmNlbCIsIm9uU3VibWl0IiwibWFwIiwiY2hpbGRyZW4iLCJpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-list/comment-list.tsx\n"));

/***/ })

});