"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx":
/*!*****************************************************************************!*\
  !*** ../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx ***!
  \*****************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommentEditor\": function() { return /* binding */ CommentEditor; },\n/* harmony export */   \"CommentEditorActions\": function() { return /* binding */ CommentEditorActions; },\n/* harmony export */   \"CommentEditorChallenge\": function() { return /* binding */ CommentEditorChallenge; },\n/* harmony export */   \"CommentEditorChallengeWrapper\": function() { return /* binding */ CommentEditorChallengeWrapper; },\n/* harmony export */   \"CommentEditorWrapper\": function() { return /* binding */ CommentEditorWrapper; }\n/* harmony export */ });\n/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"../../node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var _hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hookform/resolvers/zod */ \"../../node_modules/@hookform/resolvers/zod/dist/zod.mjs\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"../../node_modules/@mui/material/index.js\");\n/* harmony import */ var _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wepublish/authentication/website */ \"../../libs/authentication/website/src/index.ts\");\n/* harmony import */ var _wepublish_richtext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wepublish/richtext */ \"../../libs/richtext/src/index.ts\");\n/* harmony import */ var _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @wepublish/website/builder */ \"../../libs/website/builder/src/index.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-hook-form */ \"../../node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-icons/md */ \"../../node_modules/react-icons/md/index.esm.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"../../node_modules/zod/lib/index.mjs\");\nvar _s = $RefreshSig$();\n\nvar _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nconst CommentEditorWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"form\", {\n    target: \"e170ldgs0\",\n    label: \"CommentEditorWrapper\",\n    target: \"e170ldgs0\",\n    label: \"CommentEditorWrapper\"\n})(\"display:grid;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(2);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXQsIGZvcm1TdGF0ZSwgd2F0Y2h9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnNvbGUubG9nKHdhdGNoKCkpXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBvblN1Ym1pdCh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGV4dDogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudEVkaXRvcldyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8Q29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDpcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgICA/LnJlcGxhY2UoJyNmZmZmZmYnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCAnJylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsICcnKSA/PyAnJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICAgIG5hbWU9eydjaGFsbGVuZ2UuY2hhbGxlbmdlU29sdXRpb24nfVxuICAgICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgICAgPFRleHRGaWVsZCB7Li4uZmllbGR9IGxhYmVsPXsnQ2FwdGNoYSd9IGVycm9yPXshIWVycm9yfSBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db21tZW50RWRpdG9yQ2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIHtlcnJvciAmJiA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiPntlcnJvci5tZXNzYWdlfTwvQWxlcnQ+fVxuXG4gICAgICA8Q29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIHNpemU9XCJzbWFsbFwiIHN0YXJ0SWNvbj17PE1kU2VuZCAvPn0gZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQ29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgPC9Db21tZW50RWRpdG9yV3JhcHBlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVvQyJ9 */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeERFViBhcyBfanN4REVWIH0gZnJvbSBcIkBlbW90aW9uL3JlYWN0L2pzeC1kZXYtcnVudGltZVwiO1xudmFyIF9zID0gJFJlZnJlc2hTaWckKCk7XG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gXCJAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZFwiO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcbmltcG9ydCB7IHVzZVVzZXIgfSBmcm9tIFwiQHdlcHVibGlzaC9hdXRoZW50aWNhdGlvbi93ZWJzaXRlXCI7XG5pbXBvcnQgeyB0b1BsYWludGV4dCB9IGZyb20gXCJAd2VwdWJsaXNoL3JpY2h0ZXh0XCI7XG5pbXBvcnQgeyB1c2VXZWJzaXRlQnVpbGRlciB9IGZyb20gXCJAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlclwiO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29udHJvbGxlciwgdXNlRm9ybSB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB7IE1kU2VuZCB9IGZyb20gXCJyZWFjdC1pY29ucy9tZFwiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmV4cG9ydCBjb25zdCBDb21tZW50RWRpdG9yV3JhcHBlciA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZm9ybVwiLCB7XG4gICAgdGFyZ2V0OiBcImUxNzBsZGdzMFwiLFxuICAgIGxhYmVsOiBcIkNvbW1lbnRFZGl0b3JXcmFwcGVyXCJcbn0pKFwiZGlzcGxheTpncmlkO2dhcDpcIiwgKHBhcmFtKT0+e1xuICAgIGxldCB7IHRoZW1lICB9ID0gcGFyYW07XG4gICAgcmV0dXJuIHRoZW1lLnNwYWNpbmcoMik7XG59LCBcIjtcIiwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJsMGNuVnNhV0V2Ukc5amRXMWxiblJ6TDNkbGNIVmliR2x6YUM5c2FXSnpMMk52YlcxbGJuUnpMM2RsWW5OcGRHVXZjM0pqTDJ4cFlpOWpiMjF0Wlc1MExXVmthWFJ2Y2k5amIyMXRaVzUwTFdWa2FYUnZjaTUwYzNnaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXBkSEoxYkdsaEwwUnZZM1Z0Wlc1MGN5OTNaWEIxWW14cGMyZ3ZiR2xpY3k5amIyMXRaVzUwY3k5M1pXSnphWFJsTDNOeVl5OXNhV0l2WTI5dGJXVnVkQzFsWkdsMGIzSXZZMjl0YldWdWRDMWxaR2wwYjNJdWRITjRJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3ZW05a1VtVnpiMngyWlhKOUlHWnliMjBnSjBCb2IyOXJabTl5YlM5eVpYTnZiSFpsY25NdmVtOWtKMXh1YVcxd2IzSjBJSHR6ZEhsc1pXUjlJR1p5YjIwZ0owQnRkV2t2YldGMFpYSnBZV3duWEc1cGJYQnZjblFnZTNWelpWVnpaWEo5SUdaeWIyMGdKMEIzWlhCMVlteHBjMmd2WVhWMGFHVnVkR2xqWVhScGIyNHZkMlZpYzJsMFpTZGNibWx0Y0c5eWRDQjdkRzlRYkdGcGJuUmxlSFI5SUdaeWIyMGdKMEIzWlhCMVlteHBjMmd2Y21samFIUmxlSFFuWEc1cGJYQnZjblFnZTBKMWFXeGtaWEpEYjIxdFpXNTBSV1JwZEc5eVVISnZjSE1zSUhWelpWZGxZbk5wZEdWQ2RXbHNaR1Z5ZlNCbWNtOXRJQ2RBZDJWd2RXSnNhWE5vTDNkbFluTnBkR1V2WW5WcGJHUmxjaWRjYm1sdGNHOXlkQ0I3ZFhObFRXVnRiMzBnWm5KdmJTQW5jbVZoWTNRblhHNXBiWEJ2Y25RZ2UwTnZiblJ5YjJ4c1pYSXNJSFZ6WlVadmNtMTlJR1p5YjIwZ0ozSmxZV04wTFdodmIyc3RabTl5YlNkY2JtbHRjRzl5ZENCN1RXUlRaVzVrZlNCbWNtOXRJQ2R5WldGamRDMXBZMjl1Y3k5dFpDZGNibWx0Y0c5eWRDQjdlbjBnWm5KdmJTQW5lbTlrSjF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUTI5dGJXVnVkRVZrYVhSdmNsZHlZWEJ3WlhJZ1BTQnpkSGxzWldRb0oyWnZjbTBuS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktESXBmVHRjYm1CY2JseHVaWGh3YjNKMElHTnZibk4wSUVOdmJXMWxiblJGWkdsMGIzSkJZM1JwYjI1eklEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdhblZ6ZEdsbWVTMXpaV3htT2lCbWJHVjRMV1Z1WkR0Y2JpQWdaR2x6Y0d4aGVUb2dabXhsZUR0Y2JpQWdabXhsZUMxbWJHOTNPaUJ5YjNjZ2QzSmhjRHRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RFcGZUdGNibUJjYmx4dVpYaHdiM0owSUdOdmJuTjBJRU52YlcxbGJuUkZaR2wwYjNKRGFHRnNiR1Z1WjJWWGNtRndjR1Z5SUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1ozSnBaQzEwWlcxd2JHRjBaUzFqYjJ4MWJXNXpPaUJ0YVc1dFlYZ29iV0Y0TFdOdmJuUmxiblFzSURJd01IQjRLU0F5TURCd2VEdGNiaUFnWVd4cFoyNHRhWFJsYlhNNklHTmxiblJsY2p0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktETXBmVHRjYmlBZ2FuVnpkR2xtZVMxamIyNTBaVzUwT2lCbWJHVjRMWE4wWVhKME8xeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0YldWdWRFVmthWFJ2Y2tOb1lXeHNaVzVuWlNBOUlITjBlV3hsWkNnblpHbDJKeWxnWEc0Z0lHaGxhV2RvZERvZ01UQXdKVHRjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmx4dUlDQnpkbWNnZTF4dUlDQWdJR2hsYVdkb2REb2dNVEF3SlR0Y2JpQWdmVnh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUTI5dGJXVnVkRVZrYVhSdmNpQTlJQ2g3WEc0Z0lHTnNZWE56VG1GdFpTeGNiaUFnYjI1RFlXNWpaV3dzWEc0Z0lHOXVVM1ZpYldsMExGeHVJQ0J0WVhoRGIyMXRaVzUwVEdWdVozUm9MRnh1SUNCMGFYUnNaU3hjYmlBZ2RHVjRkQ3hjYmlBZ1kyaGhiR3hsYm1kbExGeHVJQ0JzYjJGa2FXNW5MRnh1SUNCbGNuSnZjbHh1ZlRvZ1FuVnBiR1JsY2tOdmJXMWxiblJGWkdsMGIzSlFjbTl3Y3lrZ1BUNGdlMXh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdaV3hsYldWdWRITTZJSHRVWlhoMFJtbGxiR1FzSUVKMWRIUnZiaXdnUVd4bGNuUjlYRzRnSUgwZ1BTQjFjMlZYWldKemFYUmxRblZwYkdSbGNpZ3BYRzRnSUdOdmJuTjBJSHRvWVhOVmMyVnlmU0E5SUhWelpWVnpaWElvS1Z4dVhHNGdJR052Ym5OMElHRnViMjU1Ylc5MWMxTmphR1Z0WVNBOUlIVnpaVTFsYlc4b1hHNGdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lIb3ViMkpxWldOMEtIdGNiaUFnSUNBZ0lDQWdZMjl0YldWdWREb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwTG0xaGVDaHRZWGhEYjIxdFpXNTBUR1Z1WjNSb0tTeGNiaUFnSUNBZ0lDQWdkR2wwYkdVNklIb3VjM1J5YVc1bktDa3NYRzRnSUNBZ0lDQWdJR2QxWlhOMFZYTmxjbTVoYldVNklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsT2lCNkxtOWlhbVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdZMmhoYkd4bGJtZGxVMjlzZFhScGIyNDZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1N4Y2JpQWdJQ0FnSUNBZ0lDQmphR0ZzYkdWdVoyVkpSRG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQmJiV0Y0UTI5dGJXVnVkRXhsYm1kMGFGMWNiaUFnS1Z4dVhHNGdJR052Ym5OMElHeHZaMmRsWkVsdVUyTm9aVzFoSUQwZ2RYTmxUV1Z0YnloY2JpQWdJQ0FvS1NBOVBseHVJQ0FnSUNBZ2VpNXZZbXBsWTNRb2UxeHVJQ0FnSUNBZ0lDQmpiMjF0Wlc1ME9pQjZMbk4wY21sdVp5Z3BMbTV2Ym1WdGNIUjVLQ2t1YldGNEtHMWhlRU52YlcxbGJuUk1aVzVuZEdncExGeHVJQ0FnSUNBZ0lDQjBhWFJzWlRvZ2VpNXpkSEpwYm1jb0tWeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ1cyMWhlRU52YlcxbGJuUk1aVzVuZEdoZFhHNGdJQ2xjYmx4dUlDQjBlWEJsSUVadmNtMUpibkIxZENBOUlIb3VhVzVtWlhJOGRIbHdaVzltSUd4dloyZGxaRWx1VTJOb1pXMWhQaUI4SUhvdWFXNW1aWEk4ZEhsd1pXOW1JR0Z1YjI1NWJXOTFjMU5qYUdWdFlUNWNiaUFnWTI5dWMzUWdjMk5vWlcxaElEMGdhR0Z6VlhObGNpQS9JR3h2WjJkbFpFbHVVMk5vWlcxaElEb2dZVzV2Ym5sdGIzVnpVMk5vWlcxaFhHNWNiaUFnWTI5dWMzUWdlMmhoYm1Sc1pWTjFZbTFwZEN3Z1kyOXVkSEp2YkN3Z2NtVnpaWFFzSUdadmNtMVRkR0YwWlN3Z2QyRjBZMmg5SUQwZ2RYTmxSbTl5YlR4R2IzSnRTVzV3ZFhRK0tIdGNiaUFnSUNCeVpYTnZiSFpsY2pvZ2VtOWtVbVZ6YjJ4MlpYSW9jMk5vWlcxaEtTeGNiaUFnSUNCa1pXWmhkV3gwVm1Gc2RXVnpPaUI3WEc0Z0lDQWdJQ0JqYjIxdFpXNTBPaUIwYjFCc1lXbHVkR1Y0ZENoMFpYaDBLU0EvUHlBbkp5eGNiaUFnSUNBZ0lIUnBkR3hsT2lCMGFYUnNaU0EvUHlBbkp5eGNiaUFnSUNBZ0lHZDFaWE4wVlhObGNtNWhiV1U2SUNjbkxGeHVJQ0FnSUNBZ1kyaGhiR3hsYm1kbE9pQjdYRzRnSUNBZ0lDQWdJR05vWVd4c1pXNW5aVWxFT2lCamFHRnNiR1Z1WjJVL0xtUmhkR0UvTG1Ob1lXeHNaVzVuWlM1amFHRnNiR1Z1WjJWSlJDQS9QeUFuSnl4Y2JpQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklDY25YRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNCdGIyUmxPaUFuWVd4c0oxeHVJQ0I5S1Z4dVhHNGdJR052Ym5OdmJHVXViRzluS0hkaGRHTm9LQ2twWEc1Y2JpQWdZMjl1YzNRZ2MzVmliV2wwSUQwZ2FHRnVaR3hsVTNWaWJXbDBLQ2g3WTI5dGJXVnVkQ3dnTGk0dVpHRjBZWDBwSUQwK0lIdGNiaUFnSUNCdmJsTjFZbTFwZENoN1hHNGdJQ0FnSUNBdUxpNWtZWFJoTEZ4dUlDQWdJQ0FnZEdWNGREb2dXMXh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjNCaGNtRm5jbUZ3YUNjc1hHNGdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNDZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRG9nWTI5dGJXVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnWFZ4dUlDQWdJSDBwWEc0Z0lIMHBYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UTI5dGJXVnVkRVZrYVhSdmNsZHlZWEJ3WlhJZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVjlJRzl1VTNWaWJXbDBQWHR6ZFdKdGFYUjlQbHh1SUNBZ0lDQWdleUZvWVhOVmMyVnlJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdJQ0J1WVcxbFBYc25aM1ZsYzNSVmMyVnlibUZ0WlNkOVhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdJQ0J5Wlc1a1pYSTlleWg3Wm1sbGJHUXNJR1pwWld4a1UzUmhkR1U2SUh0bGNuSnZjbjE5S1NBOVBpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5Wc2JGZHBaSFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFZ3aVJHVnBiaUJPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c5WENKT1lXMWxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdobGJIQmxjbFJsZUhROWUyVnljbTl5UHk1dFpYTnpZV2RsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdLWDFjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjNScGRHeGxKMzFjYmlBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnY21WdVpHVnlQWHNvZTJacFpXeGtMQ0JtYVdWc1pGTjBZWFJsT2lCN1pYSnliM0o5ZlNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4VVpYaDBSbWxsYkdSY2JpQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJOVhDSkhhV0lnUkdWcGJtVnRJRUpsYVhSeVlXY2daV2x1Wlc0Z1ZHbDBaV3d1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc1BWd2lWR2wwWld4Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSTlleUVoWlhKeWIzSjlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnTHo1Y2JseHVJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdibUZ0WlQxN0oyTnZiVzFsYm5RbmZWeHVJQ0FnSUNBZ0lDQmpiMjUwY205c1BYdGpiMjUwY205c2ZWeHVJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2V5NHVMbVpwWld4a2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYlhWc2RHbHNhVzVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzVjJsa2RHaGNiaUFnSUNBZ0lDQWdJQ0FnSUcxcGJsSnZkM005ZXpWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVdKbGJEMWNJa3R2YlcxbGJuUmhjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajFjSWtKbGFYUnlZV2NnZG1WeVptRnpjMlZ1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYc2hJV1Z5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWc2NHVnlWR1Y0ZEQxN1lDUjdabWxsYkdRdWRtRnNkV1V1YkdWdVozUm9mU0F2SUNSN2JXRjRRMjl0YldWdWRFeGxibWQwYUgwZ1dtVnBZMmhsYm1COVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lIc2hhR0Z6VlhObGNpQW1KaUJqYUdGc2JHVnVaMlUvTG1SaGRHRWdKaVlnS0Z4dUlDQWdJQ0FnSUNBOFEyOXRiV1Z1ZEVWa2FYUnZja05vWVd4c1pXNW5aVmR5WVhCd1pYSStYRzRnSUNBZ0lDQWdJQ0FnUEVOdmJXMWxiblJGWkdsMGIzSkRhR0ZzYkdWdVoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1QWHQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjlmYUhSdGJEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR0ZzYkdWdVoyVXVaR0YwWVM1amFHRnNiR1Z1WjJVdVkyaGhiR3hsYm1kbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9MbkpsY0d4aFkyVW9KeU5tWm1abVptWW5MQ0FuZEhKaGJuTndZWEpsYm5RbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9KM2RwWkhSb1BWd2lNakF3WENJbkxDQW5KeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0Nkb1pXbG5hSFE5WENJeU1EQmNJaWNzSUNjbktTQS9QeUFuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVYRzRnSUNBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVOWV5ZGphR0ZzYkdWdVoyVXVZMmhoYkd4bGJtZGxVMjlzZFhScGIyNG5mVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNqMTdLSHRtYVdWc1pDd2dabWxsYkdSVGRHRjBaVG9nZTJWeWNtOXlmWDBwSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pDQjdMaTR1Wm1sbGJHUjlJR3hoWW1Wc1BYc25RMkZ3ZEdOb1lTZDlJR1Z5Y205eVBYc2hJV1Z5Y205eWZTQm9aV3h3WlhKVVpYaDBQWHRsY25KdmNqOHViV1Z6YzJGblpYMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ1BDOURiMjF0Wlc1MFJXUnBkRzl5UTJoaGJHeGxibWRsVjNKaGNIQmxjajVjYmlBZ0lDQWdJQ2w5WEc1Y2JpQWdJQ0FnSUh0bGNuSnZjaUFtSmlBOFFXeGxjblFnYzJWMlpYSnBkSGs5WENKbGNuSnZjbHdpUG50bGNuSnZjaTV0WlhOellXZGxmVHd2UVd4bGNuUStmVnh1WEc0Z0lDQWdJQ0E4UTI5dGJXVnVkRVZrYVhSdmNrRmpkR2x2Ym5NK1hHNGdJQ0FnSUNBZ0lEeENkWFIwYjI0Z2RIbHdaVDFjSW5OMVltMXBkRndpSUhOcGVtVTlYQ0p6YldGc2JGd2lJSE4wWVhKMFNXTnZiajE3UEUxa1UyVnVaQ0F2UG4wZ1pHbHpZV0pzWldROWUyeHZZV1JwYm1kOVBseHVJQ0FnSUNBZ0lDQWdJRXR2YlcxbGJuUnBaWEpsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JseHVJQ0FnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lDQWdkSGx3WlQxY0luSmxjMlYwWENKY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhObGRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTmhibU5sYkNncFhHNGdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNCemFYcGxQVndpYzIxaGJHeGNJbHh1SUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5WENKMFpYaDBYQ0pjYmlBZ0lDQWdJQ0FnSUNCamIyeHZjajFjSW5ObFkyOXVaR0Z5ZVZ3aVBseHVJQ0FnSUNBZ0lDQWdJRUZpWW5KbFkyaGxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0lDQWdJRHd2UTI5dGJXVnVkRVZrYVhSdmNrRmpkR2x2Ym5NK1hHNGdJQ0FnUEM5RGIyMXRaVzUwUldScGRHOXlWM0poY0hCbGNqNWNiaUFnS1Z4dWZWeHVJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVlZ2UXlKOSAqL1wiKTtcbl9jID0gQ29tbWVudEVkaXRvcldyYXBwZXI7XG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckFjdGlvbnMgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImRpdlwiLCB7XG4gICAgdGFyZ2V0OiBcImUxNzBsZGdzMVwiLFxuICAgIGxhYmVsOiBcIkNvbW1lbnRFZGl0b3JBY3Rpb25zXCJcbn0pKFwianVzdGlmeS1zZWxmOmZsZXgtZW5kO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IHdyYXA7Z2FwOlwiLCAocGFyYW0pPT57XG4gICAgbGV0IHsgdGhlbWUgIH0gPSBwYXJhbTtcbiAgICByZXR1cm4gdGhlbWUuc3BhY2luZygxKTtcbn0sIFwiO1wiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5amIyMXRaVzUwTFdWa2FYUnZjaTlqYjIxdFpXNTBMV1ZrYVhSdmNpNTBjM2dpTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cGRISjFiR2xoTDBSdlkzVnRaVzUwY3k5M1pYQjFZbXhwYzJndmJHbGljeTlqYjIxdFpXNTBjeTkzWldKemFYUmxMM055WXk5c2FXSXZZMjl0YldWdWRDMWxaR2wwYjNJdlkyOXRiV1Z1ZEMxbFpHbDBiM0l1ZEhONElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdlbTlrVW1WemIyeDJaWEo5SUdaeWIyMGdKMEJvYjI5clptOXliUzl5WlhOdmJIWmxjbk12ZW05a0oxeHVhVzF3YjNKMElIdHpkSGxzWldSOUlHWnliMjBnSjBCdGRXa3ZiV0YwWlhKcFlXd25YRzVwYlhCdmNuUWdlM1Z6WlZWelpYSjlJR1p5YjIwZ0owQjNaWEIxWW14cGMyZ3ZZWFYwYUdWdWRHbGpZWFJwYjI0dmQyVmljMmwwWlNkY2JtbHRjRzl5ZENCN2RHOVFiR0ZwYm5SbGVIUjlJR1p5YjIwZ0owQjNaWEIxWW14cGMyZ3ZjbWxqYUhSbGVIUW5YRzVwYlhCdmNuUWdlMEoxYVd4a1pYSkRiMjF0Wlc1MFJXUnBkRzl5VUhKdmNITXNJSFZ6WlZkbFluTnBkR1ZDZFdsc1pHVnlmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM2RsWW5OcGRHVXZZblZwYkdSbGNpZGNibWx0Y0c5eWRDQjdkWE5sVFdWdGIzMGdabkp2YlNBbmNtVmhZM1FuWEc1cGJYQnZjblFnZTBOdmJuUnliMnhzWlhJc0lIVnpaVVp2Y20xOUlHWnliMjBnSjNKbFlXTjBMV2h2YjJzdFptOXliU2RjYm1sdGNHOXlkQ0I3VFdSVFpXNWtmU0JtY205dElDZHlaV0ZqZEMxcFkyOXVjeTl0WkNkY2JtbHRjRzl5ZENCN2VuMGdabkp2YlNBbmVtOWtKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0YldWdWRFVmthWFJ2Y2xkeVlYQndaWElnUFNCemRIbHNaV1FvSjJadmNtMG5LV0JjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RJcGZUdGNibUJjYmx4dVpYaHdiM0owSUdOdmJuTjBJRU52YlcxbGJuUkZaR2wwYjNKQlkzUnBiMjV6SUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ2FuVnpkR2xtZVMxelpXeG1PaUJtYkdWNExXVnVaRHRjYmlBZ1pHbHpjR3hoZVRvZ1pteGxlRHRjYmlBZ1pteGxlQzFtYkc5M09pQnliM2NnZDNKaGNEdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LREVwZlR0Y2JtQmNibHh1Wlhod2IzSjBJR052Ym5OMElFTnZiVzFsYm5SRlpHbDBiM0pEYUdGc2JHVnVaMlZYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjNKcFpDMTBaVzF3YkdGMFpTMWpiMngxYlc1ek9pQnRhVzV0WVhnb2JXRjRMV052Ym5SbGJuUXNJREl3TUhCNEtTQXlNREJ3ZUR0Y2JpQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RNcGZUdGNiaUFnYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJtYkdWNExYTjBZWEowTzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1EyOXRiV1Z1ZEVWa2FYUnZja05vWVd4c1pXNW5aU0E5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNibHh1SUNCemRtY2dlMXh1SUNBZ0lHaGxhV2RvZERvZ01UQXdKVHRjYmlBZ2ZWeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0YldWdWRFVmthWFJ2Y2lBOUlDaDdYRzRnSUdOc1lYTnpUbUZ0WlN4Y2JpQWdiMjVEWVc1alpXd3NYRzRnSUc5dVUzVmliV2wwTEZ4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb0xGeHVJQ0IwYVhSc1pTeGNiaUFnZEdWNGRDeGNiaUFnWTJoaGJHeGxibWRsTEZ4dUlDQnNiMkZrYVc1bkxGeHVJQ0JsY25KdmNseHVmVG9nUW5WcGJHUmxja052YlcxbGJuUkZaR2wwYjNKUWNtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ1pXeGxiV1Z1ZEhNNklIdFVaWGgwUm1sbGJHUXNJRUoxZEhSdmJpd2dRV3hsY25SOVhHNGdJSDBnUFNCMWMyVlhaV0p6YVhSbFFuVnBiR1JsY2lncFhHNGdJR052Ym5OMElIdG9ZWE5WYzJWeWZTQTlJSFZ6WlZWelpYSW9LVnh1WEc0Z0lHTnZibk4wSUdGdWIyNTViVzkxYzFOamFHVnRZU0E5SUhWelpVMWxiVzhvWEc0Z0lDQWdLQ2tnUFQ1Y2JpQWdJQ0FnSUhvdWIySnFaV04wS0h0Y2JpQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0Nrc1hHNGdJQ0FnSUNBZ0lHZDFaWE4wVlhObGNtNWhiV1U2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTeGNiaUFnSUNBZ0lDQWdZMmhoYkd4bGJtZGxPaUI2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJWSlJEb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOUtTeGNiaUFnSUNCYmJXRjRRMjl0YldWdWRFeGxibWQwYUYxY2JpQWdLVnh1WEc0Z0lHTnZibk4wSUd4dloyZGxaRWx1VTJOb1pXMWhJRDBnZFhObFRXVnRieWhjYmlBZ0lDQW9LU0E5UGx4dUlDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNCamIyMXRaVzUwT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDa3ViV0Y0S0cxaGVFTnZiVzFsYm5STVpXNW5kR2dwTEZ4dUlDQWdJQ0FnSUNCMGFYUnNaVG9nZWk1emRISnBibWNvS1Z4dUlDQWdJQ0FnZlNrc1hHNGdJQ0FnVzIxaGVFTnZiVzFsYm5STVpXNW5kR2hkWEc0Z0lDbGNibHh1SUNCMGVYQmxJRVp2Y20xSmJuQjFkQ0E5SUhvdWFXNW1aWEk4ZEhsd1pXOW1JR3h2WjJkbFpFbHVVMk5vWlcxaFBpQjhJSG91YVc1bVpYSThkSGx3Wlc5bUlHRnViMjU1Ylc5MWMxTmphR1Z0WVQ1Y2JpQWdZMjl1YzNRZ2MyTm9aVzFoSUQwZ2FHRnpWWE5sY2lBL0lHeHZaMmRsWkVsdVUyTm9aVzFoSURvZ1lXNXZibmx0YjNWelUyTm9aVzFoWEc1Y2JpQWdZMjl1YzNRZ2UyaGhibVJzWlZOMVltMXBkQ3dnWTI5dWRISnZiQ3dnY21WelpYUXNJR1p2Y20xVGRHRjBaU3dnZDJGMFkyaDlJRDBnZFhObFJtOXliVHhHYjNKdFNXNXdkWFErS0h0Y2JpQWdJQ0J5WlhOdmJIWmxjam9nZW05a1VtVnpiMngyWlhJb2MyTm9aVzFoS1N4Y2JpQWdJQ0JrWldaaGRXeDBWbUZzZFdWek9pQjdYRzRnSUNBZ0lDQmpiMjF0Wlc1ME9pQjBiMUJzWVdsdWRHVjRkQ2gwWlhoMEtTQS9QeUFuSnl4Y2JpQWdJQ0FnSUhScGRHeGxPaUIwYVhSc1pTQS9QeUFuSnl4Y2JpQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJQ2NuTEZ4dUlDQWdJQ0FnWTJoaGJHeGxibWRsT2lCN1hHNGdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUJqYUdGc2JHVnVaMlUvTG1SaGRHRS9MbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZKUkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsVTI5c2RYUnBiMjQ2SUNjblhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0J0YjJSbE9pQW5ZV3hzSjF4dUlDQjlLVnh1WEc0Z0lHTnZibk52YkdVdWJHOW5LSGRoZEdOb0tDa3BYRzVjYmlBZ1kyOXVjM1FnYzNWaWJXbDBJRDBnYUdGdVpHeGxVM1ZpYldsMEtDaDdZMjl0YldWdWRDd2dMaTR1WkdGMFlYMHBJRDArSUh0Y2JpQWdJQ0J2YmxOMVltMXBkQ2g3WEc0Z0lDQWdJQ0F1TGk1a1lYUmhMRnh1SUNBZ0lDQWdkR1Y0ZERvZ1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM0JoY21GbmNtRndhQ2NzWEc0Z0lDQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0NklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dZMjl0YldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lGMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdYVnh1SUNBZ0lIMHBYRzRnSUgwcFhHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThRMjl0YldWdWRFVmthWFJ2Y2xkeVlYQndaWElnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWOUlHOXVVM1ZpYldsMFBYdHpkV0p0YVhSOVBseHVJQ0FnSUNBZ2V5Rm9ZWE5WYzJWeUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblozVmxjM1JWYzJWeWJtRnRaU2Q5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUkdWcGJpQk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKM1JwZEd4bEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKSGFXSWdSR1ZwYm1WdElFSmxhWFJ5WVdjZ1pXbHVaVzRnVkdsMFpXd3VYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVZHbDBaV3hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOdmJXMWxiblFuZlZ4dUlDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxtWnBaV3hrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsc2FXNWxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmxKdmQzTTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lrdHZiVzFsYm5SaGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa0psYVhSeVlXY2dkbVZ5Wm1GemMyVnVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WUNSN1ptbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb2ZTQXZJQ1I3YldGNFEyOXRiV1Z1ZEV4bGJtZDBhSDBnV21WcFkyaGxibUI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQmphR0ZzYkdWdVoyVS9MbVJoZEdFZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4UTI5dGJXVnVkRVZrYVhSdmNrTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRU52YlcxbGJuUkZaR2wwYjNKRGFHRnNiR1Z1WjJWY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFNXNXVaWEpJVkUxTVBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOWZhSFJ0YkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJVdVpHRjBZUzVqYUdGc2JHVnVaMlV1WTJoaGJHeGxibWRsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0xuSmxjR3hoWTJVb0p5Tm1abVptWm1ZbkxDQW5kSEpoYm5Od1lYSmxiblFuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0ozZHBaSFJvUFZ3aU1qQXdYQ0luTENBbkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2RvWldsbmFIUTlYQ0l5TURCY0lpY3NJQ2NuS1NBL1B5QW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dVhHNGdJQ0FnSUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U5ZXlkamFHRnNiR1Z1WjJVdVkyaGhiR3hsYm1kbFUyOXNkWFJwYjI0bmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY2oxN0tIdG1hV1ZzWkN3Z1ptbGxiR1JUZEdGMFpUb2dlMlZ5Y205eWZYMHBJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkNCN0xpNHVabWxsYkdSOUlHeGhZbVZzUFhzblEyRndkR05vWVNkOUlHVnljbTl5UFhzaElXVnljbTl5ZlNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgwZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnUEM5RGIyMXRaVzUwUldScGRHOXlRMmhoYkd4bGJtZGxWM0poY0hCbGNqNWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJSHRsY25KdmNpQW1KaUE4UVd4bGNuUWdjMlYyWlhKcGRIazlYQ0psY25KdmNsd2lQbnRsY25KdmNpNXRaWE56WVdkbGZUd3ZRV3hsY25RK2ZWeHVYRzRnSUNBZ0lDQThRMjl0YldWdWRFVmthWFJ2Y2tGamRHbHZibk0rWEc0Z0lDQWdJQ0FnSUR4Q2RYUjBiMjRnZEhsd1pUMWNJbk4xWW0xcGRGd2lJSE5wZW1VOVhDSnpiV0ZzYkZ3aUlITjBZWEowU1dOdmJqMTdQRTFrVTJWdVpDQXZQbjBnWkdsellXSnNaV1E5ZTJ4dllXUnBibWQ5UGx4dUlDQWdJQ0FnSUNBZ0lFdHZiVzFsYm5ScFpYSmxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5KbGMyVjBYQ0pjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOaGJtTmxiQ2dwWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbFBWd2ljMjFoYkd4Y0lseHVJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTlYQ0owWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMWNJbk5sWTI5dVpHRnllVndpUGx4dUlDQWdJQ0FnSUNBZ0lFRmlZbkpsWTJobGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lEd3ZRMjl0YldWdWRFVmthWFJ2Y2tGamRHbHZibk0rWEc0Z0lDQWdQQzlEYjIxdFpXNTBSV1JwZEc5eVYzSmhjSEJsY2o1Y2JpQWdLVnh1ZlZ4dUlsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFXVnZReUo5ICovXCIpO1xuX2MxID0gQ29tbWVudEVkaXRvckFjdGlvbnM7XG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXIgPSAvKiNfX1BVUkVfXyovIHN0eWxlZChcImRpdlwiLCB7XG4gICAgdGFyZ2V0OiBcImUxNzBsZGdzMlwiLFxuICAgIGxhYmVsOiBcIkNvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyXCJcbn0pKFwiZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczptaW5tYXgobWF4LWNvbnRlbnQsMjAwcHgpIDIwMHB4O2FsaWduLWl0ZW1zOmNlbnRlcjtnYXA6XCIsIChwYXJhbSk9PntcbiAgICBsZXQgeyB0aGVtZSAgfSA9IHBhcmFtO1xuICAgIHJldHVybiB0aGVtZS5zcGFjaW5nKDMpO1xufSwgXCI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7XCIsIFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwybDBjblZzYVdFdlJHOWpkVzFsYm5SekwzZGxjSFZpYkdsemFDOXNhV0p6TDJOdmJXMWxiblJ6TDNkbFluTnBkR1V2YzNKakwyeHBZaTlqYjIxdFpXNTBMV1ZrYVhSdmNpOWpiMjF0Wlc1MExXVmthWFJ2Y2k1MGMzZ2lMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTlwZEhKMWJHbGhMMFJ2WTNWdFpXNTBjeTkzWlhCMVlteHBjMmd2YkdsaWN5OWpiMjF0Wlc1MGN5OTNaV0p6YVhSbEwzTnlZeTlzYVdJdlkyOXRiV1Z1ZEMxbFpHbDBiM0l2WTI5dGJXVnVkQzFsWkdsMGIzSXVkSE40SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN2VtOWtVbVZ6YjJ4MlpYSjlJR1p5YjIwZ0owQm9iMjlyWm05eWJTOXlaWE52YkhabGNuTXZlbTlrSjF4dWFXMXdiM0owSUh0emRIbHNaV1I5SUdaeWIyMGdKMEJ0ZFdrdmJXRjBaWEpwWVd3blhHNXBiWEJ2Y25RZ2UzVnpaVlZ6WlhKOUlHWnliMjBnSjBCM1pYQjFZbXhwYzJndllYVjBhR1Z1ZEdsallYUnBiMjR2ZDJWaWMybDBaU2RjYm1sdGNHOXlkQ0I3ZEc5UWJHRnBiblJsZUhSOUlHWnliMjBnSjBCM1pYQjFZbXhwYzJndmNtbGphSFJsZUhRblhHNXBiWEJ2Y25RZ2UwSjFhV3hrWlhKRGIyMXRaVzUwUldScGRHOXlVSEp2Y0hNc0lIVnpaVmRsWW5OcGRHVkNkV2xzWkdWeWZTQm1jbTl0SUNkQWQyVndkV0pzYVhOb0wzZGxZbk5wZEdVdlluVnBiR1JsY2lkY2JtbHRjRzl5ZENCN2RYTmxUV1Z0YjMwZ1puSnZiU0FuY21WaFkzUW5YRzVwYlhCdmNuUWdlME52Ym5SeWIyeHNaWElzSUhWelpVWnZjbTE5SUdaeWIyMGdKM0psWVdOMExXaHZiMnN0Wm05eWJTZGNibWx0Y0c5eWRDQjdUV1JUWlc1a2ZTQm1jbTl0SUNkeVpXRmpkQzFwWTI5dWN5OXRaQ2RjYm1sdGNHOXlkQ0I3ZW4wZ1puSnZiU0FuZW05a0oxeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1EyOXRiV1Z1ZEVWa2FYUnZjbGR5WVhCd1pYSWdQU0J6ZEhsc1pXUW9KMlp2Y20wbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRElwZlR0Y2JtQmNibHh1Wlhod2IzSjBJR052Ym5OMElFTnZiVzFsYm5SRlpHbDBiM0pCWTNScGIyNXpJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnYW5WemRHbG1lUzF6Wld4bU9pQm1iR1Y0TFdWdVpEdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnWm14bGVDMW1iRzkzT2lCeWIzY2dkM0poY0R0Y2JpQWdaMkZ3T2lBa2V5aDdkR2hsYldWOUtTQTlQaUIwYUdWdFpTNXpjR0ZqYVc1bktERXBmVHRjYm1CY2JseHVaWGh3YjNKMElHTnZibk4wSUVOdmJXMWxiblJGWkdsMGIzSkRhR0ZzYkdWdVoyVlhjbUZ3Y0dWeUlEMGdjM1I1YkdWa0tDZGthWFluS1dCY2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JpQWdaM0pwWkMxMFpXMXdiR0YwWlMxamIyeDFiVzV6T2lCdGFXNXRZWGdvYldGNExXTnZiblJsYm5Rc0lESXdNSEI0S1NBeU1EQndlRHRjYmlBZ1lXeHBaMjR0YVhSbGJYTTZJR05sYm5SbGNqdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LRE1wZlR0Y2JpQWdhblZ6ZEdsbWVTMWpiMjUwWlc1ME9pQm1iR1Y0TFhOMFlYSjBPMXh1WUZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUTI5dGJXVnVkRVZrYVhSdmNrTm9ZV3hzWlc1blpTQTlJSE4wZVd4bFpDZ25aR2wySnlsZ1hHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y2JpQWdaR2x6Y0d4aGVUb2daM0pwWkR0Y2JseHVJQ0J6ZG1jZ2UxeHVJQ0FnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnZlZ4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1EyOXRiV1Z1ZEVWa2FYUnZjaUE5SUNoN1hHNGdJR05zWVhOelRtRnRaU3hjYmlBZ2IyNURZVzVqWld3c1hHNGdJRzl1VTNWaWJXbDBMRnh1SUNCdFlYaERiMjF0Wlc1MFRHVnVaM1JvTEZ4dUlDQjBhWFJzWlN4Y2JpQWdkR1Y0ZEN4Y2JpQWdZMmhoYkd4bGJtZGxMRnh1SUNCc2IyRmthVzVuTEZ4dUlDQmxjbkp2Y2x4dWZUb2dRblZwYkdSbGNrTnZiVzFsYm5SRlpHbDBiM0pRY205d2N5a2dQVDRnZTF4dUlDQmpiMjV6ZENCN1hHNGdJQ0FnWld4bGJXVnVkSE02SUh0VVpYaDBSbWxsYkdRc0lFSjFkSFJ2Yml3Z1FXeGxjblI5WEc0Z0lIMGdQU0IxYzJWWFpXSnphWFJsUW5WcGJHUmxjaWdwWEc0Z0lHTnZibk4wSUh0b1lYTlZjMlZ5ZlNBOUlIVnpaVlZ6WlhJb0tWeHVYRzRnSUdOdmJuTjBJR0Z1YjI1NWJXOTFjMU5qYUdWdFlTQTlJSFZ6WlUxbGJXOG9YRzRnSUNBZ0tDa2dQVDVjYmlBZ0lDQWdJSG91YjJKcVpXTjBLSHRjYmlBZ0lDQWdJQ0FnWTI5dGJXVnVkRG9nZWk1emRISnBibWNvS1M1dWIyNWxiWEIwZVNncExtMWhlQ2h0WVhoRGIyMXRaVzUwVEdWdVozUm9LU3hjYmlBZ0lDQWdJQ0FnZEdsMGJHVTZJSG91YzNSeWFXNW5LQ2tzWEc0Z0lDQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJSG91YzNSeWFXNW5LQ2t1Ym05dVpXMXdkSGtvS1N4Y2JpQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbE9pQjZMbTlpYW1WamRDaDdYRzRnSUNBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsVTI5c2RYUnBiMjQ2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTeGNiaUFnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlZKUkRvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0JiYldGNFEyOXRiV1Z1ZEV4bGJtZDBhRjFjYmlBZ0tWeHVYRzRnSUdOdmJuTjBJR3h2WjJkbFpFbHVVMk5vWlcxaElEMGdkWE5sVFdWdGJ5aGNiaUFnSUNBb0tTQTlQbHh1SUNBZ0lDQWdlaTV2WW1wbFkzUW9lMXh1SUNBZ0lDQWdJQ0JqYjIxdFpXNTBPaUI2TG5OMGNtbHVaeWdwTG01dmJtVnRjSFI1S0NrdWJXRjRLRzFoZUVOdmJXMWxiblJNWlc1bmRHZ3BMRnh1SUNBZ0lDQWdJQ0IwYVhSc1pUb2dlaTV6ZEhKcGJtY29LVnh1SUNBZ0lDQWdmU2tzWEc0Z0lDQWdXMjFoZUVOdmJXMWxiblJNWlc1bmRHaGRYRzRnSUNsY2JseHVJQ0IwZVhCbElFWnZjbTFKYm5CMWRDQTlJSG91YVc1bVpYSThkSGx3Wlc5bUlHeHZaMmRsWkVsdVUyTm9aVzFoUGlCOElIb3VhVzVtWlhJOGRIbHdaVzltSUdGdWIyNTViVzkxYzFOamFHVnRZVDVjYmlBZ1kyOXVjM1FnYzJOb1pXMWhJRDBnYUdGelZYTmxjaUEvSUd4dloyZGxaRWx1VTJOb1pXMWhJRG9nWVc1dmJubHRiM1Z6VTJOb1pXMWhYRzVjYmlBZ1kyOXVjM1FnZTJoaGJtUnNaVk4xWW0xcGRDd2dZMjl1ZEhKdmJDd2djbVZ6WlhRc0lHWnZjbTFUZEdGMFpTd2dkMkYwWTJoOUlEMGdkWE5sUm05eWJUeEdiM0p0U1c1d2RYUStLSHRjYmlBZ0lDQnlaWE52YkhabGNqb2dlbTlrVW1WemIyeDJaWElvYzJOb1pXMWhLU3hjYmlBZ0lDQmtaV1poZFd4MFZtRnNkV1Z6T2lCN1hHNGdJQ0FnSUNCamIyMXRaVzUwT2lCMGIxQnNZV2x1ZEdWNGRDaDBaWGgwS1NBL1B5QW5KeXhjYmlBZ0lDQWdJSFJwZEd4bE9pQjBhWFJzWlNBL1B5QW5KeXhjYmlBZ0lDQWdJR2QxWlhOMFZYTmxjbTVoYldVNklDY25MRnh1SUNBZ0lDQWdZMmhoYkd4bGJtZGxPaUI3WEc0Z0lDQWdJQ0FnSUdOb1lXeHNaVzVuWlVsRU9pQmphR0ZzYkdWdVoyVS9MbVJoZEdFL0xtTm9ZV3hzWlc1blpTNWphR0ZzYkdWdVoyVkpSQ0EvUHlBbkp5eGNiaUFnSUNBZ0lDQWdZMmhoYkd4bGJtZGxVMjlzZFhScGIyNDZJQ2NuWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmlBZ0lDQnRiMlJsT2lBbllXeHNKMXh1SUNCOUtWeHVYRzRnSUdOdmJuTnZiR1V1Ykc5bktIZGhkR05vS0NrcFhHNWNiaUFnWTI5dWMzUWdjM1ZpYldsMElEMGdhR0Z1Wkd4bFUzVmliV2wwS0NoN1kyOXRiV1Z1ZEN3Z0xpNHVaR0YwWVgwcElEMCtJSHRjYmlBZ0lDQnZibE4xWW0xcGRDaDdYRzRnSUNBZ0lDQXVMaTVrWVhSaExGeHVJQ0FnSUNBZ2RHVjRkRG9nVzF4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozQmhjbUZuY21Gd2FDY3NYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUnlaVzQ2SUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ1kyOXRiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1hWeHVJQ0FnSUgwcFhHNGdJSDBwWEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFEyOXRiV1Z1ZEVWa2FYUnZjbGR5WVhCd1pYSWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Y5SUc5dVUzVmliV2wwUFh0emRXSnRhWFI5UGx4dUlDQWdJQ0FnZXlGb1lYTlZjMlZ5SUNZbUlDaGNiaUFnSUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnSUNCdVlXMWxQWHNuWjNWbGMzUlZjMlZ5Ym1GdFpTZDlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEVacFpXeGtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puVnNiRmRwWkhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBWd2lSR1ZwYmlCT1lXMWxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld3OVhDSk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSTlleUVoWlhKeWIzSjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxiSEJsY2xSbGVIUTllMlZ5Y205eVB5NXRaWE56WVdkbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnS1gxY2JseHVJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdibUZ0WlQxN0ozUnBkR3hsSjMxY2JpQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5UFhzb2UyWnBaV3hrTENCbWFXVnNaRk4wWVhSbE9pQjdaWEp5YjNKOWZTa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwUm1sbGJHUmNiaUFnSUNBZ0lDQWdJQ0FnSUhzdUxpNW1hV1ZzWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4WGFXUjBhRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTlYQ0pIYVdJZ1JHVnBibVZ0SUVKbGFYUnlZV2NnWldsdVpXNGdWR2wwWld3dVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUd4aFltVnNQVndpVkdsMFpXeGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV3h3WlhKVVpYaDBQWHRsY25KdmNqOHViV1Z6YzJGblpYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0x6NWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKMk52YlcxbGJuUW5mVnh1SUNBZ0lDQWdJQ0JqYjI1MGNtOXNQWHRqYjI1MGNtOXNmVnh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSTlleWg3Wm1sbGJHUXNJR1pwWld4a1UzUmhkR1U2SUh0bGNuSnZjbjE5S1NBOVBpQW9YRzRnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdleTR1TG1acFpXeGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JYVnNkR2xzYVc1bFhHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXBibEp2ZDNNOWV6VjlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lXSmxiRDFjSWt0dmJXMWxiblJoY2x3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxY0lrSmxhWFJ5WVdjZ2RtVnlabUZ6YzJWdVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlQWHNoSVdWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnNjR1Z5VkdWNGREMTdZQ1I3Wm1sbGJHUXVkbUZzZFdVdWJHVnVaM1JvZlNBdklDUjdiV0Y0UTI5dGJXVnVkRXhsYm1kMGFIMGdXbVZwWTJobGJtQjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDOCtYRzVjYmlBZ0lDQWdJSHNoYUdGelZYTmxjaUFtSmlCamFHRnNiR1Z1WjJVL0xtUmhkR0VnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThRMjl0YldWdWRFVmthWFJ2Y2tOb1lXeHNaVzVuWlZkeVlYQndaWEkrWEc0Z0lDQWdJQ0FnSUNBZ1BFTnZiVzFsYm5SRlpHbDBiM0pEYUdGc2JHVnVaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNUFh0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5ZmFIUnRiRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdGc2JHVnVaMlV1WkdGMFlTNWphR0ZzYkdWdVoyVXVZMmhoYkd4bGJtZGxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvTG5KbGNHeGhZMlVvSnlObVptWm1abVluTENBbmRISmhibk53WVhKbGJuUW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvSjNkcFpIUm9QVndpTWpBd1hDSW5MQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDZG9aV2xuYUhROVhDSXlNREJjSWljc0lDY25LU0EvUHlBbkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1WEc0Z0lDQWdJQ0FnSUNBZ1BFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTlleWRqYUdGc2JHVnVaMlV1WTJoaGJHeGxibWRsVTI5c2RYUnBiMjRuZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjajE3S0h0bWFXVnNaQ3dnWm1sbGJHUlRkR0YwWlRvZ2UyVnljbTl5ZlgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaQ0I3TGk0dVptbGxiR1I5SUd4aFltVnNQWHNuUTJGd2RHTm9ZU2Q5SUdWeWNtOXlQWHNoSVdWeWNtOXlmU0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDBnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdQQzlEYjIxdFpXNTBSV1JwZEc5eVEyaGhiR3hsYm1kbFYzSmhjSEJsY2o1Y2JpQWdJQ0FnSUNsOVhHNWNiaUFnSUNBZ0lIdGxjbkp2Y2lBbUppQThRV3hsY25RZ2MyVjJaWEpwZEhrOVhDSmxjbkp2Y2x3aVBudGxjbkp2Y2k1dFpYTnpZV2RsZlR3dlFXeGxjblErZlZ4dVhHNGdJQ0FnSUNBOFEyOXRiV1Z1ZEVWa2FYUnZja0ZqZEdsdmJuTStYRzRnSUNBZ0lDQWdJRHhDZFhSMGIyNGdkSGx3WlQxY0luTjFZbTFwZEZ3aUlITnBlbVU5WENKemJXRnNiRndpSUhOMFlYSjBTV052YmoxN1BFMWtVMlZ1WkNBdlBuMGdaR2x6WVdKc1pXUTllMnh2WVdScGJtZDlQbHh1SUNBZ0lDQWdJQ0FnSUV0dmJXMWxiblJwWlhKbGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkpsYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJDZ3BYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFZ3aWMyMWhiR3hjSWx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROVhDSjBaWGgwWENKY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0luTmxZMjl1WkdGeWVWd2lQbHh1SUNBZ0lDQWdJQ0FnSUVGaVluSmxZMmhsYmx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlEyOXRiV1Z1ZEVWa2FYUnZja0ZqZEdsdmJuTStYRzRnSUNBZ1BDOURiMjF0Wlc1MFJXUnBkRzl5VjNKaGNIQmxjajVjYmlBZ0tWeHVmVnh1SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVhOQ05rTWlmUT09ICovXCIpO1xuX2MyID0gQ29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI7XG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IC8qI19fUFVSRV9fKi8gc3R5bGVkKFwiZGl2XCIsIHtcbiAgICB0YXJnZXQ6IFwiZTE3MGxkZ3MzXCIsXG4gICAgbGFiZWw6IFwiQ29tbWVudEVkaXRvckNoYWxsZW5nZVwiXG59KShcImhlaWdodDoxMDAlO2Rpc3BsYXk6Z3JpZDtzdmd7aGVpZ2h0OjEwMCU7fVwiLCBcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMmwwY25Wc2FXRXZSRzlqZFcxbGJuUnpMM2RsY0hWaWJHbHphQzlzYVdKekwyTnZiVzFsYm5SekwzZGxZbk5wZEdVdmMzSmpMMnhwWWk5amIyMXRaVzUwTFdWa2FYUnZjaTlqYjIxdFpXNTBMV1ZrYVhSdmNpNTBjM2dpTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5cGRISjFiR2xoTDBSdlkzVnRaVzUwY3k5M1pYQjFZbXhwYzJndmJHbGljeTlqYjIxdFpXNTBjeTkzWldKemFYUmxMM055WXk5c2FXSXZZMjl0YldWdWRDMWxaR2wwYjNJdlkyOXRiV1Z1ZEMxbFpHbDBiM0l1ZEhONElsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdlbTlrVW1WemIyeDJaWEo5SUdaeWIyMGdKMEJvYjI5clptOXliUzl5WlhOdmJIWmxjbk12ZW05a0oxeHVhVzF3YjNKMElIdHpkSGxzWldSOUlHWnliMjBnSjBCdGRXa3ZiV0YwWlhKcFlXd25YRzVwYlhCdmNuUWdlM1Z6WlZWelpYSjlJR1p5YjIwZ0owQjNaWEIxWW14cGMyZ3ZZWFYwYUdWdWRHbGpZWFJwYjI0dmQyVmljMmwwWlNkY2JtbHRjRzl5ZENCN2RHOVFiR0ZwYm5SbGVIUjlJR1p5YjIwZ0owQjNaWEIxWW14cGMyZ3ZjbWxqYUhSbGVIUW5YRzVwYlhCdmNuUWdlMEoxYVd4a1pYSkRiMjF0Wlc1MFJXUnBkRzl5VUhKdmNITXNJSFZ6WlZkbFluTnBkR1ZDZFdsc1pHVnlmU0JtY205dElDZEFkMlZ3ZFdKc2FYTm9MM2RsWW5OcGRHVXZZblZwYkdSbGNpZGNibWx0Y0c5eWRDQjdkWE5sVFdWdGIzMGdabkp2YlNBbmNtVmhZM1FuWEc1cGJYQnZjblFnZTBOdmJuUnliMnhzWlhJc0lIVnpaVVp2Y20xOUlHWnliMjBnSjNKbFlXTjBMV2h2YjJzdFptOXliU2RjYm1sdGNHOXlkQ0I3VFdSVFpXNWtmU0JtY205dElDZHlaV0ZqZEMxcFkyOXVjeTl0WkNkY2JtbHRjRzl5ZENCN2VuMGdabkp2YlNBbmVtOWtKMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0YldWdWRFVmthWFJ2Y2xkeVlYQndaWElnUFNCemRIbHNaV1FvSjJadmNtMG5LV0JjYmlBZ1pHbHpjR3hoZVRvZ1ozSnBaRHRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RJcGZUdGNibUJjYmx4dVpYaHdiM0owSUdOdmJuTjBJRU52YlcxbGJuUkZaR2wwYjNKQlkzUnBiMjV6SUQwZ2MzUjViR1ZrS0Nka2FYWW5LV0JjYmlBZ2FuVnpkR2xtZVMxelpXeG1PaUJtYkdWNExXVnVaRHRjYmlBZ1pHbHpjR3hoZVRvZ1pteGxlRHRjYmlBZ1pteGxlQzFtYkc5M09pQnliM2NnZDNKaGNEdGNiaUFnWjJGd09pQWtleWg3ZEdobGJXVjlLU0E5UGlCMGFHVnRaUzV6Y0dGamFXNW5LREVwZlR0Y2JtQmNibHh1Wlhod2IzSjBJR052Ym5OMElFTnZiVzFsYm5SRlpHbDBiM0pEYUdGc2JHVnVaMlZYY21Gd2NHVnlJRDBnYzNSNWJHVmtLQ2RrYVhZbktXQmNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNiaUFnWjNKcFpDMTBaVzF3YkdGMFpTMWpiMngxYlc1ek9pQnRhVzV0WVhnb2JXRjRMV052Ym5SbGJuUXNJREl3TUhCNEtTQXlNREJ3ZUR0Y2JpQWdZV3hwWjI0dGFYUmxiWE02SUdObGJuUmxjanRjYmlBZ1oyRndPaUFrZXloN2RHaGxiV1Y5S1NBOVBpQjBhR1Z0WlM1emNHRmphVzVuS0RNcGZUdGNiaUFnYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJtYkdWNExYTjBZWEowTzF4dVlGeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1EyOXRiV1Z1ZEVWa2FYUnZja05vWVd4c1pXNW5aU0E5SUhOMGVXeGxaQ2duWkdsMkp5bGdYRzRnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnWkdsemNHeGhlVG9nWjNKcFpEdGNibHh1SUNCemRtY2dlMXh1SUNBZ0lHaGxhV2RvZERvZ01UQXdKVHRjYmlBZ2ZWeHVZRnh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0YldWdWRFVmthWFJ2Y2lBOUlDaDdYRzRnSUdOc1lYTnpUbUZ0WlN4Y2JpQWdiMjVEWVc1alpXd3NYRzRnSUc5dVUzVmliV2wwTEZ4dUlDQnRZWGhEYjIxdFpXNTBUR1Z1WjNSb0xGeHVJQ0IwYVhSc1pTeGNiaUFnZEdWNGRDeGNiaUFnWTJoaGJHeGxibWRsTEZ4dUlDQnNiMkZrYVc1bkxGeHVJQ0JsY25KdmNseHVmVG9nUW5WcGJHUmxja052YlcxbGJuUkZaR2wwYjNKUWNtOXdjeWtnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ1pXeGxiV1Z1ZEhNNklIdFVaWGgwUm1sbGJHUXNJRUoxZEhSdmJpd2dRV3hsY25SOVhHNGdJSDBnUFNCMWMyVlhaV0p6YVhSbFFuVnBiR1JsY2lncFhHNGdJR052Ym5OMElIdG9ZWE5WYzJWeWZTQTlJSFZ6WlZWelpYSW9LVnh1WEc0Z0lHTnZibk4wSUdGdWIyNTViVzkxYzFOamFHVnRZU0E5SUhWelpVMWxiVzhvWEc0Z0lDQWdLQ2tnUFQ1Y2JpQWdJQ0FnSUhvdWIySnFaV04wS0h0Y2JpQWdJQ0FnSUNBZ1kyOXRiV1Z1ZERvZ2VpNXpkSEpwYm1jb0tTNXViMjVsYlhCMGVTZ3BMbTFoZUNodFlYaERiMjF0Wlc1MFRHVnVaM1JvS1N4Y2JpQWdJQ0FnSUNBZ2RHbDBiR1U2SUhvdWMzUnlhVzVuS0Nrc1hHNGdJQ0FnSUNBZ0lHZDFaWE4wVlhObGNtNWhiV1U2SUhvdWMzUnlhVzVuS0NrdWJtOXVaVzF3ZEhrb0tTeGNiaUFnSUNBZ0lDQWdZMmhoYkd4bGJtZGxPaUI2TG05aWFtVmpkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhiR3hsYm1kbFUyOXNkWFJwYjI0NklIb3VjM1J5YVc1bktDa3VibTl1Wlcxd2RIa29LU3hjYmlBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJWSlJEb2dlaTV6ZEhKcGJtY29LUzV1YjI1bGJYQjBlU2dwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOUtTeGNiaUFnSUNCYmJXRjRRMjl0YldWdWRFeGxibWQwYUYxY2JpQWdLVnh1WEc0Z0lHTnZibk4wSUd4dloyZGxaRWx1VTJOb1pXMWhJRDBnZFhObFRXVnRieWhjYmlBZ0lDQW9LU0E5UGx4dUlDQWdJQ0FnZWk1dlltcGxZM1FvZTF4dUlDQWdJQ0FnSUNCamIyMXRaVzUwT2lCNkxuTjBjbWx1WnlncExtNXZibVZ0Y0hSNUtDa3ViV0Y0S0cxaGVFTnZiVzFsYm5STVpXNW5kR2dwTEZ4dUlDQWdJQ0FnSUNCMGFYUnNaVG9nZWk1emRISnBibWNvS1Z4dUlDQWdJQ0FnZlNrc1hHNGdJQ0FnVzIxaGVFTnZiVzFsYm5STVpXNW5kR2hkWEc0Z0lDbGNibHh1SUNCMGVYQmxJRVp2Y20xSmJuQjFkQ0E5SUhvdWFXNW1aWEk4ZEhsd1pXOW1JR3h2WjJkbFpFbHVVMk5vWlcxaFBpQjhJSG91YVc1bVpYSThkSGx3Wlc5bUlHRnViMjU1Ylc5MWMxTmphR1Z0WVQ1Y2JpQWdZMjl1YzNRZ2MyTm9aVzFoSUQwZ2FHRnpWWE5sY2lBL0lHeHZaMmRsWkVsdVUyTm9aVzFoSURvZ1lXNXZibmx0YjNWelUyTm9aVzFoWEc1Y2JpQWdZMjl1YzNRZ2UyaGhibVJzWlZOMVltMXBkQ3dnWTI5dWRISnZiQ3dnY21WelpYUXNJR1p2Y20xVGRHRjBaU3dnZDJGMFkyaDlJRDBnZFhObFJtOXliVHhHYjNKdFNXNXdkWFErS0h0Y2JpQWdJQ0J5WlhOdmJIWmxjam9nZW05a1VtVnpiMngyWlhJb2MyTm9aVzFoS1N4Y2JpQWdJQ0JrWldaaGRXeDBWbUZzZFdWek9pQjdYRzRnSUNBZ0lDQmpiMjF0Wlc1ME9pQjBiMUJzWVdsdWRHVjRkQ2gwWlhoMEtTQS9QeUFuSnl4Y2JpQWdJQ0FnSUhScGRHeGxPaUIwYVhSc1pTQS9QeUFuSnl4Y2JpQWdJQ0FnSUdkMVpYTjBWWE5sY201aGJXVTZJQ2NuTEZ4dUlDQWdJQ0FnWTJoaGJHeGxibWRsT2lCN1hHNGdJQ0FnSUNBZ0lHTm9ZV3hzWlc1blpVbEVPaUJqYUdGc2JHVnVaMlUvTG1SaGRHRS9MbU5vWVd4c1pXNW5aUzVqYUdGc2JHVnVaMlZKUkNBL1B5QW5KeXhjYmlBZ0lDQWdJQ0FnWTJoaGJHeGxibWRsVTI5c2RYUnBiMjQ2SUNjblhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0J0YjJSbE9pQW5ZV3hzSjF4dUlDQjlLVnh1WEc0Z0lHTnZibk52YkdVdWJHOW5LSGRoZEdOb0tDa3BYRzVjYmlBZ1kyOXVjM1FnYzNWaWJXbDBJRDBnYUdGdVpHeGxVM1ZpYldsMEtDaDdZMjl0YldWdWRDd2dMaTR1WkdGMFlYMHBJRDArSUh0Y2JpQWdJQ0J2YmxOMVltMXBkQ2g3WEc0Z0lDQWdJQ0F1TGk1a1lYUmhMRnh1SUNBZ0lDQWdkR1Y0ZERvZ1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM0JoY21GbmNtRndhQ2NzWEc0Z0lDQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0NklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dZMjl0YldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lGMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdYVnh1SUNBZ0lIMHBYRzRnSUgwcFhHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThRMjl0YldWdWRFVmthWFJ2Y2xkeVlYQndaWElnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWOUlHOXVVM1ZpYldsMFBYdHpkV0p0YVhSOVBseHVJQ0FnSUNBZ2V5Rm9ZWE5WYzJWeUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsUFhzblozVmxjM1JWYzJWeWJtRnRaU2Q5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkSEp2YkQxN1kyOXVkSEp2YkgxY2JpQWdJQ0FnSUNBZ0lDQnlaVzVrWlhJOWV5aDdabWxsYkdRc0lHWnBaV3hrVTNSaGRHVTZJSHRsY25KdmNuMTlLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1bWFXVnNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdablZzYkZkcFpIUm9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZV05sYUc5c1pHVnlQVndpUkdWcGJpQk9ZVzFsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzlYQ0pPWVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0k5ZXlFaFpYSnliM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYkhCbGNsUmxlSFE5ZTJWeWNtOXlQeTV0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tYMWNibHh1SUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnYm1GdFpUMTdKM1JwZEd4bEozMWNiaUFnSUNBZ0lDQWdZMjl1ZEhKdmJEMTdZMjl1ZEhKdmJIMWNiaUFnSUNBZ0lDQWdjbVZ1WkdWeVBYc29lMlpwWld4a0xDQm1hV1ZzWkZOMFlYUmxPaUI3WlhKeWIzSjlmU2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhVWlhoMFJtbGxiR1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVtYVdWc1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJHeFhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk5WENKSGFXSWdSR1ZwYm1WdElFSmxhWFJ5WVdjZ1pXbHVaVzRnVkdsMFpXd3VYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhZbVZzUFZ3aVZHbDBaV3hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWV5RWhaWEp5YjNKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d1pYSlVaWGgwUFh0bGNuSnZjajh1YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnUEVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ2JtRnRaVDE3SjJOdmJXMWxiblFuZlZ4dUlDQWdJQ0FnSUNCamIyNTBjbTlzUFh0amIyNTBjbTlzZlZ4dUlDQWdJQ0FnSUNCeVpXNWtaWEk5ZXloN1ptbGxiR1FzSUdacFpXeGtVM1JoZEdVNklIdGxjbkp2Y24xOUtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BGUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxtWnBaV3hrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsc2FXNWxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXeHNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmxKdmQzTTllelY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZV0psYkQxY0lrdHZiVzFsYm5SaGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNqMWNJa0psYVhSeVlXY2dkbVZ5Wm1GemMyVnVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UFhzaElXVnljbTl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR1ZzY0dWeVZHVjRkRDE3WUNSN1ptbGxiR1F1ZG1Gc2RXVXViR1Z1WjNSb2ZTQXZJQ1I3YldGNFEyOXRiV1Z1ZEV4bGJtZDBhSDBnV21WcFkyaGxibUI5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQzgrWEc1Y2JpQWdJQ0FnSUhzaGFHRnpWWE5sY2lBbUppQmphR0ZzYkdWdVoyVS9MbVJoZEdFZ0ppWWdLRnh1SUNBZ0lDQWdJQ0E4UTI5dGJXVnVkRVZrYVhSdmNrTm9ZV3hzWlc1blpWZHlZWEJ3WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRU52YlcxbGJuUkZaR2wwYjNKRGFHRnNiR1Z1WjJWY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFNXNXVaWEpJVkUxTVBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOWZhSFJ0YkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHRnNiR1Z1WjJVdVpHRjBZUzVqYUdGc2JHVnVaMlV1WTJoaGJHeGxibWRsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0xuSmxjR3hoWTJVb0p5Tm1abVptWm1ZbkxDQW5kSEpoYm5Od1lYSmxiblFuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0ozZHBaSFJvUFZ3aU1qQXdYQ0luTENBbkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQ2RvWldsbmFIUTlYQ0l5TURCY0lpY3NJQ2NuS1NBL1B5QW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dVhHNGdJQ0FnSUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U5ZXlkamFHRnNiR1Z1WjJVdVkyaGhiR3hsYm1kbFUyOXNkWFJwYjI0bmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRISnZiRDE3WTI5dWRISnZiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxibVJsY2oxN0tIdG1hV1ZzWkN3Z1ptbGxiR1JUZEdGMFpUb2dlMlZ5Y205eWZYMHBJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUkdhV1ZzWkNCN0xpNHVabWxsYkdSOUlHeGhZbVZzUFhzblEyRndkR05vWVNkOUlHVnljbTl5UFhzaElXVnljbTl5ZlNCb1pXeHdaWEpVWlhoMFBYdGxjbkp2Y2o4dWJXVnpjMkZuWlgwZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnUEM5RGIyMXRaVzUwUldScGRHOXlRMmhoYkd4bGJtZGxWM0poY0hCbGNqNWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJSHRsY25KdmNpQW1KaUE4UVd4bGNuUWdjMlYyWlhKcGRIazlYQ0psY25KdmNsd2lQbnRsY25KdmNpNXRaWE56WVdkbGZUd3ZRV3hsY25RK2ZWeHVYRzRnSUNBZ0lDQThRMjl0YldWdWRFVmthWFJ2Y2tGamRHbHZibk0rWEc0Z0lDQWdJQ0FnSUR4Q2RYUjBiMjRnZEhsd1pUMWNJbk4xWW0xcGRGd2lJSE5wZW1VOVhDSnpiV0ZzYkZ3aUlITjBZWEowU1dOdmJqMTdQRTFrVTJWdVpDQXZQbjBnWkdsellXSnNaV1E5ZTJ4dllXUnBibWQ5UGx4dUlDQWdJQ0FnSUNBZ0lFdHZiVzFsYm5ScFpYSmxibHh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5KbGMyVjBYQ0pjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE5sZENncFhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOaGJtTmxiQ2dwWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbFBWd2ljMjFoYkd4Y0lseHVJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTlYQ0owWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMWNJbk5sWTI5dVpHRnllVndpUGx4dUlDQWdJQ0FnSUNBZ0lFRmlZbkpsWTJobGJseHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lEd3ZRMjl0YldWdWRFVmthWFJ2Y2tGamRHbHZibk0rWEc0Z0lDQWdQQzlEYjIxdFpXNTBSV1JwZEc5eVYzSmhjSEJsY2o1Y2JpQWdLVnh1ZlZ4dUlsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFUaENjME1pZlE9PSAqL1wiKTtcbl9jMyA9IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2U7XG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9IChwYXJhbSk9PntcbiAgICBsZXQgeyBjbGFzc05hbWUgLCBvbkNhbmNlbCAsIG9uU3VibWl0ICwgbWF4Q29tbWVudExlbmd0aCAsIHRpdGxlICwgdGV4dCAsIGNoYWxsZW5nZSAsIGxvYWRpbmcgLCBlcnJvciAgfSA9IHBhcmFtO1xuICAgIHZhciBfY2hhbGxlbmdlX2RhdGEsIF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlO1xuICAgIF9zKCk7XG4gICAgY29uc3QgeyBlbGVtZW50czogeyBUZXh0RmllbGQgLCBCdXR0b24gLCBBbGVydCAgfSAgfSA9IHVzZVdlYnNpdGVCdWlsZGVyKCk7XG4gICAgY29uc3QgeyBoYXNVc2VyICB9ID0gdXNlVXNlcigpO1xuICAgIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oKCk9Pnoub2JqZWN0KHtcbiAgICAgICAgICAgIGNvbW1lbnQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKS5tYXgobWF4Q29tbWVudExlbmd0aCksXG4gICAgICAgICAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICAgICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICAgIGNoYWxsZW5nZTogei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIGNoYWxsZW5nZVNvbHV0aW9uOiB6LnN0cmluZygpLm5vbmVtcHR5KCksXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlSUQ6IHouc3RyaW5nKCkubm9uZW1wdHkoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSksIFtcbiAgICAgICAgbWF4Q29tbWVudExlbmd0aFxuICAgIF0pO1xuICAgIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbygoKT0+ei5vYmplY3Qoe1xuICAgICAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgICAgIHRpdGxlOiB6LnN0cmluZygpXG4gICAgICAgIH0pLCBbXG4gICAgICAgIG1heENvbW1lbnRMZW5ndGhcbiAgICBdKTtcbiAgICBjb25zdCBzY2hlbWEgPSBoYXNVc2VyID8gbG9nZ2VkSW5TY2hlbWEgOiBhbm9ueW1vdXNTY2hlbWE7XG4gICAgdmFyIF90b1BsYWludGV4dCwgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VJRDtcbiAgICBjb25zdCB7IGhhbmRsZVN1Ym1pdCAsIGNvbnRyb2wgLCByZXNldCAsIGZvcm1TdGF0ZSAsIHdhdGNoICB9ID0gdXNlRm9ybSh7XG4gICAgICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihzY2hlbWEpLFxuICAgICAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICAgICAgICBjb21tZW50OiAoX3RvUGxhaW50ZXh0ID0gdG9QbGFpbnRleHQodGV4dCkpICE9PSBudWxsICYmIF90b1BsYWludGV4dCAhPT0gdm9pZCAwID8gX3RvUGxhaW50ZXh0IDogXCJcIixcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSAhPT0gbnVsbCAmJiB0aXRsZSAhPT0gdm9pZCAwID8gdGl0bGUgOiBcIlwiLFxuICAgICAgICAgICAgZ3Vlc3RVc2VybmFtZTogXCJcIixcbiAgICAgICAgICAgIGNoYWxsZW5nZToge1xuICAgICAgICAgICAgICAgIGNoYWxsZW5nZUlEOiAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VJRCA9IGNoYWxsZW5nZSA9PT0gbnVsbCB8fCBjaGFsbGVuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfY2hhbGxlbmdlX2RhdGEgPSBjaGFsbGVuZ2UuZGF0YSkgPT09IG51bGwgfHwgX2NoYWxsZW5nZV9kYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2hhbGxlbmdlX2RhdGEuY2hhbGxlbmdlLmNoYWxsZW5nZUlEKSAhPT0gbnVsbCAmJiBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZUlEICE9PSB2b2lkIDAgPyBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZUlEIDogXCJcIixcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2VTb2x1dGlvbjogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb2RlOiBcImFsbFwiXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cod2F0Y2goKSk7XG4gICAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KChwYXJhbSk9PntcbiAgICAgICAgbGV0IHsgY29tbWVudCAsIC4uLmRhdGEgfSA9IHBhcmFtO1xuICAgICAgICBvblN1Ym1pdCh7XG4gICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgdGV4dDogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJwYXJhZ3JhcGhcIixcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZV9yZXBsYWNlX3JlcGxhY2VfcmVwbGFjZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBfanN4REVWKENvbW1lbnRFZGl0b3JXcmFwcGVyLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBvblN1Ym1pdDogc3VibWl0LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgIWhhc1VzZXIgJiYgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImd1ZXN0VXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAgICAgIHJlbmRlcjogKHBhcmFtKT0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgeyBmaWVsZCAsIGZpZWxkU3RhdGU6IHsgZXJyb3IgIH0gIH0gPSBwYXJhbTtcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyByZXR1cm4gX2pzeERFVihUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiRGVpbiBOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogISFlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlclRleHQ6IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxMTcsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8gX2pzeERFVihDb250cm9sbGVyLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0aXRsZVwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGZpZWxkICwgZmllbGRTdGF0ZTogeyBlcnJvciAgfSAgfSA9IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUaXRlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB2b2lkIDAsIHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTMzLFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogN1xuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQ29udHJvbGxlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiY29tbWVudFwiLFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IGNvbnRyb2wsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT4vKiNfX1BVUkVfXyovIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfanN4REVWKFRleHRGaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5Sb3dzOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiS29tbWVudGFyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJCZWl0cmFnIHZlcmZhc3NlblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0OiBcIlwiLmNvbmNhdChmaWVsZC52YWx1ZS5sZW5ndGgsIFwiIC8gXCIpLmNvbmNhdChtYXhDb21tZW50TGVuZ3RoLCBcIiBaZWljaGVuXCIpXG4gICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZmFsc2UsIHZvaWQgMCwgdm9pZCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxNDgsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA3XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICFoYXNVc2VyICYmIChjaGFsbGVuZ2UgPT09IG51bGwgfHwgY2hhbGxlbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGFsbGVuZ2UuZGF0YSkgJiYgLyojX19QVVJFX18qLyBfanN4REVWKENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbW1lbnRFZGl0b3JDaGFsbGVuZ2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19odG1sOiAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgPSAoX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UgPSBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlKSA9PT0gbnVsbCB8fCBfY2hhbGxlbmdlX2RhdGFfY2hhbGxlbmdlX2NoYWxsZW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2UucmVwbGFjZShcIiNmZmZmZmZcIiwgXCJ0cmFuc3BhcmVudFwiKS5yZXBsYWNlKCd3aWR0aD1cIjIwMFwiJywgXCJcIikucmVwbGFjZSgnaGVpZ2h0PVwiMjAwXCInLCBcIlwiKSkgIT09IG51bGwgJiYgX2NoYWxsZW5nZV9kYXRhX2NoYWxsZW5nZV9jaGFsbGVuZ2VfcmVwbGFjZV9yZXBsYWNlX3JlcGxhY2UgIT09IHZvaWQgMCA/IF9jaGFsbGVuZ2VfZGF0YV9jaGFsbGVuZ2VfY2hhbGxlbmdlX3JlcGxhY2VfcmVwbGFjZV9yZXBsYWNlIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtZWRpdG9yL2NvbW1lbnQtZWRpdG9yLnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTY3LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiAxMVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyBfanN4REVWKENvbnRyb2xsZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiY2hhbGxlbmdlLmNoYWxsZW5nZVNvbHV0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sOiBjb250cm9sLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiAocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgZmllbGQgLCBmaWVsZFN0YXRlOiB7IGVycm9yICB9ICB9ID0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLyByZXR1cm4gX2pzeERFVihUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkNhcHRjaGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICEhZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlclRleHQ6IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwgdm9pZCAwLCB2b2lkIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtZWRpdG9yL2NvbW1lbnQtZWRpdG9yLnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTc3LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiAxMVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sIHZvaWQgMCwgdHJ1ZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTY2LFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogOVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICBlcnJvciAmJiAvKiNfX1BVUkVfXyovIF9qc3hERVYoQWxlcnQsIHtcbiAgICAgICAgICAgICAgICBzZXZlcml0eTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3hcIixcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAxODcsXG4gICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiAxN1xuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQ29tbWVudEVkaXRvckFjdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN1Ym1pdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCJzbWFsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJY29uOiAvKiNfX1BVUkVfXyovIF9qc3hERVYoTWRTZW5kLCB7fSwgdm9pZCAwLCBmYWxzZSwgdm9pZCAwLCB2b2lkIDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IGxvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogXCJLb21tZW50aWVyZW5cIlxuICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDAsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtZWRpdG9yL2NvbW1lbnQtZWRpdG9yLnRzeFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTkwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uTnVtYmVyOiA5XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovIF9qc3hERVYoQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlc2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcInNlY29uZGFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFwiQWJicmVjaGVuXCJcbiAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IFwiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDE5NCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogOVxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sIHZvaWQgMCwgdHJ1ZSwge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBcIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4XCIsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMTg5LFxuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogN1xuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgXVxuICAgIH0sIHZvaWQgMCwgdHJ1ZSwge1xuICAgICAgICBmaWxlTmFtZTogXCIvVXNlcnMvaXRydWxpYS9Eb2N1bWVudHMvd2VwdWJsaXNoL2xpYnMvY29tbWVudHMvd2Vic2l0ZS9zcmMvbGliL2NvbW1lbnQtZWRpdG9yL2NvbW1lbnQtZWRpdG9yLnRzeFwiLFxuICAgICAgICBsaW5lTnVtYmVyOiAxMTUsXG4gICAgICAgIGNvbHVtbk51bWJlcjogNVxuICAgIH0sIHRoaXMpO1xufTtcbl9zKENvbW1lbnRFZGl0b3IsIFwiYmd4dC95anhrdnIxYWlpTWpOWkZTMFZyOUpjPVwiLCBmYWxzZSwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdXNlV2Vic2l0ZUJ1aWxkZXIsXG4gICAgICAgIHVzZVVzZXIsXG4gICAgICAgIHVzZUZvcm1cbiAgICBdO1xufSk7XG5fYzQgPSBDb21tZW50RWRpdG9yO1xudmFyIF9jLCBfYzEsIF9jMiwgX2MzLCBfYzQ7XG4kUmVmcmVzaFJlZyQoX2MsIFwiQ29tbWVudEVkaXRvcldyYXBwZXJcIik7XG4kUmVmcmVzaFJlZyQoX2MxLCBcIkNvbW1lbnRFZGl0b3JBY3Rpb25zXCIpO1xuJFJlZnJlc2hSZWckKF9jMiwgXCJDb21tZW50RWRpdG9yQ2hhbGxlbmdlV3JhcHBlclwiKTtcbiRSZWZyZXNoUmVnJChfYzMsIFwiQ29tbWVudEVkaXRvckNoYWxsZW5nZVwiKTtcbiRSZWZyZXNoUmVnJChfYzQsIFwiQ29tbWVudEVkaXRvclwiKTtcblxuXG47XG4gICAgLy8gV3JhcHBlZCBpbiBhbiBJSUZFIHRvIGF2b2lkIHBvbGx1dGluZyB0aGUgZ2xvYmFsIHNjb3BlXG4gICAgO1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIC8vIExlZ2FjeSBDU1MgaW1wbGVtZW50YXRpb25zIHdpbGwgYGV2YWxgIGJyb3dzZXIgY29kZSBpbiBhIE5vZGUuanMgY29udGV4dFxuICAgICAgICAvLyB0byBleHRyYWN0IENTUy4gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSBuZWVkIHRvIGNoZWNrIHdlJ3JlIGluIGFcbiAgICAgICAgLy8gYnJvd3NlciBjb250ZXh0IGJlZm9yZSBjb250aW51aW5nLlxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAvLyBBTVAgLyBOby1KUyBtb2RlIGRvZXMgbm90IGluamVjdCB0aGVzZSBoZWxwZXJzOlxuICAgICAgICAgICAgJyRSZWZyZXNoSGVscGVycyQnIGluIHNlbGYpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgX193ZWJwYWNrX21vZHVsZV9fIGlzIGdsb2JhbFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRFeHBvcnRzID0gX193ZWJwYWNrX21vZHVsZV9fLmV4cG9ydHM7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIF9fd2VicGFja19tb2R1bGVfXyBpcyBnbG9iYWxcbiAgICAgICAgICAgIHZhciBwcmV2RXhwb3J0cyA9IChfYiA9IChfYSA9IF9fd2VicGFja19tb2R1bGVfXy5ob3QuZGF0YSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXZFeHBvcnRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgICAgICAgICAgLy8gVGhpcyBjYW5ub3QgaGFwcGVuIGluIE1haW5UZW1wbGF0ZSBiZWNhdXNlIHRoZSBleHBvcnRzIG1pc21hdGNoIGJldHdlZW5cbiAgICAgICAgICAgIC8vIHRlbXBsYXRpbmcgYW5kIGV4ZWN1dGlvbi5cbiAgICAgICAgICAgIHNlbGYuJFJlZnJlc2hIZWxwZXJzJC5yZWdpc3RlckV4cG9ydHNGb3JSZWFjdFJlZnJlc2goY3VycmVudEV4cG9ydHMsIF9fd2VicGFja19tb2R1bGVfXy5pZCk7XG4gICAgICAgICAgICAvLyBBIG1vZHVsZSBjYW4gYmUgYWNjZXB0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBpdHMgZXhwb3J0cywgZS5nLiB3aGVuXG4gICAgICAgICAgICAvLyBpdCBpcyBhIFJlZnJlc2ggQm91bmRhcnkuXG4gICAgICAgICAgICBpZiAoc2VsZi4kUmVmcmVzaEhlbHBlcnMkLmlzUmVhY3RSZWZyZXNoQm91bmRhcnkoY3VycmVudEV4cG9ydHMpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgZXhwb3J0cyBvbiB1cGRhdGUgc28gd2UgY2FuIGNvbXBhcmUgdGhlIGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgLy8gc2lnbmF0dXJlcy5cbiAgICAgICAgICAgICAgICBfX3dlYnBhY2tfbW9kdWxlX18uaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmV2RXhwb3J0cyA9IGN1cnJlbnRFeHBvcnRzO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIFVuY29uZGl0aW9uYWxseSBhY2NlcHQgYW4gdXBkYXRlIHRvIHRoaXMgbW9kdWxlLCB3ZSdsbCBjaGVjayBpZiBpdCdzXG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgYSBSZWZyZXNoIEJvdW5kYXJ5IGxhdGVyLlxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW1wb3J0TWV0YSBpcyByZXBsYWNlZCBpbiB0aGUgbG9hZGVyXG4gICAgICAgICAgICAgICAgaW1wb3J0Lm1ldGEud2VicGFja0hvdC5hY2NlcHQoKTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZpZWxkIGlzIHNldCB3aGVuIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoaXMgbW9kdWxlIHdhcyBhXG4gICAgICAgICAgICAgICAgLy8gUmVmcmVzaCBCb3VuZGFyeSwgbGV0dGluZyB1cyBrbm93IHdlIG5lZWQgdG8gY2hlY2sgZm9yIGludmFsaWRhdGlvbiBvclxuICAgICAgICAgICAgICAgIC8vIGVucXVldWUgYW4gdXBkYXRlLlxuICAgICAgICAgICAgICAgIGlmIChwcmV2RXhwb3J0cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGJvdW5kYXJ5IGNhbiBiZWNvbWUgaW5lbGlnaWJsZSBpZiBpdHMgZXhwb3J0cyBhcmUgaW5jb21wYXRpYmxlXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIGV4cG9ydHMuXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB5b3UgYWRkL3JlbW92ZS9jaGFuZ2UgZXhwb3J0cywgd2UnbGwgd2FudCB0b1xuICAgICAgICAgICAgICAgICAgICAvLyByZS1leGVjdXRlIHRoZSBpbXBvcnRpbmcgbW9kdWxlcywgYW5kIGZvcmNlIHRob3NlIGNvbXBvbmVudHMgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtcmVuZGVyLiBTaW1pbGFybHksIGlmIHlvdSBjb252ZXJ0IGEgY2xhc3MgY29tcG9uZW50IHRvIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gZnVuY3Rpb24sIHdlIHdhbnQgdG8gaW52YWxpZGF0ZSB0aGUgYm91bmRhcnkuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLiRSZWZyZXNoSGVscGVycyQuc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5KHByZXZFeHBvcnRzLCBjdXJyZW50RXhwb3J0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kUmVmcmVzaEhlbHBlcnMkLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBqdXN0IGV4ZWN1dGVkIHRoZSBjb2RlIGZvciB0aGUgbW9kdWxlLCBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV3IGV4cG9ydHMgbWFkZSBpdCBpbmVsaWdpYmxlIGZvciBiZWluZyBhIGJvdW5kYXJ5LlxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FyZSBhYm91dCB0aGUgY2FzZSB3aGVuIHdlIHdlcmUgX3ByZXZpb3VzbHlfIGEgYm91bmRhcnksXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBhbHJlYWR5IGFjY2VwdGVkIHRoaXMgdXBkYXRlIChhY2NpZGVudGFsIHNpZGUgZWZmZWN0KS5cbiAgICAgICAgICAgICAgICB2YXIgaXNOb0xvbmdlckFCb3VuZGFyeSA9IHByZXZFeHBvcnRzICE9PSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpc05vTG9uZ2VyQUJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIF9fd2VicGFja19tb2R1bGVfXy5ob3QuaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKCk7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV2tEIn0= */\");\n_c = CommentEditorWrapper;\nconst CommentEditorActions = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs1\",\n    label: \"CommentEditorActions\",\n    target: \"e170ldgs1\",\n    label: \"CommentEditorActions\"\n})(\"justify-self:flex-end;display:flex;flex-flow:row wrap;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(1);\n}, \";\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXQsIGZvcm1TdGF0ZSwgd2F0Y2h9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnNvbGUubG9nKHdhdGNoKCkpXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBvblN1Ym1pdCh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGV4dDogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudEVkaXRvcldyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8Q29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDpcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgICA/LnJlcGxhY2UoJyNmZmZmZmYnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCAnJylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsICcnKSA/PyAnJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICAgIG5hbWU9eydjaGFsbGVuZ2UuY2hhbGxlbmdlU29sdXRpb24nfVxuICAgICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgICAgPFRleHRGaWVsZCB7Li4uZmllbGR9IGxhYmVsPXsnQ2FwdGNoYSd9IGVycm9yPXshIWVycm9yfSBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db21tZW50RWRpdG9yQ2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIHtlcnJvciAmJiA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiPntlcnJvci5tZXNzYWdlfTwvQWxlcnQ+fVxuXG4gICAgICA8Q29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIHNpemU9XCJzbWFsbFwiIHN0YXJ0SWNvbj17PE1kU2VuZCAvPn0gZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQ29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgPC9Db21tZW50RWRpdG9yV3JhcHBlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVvQyJ9 */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c1 = CommentEditorActions;\nconst CommentEditorChallengeWrapper = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs2\",\n    label: \"CommentEditorChallengeWrapper\",\n    target: \"e170ldgs2\",\n    label: \"CommentEditorChallengeWrapper\"\n})(\"display:grid;grid-template-columns:minmax(max-content,200px) 200px;align-items:center;gap:\", (param)=>{\n    let { theme  } = param;\n    return theme.spacing(3);\n}, \";justify-content:flex-start;\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXQsIGZvcm1TdGF0ZSwgd2F0Y2h9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnNvbGUubG9nKHdhdGNoKCkpXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBvblN1Ym1pdCh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGV4dDogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudEVkaXRvcldyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8Q29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDpcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgICA/LnJlcGxhY2UoJyNmZmZmZmYnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCAnJylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsICcnKSA/PyAnJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICAgIG5hbWU9eydjaGFsbGVuZ2UuY2hhbGxlbmdlU29sdXRpb24nfVxuICAgICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgICAgPFRleHRGaWVsZCB7Li4uZmllbGR9IGxhYmVsPXsnQ2FwdGNoYSd9IGVycm9yPXshIWVycm9yfSBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db21tZW50RWRpdG9yQ2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIHtlcnJvciAmJiA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiPntlcnJvci5tZXNzYWdlfTwvQWxlcnQ+fVxuXG4gICAgICA8Q29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIHNpemU9XCJzbWFsbFwiIHN0YXJ0SWNvbj17PE1kU2VuZCAvPn0gZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQ29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgPC9Db21tZW50RWRpdG9yV3JhcHBlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCNkMifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c2 = CommentEditorChallengeWrapper;\nconst CommentEditorChallenge = /*#__PURE__*/ (0,_mui_material__WEBPACK_IMPORTED_MODULE_5__.styled)(\"div\", {\n    target: \"e170ldgs3\",\n    label: \"CommentEditorChallenge\",\n    target: \"e170ldgs3\",\n    label: \"CommentEditorChallenge\"\n})(\"height:100%;display:grid;svg{height:100%;}\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2l0cnVsaWEvRG9jdW1lbnRzL3dlcHVibGlzaC9saWJzL2NvbW1lbnRzL3dlYnNpdGUvc3JjL2xpYi9jb21tZW50LWVkaXRvci9jb21tZW50LWVkaXRvci50c3giLCJzb3VyY2VzIjpbIi9Vc2Vycy9pdHJ1bGlhL0RvY3VtZW50cy93ZXB1Ymxpc2gvbGlicy9jb21tZW50cy93ZWJzaXRlL3NyYy9saWIvY29tbWVudC1lZGl0b3IvY29tbWVudC1lZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7em9kUmVzb2x2ZXJ9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJ1xuaW1wb3J0IHtzdHlsZWR9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQge3VzZVVzZXJ9IGZyb20gJ0B3ZXB1Ymxpc2gvYXV0aGVudGljYXRpb24vd2Vic2l0ZSdcbmltcG9ydCB7dG9QbGFpbnRleHR9IGZyb20gJ0B3ZXB1Ymxpc2gvcmljaHRleHQnXG5pbXBvcnQge0J1aWxkZXJDb21tZW50RWRpdG9yUHJvcHMsIHVzZVdlYnNpdGVCdWlsZGVyfSBmcm9tICdAd2VwdWJsaXNoL3dlYnNpdGUvYnVpbGRlcidcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0NvbnRyb2xsZXIsIHVzZUZvcm19IGZyb20gJ3JlYWN0LWhvb2stZm9ybSdcbmltcG9ydCB7TWRTZW5kfSBmcm9tICdyZWFjdC1pY29ucy9tZCdcbmltcG9ydCB7en0gZnJvbSAnem9kJ1xuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvcldyYXBwZXIgPSBzdHlsZWQoJ2Zvcm0nKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDIpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JBY3Rpb25zID0gc3R5bGVkKCdkaXYnKWBcbiAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDEpfTtcbmBcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgobWF4LWNvbnRlbnQsIDIwMHB4KSAyMDBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAkeyh7dGhlbWV9KSA9PiB0aGVtZS5zcGFjaW5nKDMpfTtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvckNoYWxsZW5nZSA9IHN0eWxlZCgnZGl2JylgXG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZ3JpZDtcblxuICBzdmcge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuYFxuXG5leHBvcnQgY29uc3QgQ29tbWVudEVkaXRvciA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgb25DYW5jZWwsXG4gIG9uU3VibWl0LFxuICBtYXhDb21tZW50TGVuZ3RoLFxuICB0aXRsZSxcbiAgdGV4dCxcbiAgY2hhbGxlbmdlLFxuICBsb2FkaW5nLFxuICBlcnJvclxufTogQnVpbGRlckNvbW1lbnRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgZWxlbWVudHM6IHtUZXh0RmllbGQsIEJ1dHRvbiwgQWxlcnR9XG4gIH0gPSB1c2VXZWJzaXRlQnVpbGRlcigpXG4gIGNvbnN0IHtoYXNVc2VyfSA9IHVzZVVzZXIoKVxuXG4gIGNvbnN0IGFub255bW91c1NjaGVtYSA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHoub2JqZWN0KHtcbiAgICAgICAgY29tbWVudDogei5zdHJpbmcoKS5ub25lbXB0eSgpLm1heChtYXhDb21tZW50TGVuZ3RoKSxcbiAgICAgICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgICAgIGd1ZXN0VXNlcm5hbWU6IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgY2hhbGxlbmdlOiB6Lm9iamVjdCh7XG4gICAgICAgICAgY2hhbGxlbmdlU29sdXRpb246IHouc3RyaW5nKCkubm9uZW1wdHkoKSxcbiAgICAgICAgICBjaGFsbGVuZ2VJRDogei5zdHJpbmcoKS5ub25lbXB0eSgpXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICBbbWF4Q29tbWVudExlbmd0aF1cbiAgKVxuXG4gIGNvbnN0IGxvZ2dlZEluU2NoZW1hID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBjb21tZW50OiB6LnN0cmluZygpLm5vbmVtcHR5KCkubWF4KG1heENvbW1lbnRMZW5ndGgpLFxuICAgICAgICB0aXRsZTogei5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgW21heENvbW1lbnRMZW5ndGhdXG4gIClcblxuICB0eXBlIEZvcm1JbnB1dCA9IHouaW5mZXI8dHlwZW9mIGxvZ2dlZEluU2NoZW1hPiB8IHouaW5mZXI8dHlwZW9mIGFub255bW91c1NjaGVtYT5cbiAgY29uc3Qgc2NoZW1hID0gaGFzVXNlciA/IGxvZ2dlZEluU2NoZW1hIDogYW5vbnltb3VzU2NoZW1hXG5cbiAgY29uc3Qge2hhbmRsZVN1Ym1pdCwgY29udHJvbCwgcmVzZXQsIGZvcm1TdGF0ZSwgd2F0Y2h9ID0gdXNlRm9ybTxGb3JtSW5wdXQ+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoc2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBjb21tZW50OiB0b1BsYWludGV4dCh0ZXh0KSA/PyAnJyxcbiAgICAgIHRpdGxlOiB0aXRsZSA/PyAnJyxcbiAgICAgIGd1ZXN0VXNlcm5hbWU6ICcnLFxuICAgICAgY2hhbGxlbmdlOiB7XG4gICAgICAgIGNoYWxsZW5nZUlEOiBjaGFsbGVuZ2U/LmRhdGE/LmNoYWxsZW5nZS5jaGFsbGVuZ2VJRCA/PyAnJyxcbiAgICAgICAgY2hhbGxlbmdlU29sdXRpb246ICcnXG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlOiAnYWxsJ1xuICB9KVxuXG4gIGNvbnNvbGUubG9nKHdhdGNoKCkpXG5cbiAgY29uc3Qgc3VibWl0ID0gaGFuZGxlU3VibWl0KCh7Y29tbWVudCwgLi4uZGF0YX0pID0+IHtcbiAgICBvblN1Ym1pdCh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGV4dDogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogY29tbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8Q29tbWVudEVkaXRvcldyYXBwZXIgY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uU3VibWl0PXtzdWJtaXR9PlxuICAgICAgeyFoYXNVc2VyICYmIChcbiAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICBuYW1lPXsnZ3Vlc3RVc2VybmFtZSd9XG4gICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRGVpbiBOYW1lXCJcbiAgICAgICAgICAgICAgbGFiZWw9XCJOYW1lXCJcbiAgICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICAgIGhlbHBlclRleHQ9e2Vycm9yPy5tZXNzYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgKX1cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J3RpdGxlJ31cbiAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgcmVuZGVyPXsoe2ZpZWxkLCBmaWVsZFN0YXRlOiB7ZXJyb3J9fSkgPT4gKFxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHaWIgRGVpbmVtIEJlaXRyYWcgZWluZW4gVGl0ZWwuXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGl0ZWxcIlxuICAgICAgICAgICAgZXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgICBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgLz5cblxuICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgbmFtZT17J2NvbW1lbnQnfVxuICAgICAgICBjb250cm9sPXtjb250cm9sfVxuICAgICAgICByZW5kZXI9eyh7ZmllbGQsIGZpZWxkU3RhdGU6IHtlcnJvcn19KSA9PiAoXG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgbXVsdGlsaW5lXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIG1pblJvd3M9ezV9XG4gICAgICAgICAgICBsYWJlbD1cIktvbW1lbnRhclwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJlaXRyYWcgdmVyZmFzc2VuXCJcbiAgICAgICAgICAgIGVycm9yPXshIWVycm9yfVxuICAgICAgICAgICAgaGVscGVyVGV4dD17YCR7ZmllbGQudmFsdWUubGVuZ3RofSAvICR7bWF4Q29tbWVudExlbmd0aH0gWmVpY2hlbmB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG5cbiAgICAgIHshaGFzVXNlciAmJiBjaGFsbGVuZ2U/LmRhdGEgJiYgKFxuICAgICAgICA8Q29tbWVudEVkaXRvckNoYWxsZW5nZVdyYXBwZXI+XG4gICAgICAgICAgPENvbW1lbnRFZGl0b3JDaGFsbGVuZ2VcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgIF9faHRtbDpcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuZGF0YS5jaGFsbGVuZ2UuY2hhbGxlbmdlXG4gICAgICAgICAgICAgICAgICA/LnJlcGxhY2UoJyNmZmZmZmYnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3dpZHRoPVwiMjAwXCInLCAnJylcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdoZWlnaHQ9XCIyMDBcIicsICcnKSA/PyAnJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPENvbnRyb2xsZXJcbiAgICAgICAgICAgIG5hbWU9eydjaGFsbGVuZ2UuY2hhbGxlbmdlU29sdXRpb24nfVxuICAgICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAgICAgICAgICAgIHJlbmRlcj17KHtmaWVsZCwgZmllbGRTdGF0ZToge2Vycm9yfX0pID0+IChcbiAgICAgICAgICAgICAgPFRleHRGaWVsZCB7Li4uZmllbGR9IGxhYmVsPXsnQ2FwdGNoYSd9IGVycm9yPXshIWVycm9yfSBoZWxwZXJUZXh0PXtlcnJvcj8ubWVzc2FnZX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db21tZW50RWRpdG9yQ2hhbGxlbmdlV3JhcHBlcj5cbiAgICAgICl9XG5cbiAgICAgIHtlcnJvciAmJiA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiPntlcnJvci5tZXNzYWdlfTwvQWxlcnQ+fVxuXG4gICAgICA8Q29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgICAgIDxCdXR0b24gdHlwZT1cInN1Ym1pdFwiIHNpemU9XCJzbWFsbFwiIHN0YXJ0SWNvbj17PE1kU2VuZCAvPn0gZGlzYWJsZWQ9e2xvYWRpbmd9PlxuICAgICAgICAgIEtvbW1lbnRpZXJlblxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInJlc2V0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICByZXNldCgpXG4gICAgICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgICAgfX1cbiAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0ZXh0XCJcbiAgICAgICAgICBjb2xvcj1cInNlY29uZGFyeVwiPlxuICAgICAgICAgIEFiYnJlY2hlblxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQ29tbWVudEVkaXRvckFjdGlvbnM+XG4gICAgPC9Db21tZW50RWRpdG9yV3JhcHBlcj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThCc0MifQ== */\", \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n_c3 = CommentEditorChallenge;\nconst CommentEditor = (param)=>{\n    _s();\n    let { className , onCancel , onSubmit , maxCommentLength , title , text , challenge , loading , error  } = param;\n    var _challenge_data, _challenge_data_challenge_challenge;\n    _s1();\n    const { elements: { TextField , Button , Alert  }  } = (0,_wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder)();\n    const { hasUser  } = (0,_wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser)();\n    const anonymousSchema = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),\n            guestUsername: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n            challenge: zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n                challengeSolution: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty(),\n                challengeID: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty()\n            })\n        }), [\n        maxCommentLength\n    ]);\n    const loggedInSchema = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n            comment: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().nonempty().max(maxCommentLength),\n            title: zod__WEBPACK_IMPORTED_MODULE_6__.z.string()\n        }), [\n        maxCommentLength\n    ]);\n    const schema = hasUser ? loggedInSchema : anonymousSchema;\n    var _toPlaintext, _challenge_data_challenge_challengeID;\n    const { handleSubmit , control , reset , formState , watch  } = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm)({\n        resolver: (0,_hookform_resolvers_zod__WEBPACK_IMPORTED_MODULE_0__.zodResolver)(schema),\n        defaultValues: {\n            comment: (_toPlaintext = (0,_wepublish_richtext__WEBPACK_IMPORTED_MODULE_2__.toPlaintext)(text)) !== null && _toPlaintext !== void 0 ? _toPlaintext : \"\",\n            title: title !== null && title !== void 0 ? title : \"\",\n            guestUsername: \"\",\n            challenge: {\n                challengeID: (_challenge_data_challenge_challengeID = challenge === null || challenge === void 0 ? void 0 : (_challenge_data = challenge.data) === null || _challenge_data === void 0 ? void 0 : _challenge_data.challenge.challengeID) !== null && _challenge_data_challenge_challengeID !== void 0 ? _challenge_data_challenge_challengeID : \"\",\n                challengeSolution: \"\"\n            }\n        },\n        mode: \"all\"\n    });\n    console.log(watch());\n    const submit = handleSubmit((param)=>{\n        let { comment , ...data } = param;\n        onSubmit({\n            ...data,\n            text: [\n                {\n                    type: \"paragraph\",\n                    children: [\n                        {\n                            text: comment\n                        }\n                    ]\n                }\n            ]\n        });\n    });\n    var _challenge_data_challenge_challenge_replace_replace_replace;\n    return /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorWrapper, {\n        className: className,\n        onSubmit: submit,\n        children: [\n            !hasUser && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"guestUsername\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Dein Name\",\n                        label: \"Name\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 117,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"title\",\n                control: control,\n                render: (param)=>{\n                    let { field , fieldState: { error  }  } = param;\n                    /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        fullWidth: true,\n                        placeholder: \"Gib Deinem Beitrag einen Titel.\",\n                        label: \"Titel\",\n                        error: !!error,\n                        helperText: error === null || error === void 0 ? void 0 : error.message\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 133,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                name: \"comment\",\n                control: control,\n                render: (param)=>/*#__PURE__*/ {\n                    let { field , fieldState: { error  }  } = param;\n                    return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                        ...field,\n                        multiline: true,\n                        fullWidth: true,\n                        minRows: 5,\n                        label: \"Kommentar\",\n                        placeholder: \"Beitrag verfassen\",\n                        error: !!error,\n                        helperText: \"\".concat(field.value.length, \" / \").concat(maxCommentLength, \" Zeichen\")\n                    }, void 0, false, void 0, void 0);\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 148,\n                columnNumber: 7\n            }, undefined),\n            !hasUser && (challenge === null || challenge === void 0 ? void 0 : challenge.data) && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorChallengeWrapper, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorChallenge, {\n                        dangerouslySetInnerHTML: {\n                            __html: (_challenge_data_challenge_challenge_replace_replace_replace = (_challenge_data_challenge_challenge = challenge.data.challenge.challenge) === null || _challenge_data_challenge_challenge === void 0 ? void 0 : _challenge_data_challenge_challenge.replace(\"#ffffff\", \"transparent\").replace('width=\"200\"', \"\").replace('height=\"200\"', \"\")) !== null && _challenge_data_challenge_challenge_replace_replace_replace !== void 0 ? _challenge_data_challenge_challenge_replace_replace_replace : \"\"\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 167,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_hook_form__WEBPACK_IMPORTED_MODULE_7__.Controller, {\n                        name: \"challenge.challengeSolution\",\n                        control: control,\n                        render: (param)=>{\n                            let { field , fieldState: { error  }  } = param;\n                            /*#__PURE__*/ return (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(TextField, {\n                                ...field,\n                                label: \"Captcha\",\n                                error: !!error,\n                                helperText: error === null || error === void 0 ? void 0 : error.message\n                            }, void 0, false, void 0, void 0);\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 177,\n                        columnNumber: 11\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 166,\n                columnNumber: 9\n            }, undefined),\n            error && /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Alert, {\n                severity: \"error\",\n                children: error.message\n            }, void 0, false, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 187,\n                columnNumber: 17\n            }, undefined),\n            /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(CommentEditorActions, {\n                children: [\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"submit\",\n                        size: \"small\",\n                        startIcon: /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(react_icons_md__WEBPACK_IMPORTED_MODULE_9__.MdSend, {}, void 0, false, void 0, void 0),\n                        disabled: loading,\n                        children: \"Kommentieren\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 190,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxDEV)(Button, {\n                        type: \"reset\",\n                        onClick: ()=>{\n                            reset();\n                            onCancel();\n                        },\n                        size: \"small\",\n                        variant: \"text\",\n                        color: \"secondary\",\n                        children: \"Abbrechen\"\n                    }, void 0, false, {\n                        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                        lineNumber: 194,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n                lineNumber: 189,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itrulia/Documents/wepublish/libs/comments/website/src/lib/comment-editor/comment-editor.tsx\",\n        lineNumber: 115,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CommentEditor, \"nFNT1uP0TolEfQ6kynzxvm4Kb2M=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c5 = CommentEditor;\n_s1(CommentEditor, \"bgxt/yjxkvr1aiiMjNZFS0Vr9Jc=\", false, function() {\n    return [\n        _wepublish_website_builder__WEBPACK_IMPORTED_MODULE_3__.useWebsiteBuilder,\n        _wepublish_authentication_website__WEBPACK_IMPORTED_MODULE_1__.useUser,\n        react_hook_form__WEBPACK_IMPORTED_MODULE_7__.useForm\n    ];\n});\n_c4 = CommentEditor;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CommentEditorWrapper\");\n$RefreshReg$(_c1, \"CommentEditorActions\");\n$RefreshReg$(_c2, \"CommentEditorChallengeWrapper\");\n$RefreshReg$(_c3, \"CommentEditorChallenge\");\n$RefreshReg$(_c4, \"CommentEditor\");\n(function() {\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== \"undefined\" && // AMP / No-JS mode does not inject these helpers:\n    \"$RefreshHelpers$\" in self) {\n        // @ts-ignore __webpack_module__ is global\n        var currentExports = module.exports;\n        // @ts-ignore __webpack_module__ is global\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function(data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            // @ts-ignore importMeta is replaced in the loader\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                } else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        } else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n})();\nvar _c5;\n$RefreshReg$(_c5, \"CommentEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../libs/comments/website/src/lib/comment-editor/comment-editor.tsx\n"));

/***/ })

});