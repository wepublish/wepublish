directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

type Mutation {
  """Allows authenticated users to create additional subscriptions"""
  createSubscriptionWithConfirmation(userId: String, memberPlanID: String, memberPlanSlug: Slug, autoRenew: Boolean!, paymentPeriodicity: PaymentPeriodicity!, monthlyAmount: Int!, paymentMethodID: String, paymentMethodSlug: Slug, subscriptionProperties: [PublicPropertiesInput!]): Boolean!

  """This mutation extends an subscription early"""
  extendSubscription(subscriptionId: String!, successURL: String, failureURL: String): Payment!

  """
  This mutation allows to update the user's data by taking an input of type UserInput.
  """
  updateUser(input: UserInput!): User

  """This mutation allows to upload and update the user's profile image."""
  uploadUserProfileImage(uploadImageInput: UploadImageInput): User
}

scalar Slug

enum PaymentPeriodicity {
  monthly
  quarterly
  biannual
  yearly
}

input PublicPropertiesInput {
  key: String!
  value: String!
}

type Payment {
  id: String!
  intentSecret: String
  state: PaymentState!
  paymentMethod: PaymentMethod!
}

enum PaymentState {
  created
  submitted
  requiresUserAction
  processing
  paid
  canceled
  declined
}

type PaymentMethod {
  id: String!
  paymentProviderID: String!
  name: String!
  slug: Slug!
  description: String!
  imageId: String
  image: Image
}

type Image {
  id: String!
  createdAt: DateTime!
  modifiedAt: DateTime!
  filename: String
  title: String
  description: String
  tags: [String!]!
  link: String
  source: String
  license: String
  fileSize: Int!
  extension: String!
  mimeType: String!
  format: String!
  width: Int!
  height: Int!
  focalPoint: FocalPoint
  url: String
  transformURL(input: ImageTransformation): String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FocalPoint {
  x: Float!
  y: Float!
}

input ImageTransformation {
  width: Int
  height: Int
  rotation: ImageRotation
  quality: Float
  output: ImageOutput
}

enum ImageRotation {
  Auto
  Rotate0
  Rotate90
  Rotate180
  Rotate270
}

enum ImageOutput {
  png
  jpeg
  webp
}

type User {
  id: String!
  name: String!
  firstName: String
  birthday: DateTime
  email: String!
  address: UserAddress
  flair: String
  paymentProviderCustomers: [PaymentProviderCustomer!]!
  oauth2Accounts: [OAuth2Account!]!
  image: Image
  properties: [PublicProperties!]!
  permissions: [String!]!
}

type UserAddress {
  company: String
  streetAddress: String
  streetAddress2: String
  zipCode: String
  city: String
  country: String
}

type PaymentProviderCustomer {
  paymentProviderID: String!
  customerID: String!
}

type OAuth2Account {
  type: String!
  provider: String!
  scope: String!
}

type PublicProperties {
  key: String!
  value: String!
}

input UserInput {
  name: String!
  firstName: String
  email: String!
  address: UserAddressInput
  flair: String
  birthday: DateTime
  uploadImageInput: UploadImageInput
}

input UserAddressInput {
  company: String
  streetAddress: String
  streetAddress2: String
  zipCode: String
  city: String
  country: String
}

input UploadImageInput {
  file: Upload!
  filename: String
  title: String
  description: String
  tags: [String!]
  link: String
  source: String
  license: String
  focalPoint: InputPoint
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input InputPoint {
  x: Float!
  y: Float!
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = Image | PaymentMethod | User