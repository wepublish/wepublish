# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MailProviderModel {
  name: String!
}

type MailTemplateRef {
  id: Int!
  name: String!
}

type MailTemplateWithUrlAndStatusModel {
  description: String
  externalMailTemplateId: String!
  id: Int!
  name: String!
  remoteMissing: Boolean!
  status: String!
  url: String!
}

type MemberPlanRef {
  id: String!
  name: String!
}

type Mutation {
  createSubscriptionFlow(subscriptionFlow: SubscriptionFlowModelCreateInput!): [SubscriptionFlowModel!]!
  createSubscriptionInterval(subscriptionInterval: SubscriptionIntervalCreateInput!): [SubscriptionFlowModel!]!
  deleteSubscriptionFlow(subscriptionFlowId: Int!): [SubscriptionFlowModel!]!
  deleteSubscriptionInterval(subscriptionInterval: SubscriptionIntervalDeleteInput!): [SubscriptionFlowModel!]!
  syncTemplates: Boolean
  testSystemMail(systemMail: SystemMailTestInput!): [SystemMailModel!]!
  updateSubscriptionFlow(subscriptionFlow: SubscriptionFlowModelUpdateInput!): [SubscriptionFlowModel!]!
  updateSubscriptionInterval(subscriptionInterval: SubscriptionIntervalUpdateInput!): [SubscriptionFlowModel!]!
  updateSubscriptionIntervals(subscriptionIntervals: [SubscriptionIntervalUpdateInput!]!): [SubscriptionFlowModel!]!
  updateSystemMail(systemMail: SystemMailUpdateInput!): [SystemMailModel!]!
}

type PaymentMethodRef {
  id: String!
  name: String!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

type Query {
  """
  
        Returns all active subscribers.
        Includes subscribers with a cancelled but not run out subscription.
      
  """
  activeSubscribers: [DashboardSubscription!]!

  """
  
        Returns the expected revenue for the time period given.
        Excludes cancelled or manually set as paid invoices.
      
  """
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!
  getSystemMails: [SystemMailModel!]!
  mailTemplates: [MailTemplateWithUrlAndStatusModel!]!

  """
  
        Returns all new deactivations in a given timeframe.
        This considers the time the deactivation was made, not when the subscription runs out.
      
  """
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns all new subscribers in a given timeframe.
        Includes already deactivated ones.
      
  """
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!
  paymentMethods: [PaymentMethodRef!]!
  provider: MailProviderModel!

  """
  
        Returns all renewing subscribers in a given timeframe.
      
  """
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns the revenue generated for the time period given.
        Only includes paid invoices that have not been manually paid.
      
  """
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!
  subscriptionFlows(defaultFlowOnly: Boolean!, memberPlanId: String): [SubscriptionFlowModel!]!
  versionInformation: VersionInformation!
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userSelfDeactivated
}

enum SubscriptionEvent {
  CUSTOM
  DEACTIVATION_BY_USER
  DEACTIVATION_UNPAID
  INVOICE_CREATION
  REACTIVATION
  RENEWAL_FAILED
  RENEWAL_SUCCESS
  SUBSCRIBE
}

type SubscriptionFlowModel {
  autoRenewal: [Boolean!]!
  default: Boolean!
  id: Int!
  intervals: [SubscriptionInterval!]!
  memberPlan: MemberPlanRef
  numberOfSubscriptions: Int!
  paymentMethods: [PaymentMethodRef!]!
  periodicities: [PaymentPeriodicity!]!
}

input SubscriptionFlowModelCreateInput {
  autoRenewal: [Boolean!]!
  memberPlanId: String!
  paymentMethodIds: [String!]!
  periodicities: [PaymentPeriodicity!]!
}

input SubscriptionFlowModelUpdateInput {
  autoRenewal: [Boolean!]!
  id: Int!
  paymentMethodIds: [String!]!
  periodicities: [PaymentPeriodicity!]!
}

type SubscriptionInterval {
  daysAwayFromEnding: Int
  event: SubscriptionEvent!
  id: Int!
  mailTemplate: MailTemplateRef
}

input SubscriptionIntervalCreateInput {
  daysAwayFromEnding: Int
  event: SubscriptionEvent!
  mailTemplateId: Int
  subscriptionFlowId: Int!
}

input SubscriptionIntervalDeleteInput {
  id: Int!
}

input SubscriptionIntervalUpdateInput {
  daysAwayFromEnding: Int
  id: Int!
  mailTemplateId: Int
}

type SystemMailModel {
  event: UserEvent!
  mailTemplate: MailTemplateRef!
}

input SystemMailTestInput {
  event: UserEvent!
}

input SystemMailUpdateInput {
  event: UserEvent!
  mailTemplateId: Int!
}

enum UserEvent {
  ACCOUNT_CREATION
  LOGIN_LINK
  PASSWORD_RESET
  TEST_MAIL
}

type VersionInformation {
  version: String!
}
