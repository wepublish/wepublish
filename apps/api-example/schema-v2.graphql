# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type AllowedSettingVals {
  boolChoice: Boolean
  stringChoice: [String!]
}

type Article {
  createdAt: DateTime!
  disableComments: Boolean!
  draft: ArticleRevision
  hidden: Boolean!
  id: ID!
  modifiedAt: DateTime!
  peer: Peer
  peerArticleId: String
  peerId: String
  pending: ArticleRevision
  published: ArticleRevision
  shared: Boolean!
  tags: [Tag!]!
  url: String!
}

input ArticleFilter {
  authors: [String!]
  draft: Boolean
  includeHidden: Boolean
  lead: String
  pending: Boolean
  preTitle: String
  publicationDateFrom: DateFilter
  publicationDateTo: DateFilter
  published: Boolean
  shared: Boolean
  tags: [String!]
  title: String
}

type ArticleRevision implements HasBlockContent {
  authors: [Author!]!
  blocks: [BlockContent!]!
  breaking: Boolean!
  canonicalUrl: String!
  createdAt: DateTime!
  hideAuthor: Boolean!
  id: ID!
  image: Image
  imageID: String
  lead: String
  preTitle: String
  properties: [Property!]!
  publishedAt: DateTime!
  seoTitle: String
  slug: String
  socialMediaAuthors: [Author!]!
  socialMediaDescription: String
  socialMediaImage: Image
  socialMediaImageID: String
  socialMediaTitle: String
  title: String
}

enum ArticleSort {
  CreatedAt
  ModifiedAt
  PublishedAt
}

type ArticleTeaser implements BaseTeaser & HasArticle & HasImage {
  article: Article
  articleID: ID
  image: Image
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

input ArticleTeaserInput {
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

type Author {
  id: ID!
}

type Banner {
  actions: [BannerAction!]
  active: Boolean!
  cta: String
  id: ID!
  image: Image
  imageId: String
  showOnArticles: Boolean!
  showOnPages: [PageModel!]
  text: String!
  title: String!
}

type BannerAction {
  id: ID!
  label: String!
  role: BannerActionRole!
  style: String!
  url: String!
}

enum BannerActionRole {
  CANCEL
  OTHER
  PRIMARY
}

enum BannerDocumentType {
  ARTICLE
  PAGE
}

interface BaseBlock {
  blockStyle: ID
  type: String!
}

interface BaseTeaser implements HasImage {
  image: Image
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

type BildwurfAdBlock implements BaseBlock {
  blockStyle: ID
  type: String!
  zoneID: String
}

input BildwurfAdBlockInput {
  blockStyle: ID
  type: String!
  zoneID: String
}

union BlockContent = BildwurfAdBlock | BreakBlock | CommentBlock | EventBlock | FacebookPostBlock | FacebookVideoBlock | HTMLBlock | IFrameBlock | ImageBlock | ImageGalleryBlock | InstagramPostBlock | ListicleBlock | PolisConversationBlock | PollBlock | QuoteBlock | RichTextBlock | SoundCloudTrackBlock | TeaserGridBlock | TeaserGridFlexBlock | TeaserListBlock | TikTokVideoBlock | TitleBlock | TwitterTweetBlock | UnknownBlock | VimeoVideoBlock | YouTubeVideoBlock

input BlockContentInput {
  bildwurfAd: BildwurfAdBlockInput
  comment: CommentBlockInput
  embed: IFrameBlockInput
  event: EventBlockInput
  facebookPost: FacebookPostBlockInput
  facebookVideo: FacebookVideoBlockInput
  html: HTMLBlockInput
  image: ImageBlockInput
  imageGallery: ImageGalleryBlockInput
  instagramPost: InstagramPostBlockInput
  linkPageBreak: BreakBlockInput
  listicle: ListicleBlockInput
  polisConversation: PolisConversationBlockInput
  poll: PollBlockInput
  quote: QuoteBlockInput
  richText: RichTextBlockInput
  soundCloudTrack: SoundCloudTrackBlockInput
  teaserGrid: TeaserGridBlockInput
  teaserGridFlex: TeaserGridFlexBlockInput
  teaserList: TeaserListBlockInput
  tikTokVideo: TikTokVideoBlockInput
  title: TitleBlockInput
  twitterTweet: TwitterTweetBlockInput
  vimeoVideo: VimeoVideoBlockInput
  youTubeVideo: YouTubeVideoBlockInput
}

type BlockStyle {
  blocks: [BlockType!]!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  name: String!
}

enum BlockType {
  Comment
  Embed
  Event
  HTML
  Image
  ImageGallery
  LinkPageBreak
  Listicle
  Poll
  Quote
  RichText
  TeaserGrid1
  TeaserGrid6
  TeaserGridFlex
  TeaserList
  Title
}

type BreakBlock implements BaseBlock & HasImage {
  blockStyle: ID
  hideButton: Boolean
  image: Image
  imageID: ID
  linkTarget: String
  linkText: String
  linkURL: String
  richText: RichText!
  text: String
  type: String!
}

input BreakBlockInput {
  blockStyle: ID
  hideButton: Boolean
  linkTarget: String
  linkText: String
  linkURL: String
  richText: RichText!
  text: String
  type: String!
}

type Comment {
  id: ID!
}

type CommentBlock implements BaseBlock {
  blockStyle: ID
  comments: [Comment!]!
  filter: CommentBlockFilter!
  type: String!
}

type CommentBlockFilter {
  comments: [ID!]!
  item: ID!
  tags: [ID!]!
}

input CommentBlockFilterInput {
  comments: [ID!]!
  item: ID!
  tags: [ID!]!
}

input CommentBlockInput {
  filter: CommentBlockFilterInput!
}

type Consent {
  createdAt: DateTime!
  defaultValue: Boolean!
  id: String!
  modifiedAt: DateTime!
  name: String!
  slug: String!
}

input ConsentFilter {
  defaultValue: Boolean
  name: String
  slug: String
}

input CreateBannerActionInput {
  label: String!
  role: BannerActionRole!
  style: String!
  url: String!
}

input CreateBannerInput {
  actions: [CreateBannerActionInput!]
  active: Boolean!
  cta: String
  imageId: String
  showOnArticles: Boolean!
  showOnPages: [PageModelInput!]
  text: String!
  title: String!
}

type CustomTeaser implements BaseTeaser & HasImage {
  contentUrl: String
  image: Image
  imageID: ID
  lead: String
  preTitle: String
  properties: [Property!]!
  style: TeaserStyle!
  title: String
  type: String!
}

input CustomTeaserInput {
  contentUrl: String
  imageID: ID
  lead: String
  preTitle: String
  properties: [PropertyInput!]! = []
  style: TeaserStyle!
  title: String
  type: String!
}

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

input DateFilter {
  comparison: DateFilterComparison!
  date: DateTime
}

enum DateFilterComparison {
  Equal
  GreaterThan
  GreaterThanOrEqual
  LowerThan
  LowerThanOrEqual
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletePollVotesResult {
  count: Int!
}

type Event {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  image: Image
  imageId: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
  tags: [Tag!]
}

type EventBlock implements BaseBlock {
  blockStyle: ID
  events: [Event!]!
  filter: EventBlockFilter!
  type: String!
}

type EventBlockFilter {
  events: [ID!]!
  tags: [ID!]!
}

input EventBlockFilterInput {
  events: [ID!]!
  tags: [ID!]!
}

input EventBlockInput {
  filter: EventBlockFilterInput!
}

input EventFilter {
  from: DateTime
  location: String
  name: String
  tags: [String!]
  to: DateTime
  upcomingOnly: Boolean
}

type EventFromSource {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  imageUrl: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
}

enum EventSort {
  CreatedAt
  EndsAt
  ModifiedAt
  StartsAt
}

enum EventStatus {
  Cancelled
  Postponed
  Rescheduled
  Scheduled
}

type EventTeaser implements BaseTeaser & HasEvent & HasImage {
  event: Event
  eventID: ID
  image: Image
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

input EventTeaserInput {
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

type FacebookPostBlock implements BaseBlock {
  blockStyle: ID
  postID: String
  type: String!
  userID: String
}

input FacebookPostBlockInput {
  blockStyle: ID
  postID: String
  type: String!
  userID: String
}

type FacebookVideoBlock implements BaseBlock {
  blockStyle: ID
  type: String!
  userID: String
  videoID: String
}

input FacebookVideoBlockInput {
  blockStyle: ID
  type: String!
  userID: String
  videoID: String
}

type FlexAlignment {
  h: Int!
  i: Int!
  static: Boolean!
  w: Int!
  x: Int!
  y: Int!
}

input FlexAlignmentInput {
  h: Int!
  i: Int!
  static: Boolean!
  w: Int!
  x: Int!
  y: Int!
}

type FlexTeaser {
  alignment: FlexAlignment!
  teaser: Teaser!
}

input FlexTeaserInput {
  alignment: FlexAlignmentInput!
  teaser: TeaserInput!
}

type FocalPoint {
  x: Float!
  y: Float!
}

type FullPoll {
  id: ID!
}

"""Setting Value"""
scalar GraphQLSettingValueType

type HTMLBlock implements BaseBlock {
  blockStyle: ID
  html: String
  type: String!
}

input HTMLBlockInput {
  blockStyle: ID
  html: String
  type: String!
}

interface HasArticle {
  article: Article
  articleID: ID
}

interface HasBlockContent {
  blocks: [BlockContent!]!
}

interface HasEvent {
  event: Event
  eventID: ID
}

interface HasImage {
  image: Image
  imageID: ID
}

interface HasPage {
  page: Page
  pageID: ID
}

interface HasPeer {
  peer: Peer
  peerID: ID
}

type IFrameBlock implements BaseBlock {
  blockStyle: ID
  height: Int
  sandbox: String
  styleCustom: String
  title: String
  type: String!
  url: String
  width: Int
}

input IFrameBlockInput {
  blockStyle: ID
  height: Int
  sandbox: String
  styleCustom: String
  title: String
  type: String!
  url: String
  width: Int
}

type Image {
  id: ID!
}

type ImageBlock implements BaseBlock & HasImage {
  blockStyle: ID
  caption: String
  image: Image
  imageID: ID
  linkUrl: String
  type: String!
}

input ImageBlockInput {
  blockStyle: ID
  caption: String
  linkUrl: String
  type: String!
}

type ImageGalleryBlock implements BaseBlock {
  blockStyle: ID
  images: [ImageGalleryImage!]!
  type: String!
}

input ImageGalleryBlockInput {
  images: [ImageGalleryImageInput!]!
}

type ImageGalleryImage implements HasImage {
  caption: String
  image: Image
  imageID: ID
}

input ImageGalleryImageInput {
  caption: String
}

type ImageV2 {
  createdAt: DateTime!
  description: RichText
  extension: String!
  fileSize: Int!
  filename: String
  focalPoint: FocalPoint
  format: String!
  height: Int!
  id: ID!
  license: String
  link: String
  mimeType: String!
  modifiedAt: DateTime!
  source: String
  tags: [String!]!
  title: String
  width: Int!
}

input ImportedEventFilter {
  from: String
  location: String
  name: String
  providers: [String]
  to: String
}

enum ImportedEventSort {
  CREATED_AT
  ENDS_AT
  MODIFIED_AT
  STARTS_AT
}

type ImportedEventsDocument {
  nodes: [EventFromSource!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type InstagramPostBlock implements BaseBlock {
  blockStyle: ID
  postID: String
  type: String!
}

input InstagramPostBlockInput {
  blockStyle: ID
  postID: String
  type: String!
}

type ListicleBlock implements BaseBlock {
  blockStyle: ID
  items: [ListicleItem!]!
  type: String!
}

input ListicleBlockInput {
  items: [ListicleItemInput!]!
}

type ListicleItem implements HasImage {
  image: Image
  imageID: ID
  richText: RichText!
  title: String
}

input ListicleItemInput {
  richText: RichText!
  title: String
}

type MailProviderModel {
  name: String!
}

type MailTemplateRef {
  id: String!
  name: String!
}

type MailTemplateWithUrlAndStatusModel {
  description: String
  externalMailTemplateId: String!
  id: String!
  name: String!
  remoteMissing: Boolean!
  status: String!
  url: String!
}

type MemberPlan {
  id: ID!
  name: String!
}

type Mutation {
  createBanner(input: CreateBannerInput!): Banner!

  """Creates a new block style."""
  createBlockStyle(blocks: [BlockType!]!, name: String!): BlockStyle!

  "\n      Create a new consent.\n    "
  createConsent(defaultValue: Boolean!, name: String!, slug: String!): Consent!

  """Creates a new event."""
  createEvent(description: RichText, endsAt: DateTime, imageId: String, lead: String, location: String, name: String!, startsAt: DateTime!, tagIds: [String!]): Event!

  """Create a new subscription flow"""
  createSubscriptionFlow(autoRenewal: [Boolean!]!, memberPlanId: String!, paymentMethodIds: [String!]!, periodicities: [PaymentPeriodicity!]!): [SubscriptionFlowModel!]!

  """Create a subscription interval"""
  createSubscriptionInterval(daysAwayFromEnding: Int, event: SubscriptionEvent!, mailTemplateId: String, subscriptionFlowId: String!): [SubscriptionFlowModel!]!

  "\n      Creates a new userConsent based on input.\n      Returns created userConsent.\n    "
  createUserConsent(consentId: String!, userId: String!, value: Boolean!): UserConsent!
  deleteBanner(id: String!): Boolean

  """Deletes an existing block style."""
  deleteBlockStyle(id: String!): BlockStyle!

  "\n      Deletes an existing consent.\n    "
  deleteConsent(id: String!): Consent!

  """Deletes an existing event."""
  deleteEvent(id: String!): Event!

  """Delete poll votes"""
  deletePollVotes(ids: [ID!]!): DeletePollVotesResult!

  """Delete an existing subscription flow"""
  deleteSubscriptionFlow(id: String!): [SubscriptionFlowModel!]!

  """Delete an existing subscription interval"""
  deleteSubscriptionInterval(id: String!): [SubscriptionFlowModel!]!

  "\n      Delete an existing userConsent by id.\n      Returns deleted userConsent.\n    "
  deleteUserConsent(id: String!): UserConsent!

  """Imports an article from a given peer."""
  importArticle(peerArticleId: String!, peerId: String!): Article!

  "\n      Creates and event based on data from importable events list and an id and provider.\n      Also, uploads an image to WePublish Image library.\n    "
  importEvent(id: String!, source: String!): String!

  """Publishes an article at the given time."""
  publishArticle(id: String!, publishedAt: DateTime!): Article!
  syncTemplates: Boolean

  """Sends a test email for the given event"""
  testSystemMail(event: UserEvent!): Boolean!

  """Unpublishes all revisions of an article."""
  unpublishArticle(id: String!): Article!

  """Updates an article."""
  updateArticle(authorIds: [String!]!, blocks: [BlockContentInput!]!, breaking: Boolean!, canonicalUrl: String!, disableComments: Boolean!, hidden: Boolean!, hideAuthor: Boolean!, id: String!, imageID: String, lead: String, originalArticleId: String, peerId: String, preTitle: String, properties: [PropertyInput!]!, seoTitle: String, shared: Boolean!, slug: String, socialMediaAuthorIds: [String!]!, socialMediaDescription: String, socialMediaImageID: String, socialMediaTitle: String, tagIds: [String!]!, title: String): Article!
  updateBanner(input: UpdateBannerInput!): Banner!

  """Updates an existing block style."""
  updateBlockStyle(blocks: [BlockType!], id: String!, name: String): BlockStyle!

  "\n      Updates an existing consent.\n    "
  updateConsent(defaultValue: Boolean, id: String!, name: String, slug: String): Consent!

  """Updates an existing event."""
  updateEvent(description: RichText, endsAt: DateTime, id: String!, imageId: String, lead: String, location: String, name: String, startsAt: DateTime, tagIds: [String!]): Event!

  """Updates an existing setting."""
  updateSetting(name: SettingName!, value: GraphQLSettingValueType!): Setting!

  """Update an existing subscription flow"""
  updateSubscriptionFlow(autoRenewal: [Boolean!], id: String!, paymentMethodIds: [String!], periodicities: [PaymentPeriodicity!]): [SubscriptionFlowModel!]!

  """Update an existing subscription interval"""
  updateSubscriptionInterval(daysAwayFromEnding: Int, id: String!, mailTemplateId: String): [SubscriptionFlowModel!]!

  """Updates an existing mail flow"""
  updateSystemMail(event: UserEvent!, mailTemplateId: String!): [SystemMailModel!]!

  "\n      Updates an existing userConsent based on input.\n      Returns updated userConsent.\n    "
  updateUserConsent(id: String!, value: Boolean!): UserConsent!
}

type Page {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PageModel {
  id: ID!
}

input PageModelInput {
  id: ID!
}

type PageTeaser implements BaseTeaser & HasImage & HasPage {
  image: Image
  imageID: ID
  lead: String
  page: Page
  pageID: ID
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

input PageTeaserInput {
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

type PaginatedArticles {
  nodes: [Article!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedEvents {
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedPollVotes {
  nodes: [PollVote!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaymentMethod {
  id: ID!
  name: String!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

type Peer {
  id: ID!
}

type PeerArticleTeaser implements BaseTeaser & HasImage & HasPeer {
  article: Article
  articleID: ID
  image: Image
  imageID: ID
  lead: String
  peer: Peer
  peerID: ID
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

input PeerArticleTeaserInput {
  articleID: ID
  imageID: ID
  lead: String
  preTitle: String
  style: TeaserStyle!
  title: String
  type: String!
}

type PeriodicJob {
  createdAt: DateTime!
  date: DateTime!
  error: String
  executionTime: DateTime
  finishedWithError: DateTime
  id: String!
  modifiedAt: DateTime!
  successfullyFinished: DateTime
  tries: Float!
}

type PolisConversationBlock implements BaseBlock {
  blockStyle: ID
  conversationID: String
  type: String!
}

input PolisConversationBlockInput {
  blockStyle: ID
  conversationID: String
  type: String!
}

type PollAnswerInVote {
  answer: String!
  id: ID!
}

type PollBlock implements BaseBlock {
  blockStyle: ID
  image: Image
  poll: FullPoll
  pollId: String
  type: String!
}

input PollBlockInput {
  blockStyle: ID
  pollId: String
  type: String!
}

type PollVote {
  answer: PollAnswerInVote!
  answerId: ID!
  createdAt: DateTime!
  disabled: Boolean!
  fingerprint: String
  id: ID!
  pollId: ID!
  userId: ID
}

input PollVoteFilter {
  answerIds: [String!]
  fingerprint: String
  from: DateTime
  pollId: String
  to: DateTime
  userId: String
}

enum PollVoteSort {
  CreatedAt
}

type Property {
  id: String!
  key: String!
  public: Boolean!
  value: String!
}

input PropertyInput {
  id: String!
  key: String!
  public: Boolean!
  value: String!
}

type Query {
  "\n      Returns all active subscribers.\n      Includes subscribers with a cancelled but not run out subscription.\n    "
  activeSubscribers: [DashboardSubscription!]!

  """Returns an article by id."""
  article(id: String!): Article!

  """Returns a paginated list of articles based on the filters given."""
  articles(cursorId: ID, filter: ArticleFilter, order: SortOrder = Ascending, skip: Int = 0, sort: ArticleSort = PublishedAt, take: Int = 10): PaginatedArticles!
  banner(id: String!): Banner!
  banners(skip: Int!, take: Int!): [Banner!]!

  """Returns a list of block styles."""
  blockStyles: [BlockStyle!]!

  "\n      Returns a consent by id.\n    "
  consent(id: String!): Consent!

  "\n      Returns all consents.\n    "
  consents(filter: ConsentFilter): [Consent!]!

  """Returns a event by id."""
  event(id: ID!): Event!

  "\n      Returns a list of Importable Event Providers\n    "
  eventProviders: [String!]!

  """Returns a paginated list of events based on the filters given."""
  events(cursorId: ID, filter: EventFilter, order: SortOrder = Ascending, skip: Int = 0, sort: EventSort = StartsAt, take: Int = 10): PaginatedEvents!

  "\n      Returns the expected revenue for the time period given.\n      Excludes cancelled or manually set as paid invoices.\n    "
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """Returns an article revision by id."""
  getArticle(id: String!): ArticleRevision!

  """Returns an image by id."""
  getImage(id: String!): ImageV2!

  "\n      Returns the most viewed articles in descending order.\n    "
  hotAndTrending(start: DateTime, take: Int = 10): [Article!]!

  "\n      Returns a more detailed version of a single importable event, by id and source.\n    "
  importedEvent(filter: SingleEventFilter!): EventFromSource!

  "\n      Returns a list of imported events from external sources, transformed to match our model.\n    "
  importedEvents(filter: ImportedEventFilter, order: Int, skip: Int, sort: ImportedEventSort, take: Int): ImportedEventsDocument!

  "\n      Returns a list of external source ids of already imported events.\n    "
  importedEventsIds: [String!]!

  """Return all mail templates"""
  mailTemplates: [MailTemplateWithUrlAndStatusModel!]!

  "\n      Returns all new deactivations in a given timeframe.\n      This considers the time the deactivation was made, not when the subscription runs out.\n    "
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns all new subscribers in a given timeframe.\n      Includes already deactivated ones.\n    "
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """Returns all payment methods"""
  paymentMethods: [PaymentMethod!]!
  periodicJobLog(skip: Int, take: Int = 10): [PeriodicJob!]!

  """Returns a paginated list of poll votes"""
  pollVotes(cursorId: ID, filter: PollVoteFilter, order: SortOrder = Ascending, skip: Int = 0, sort: PollVoteSort = CreatedAt, take: Int = 10): PaginatedPollVotes!
  primaryBanner(documentId: ID!, documentType: BannerDocumentType!): Banner!
  provider: MailProviderModel!

  "\n      Returns all renewing subscribers in a given timeframe.\n    "
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns the revenue generated for the time period given.\n      Only includes paid invoices that have not been manually paid.\n    "
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  "\n      Returns a single setting by name.\n    "
  setting(name: String!): Setting!

  "\n      Returns a single setting by id.\n    "
  settingById(id: String!): Setting!

  "\n      Returns all settings.\n    "
  settings(filter: SettingFilter): [Setting!]!
  stats: Stats

  """Returns all subscription flows"""
  subscriptionFlows(defaultFlowOnly: Boolean!, memberPlanId: String): [SubscriptionFlowModel!]!

  """Returns all mail flows"""
  systemMails: [SystemMailModel!]!

  "\n      Returns a single userConsent by id.\n    "
  userConsent(id: String!): UserConsent!

  "\n      Returns a list of userConsents. Possible to filter.\n    "
  userConsents(name: String, slug: String, value: Boolean): [UserConsent!]!
  versionInformation: VersionInformation!
}

type QuoteBlock implements BaseBlock & HasImage {
  author: String
  blockStyle: ID
  image: Image
  imageID: ID
  quote: String
  type: String!
}

input QuoteBlockInput {
  author: String
  blockStyle: ID
  quote: String
  type: String!
}

scalar RichText

type RichTextBlock implements BaseBlock {
  blockStyle: ID
  richText: RichText!
  type: String!
}

input RichTextBlockInput {
  blockStyle: ID
  richText: RichText!
  type: String!
}

type Setting {
  id: ID!
  name: SettingName!
  settingRestriction: SettingRestriction
  value: GraphQLSettingValueType
}

input SettingFilter {
  name: String
}

enum SettingName {
  ALLOW_COMMENT_EDITING
  ALLOW_GUEST_COMMENTING
  ALLOW_GUEST_COMMENT_RATING
  ALLOW_GUEST_POLL_VOTING
  COMMENT_CHAR_LIMIT
  MAIL_PROVIDER_NAME
  MAKE_ACTIVE_SUBSCRIBERS_API_PUBLIC
  MAKE_EXPECTED_REVENUE_API_PUBLIC
  MAKE_NEW_DEACTIVATIONS_API_PUBLIC
  MAKE_NEW_SUBSCRIBERS_API_PUBLIC
  MAKE_RENEWING_SUBSCRIBERS_API_PUBLIC
  MAKE_REVENUE_API_PUBLIC
  PEERING_TIMEOUT_MS
  RESET_PASSWORD_JWT_EXPIRES_MIN
  SEND_LOGIN_JWT_EXPIRES_MIN
}

type SettingRestriction {
  allowedValues: AllowedSettingVals
  inputLength: Int
  maxValue: Int
  minValue: Int
}

input SingleEventFilter {
  id: String!
  source: String!
}

enum SortOrder {
  Ascending
  Descending
}

type SoundCloudTrackBlock implements BaseBlock {
  blockStyle: ID
  trackID: String
  type: String!
}

input SoundCloudTrackBlockInput {
  blockStyle: ID
  trackID: String
  type: String!
}

type Stats {
  articlesCount: Int!
  authorsCount: Int!
  firstArticleDate: DateTime
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userSelfDeactivated
}

enum SubscriptionEvent {
  CUSTOM
  DEACTIVATION_BY_USER
  DEACTIVATION_UNPAID
  INVOICE_CREATION
  RENEWAL_FAILED
  RENEWAL_SUCCESS
  SUBSCRIBE
}

type SubscriptionFlowModel {
  autoRenewal: [Boolean!]!
  default: Boolean!
  id: String!
  intervals: [SubscriptionInterval!]!
  memberPlan: MemberPlan
  numberOfSubscriptions: Int!
  paymentMethods: [PaymentMethod!]!
  periodicities: [PaymentPeriodicity!]!
}

type SubscriptionInterval {
  daysAwayFromEnding: Int
  event: SubscriptionEvent!
  id: String!
  mailTemplate: MailTemplateRef
}

type SystemMailModel {
  event: UserEvent!
  mailTemplate: MailTemplateRef
}

type Tag {
  id: ID!
}

union Teaser = ArticleTeaser | CustomTeaser | EventTeaser | PageTeaser | PeerArticleTeaser

type TeaserGridBlock implements BaseBlock {
  blockStyle: ID
  numColumns: Int!
  teasers: [Teaser!]!
  type: String!
}

input TeaserGridBlockInput {
  blockStyle: ID
  numColumns: Int!
  teasers: [TeaserInput!]!
  type: String!
}

type TeaserGridFlexBlock implements BaseBlock {
  blockStyle: ID
  flexTeasers: [FlexTeaser!]!
  type: String!
}

input TeaserGridFlexBlockInput {
  blockStyle: ID
  flexTeasers: [FlexTeaserInput!]!
  type: String!
}

input TeaserInput {
  article: ArticleTeaserInput
  custom: CustomTeaserInput
  event: EventTeaserInput
  page: PageTeaserInput
  peerArticle: PeerArticleTeaserInput
}

type TeaserListBlock implements BaseBlock {
  blockStyle: ID
  filter: TeaserListBlockFilter!
  skip: Int
  sort: TeaserListBlockSort
  take: Int
  teaserType: TeaserType!
  teasers: [Teaser!]!
  title: String
  type: String!
}

type TeaserListBlockFilter {
  tagObjects: [Tag!]!
  tags: [ID!]!
}

input TeaserListBlockFilterInput {
  tags: [ID!]!
}

input TeaserListBlockInput {
  blockStyle: ID
  filter: TeaserListBlockFilterInput!
  skip: Int
  sort: TeaserListBlockSort
  take: Int
  teaserType: TeaserType!
  title: String
  type: String!
}

enum TeaserListBlockSort {
  HotAndTrending
  PublishedAt
}

enum TeaserStyle {
  Default
  Light
  Text
}

enum TeaserType {
  Article
  Custom
  Event
  Page
  PeerArticle
}

type TikTokVideoBlock implements BaseBlock {
  blockStyle: ID
  type: String!
  userID: String
  videoID: String
}

input TikTokVideoBlockInput {
  blockStyle: ID
  type: String!
  userID: String
  videoID: String
}

type TitleBlock implements BaseBlock {
  blockStyle: ID
  lead: String
  title: String
  type: String!
}

input TitleBlockInput {
  blockStyle: ID
  lead: String
  title: String
  type: String!
}

type TwitterTweetBlock implements BaseBlock {
  blockStyle: ID
  tweetID: String
  type: String!
  userID: String
}

input TwitterTweetBlockInput {
  blockStyle: ID
  tweetID: String
  type: String!
  userID: String
}

type UnknownBlock {
  blockStyle: ID
  type: String!
}

input UpdateBannerInput {
  actions: [CreateBannerActionInput!]
  active: Boolean!
  cta: String
  id: ID!
  imageId: String
  showOnArticles: Boolean!
  showOnPages: [PageModelInput!]
  text: String!
  title: String!
}

type User {
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: String!
  lastLogin: DateTime
  name: String!
  roleIDs: [String!]
  userImageID: String
}

type UserConsent {
  consent: Consent!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  user: User!
  value: Boolean!
}

enum UserEvent {
  ACCOUNT_CREATION
  LOGIN_LINK
  PASSWORD_RESET
  TEST_MAIL
}

type VersionInformation {
  version: String!
}

type VimeoVideoBlock implements BaseBlock {
  blockStyle: ID
  type: String!
  videoID: String
}

input VimeoVideoBlockInput {
  blockStyle: ID
  type: String!
  videoID: String
}

type YouTubeVideoBlock implements BaseBlock {
  blockStyle: ID
  type: String!
  videoID: String
}

input YouTubeVideoBlockInput {
  blockStyle: ID
  type: String!
  videoID: String
}

scalar link__Import