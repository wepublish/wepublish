# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

union Action = ArticleCreatedAction | AuthorCreatedAction | CommentCreatedAction | EventCreatedAction | PageCreatedAction | PollStartedAction | SubscriptionCreatedAction | UserCreatedAction

enum ActionType {
  ArticleCreated
  AuthorCreated
  CommentCreated
  EventCreated
  PageCreated
  PollStarted
  SubscriptionCreated
  UserCreated
}

input ActiveMemberPlansFilter {
  name: String
  tags: [String!]
}

type AllowedSettingVals {
  boolChoice: Boolean
  stringChoice: [String!]
}

type Article {
  id: ID!
}

type ArticleCreatedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

type ArticleNavigationLink implements BaseNavigationLink {
  article: Article
  label: String!
  type: String!
}

type ArticleTeaser {
  article: Article!
}

type Author {
  bio: RichText
  createdAt: DateTime!
  id: ID!
  imageID: String
  jobTitle: String
  links: [AuthorLink!]
  modifiedAt: DateTime!
  name: String!
  slug: Slug!
}

type AuthorCreatedAction {
  actionType: ActionType!
  author: Author!
  date: DateTime!
  id: ID!
}

input AuthorFilter {
  name: String
  tagIds: [ID!]
}

type AuthorLink {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  title: String!
  url: String!
}

enum AuthorSort {
  CreatedAt
  ModifiedAt
  Name
}

input AuthorsLinksInput {
  title: String!
  url: String!
}

interface BaseNavigationLink {
  label: String!
  type: String!
}

type BlockStyle {
  blocks: [BlockType!]!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  name: String!
}

enum BlockType {
  Comment
  Embed
  Event
  HTML
  Image
  ImageGallery
  LinkPageBreak
  Listicle
  Poll
  Quote
  RichText
  TeaserGrid1
  TeaserGrid6
  TeaserGridFlex
  TeaserList
  Title
}

type CommentBlockFilter {
  comments: [ID!]
  item: ID
  tags: [ID!]
}

type CommentCreatedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

type Consent {
  createdAt: DateTime!
  defaultValue: Boolean!
  id: String!
  modifiedAt: DateTime!
  name: String!
  slug: String!
}

input ConsentFilter {
  defaultValue: Boolean
  name: String
  slug: String
}

input CreateAuthorInput {
  bio: RichText
  imageID: String
  jobTitle: String
  links: [AuthorsLinksInput!]!
  name: String!
  slug: Slug!
  tagIds: [String!]!
}

input CreateMemberPlanInput {
  active: Boolean!
  amountPerMonthMin: Float!
  description: String!
  extendable: Boolean!
  imageID: String
  maxCount: Float
  name: String!
  slug: String!
  tags: [String!]!
}

input CreateNavigationInput {
  key: String!
  links: [NavigationLinkInput!]!
  name: String!
}

input CreatePaymentMethodInput {
  active: Boolean!
  description: String!
  name: String!
  paymentProviderID: String!
  slug: String!
}

input CreateUserRoleInput {
  name: String!
  permissionIDs: [String!]!
}

type CustomTeaser {
  contentUrl: String
  properties: [PublicProperties!]!
}

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  image: Image
  imageId: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
  tags: [Tag!]
}

type EventBlockFilter {
  events: [ID!]
  tags: [ID!]
}

type EventCreatedAction {
  actionType: ActionType!
  date: DateTime!
  event: Event!
  id: ID!
}

input EventFilter {
  from: DateTime
  location: String
  name: String
  tags: [String!]
  to: DateTime
  upcomingOnly: Boolean
}

type EventFromSource {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  imageUrl: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
}

enum EventSort {
  CreatedAt
  EndsAt
  ModifiedAt
  StartsAt
}

enum EventStatus {
  Cancelled
  Postponed
  Rescheduled
  Scheduled
}

type EventTeaser {
  event: Event!
}

type ExternalNavigationLink implements BaseNavigationLink {
  label: String!
  type: String!
  url: String
}

type FlexAlignment {
  h: Int!
  w: Int!
  x: Int!
  y: Int!
}

type FlexTeaser {
  alignment: FlexAlignment!
  teaser: Teaser!
}

type GalleryImageEdge {
  caption: String
  image: Image!
}

"""Setting Value"""
scalar GraphQLSettingValueType

type Image {
  id: ID!
}

input ImportedEventFilter {
  from: String
  location: String
  name: String
  providers: [String]
  to: String
}

enum ImportedEventSort {
  CREATED_AT
  ENDS_AT
  MODIFIED_AT
  STARTS_AT
}

type ImportedEventsDocument {
  nodes: [EventFromSource!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type ListicleItem {
  image: Image
  richText: RichText!
  title: String!
}

type MailProviderModel {
  name: String!
}

type MailTemplateRef {
  id: String!
  name: String!
}

type MailTemplateWithUrlAndStatusModel {
  description: String
  externalMailTemplateId: String!
  id: String!
  name: String!
  remoteMissing: Boolean!
  status: String!
  url: String!
}

type MemberPlan {
  active: Boolean!
  amountPerMonthMin: Int!
  createdAt: DateTime!
  description: RichText!
  extendable: Boolean!
  id: ID!
  image: Image
  imageID: String
  maxCount: Int
  modifiedAt: DateTime!
  name: String!
  slug: String!
  tags: [String!]!
}

enum MemberPlanSort {
  CreatedAt
  ModifiedAt
}

input MemberPlansFilter {
  active: Boolean
  name: String
  tags: [String!]
}

type Mutation {
  createAuthor(author: CreateAuthorInput!): Author!

  """Creates a new block style."""
  createBlockStyle(blocks: [BlockType!]!, name: String!): BlockStyle!

  "\n      Create a new consent.\n    "
  createConsent(defaultValue: Boolean!, name: String!, slug: String!): Consent!

  """Creates a new event."""
  createEvent(description: RichText, endsAt: DateTime, imageId: String, lead: String, location: String, name: String!, startsAt: DateTime!, tagIds: [String!]): Event!
  createMemberPlan(memberPlan: CreateMemberPlanInput!): MemberPlan!

  """Creates a new navigation."""
  createNavigation(navigation: CreateNavigationInput!): Navigation!
  createPaymentFromInvoice(input: PaymentFromInvoiceInput!): Payment!
  createPaymentMethod(paymentMethod: CreatePaymentMethodInput!): PaymentMethod!

  """Create a new subscription flow"""
  createSubscriptionFlow(autoRenewal: [Boolean!]!, memberPlanId: String!, paymentMethodIds: [String!]!, periodicities: [PaymentPeriodicity!]!): [SubscriptionFlowModel!]!

  """Create a subscription interval"""
  createSubscriptionInterval(daysAwayFromEnding: Int, event: SubscriptionEvent!, mailTemplateId: String, subscriptionFlowId: String!): [SubscriptionFlowModel!]!

  "\n      Creates a new userConsent based on input.\n      Returns created userConsent.\n    "
  createUserConsent(consentId: String!, userId: String!, value: Boolean!): UserConsent!

  """Create a user role"""
  createUserRole(userRole: CreateUserRoleInput!): UserRole!
  deleteAuthor(id: ID!): Author!

  """Deletes an existing block style."""
  deleteBlockStyle(id: String!): BlockStyle!

  "\n      Deletes an existing consent.\n    "
  deleteConsent(id: String!): Consent!

  """Deletes an existing event."""
  deleteEvent(id: String!): Event!
  deleteMemberPlanById(id: ID!): MemberPlan!

  """Deletes an existing navigation."""
  deleteNavigation(id: ID!): Navigation!
  deletePaymentMethodById(id: ID!): PaymentMethod!

  """Delete an existing subscription flow"""
  deleteSubscriptionFlow(id: String!): [SubscriptionFlowModel!]!

  """Delete an existing subscription interval"""
  deleteSubscriptionInterval(id: String!): [SubscriptionFlowModel!]!

  "\n      Delete an existing userConsent by id.\n      Returns deleted userConsent.\n    "
  deleteUserConsent(id: String!): UserConsent!

  """Deletes a user role"""
  deleteUserRole(id: ID!): UserRole!

  "\n      Creates and event based on data from importable events list and an id and provider.\n      Also, uploads an image to WePublish Image library.\n    "
  importEvent(id: String!, source: String!): String!
  syncTemplates: Boolean

  """Sends a test email for the given event"""
  testSystemMail(event: UserEvent!): Boolean!
  updateAuthor(author: UpdateAuthorInput!): Author!

  """Updates an existing block style."""
  updateBlockStyle(blocks: [BlockType!], id: String!, name: String): BlockStyle!

  "\n      Updates an existing consent.\n    "
  updateConsent(defaultValue: Boolean, id: String!, name: String, slug: String): Consent!

  """Updates an existing event."""
  updateEvent(description: RichText, endsAt: DateTime, id: String!, imageId: String, lead: String, location: String, name: String, startsAt: DateTime, tagIds: [String!]): Event!
  updateMemberPlan(memberPlan: UpdateMemberPlanInput!): MemberPlan!

  """Updates an existing navigation."""
  updateNavigation(navigation: UpdateNavigationInput!): Navigation!
  updatePaymentMethod(paymentMethod: UpdatePaymentMethodInput!): PaymentMethod!

  """Updates an existing setting."""
  updateSetting(name: SettingName!, value: GraphQLSettingValueType!): Setting!

  """Update an existing subscription flow"""
  updateSubscriptionFlow(autoRenewal: [Boolean!], id: String!, paymentMethodIds: [String!], periodicities: [PaymentPeriodicity!]): [SubscriptionFlowModel!]!

  """Update an existing subscription interval"""
  updateSubscriptionInterval(daysAwayFromEnding: Int, id: String!, mailTemplateId: String): [SubscriptionFlowModel!]!

  """Updates an existing mail flow"""
  updateSystemMail(event: UserEvent!, mailTemplateId: String!): [SystemMailModel!]!

  "\n      Updates an existing userConsent based on input.\n      Returns updated userConsent.\n    "
  updateUserConsent(id: String!, value: Boolean!): UserConsent!

  """Updates a user role"""
  updateUserRole(userRole: UpdateUserRoleInput!): UserRole!
}

type Navigation {
  createdAt: DateTime!
  id: ID!
  key: String!
  links: [NavigationLink!]!
  modifiedAt: DateTime!
  name: String!
}

union NavigationLink = ArticleNavigationLink | ExternalNavigationLink | PageNavigationLink

input NavigationLinkInput {
  articleID: String
  label: String!
  pageID: String
  type: String!
  url: String
}

type Page {
  id: ID!
}

type PageCreatedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PageNavigationLink implements BaseNavigationLink {
  label: String!
  page: Page
  type: String!
}

type PageTeaser {
  page: Page!
}

type PaginatedAuthors {
  nodes: [Author!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedEvents {
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedUserRoles {
  nodes: [UserRole!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type Payment {
  createdAt: DateTime!
  id: ID!
  intentData: String
  intentID: String
  intentSecret: String
  invoiceID: ID!
  modifiedAt: DateTime!
  paymentData: String
  paymentMethodID: ID!
  state: PaymentState!
}

input PaymentFilter {
  intentID: String
}

input PaymentFromInvoiceInput {
  failureURL: String!
  invoiceID: ID!
  paymentMethodID: ID!
  successURL: String!
}

type PaymentMethod {
  active: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  modifiedAt: DateTime!
  name: String!
  paymentProviderID: String!
  slug: Slug!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

enum PaymentSort {
  CreatedAt
  ModifiedAt
}

enum PaymentState {
  canceled
  created
  declined
  paid
  processing
  requiresUserAction
  submitted
}

type PaymentsResult {
  nodes: [Payment!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type Peer {
  id: ID!
}

type PeerArticleTeaser {
  article: Article!
  peer: Peer!
}

type PeriodicJob {
  createdAt: DateTime!
  date: DateTime!
  error: String
  executionTime: DateTime
  finishedWithError: DateTime
  id: String!
  modifiedAt: DateTime!
  successfullyFinished: DateTime
  tries: Float!
}

type PermissionObject {
  deprecated: Boolean!
  description: String!
  id: String!
}

type PollStartedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

type PublicProperties {
  key: String!
  value: String!
}

type Query {
  """Returns latest user actions"""
  actions: [Action!]!

  "\n      Returns all active subscribers.\n      Includes subscribers with a cancelled but not run out subscription.\n    "
  activeSubscribers: [DashboardSubscription!]!

  """Returns a list of block styles."""
  blockStyles: [BlockStyle!]!

  "\n      Returns a consent by id.\n    "
  consent(id: String!): Consent!

  "\n      Returns all consents.\n    "
  consents(filter: ConsentFilter): [Consent!]!

  """Returns a event by id."""
  event(id: ID!): Event!

  "\n      Returns a list of Importable Event Providers\n    "
  eventProviders: [String!]!

  """Returns a paginated list of events based on the filters given."""
  events(cursorId: ID, filter: EventFilter, order: SortOrder = Descending, skip: Int = 0, sort: EventSort = StartsAt, take: Int = 10): PaginatedEvents!

  "\n      Returns the expected revenue for the time period given.\n      Excludes cancelled or manually set as paid invoices.\n    "
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!
  getActiveMemberPlans(cursorId: String, filter: ActiveMemberPlansFilter, order: SortOrder, skip: Int = 0, sort: MemberPlanSort, take: Int = 10): [MemberPlan!]!
  getAuthorBySlug(slug: String!): Author!
  getAuthors(cursorId: String, filter: AuthorFilter, order: SortOrder = Ascending, skip: Int = 0, sortedField: AuthorSort, take: Int = 10): PaginatedAuthors!
  getAuthorsById(id: ID!): Author!
  getMemberPlanById(id: ID!): MemberPlan!
  getMemberPlanBySlug(slug: String!): MemberPlan!
  getMemberPlans(cursorId: String, filter: MemberPlansFilter, order: SortOrder, skip: Int = 0, sort: MemberPlanSort, take: Int = 10): [MemberPlan!]!

  """Returns a navigation by id."""
  getNavigationById(id: ID!): Navigation!

  """Returns a navigation by key."""
  getNavigationByKey(key: String!): Navigation!
  getPaymentById(id: ID!): Payment!
  getPaymentMethodById(id: ID!): PaymentMethod!
  getPaymentMethods: [PaymentMethod!]!
  getPayments(cursorId: String, filter: PaymentFilter, order: SortOrder, skip: Int = 0, sort: PaymentSort, take: Int = 10): PaymentsResult!

  """Returns permissions list"""
  getPermissions: [PermissionObject!]!

  """Returns a user role"""
  getUserRoleById(id: ID!): UserRole!

  """Returns a list of user roles"""
  getUserRoles(cursorId: String, filter: UserRoleFilter, skip: Int = 0, take: Int = 10): PaginatedUserRoles!

  "\n      Returns a more detailed version of a single importable event, by id and source.\n    "
  importedEvent(filter: SingleEventFilter!): EventFromSource!

  "\n      Returns a list of imported events from external sources, transformed to match our model.\n    "
  importedEvents(filter: ImportedEventFilter, order: Int, skip: Int, sort: ImportedEventSort, take: Int): ImportedEventsDocument!

  "\n      Returns a list of external source ids of already imported events.\n    "
  importedEventsIds: [String!]!

  """Return all mail templates"""
  mailTemplates: [MailTemplateWithUrlAndStatusModel!]!

  """Returns a list of navigations."""
  navigations: [Navigation!]!

  "\n      Returns all new deactivations in a given timeframe.\n      This considers the time the deactivation was made, not when the subscription runs out.\n    "
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns all new subscribers in a given timeframe.\n      Includes already deactivated ones.\n    "
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """Returns all payment methods"""
  paymentMethods: [PaymentMethod!]!
  periodicJobLog(skip: Int, take: Int = 10): [PeriodicJob!]!
  provider: MailProviderModel!

  "\n      Returns all renewing subscribers in a given timeframe.\n    "
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns the revenue generated for the time period given.\n      Only includes paid invoices that have not been manually paid.\n    "
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  "\n      Returns a single setting by id.\n    "
  settingById(id: String!): Setting!

  "\n      Returns all settings.\n    "
  settingsList(filter: SettingFilter): [Setting!]!
  stats: Stats

  """Returns all subscription flows"""
  subscriptionFlows(defaultFlowOnly: Boolean!, memberPlanId: String): [SubscriptionFlowModel!]!

  """Returns all mail flows"""
  systemMails: [SystemMailModel!]!

  "\n      Returns a single userConsent by id.\n    "
  userConsent(id: String!): UserConsent!

  "\n      Returns a list of userConsents. Possible to filter.\n    "
  userConsents(name: String, slug: String, value: Boolean): [UserConsent!]!
  versionInformation: VersionInformation!
}

scalar RichText

type Setting {
  id: ID!
  name: SettingName!
  settingRestriction: SettingRestriction
  value: GraphQLSettingValueType
}

input SettingFilter {
  name: String
}

enum SettingName {
  ALLOW_COMMENT_EDITING
  ALLOW_GUEST_COMMENTING
  ALLOW_GUEST_COMMENT_RATING
  ALLOW_GUEST_POLL_VOTING
  BODY_SCRIPT
  COMMENT_CHAR_LIMIT
  HEAD_SCRIPT
  MAIL_PROVIDER_NAME
  MAKE_ACTIVE_SUBSCRIBERS_API_PUBLIC
  MAKE_EXPECTED_REVENUE_API_PUBLIC
  MAKE_NEW_DEACTIVATIONS_API_PUBLIC
  MAKE_NEW_SUBSCRIBERS_API_PUBLIC
  MAKE_RENEWING_SUBSCRIBERS_API_PUBLIC
  MAKE_REVENUE_API_PUBLIC
  PEERING_TIMEOUT_MS
  RESET_PASSWORD_JWT_EXPIRES_MIN
  SEND_LOGIN_JWT_EXPIRES_MIN
}

type SettingRestriction {
  allowedValues: AllowedSettingVals
  inputLength: Int
  maxValue: Int
  minValue: Int
}

input SingleEventFilter {
  id: String!
  source: String!
}

scalar Slug

enum SortOrder {
  Ascending
  Descending
}

type Stats {
  articlesCount: Int!
  authorsCount: Int!
  firstArticleDate: DateTime
}

type SubscriptionCreatedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userSelfDeactivated
}

enum SubscriptionEvent {
  CUSTOM
  DEACTIVATION_BY_USER
  DEACTIVATION_UNPAID
  INVOICE_CREATION
  RENEWAL_FAILED
  RENEWAL_SUCCESS
  SUBSCRIBE
}

type SubscriptionFlowModel {
  autoRenewal: [Boolean!]!
  default: Boolean!
  id: String!
  intervals: [SubscriptionInterval!]!
  memberPlan: MemberPlan
  numberOfSubscriptions: Int!
  paymentMethods: [PaymentMethod!]!
  periodicities: [PaymentPeriodicity!]!
}

type SubscriptionInterval {
  daysAwayFromEnding: Int
  event: SubscriptionEvent!
  id: String!
  mailTemplate: MailTemplateRef
}

type SystemMailModel {
  event: UserEvent!
  mailTemplate: MailTemplateRef
}

type Tag {
  id: ID!
}

union Teaser = ArticleTeaser | CustomTeaser | EventTeaser | PageTeaser | PeerArticleTeaser

type TeaserListBlockFilter {
  tags: [ID!]
}

input UpdateAuthorInput {
  bio: RichText
  id: String!
  imageID: String
  jobTitle: String
  links: [AuthorsLinksInput!]
  name: String
  slug: Slug
  tagIds: [String!]
}

input UpdateMemberPlanInput {
  active: Boolean!
  amountPerMonthMin: Float!
  description: String!
  extendable: Boolean!
  id: ID!
  imageID: String
  maxCount: Float
  name: String!
  slug: String!
  tags: [String!]!
}

input UpdateNavigationInput {
  id: ID!
  key: String!
  links: [NavigationLinkInput!]!
  name: String!
}

input UpdatePaymentMethodInput {
  active: Boolean
  description: String
  id: ID!
  name: String
  paymentProviderID: String
  slug: String
}

input UpdateUserRoleInput {
  id: String!
  name: String
  permissionIDs: [String!]
}

type UserConsent {
  consent: Consent!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  user: UserV2!
  value: Boolean!
}

type UserCreatedAction {
  actionType: ActionType!
  date: DateTime!
  id: ID!
}

enum UserEvent {
  ACCOUNT_CREATION
  LOGIN_LINK
  PASSWORD_RESET
  TEST_MAIL
}

type UserRole {
  description: String
  id: String!
  name: String!
  permissionIDs: [String!]!
  permissions: [PermissionObject!]
  systemRole: Boolean!
}

input UserRoleFilter {
  name: String
}

type UserV2 {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: String!
  lastLogin: DateTime
  modifiedAt: DateTime!
  name: String!
  password: String!
  preferredName: String
  roleIDs: [String!]!
  userImageID: String
}

type VersionInformation {
  version: String!
}

scalar link__Import