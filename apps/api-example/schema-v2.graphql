# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Consent {
  createdAt: DateTime!
  defaultValue: Boolean!
  id: String!
  modifiedAt: DateTime!
  name: String!
  slug: String!
}

input ConsentFilter {
  defaultValue: Boolean
  name: String
  slug: String
}

input ConsentInput {
  defaultValue: Boolean!
  name: String!
  slug: String!
}

input CreateEventArgs {
  id: String!
  source: String!
}

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  createdAt: DateTime!
  description: RichText!
  endsAt: DateTime
  externalSourceId: String!
  externalSourceName: String!
  id: String!
  imageUrl: String
  location: String!
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
}

enum EventStatus {
  Cancelled
  Postponed
  Rescheduled
  Scheduled
}

input ImportedEventFilter {
  name: String
}

enum ImportedEventSort {
  CREATED_AT
  ENDS_AT
  MODIFIED_AT
  STARTS_AT
}

type ImportedEventsDocument {
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Mutation {
  """
  
        Create a new consent.
      
  """
  createConsent(consent: ConsentInput!): Consent!

  """
  
        Creates and event based on data from importable events list and an id and provider.
        Also, uploads an image to WePublish Image library.
      
  """
  createEvent(filter: CreateEventArgs!): String!

  """
  
        Creates a new userConsent based on input.
        Returns created userConsent.
      
  """
  createUserConsent(userConsent: UserConsentInput!): UserConsent!

  """
  
        Deletes an existing consent.
      
  """
  deleteConsent(id: String!): Consent!

  """
  
        Delete an existing userConsent by id.
        Returns deleted userConsent.
      
  """
  deleteUserConsent(id: String!): UserConsent!

  """
  
        Updates an existing consent.
      
  """
  updateConsent(consent: ConsentInput!, id: String!): Consent!

  """
  
        Updates an existing userConsent based on input.
        Returns updated userConsent.
      
  """
  updateUserConsent(id: String!, userConsent: UpdateUserConsentInput!): UserConsent!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

type Query {
  """
  
        Returns all active subscribers.
        Includes subscribers with a cancelled but not run out subscription.
      
  """
  activeSubscribers: [DashboardSubscription!]!

  """
  
        Returns a consent by id.
      
  """
  consent(id: String!): Consent!

  """
  
        Returns all consents.
      
  """
  consents(filter: ConsentFilter): [Consent!]!

  """
  
        Returns the expected revenue for the time period given.
        Excludes cancelled or manually set as paid invoices.
      
  """
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """
  
        Returns a more detailed version of a single importable event, by id and source (e.g. AgendaBasel).
      
  """
  importedEvent(filter: SingleEventFilter!): Event!

  """
  
        Returns a list of imported events from external sources, transformed to match our model.
      
  """
  importedEvents(filter: ImportedEventFilter, order: Int, skip: Int, sort: ImportedEventSort, take: Int): ImportedEventsDocument!

  """
  
        Returns a list of external source ids of already imported events.
      
  """
  importedEventsIds: [String!]!

  """
  
        Returns all new deactivations in a given timeframe.
        This considers the time the deactivation was made, not when the subscription runs out.
      
  """
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns all new subscribers in a given timeframe.
        Includes already deactivated ones.
      
  """
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns all renewing subscribers in a given timeframe.
      
  """
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns the revenue generated for the time period given.
        Only includes paid invoices that have not been manually paid.
      
  """
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """
  
        Returns a single userConsent by id.
      
  """
  userConsent(id: String!): UserConsent!

  """
  
        Returns a list of userConsents. Possible to filter.
      
  """
  userConsents(filter: UserConsentFilter): [UserConsent!]!
  versionInformation: VersionInformation!
}

scalar RichText

input SingleEventFilter {
  id: String!
  source: String!
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userSelfDeactivated
}

input UpdateUserConsentInput {
  value: Boolean!
}

type User {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: String!
  lastLogin: DateTime
  modifiedAt: DateTime!
  name: String!
  password: String!
  preferredName: String
  roleIDs: [String!]!
  userImageID: String
}

type UserConsent {
  consent: Consent!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  user: User!
  value: Boolean!
}

input UserConsentFilter {
  name: String
  slug: String
  value: Boolean
}

input UserConsentInput {
  consentId: String!
  userId: String!
  value: Boolean!
}

type VersionInformation {
  version: String!
}
