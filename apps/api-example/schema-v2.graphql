# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Consent {
  createdAt: DateTime!
  defaultValue: ConsentValue!
  id: String!
  modifiedAt: DateTime!
  name: String!
  slug: String!
}

input ConsentFilter {
  defaultValue: ConsentValue
  name: String
  slug: String
}

input ConsentInput {
  defaultValue: ConsentValue!
  name: String!
  slug: String!
}

enum ConsentValue {
  Accepted
  Rejected
  Unset
}

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  """
  
        Create a new Consent.
      
  """
  createConsent(consent: ConsentInput!): Consent!

  """
  
        Create a new UserConsent.
      
  """
  createUserConsent(userConsent: UserConsentInput!): UserConsent!

  """
  
        Deletes an existing Consent.
      
  """
  deleteConsent(id: String!): Consent!

  """
  
        Delete an existing UserConsent.
      
  """
  deleteUserConsent(id: String!): UserConsent!

  """
  
        Update an existing Consent.
      
  """
  updateConsent(consent: ConsentInput!, id: String!): Consent!

  """
  
        Update an existing UserConsent.
      
  """
  updateUserConsent(id: String!, userConsent: UpdateUserConsentInput!): UserConsent!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

type Query {
  """
  
        Returns all active subscribers.
        Includes subscribers with a cancelled but not run out subscription.
      
  """
  activeSubscribers: [DashboardSubscription!]!

  """
  
        Returns Consent by id.
      
  """
  consent(id: String!): Consent!

  """
  
        Returns all Consents.
      
  """
  consents(filter: ConsentFilter): [Consent!]!

  """
  
        Returns the expected revenue for the time period given.
        Excludes cancelled or manually set as paid invoices.
      
  """
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """
  
        Returns all new deactivations in a given timeframe.
        This considers the time the deactivation was made, not when the subscription runs out.
      
  """
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns all new subscribers in a given timeframe.
        Includes already deactivated ones.
      
  """
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns all renewing subscribers in a given timeframe.
      
  """
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """
  
        Returns the revenue generated for the time period given.
        Only includes paid invoices that have not been manually paid.
      
  """
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """
  
        Returns userConsent by id.
      
  """
  userConsent(id: String!): UserConsent!

  """
  
        Returns all userConsents.
      
  """
  userConsents(filter: UserConsentFilter): [UserConsent!]!
  versionInformation: VersionInformation!
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userSelfDeactivated
}

input UpdateUserConsentInput {
  value: ConsentValue!
}

type User {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: String!
  lastLogin: DateTime
  modifiedAt: DateTime!
  name: String!
  password: String!
  preferredName: String
  roleIDs: [String!]!
  userImageID: String
}

type UserConsent {
  consent: Consent!
  consentId: String!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  user: User!
  userId: String!
  value: ConsentValue!
}

input UserConsentFilter {
  defaultValue: ConsentValue
  name: String
  slug: String
}

input UserConsentInput {
  consentId: String!
  userId: String!
  value: ConsentValue!
}

type VersionInformation {
  version: String!
}
