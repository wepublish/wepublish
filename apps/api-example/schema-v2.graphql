# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type AllowedSettingVals {
  boolChoice: Boolean
  stringChoice: [String!]
}

type Article {
  id: ID!
}

type AvailablePaymentMethod {
  forceAutoRenewal: Boolean!
  paymentMethods: [PaymentMethod!]!
  paymentPeriodicities: [PaymentPeriodicity!]!
}

type Banner {
  actions: [BannerAction!]
  active: Boolean!
  cta: String
  id: ID!
  image: Image
  imageId: String
  showForLoginStatus: LoginStatus!
  showOnArticles: Boolean!
  showOnPages: [PageModel!]
  text: String!
  title: String!
}

type BannerAction {
  id: ID!
  label: String!
  role: BannerActionRole!
  style: String!
  url: String!
}

enum BannerActionRole {
  CANCEL
  OTHER
  PRIMARY
}

enum BannerDocumentType {
  ARTICLE
  PAGE
}

type BlockStyle {
  blocks: [BlockType!]!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  name: String!
}

enum BlockType {
  Comment
  Embed
  Event
  HTML
  Image
  ImageGallery
  LinkPageBreak
  Listicle
  Poll
  Quote
  RichText
  Subscribe
  TeaserGrid1
  TeaserGrid6
  TeaserGridFlex
  TeaserList
  Title
}

type Consent {
  createdAt: DateTime!
  defaultValue: Boolean!
  id: String!
  modifiedAt: DateTime!
  name: String!
  slug: String!
}

input ConsentFilter {
  defaultValue: Boolean
  name: String
  slug: String
}

input CreateBannerActionInput {
  label: String!
  role: BannerActionRole!
  style: String!
  url: String!
}

input CreateBannerInput {
  actions: [CreateBannerActionInput!]
  active: Boolean!
  cta: String
  imageId: String
  showForLoginStatus: LoginStatus!
  showOnArticles: Boolean!
  showOnPages: [PageModelInput!]
  text: String!
  title: String!
}

enum Currency {
  CHF
  EUR
}

type DashboardInvoice {
  amount: Int!
  dueAt: DateTime!
  memberPlan: String
  paidAt: DateTime
}

type DashboardSubscription {
  deactivationDate: DateTime
  endsAt: DateTime
  memberPlan: String!
  monthlyAmount: Int!
  paymentPeriodicity: PaymentPeriodicity!
  reasonForDeactivation: SubscriptionDeactivationReason
  renewsAt: DateTime
  startsAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletePollVotesResult {
  count: Int!
}

type EventFromSource {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  imageUrl: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
}

enum EventStatus {
  Cancelled
  Postponed
  Rescheduled
  Scheduled
}

type EventV2 {
  createdAt: DateTime!
  description: RichText
  endsAt: DateTime
  externalSourceId: String
  externalSourceName: String
  id: ID!
  image: Image
  imageId: String
  lead: String
  location: String
  modifiedAt: DateTime!
  name: String!
  startsAt: DateTime!
  status: EventStatus!
}

type FocalPoint {
  x: Float!
  y: Float!
}

"""Setting Value"""
scalar GraphQLSettingValueType

type Image {
  id: ID!
}

type ImageV2 {
  createdAt: DateTime!
  description: RichText
  extension: String!
  fileSize: Int!
  filename: String
  focalPoint: FocalPoint
  format: String!
  height: Int!
  id: ID!
  license: String
  link: String
  mimeType: String!
  modifiedAt: DateTime!
  source: String
  tags: [String!]!
  title: String
  width: Int!
}

input ImportedEventFilter {
  from: String
  location: String
  name: String
  providers: [String]
  to: String
}

enum ImportedEventSort {
  CREATED_AT
  ENDS_AT
  MODIFIED_AT
  STARTS_AT
}

type ImportedEventsDocument {
  nodes: [EventFromSource!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

enum LoginStatus {
  ALL
  LOGGED_IN
  LOGGED_OUT
}

type MailProviderModel {
  name: String!
}

type MailTemplateRef {
  id: String!
  name: String!
}

type MailTemplateWithUrlAndStatusModel {
  description: String
  externalMailTemplateId: String!
  id: String!
  name: String!
  remoteMissing: Boolean!
  status: String!
  url: String!
}

type MemberPlan {
  amountPerMonthMin: Int!
  amountPerMonthTarget: Int
  availablePaymentMethods: [AvailablePaymentMethod!]!
  currency: Currency!
  description: RichText
  extendable: Boolean!
  failPage: Page
  failPageId: ID
  id: ID!
  image: Image
  maxCount: Int
  name: String!
  slug: String!
  successPage: Page
  successPageId: ID
  tags: [String!]
}

type Mutation {
  createBanner(input: CreateBannerInput!): Banner!

  """Creates a new block style."""
  createBlockStyle(blocks: [BlockType!]!, name: String!): BlockStyle!

  "\n      Create a new consent.\n    "
  createConsent(defaultValue: Boolean!, name: String!, slug: String!): Consent!

  """Create a new subscription flow"""
  createSubscriptionFlow(autoRenewal: [Boolean!]!, memberPlanId: String!, paymentMethodIds: [String!]!, periodicities: [PaymentPeriodicity!]!): [SubscriptionFlowModel!]!

  """Create a subscription interval"""
  createSubscriptionInterval(daysAwayFromEnding: Int, event: SubscriptionEvent!, mailTemplateId: String, subscriptionFlowId: String!): [SubscriptionFlowModel!]!

  "\n      Creates a new userConsent based on input.\n      Returns created userConsent.\n    "
  createUserConsent(consentId: String!, userId: String!, value: Boolean!): UserConsent!
  deleteBanner(id: String!): Boolean

  """Deletes an existing block style."""
  deleteBlockStyle(id: String!): BlockStyle!

  "\n      Deletes an existing consent.\n    "
  deleteConsent(id: String!): Consent!

  """Delete poll votes"""
  deletePollVotes(ids: [ID!]!): DeletePollVotesResult!

  """Delete an existing subscription flow"""
  deleteSubscriptionFlow(id: String!): [SubscriptionFlowModel!]!

  """Delete an existing subscription interval"""
  deleteSubscriptionInterval(id: String!): [SubscriptionFlowModel!]!

  "\n      Delete an existing userConsent by id.\n      Returns deleted userConsent.\n    "
  deleteUserConsent(id: String!): UserConsent!

  "\n      Creates and event based on data from importable events list and an id and provider.\n      Also, uploads an image to WePublish Image library.\n    "
  importEvent(id: String!, source: String!): String!
  syncTemplates: Boolean

  """Sends a test email for the given event"""
  testSystemMail(event: UserEvent!): Boolean!
  updateBanner(input: UpdateBannerInput!): Banner!

  """Updates an existing block style."""
  updateBlockStyle(blocks: [BlockType!], id: String!, name: String): BlockStyle!

  "\n      Updates an existing consent.\n    "
  updateConsent(defaultValue: Boolean, id: String!, name: String, slug: String): Consent!

  """Updates an existing setting."""
  updateSetting(name: SettingName!, value: GraphQLSettingValueType!): Setting!

  """Update an existing subscription flow"""
  updateSubscriptionFlow(autoRenewal: [Boolean!], id: String!, paymentMethodIds: [String!], periodicities: [PaymentPeriodicity!]): [SubscriptionFlowModel!]!

  """Update an existing subscription interval"""
  updateSubscriptionInterval(daysAwayFromEnding: Int, id: String!, mailTemplateId: String): [SubscriptionFlowModel!]!

  """Updates an existing mail flow"""
  updateSystemMail(event: UserEvent!, mailTemplateId: String!): [SystemMailModel!]!

  "\n      Updates an existing userConsent based on input.\n      Returns updated userConsent.\n    "
  updateUserConsent(id: String!, value: Boolean!): UserConsent!
}

type Page {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PageModel {
  id: ID!
}

input PageModelInput {
  id: ID!
}

type PaginatedPollVotes {
  nodes: [PollVote!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaymentMethod {
  description: String!
  id: ID!
  image: Image
  imageId: String
  name: String!
  paymentProviderID: String!
  slug: Slug!
}

enum PaymentPeriodicity {
  biannual
  monthly
  quarterly
  yearly
}

type PeriodicJob {
  createdAt: DateTime!
  date: DateTime!
  error: String
  executionTime: DateTime
  finishedWithError: DateTime
  id: String!
  modifiedAt: DateTime!
  successfullyFinished: DateTime
  tries: Float!
}

type PollAnswerInVote {
  answer: String!
  id: ID!
}

type PollVote {
  answer: PollAnswerInVote!
  answerId: ID!
  createdAt: DateTime!
  disabled: Boolean!
  fingerprint: String
  id: ID!
  pollId: ID!
  userId: ID
}

input PollVoteFilter {
  answerIds: [String!]
  fingerprint: String
  from: DateTime
  pollId: String
  to: DateTime
  userId: String
}

enum PollVoteSort {
  CreatedAt
}

type Query {
  "\n      Returns all active subscribers.\n      Includes subscribers with a cancelled but not run out subscription.\n    "
  activeSubscribers: [DashboardSubscription!]!
  banner(id: String!): Banner!
  banners(skip: Int!, take: Int!): [Banner!]!

  """Returns a list of block styles."""
  blockStyles: [BlockStyle!]!

  "\n      Returns a consent by id.\n    "
  consent(id: String!): Consent!

  "\n      Returns all consents.\n    "
  consents(filter: ConsentFilter): [Consent!]!

  "\n      Returns a list of Importable Event Providers\n    "
  eventProviders: [String!]!

  "\n      Returns the expected revenue for the time period given.\n      Excludes cancelled or manually set as paid invoices.\n    "
  expectedRevenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  """Returns an image by id."""
  getImage(id: String!): ImageV2!

  "\n      Returns the most viewed articles in descending order.\n    "
  hotAndTrending(start: DateTime, take: Int = 10): [Article!]!

  "\n      Returns a more detailed version of a single importable event, by id and source.\n    "
  importedEvent(filter: SingleEventFilter!): EventFromSource!

  "\n      Returns a list of imported events from external sources, transformed to match our model.\n    "
  importedEvents(filter: ImportedEventFilter, order: Int, skip: Int, sort: ImportedEventSort, take: Int): ImportedEventsDocument!

  "\n      Returns a list of external source ids of already imported events.\n    "
  importedEventsIds: [String!]!

  """Return all mail templates"""
  mailTemplates: [MailTemplateWithUrlAndStatusModel!]!

  "\n      Returns all new deactivations in a given timeframe.\n      This considers the time the deactivation was made, not when the subscription runs out.\n    "
  newDeactivations(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns all new subscribers in a given timeframe.\n      Includes already deactivated ones.\n    "
  newSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  """Returns all payment methods"""
  paymentMethods: [PaymentMethod!]!
  periodicJobLog(skip: Int, take: Int = 10): [PeriodicJob!]!

  """Returns a paginated list of poll votes"""
  pollVotes(cursorId: ID, filter: PollVoteFilter, order: SortOrder = Ascending, skip: Int = 0, sort: PollVoteSort = CreatedAt, take: Int = 10): PaginatedPollVotes!
  primaryBanner(documentId: ID!, documentType: BannerDocumentType!, loggedIn: Boolean!): Banner
  provider: MailProviderModel!

  "\n      Returns all renewing subscribers in a given timeframe.\n    "
  renewingSubscribers(end: DateTime, start: DateTime!): [DashboardSubscription!]!

  "\n      Returns the revenue generated for the time period given.\n      Only includes paid invoices that have not been manually paid.\n    "
  revenue(end: DateTime, start: DateTime!): [DashboardInvoice!]!

  "\n      Returns a single setting by name.\n    "
  setting(name: String!): Setting!

  "\n      Returns a single setting by id.\n    "
  settingById(id: String!): Setting!

  "\n      Returns all settings.\n    "
  settings(filter: SettingFilter): [Setting!]!
  stats: Stats

  """Returns all subscription flows"""
  subscriptionFlows(defaultFlowOnly: Boolean!, memberPlanId: String): [SubscriptionFlowModel!]!

  """Returns all mail flows"""
  systemMails: [SystemMailModel!]!

  "\n      Returns a single userConsent by id.\n    "
  userConsent(id: String!): UserConsent!

  "\n      Returns a list of userConsents. Possible to filter.\n    "
  userConsents(name: String, slug: String, value: Boolean): [UserConsent!]!
  versionInformation: VersionInformation!
}

scalar RichText

type Setting {
  id: ID!
  name: SettingName!
  settingRestriction: SettingRestriction
  value: GraphQLSettingValueType
}

input SettingFilter {
  name: String
}

enum SettingName {
  ALLOW_COMMENT_EDITING
  ALLOW_GUEST_COMMENTING
  ALLOW_GUEST_COMMENT_RATING
  ALLOW_GUEST_POLL_VOTING
  COMMENT_CHAR_LIMIT
  MAIL_PROVIDER_NAME
  MAKE_ACTIVE_SUBSCRIBERS_API_PUBLIC
  MAKE_EXPECTED_REVENUE_API_PUBLIC
  MAKE_NEW_DEACTIVATIONS_API_PUBLIC
  MAKE_NEW_SUBSCRIBERS_API_PUBLIC
  MAKE_RENEWING_SUBSCRIBERS_API_PUBLIC
  MAKE_REVENUE_API_PUBLIC
  PEERING_TIMEOUT_MS
  RESET_PASSWORD_JWT_EXPIRES_MIN
  SEND_LOGIN_JWT_EXPIRES_MIN
}

type SettingRestriction {
  allowedValues: AllowedSettingVals
  inputLength: Int
  maxValue: Int
  minValue: Int
}

input SingleEventFilter {
  id: String!
  source: String!
}

scalar Slug

enum SortOrder {
  Ascending
  Descending
}

type Stats {
  articlesCount: Int!
  authorsCount: Int!
  firstArticleDate: DateTime
}

enum SubscriptionDeactivationReason {
  invoiceNotPaid
  none
  userReplacedSubscription
  userSelfDeactivated
}

enum SubscriptionEvent {
  CONFIRM_SUBSCRIPTION
  CUSTOM
  DEACTIVATION_BY_USER
  DEACTIVATION_UNPAID
  INVOICE_CREATION
  RENEWAL_FAILED
  RENEWAL_SUCCESS
  SUBSCRIBE
}

type SubscriptionFlowModel {
  autoRenewal: [Boolean!]!
  default: Boolean!
  id: String!
  intervals: [SubscriptionInterval!]!
  memberPlan: MemberPlan
  numberOfSubscriptions: Int!
  paymentMethods: [PaymentMethod!]!
  periodicities: [PaymentPeriodicity!]!
}

type SubscriptionInterval {
  daysAwayFromEnding: Int
  event: SubscriptionEvent!
  id: String!
  mailTemplate: MailTemplateRef
}

type SystemMailModel {
  event: UserEvent!
  mailTemplate: MailTemplateRef
}

input UpdateBannerInput {
  actions: [CreateBannerActionInput!]
  active: Boolean!
  cta: String
  id: ID!
  imageId: String
  showForLoginStatus: LoginStatus!
  showOnArticles: Boolean!
  showOnPages: [PageModelInput!]
  text: String!
  title: String!
}

type User {
  email: String!
  emailVerifiedAt: DateTime
  firstName: String
  id: String!
  lastLogin: DateTime
  name: String!
  roleIDs: [String!]
  userImageID: String
}

type UserConsent {
  consent: Consent!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime!
  user: User!
  value: Boolean!
}

enum UserEvent {
  ACCOUNT_CREATION
  LOGIN_LINK
  PASSWORD_RESET
  TEST_MAIL
}

type VersionInformation {
  version: String!
}

scalar link__Import