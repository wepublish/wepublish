name: Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: review-${{ github.head_ref }}
  cancel-in-progress: true

env:
  API_URL: https://api-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  EDITOR_URL: https://editor-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  WEBSITE_URL: https://website-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  MEDIA_SERVER_URL: https://media-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  STORYBOOK_URL: https://storybook-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  PROJECT_URL_SUFFIX: -${{ github.event.pull_request.number }}.reviews.wepublish.dev

jobs:
  publish_docker_base_image:
    name: Docker base image
    uses: ./.github/workflows/on-demand-publish-base-docker-image.yml
    secrets: inherit

  publish_docker_image:
    needs: [publish_docker_base_image]
    name: Docker backend images
    uses: ./.github/workflows/on-demand-publish-docker-image.yml
    with:
      editor_tags: |
        ghcr.io/wepublish/editor:${{ github.sha }}
      api_tags: |
        ghcr.io/wepublish/api:${{ github.sha }}
      migration_tags: |
        ghcr.io/wepublish/migration:${{ github.sha }}
      storybook_tags: |
        ghcr.io/wepublish/storybook:${{ github.sha }}
      media_tags: |
        ghcr.io/wepublish/media:${{ github.sha }}
    secrets: inherit

  helm_deployment_deps:
    name: Helm deployment dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      S3_ACCESS_KEY_ID: accessKey
      S3_SECRET_ACCESS_KEY: secretKey
      S3_BUCKET: data-store

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.12.3'

      - name: Authenticate kubectl
        uses: 'google-github-actions/auth@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}

      - name: Prepare kubectl
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          cluster_name: development
          location: europe-west6

      - name: Ensure namespace exists
        run: |
          kubectl create namespace reviews --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm deploy minio server
        run: |
          cat > values.yaml <<EOF
          auth:
            rootUser: ${S3_ACCESS_KEY_ID}
            rootPassword: ${S3_SECRET_ACCESS_KEY}
          disableWebUI: true
          console:
            enabled: false
          defaultBuckets: wepublish-staff,wepublish-transformed
          persistence:
            enabled: false
          resourcesPreset: "none"
          resources:
            requests:
              memory: "200Mi"
              cpu: "50m"
            limits:
              memory: "300Mi"
              cpu: "200m"
          service:
            type: LoadBalancer
            port: 9000
          EOF
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install review-${{ github.event.pull_request.number }}-minio bitnami/minio -n reviews -f values.yaml

      - name: Helm deploy database
        run: |
          cat > values.yaml <<EOF
          global:
            postgresql:
              auth:
                enablePostgresUser: true
                postgresPassword: "foo"
                username: wepublish
                password: wepublish
                database: wepublish
          primary:
            resourcesPreset: "none"
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          EOF
          helm upgrade --install review-${{ github.event.pull_request.number }}-database oci://registry-1.docker.io/bitnamicharts/postgresql -n reviews -f values.yaml --wait

  helm_deployment:
    name: Helm deployment
    needs: [publish_docker_image, helm_deployment_deps]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.12.3'

      - name: Authenticate kubectl
        uses: 'google-github-actions/auth@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}

      - name: Prepare kubectl
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          cluster_name: development
          location: europe-west6

      - name: Helm deploy app
        run: |
          cat > values.yaml <<EOF
          deployment:
            env:
              API_URL: ${API_URL}
              EDITOR_URL: ${EDITOR_URL}
              WEBSITE_URL: ${WEBSITE_URL}
              MEDIA_SERVER_URL: ${MEDIA_SERVER_URL}
          migration:
            image: ghcr.io/wepublish/migration:${{ github.sha }}
            env:
              DATABASE_URL: postgres://postgres:foo@review-${{ github.event.pull_request.number }}-database-postgresql.reviews.svc.cluster.local:5432/wepublish?schema=public
              OVERRIDE_ADMIN_PW: '123'
            requests:
              memory: "200Mi"
              cpu: "30m"
            limits:
              memory: "500Mi"
              cpu: "200m"
          api:
            image: ghcr.io/wepublish/api:${{ github.sha }}
            resources:
              requests:
                memory: "200Mi"
                cpu: "100m"
              limits:
                memory: "1024Mi"
                cpu: "1000m"
            env:
              GOOGLE_APPLICATION_CREDENTIALS: /var/secrets/google/key.json
              DATABASE_URL: postgres://postgres:foo@review-${{ github.event.pull_request.number }}-database-postgresql.reviews.svc.cluster.local:5432/wepublish?schema=public
              MEDIA_SERVER_TOKEN: 'media-token'
              JWT_SECRET_KEY: 'jwt-token'
              DEFAULT_FROM_ADDRESS: 'dev@wepublish.ch'
              DEFAULT_REPLY_TO_ADDRESS: 'dev@wepublish.ch'
              SYSTEM_INFO_KEY: 'review'
            config:
              general:
                urlAdapter: hauptstadt
                apolloPlayground: true
                apolloIntrospection: true
                bcryptHashCostFactor: 12
              mailProvider:
                id: slackMail
                fromAddress: dev@wepublish.ch
                webhookURL: 'SLACK_DEV_MAIL_WEBHOOK_URL'

              paymentProviders:
                - type: payrexx
                  id: payrexx
                  name: Payrexx
                  offSessionPayments: true
                  instanceName: wepublish-sandbox
                  instanceAPISecret: ${{ secrets.PAYREXX_API_SECRET }}
                  webhookApiKey: ${{ secrets.PAYREXX_WEBHOOK_SECRET }}
                  psp: [ 0, 15, 17, 2, 3, 36 ]
                  pm: ['visa', 'mastercard']
                  vatRate: 8.1

                - type: stripe
                  id: stripe
                  name: Stripe
                  offSessionPayments: true
                  secretKey: key
                  webhookEndpointSecret: wh_secret

                - type: stripe-checkout
                  id: stripe-checkout
                  name: Stripe Checkout
                  offSessionPayments: false
                  secretKey: key
                  webhookEndpointSecret: wh_secret

                - type: payrexx-subscription
                  id: payrexx-subscription
                  name: Payrexx Subscription
                  instanceName: wepublish-sandbox
                  instanceAPISecret: ${{ secrets.PAYREXX_API_SECRET }}
                  webhookEndpointSecret: ${{ secrets.PAYREXX_WEBHOOK_SECRET }}

                - type: bexio
                  id: bexio
                  name: Bexio
                  apiKey: secret
                  userId: '1'
                  countryId: '1'
                  invoiceTemplateNewMembership: 'template-name'
                  invoiceTemplateRenewalMembership: 'template-name'
                  unitId: '1'
                  taxId: '17'
                  accountId: '139'
                  invoiceTitleNewMembership: "New Invoice"
                  invoiceTitleRenewalMembership: "New Invoice"
                  invoiceMailSubjectNewMembership: "Invoice for :memberPlan.name:"
                  invoiceMailBodyNewMembership: "Hello :user.firstname:\n\nThank you for subscribing to :memberPlan.name:.\nYou can view your invoice here: [Network Link]\n\nBest wishes from the Wepublish team"
                  invoiceMailSubjectRenewalMembership: "Invoice for :memberPlan.name:"
                  invoiceMailBodyRenewalMembership: "Hello :user.firstname:\n\nThank you for subscribing to :memberPlan.name:.\nYou can view your invoice here: [Network Link]\n\nBest wishes from the Wepublish team"
                  markInvoiceAsOpen: False

                - type: mollie
                  id: mollie
                  name: Mollie
                  offSessionPayments: true
                  apiKey: ${{ secrets.MOLLIE_API_KEY }}
                  webhookEndpointSecret: secret
                  apiBaseUrl: ${{ env.API_URL }}

              challenge:
                type: 'turnstile'
                secret: 1x0000000000000000000000000000000AA
                siteKey: 1x00000000000000000000AA

              trackingPixelProviders:
                - type: prolitteris
                  id: prolitteris
                  name: "Pro Litteris"
                  memberNr: '892761'
                  onlyPaidContentAccess: false
                  publisherInternalKeyDomain: 'pl02.owen.prolitteris.ch'
                  usePublisherInternalKey: true

              mediaServer:
                type: 'nova'
          editor:
            image: ghcr.io/wepublish/editor:${{ github.sha }}
            env:
              PEER_BY_DEFAULT: "true"
            resources:
              requests:
                memory: "32Mi"
                cpu: "20m"
              limits:
                memory: "64Mi"
                cpu: "100m"
          storybook:
            enabled: true
            image: ghcr.io/wepublish/storybook:${{ github.sha }}
            url: ${STORYBOOK_URL}
            resources:
              requests:
                memory: "8Mi"
                cpu: "5m"
              limits:
                memory: "32Mi"
                cpu: "50m"
          media:
            image: ghcr.io/wepublish/media:${{ github.sha }}
            env:
              TOKEN: media-token
              S3_ACCESS_KEY: accessKey
              S3_SECRET_KEY: secretKey
              S3_ENDPOINT: 'review-${{ github.event.pull_request.number }}-minio.reviews.svc.cluster.local'
              S3_PORT: '9000'
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "512Mi"
                cpu: "150m"
          EOF
          export POD_NAME=review-${{ github.event.pull_request.number }}-app
          if [[ ! -z $(helm ls -a -n reviews |grep ${POD_NAME} |grep -v "deployed ") ]]; then helm uninstall -n reviews ${POD_NAME}; fi
          helm upgrade --install ${POD_NAME} ./helm/charts/wepublish -n reviews -f values.yaml --wait

  setup-website-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up matrix
        id: set-matrix
        run: deployment/read_deployment_config.sh '.website.review.deployment' true

  publish_docker_website_image:
    name: Build Docker Website
    needs: [setup-website-matrix, helm_deployment, publish_docker_base_image]
    if: ${{ needs.helm_deployment.result == 'success' }}
    uses: ./.github/workflows/on-demand-publish-docker-image-website.yml
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-website-matrix.outputs.matrix)}}
    with:
      website_project: ${{ matrix.target }}
      api_url: https://api-${{ github.event.pull_request.number }}.reviews.wepublish.dev
      environment: review
      website_tags: |
        ghcr.io/wepublish/website-${{ matrix.target }}:${{ github.sha }}
    secrets: inherit

  #  helm_deployment_website:
  #    name: Helm Deployment Website
  #    needs: [publish_docker_website_image, setup-website-matrix]
  #    if: ${{ needs.publish_docker_website_image.result == 'success' }}
  #    uses: ./.github/workflows/on-demand-deploy-helm-website.yml
  #    strategy:
  #      matrix: ${{fromJson(needs.setup-website-matrix.outputs.matrix)}}
  #    with:
  #      website_project: ${{ matrix.target }}
  #      api_url: https://api-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  #    secrets: inherit

  notify:
    name: Notify
    needs: [setup-website-matrix, publish_docker_website_image]
    if: ${{ needs.publish_docker_website_image.result == 'success' }}
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
      - name: Create Deployment Text
        id: deploymentComment
        env:
          PROJECTS: ${{needs.setup-website-matrix.outputs.matrix}}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          cd ./config
          npm ci
          OUTPUT=$(node ./notify-github.js)
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-OUTPUT name=result::$OUTPUT"

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ${{ steps.deploymentComment.outputs.result }}

      - name: Notify Jira
        env:
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          PROJECTS: ${{needs.setup-website-matrix.outputs.matrix}}
        run: |
          cd ./config
          npm ci
          node ./notify-jira.js
