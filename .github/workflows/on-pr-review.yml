name: Review

on:
  pull_request:
    types: [ opened, synchronize, reopened]

concurrency:
  group: review-${{ github.head_ref }}
  cancel-in-progress: true


env:
  API_URL: https://api-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  EDITOR_URL: https://editor-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  WEBSITE_URL: https://website-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  MEDIA_SERVER_URL: https://media-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  STORYBOOK_URL: https://storybook-${{ github.event.pull_request.number }}.reviews.wepublish.dev
  PROJECT_URL_SUFFIX: -review-${{ github.event.pull_request.number }}.wepublish.vercel.app

jobs:
  publish_docker_image:
    name: Docker
    uses: ./.github/workflows/on-demand-publish-docker-image.yml
    with:
      editor_tags: |
        ghcr.io/wepublish/editor:${{ github.sha }}
      api_tags: |
        ghcr.io/wepublish/api:${{ github.sha }}
      migration_tags: |
        ghcr.io/wepublish/migration:${{ github.sha }}
      storybook_tags: |
        ghcr.io/wepublish/storybook:${{ github.sha }}
      website_tags: |
        ghcr.io/wepublish/website:${{ github.sha }}
    secrets: inherit

  helm_deployment_deps:
    name: Helm deployment dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      S3_ACCESS_KEY_ID: accessKey
      S3_SECRET_ACCESS_KEY: secretKey
      S3_BUCKET: data-store

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.12.3'

      - name: Authenticate kubectl
        uses: 'google-github-actions/auth@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}

      - name: Prepare kubectl
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          cluster_name: development
          location: europe-west6

      - name: Ensure namespace exists
        run: |
          kubectl create namespace reviews --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm deploy minio server
        run: |
          cat > values.yaml <<EOF
          auth:
            rootUser: ${S3_ACCESS_KEY_ID}
            rootPassword: ${S3_SECRET_ACCESS_KEY}
          disableWebUI: true
          defaultBuckets: ${S3_BUCKET}
          persistence:
            enabled: false
          service:
            type: LoadBalancer
            port: 9000
          EOF
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install review-${{ github.event.pull_request.number }}-minio bitnami/minio -n reviews -f values.yaml

      - name: Helm deploy media-server
        run: |
          cat > values.yaml <<EOF
          deployment:
            image: seccomch/wep-media-light:latest
            env:
              TOKEN: media-token
              DEBUG: 'false'
              NUM_CLUSTERS: '1'
              AWS_S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
              AWS_S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
              AWS_S3_BUCKET: ${S3_BUCKET}
              AWS_S3_REGION: 'us-east-1'
              AWS_S3_ENDPOINT: 'http://review-${{ github.event.pull_request.number }}-minio.reviews.svc.cluster.local:9000'
              AWS_STORAGE_CLASS: 'REDUCED_REDUNDANCY'
              AWS_S3_FORCE_PATH_STYLE: 'true'
            replicaCount: 1
          service:
            type: ClusterIP
            port: 80
          ingress:
            enabled: true
            host: media-${{ github.event.pull_request.number }}.reviews.wepublish.dev
            path: /
          pvc:
            enabled: false
          labels: { }
          EOF
          helm upgrade --install review-${{ github.event.pull_request.number }}-media-server karma-media-server --repo https://gitlab.com/api/v4/projects/38941346/packages/helm/stable -n reviews -f values.yaml --version 1.0.6

      - name: Helm deploy database
        run: |
          cat > values.yaml <<EOF
          global:
            postgresql:
              auth:
                enablePostgresUser: true
                postgresPassword: "foo"
                username: wepublish
                password: wepublish
                database: wepublish
          primary:
            resourcesPreset: "none"
          EOF
          helm upgrade --install review-${{ github.event.pull_request.number }}-database oci://registry-1.docker.io/bitnamicharts/postgresql -n reviews -f values.yaml --wait


  helm_deployment:
    name: Helm deployment
    needs: [publish_docker_image, helm_deployment_deps]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.12.3'

      - name: Authenticate kubectl
        uses: 'google-github-actions/auth@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}

      - name: Prepare kubectl
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
          cluster_name: development
          location: europe-west6

      - name: Helm deploy app
        run: |
          cat > values.yaml <<EOF
          deployment:
            env:
              API_URL: ${API_URL}
              EDITOR_URL: ${EDITOR_URL}
              WEBSITE_URL: ${WEBSITE_URL}
              MEDIA_SERVER_URL: ${MEDIA_SERVER_URL}
          migration:
            image: ghcr.io/wepublish/migration:${{ github.sha }}
            env:
              DATABASE_URL: postgres://postgres:foo@review-${{ github.event.pull_request.number }}-database-postgresql.reviews.svc.cluster.local:5432/wepublish?schema=public
              OVERRIDE_ADMIN_PW: '123'
          api:
            image: ghcr.io/wepublish/api:${{ github.sha }}
            env:
              GOOGLE_APPLICATION_CREDENTIALS: /var/secrets/google/key.json
              DATABASE_URL: postgres://postgres:foo@review-${{ github.event.pull_request.number }}-database-postgresql.reviews.svc.cluster.local:5432/wepublish?schema=public
              MEDIA_SERVER_TOKEN: 'media-token'
              JWT_SECRET_KEY: 'jwt-token'
              DEFAULT_FROM_ADDRESS: 'dev@wepublish.ch'
              DEFAULT_REPLY_TO_ADDRESS: 'dev@wepublish.ch'
              SYSTEM_INFO_KEY: 'review'
            config:
              general:
                apolloPlayground: true
                apolloIntrospection: true
                bcryptHashCostFactor: 12
                urlAdapter: default
              mailProvider:
                id: slackMail
                fromAddress: dev@wepublish.ch
                webhookURL: 'SLACK_DEV_MAIL_WEBHOOK_URL'
              OAuthProviders:
                - name: 'google'
                  discoverUrl: 'https://accounts.google.com'
                  clientId: '617896178757-i6ldn0nni9qtle8o6eu76lv93d78nvfi.apps.googleusercontent.com'
                  clientKey: 't267ZLqkV9dacrkPQp_pF-G2'
                  redirectUri:
                    - ${WEBSITE_URL}/auth/google
                  scopes:
                    - 'openid profile email'

              paymentProviders:
                - type: payrexx
                  id: payrexx
                  name: Payrexx
                  offSessionPayments: true
                  instanceName: wepublish-sandbox
                  instanceAPISecret: ${{ secrets.PAYREXX_API_SECRET }}
                  webhookApiKey: ${{ secrets.PAYREXX_WEBHOOK_SECRET }}
                  psp: [ 0, 15, 17, 2, 3, 36 ]
                  pm: ['visa', 'mastercard']
                  vatRate: 8.1

                - type: stripe
                  id: stripe
                  name: Stripe
                  offSessionPayments: true
                  secretKey: key
                  webhookEndpointSecret: wh_secret

                - type: stripe-checkout
                  id: stripe-checkout
                  name: Stripe Checkout
                  offSessionPayments: false
                  secretKey: key
                  webhookEndpointSecret: wh_secret

                - type: payrexx-subscription
                  id: payrexx-subscription
                  name: Payrexx Subscription
                  instanceName: wepublish-sandbox
                  instanceAPISecret: ${{ secrets.PAYREXX_API_SECRET }}
                  webhookEndpointSecret: ${{ secrets.PAYREXX_WEBHOOK_SECRET }}

                - type: bexio
                  id: bexio
                  name: Bexio
                  apiKey: secret
                  userId: '1'
                  countryId: '1'
                  invoiceTemplateNewMembership: 'template-name'
                  invoiceTemplateRenewalMembership: 'template-name'
                  unitId: '1'
                  taxId: '17'
                  accountId: '139'
                  invoiceTitleNewMembership: "New Invoice"
                  invoiceTitleRenewalMembership: "New Invoice"
                  invoiceMailSubjectNewMembership: "Invoice for :memberPlan.name:"
                  invoiceMailBodyNewMembership: "Hello :user.firstname:\n\nThank you for subscribing to :memberPlan.name:.\nYou can view your invoice here: [Network Link]\n\nBest wishes from the Wepublish team"
                  invoiceMailSubjectRenewalMembership: "Invoice for :memberPlan.name:"
                  invoiceMailBodyRenewalMembership: "Hello :user.firstname:\n\nThank you for subscribing to :memberPlan.name:.\nYou can view your invoice here: [Network Link]\n\nBest wishes from the Wepublish team"
                  markInvoiceAsOpen: False

              challenge:
                secret: 'secret'
                validTime: 600
                width: 200
                height: 200
                background: '#ffffff'
                noise: 5
                minValue: 1
                maxValue: 10
                operandAmount: 1
                operandTypes: [ '+', '-' ]
                mode: 'formula'
                targetSymbol: '?'
          editor:
            image: ghcr.io/wepublish/editor:${{ github.sha }}
            env:
              PEER_BY_DEFAULT: "true"
          website:
            image: ghcr.io/wepublish/website:${{ github.sha }}
            enabled: true
          storybook:
            enabled: true
            image: ghcr.io/wepublish/storybook:${{ github.sha }}
            url: ${STORYBOOK_URL}
          EOF
          export POD_NAME=review-${{ github.event.pull_request.number }}-app
          if [[ ! -z $(helm ls -a -n reviews |grep ${POD_NAME} |grep -v "deployed ") ]]; then helm uninstall -n reviews ${POD_NAME}; fi
          helm upgrade --install ${POD_NAME} ./helm/charts/wepublish -n reviews -f values.yaml --wait


  find_vercel_apps:
    name: Find Vercel apps
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.projects.outputs.value }}
    steps:
      - id: projects
        run: |
          echo "value=[\"babanews\", \"bajour\", \"tsri\", \"gruppetto\"]" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.projects.outputs.value }}"

  deploy_to_vercel:
    name: Deploy to Vercel
    needs: [find_vercel_apps, helm_deployment]
    if: ${{ needs.helm_deployment.result == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{fromJSON(needs.find_vercel_apps.outputs.projects)}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
      - run: npm i -g vercel
      - run: |
          vercel --token "${{ secrets.VERCEL_API_TOKEN }}" link --project ${{ matrix.project }} --scope wepublish --yes
          vercel --token "${{ secrets.VERCEL_API_TOKEN }}" build --yes
          vercel --token "${{ secrets.VERCEL_API_TOKEN }}" deploy --prebuilt --yes > deployment_url
          vercel --token "${{ secrets.VERCEL_API_TOKEN }}" alias set $(cat deployment_url) ${{ matrix.project }}${PROJECT_URL_SUFFIX} --scope wepublish --yes

  notify:
    name: Notify
    needs: [find_vercel_apps, deploy_to_vercel]
    if: ${{ needs.deploy_to_vercel.result == 'success' }}
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm

      - name: Create Deployment Text
        id: deploymentComment
        env:
          PROJECTS: ${{ needs.find_vercel_apps.outputs.projects }}
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          cd ./config
          npm ci
          OUTPUT=$(node ./notify-github.js)
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "::set-OUTPUT name=result::$OUTPUT"

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ${{ steps.deploymentComment.outputs.result }}

      - name: Notify Jira
        env:
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          cd ./config
          npm ci
          node ./notify-jira.js

