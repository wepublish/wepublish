name: Deploy frontend on by label

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]

jobs:
  check-deploy-label:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.extract_project_name.outputs.project_name }}
    steps:
      - name: Check for Deploy_ Label and Extract Project Name
        id: extract_project_name
        run: |
          project_name=""
          labels=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[].name')
          for label in $labels; do
            if [[ "$label" == deploy_* ]]; then
              project_name="${label#deploy_}"
              break
            fi
          done
          echo "Found project: $project_name"
          echo "::set-output name=project_name::$project_name"

  check-if-website-deployment:
    runs-on: ubuntu-latest
    outputs:
      has-website: ${{ steps.read-deployment-config.outputs.has-website }}
    needs: [ check-deploy-label ]
    if: ${{ needs.check-deploy-label.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: read-deployment-config
        run: ./deployment/read_deployment_config.sh '.website.review.deployment' true ${{ needs.get-tag.outputs.project }}

  check-if-image-is-build:
    runs-on: ubuntu-latest
    needs: [check-deploy-label, check-if-website-deployment]
    steps:
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if image already exists
        id: check-image
        env:
          IMAGE_PATH: ghcr.io/wepublish/website-${{needs.check-deploy-label.outputs.project_name}}:${{ github.sha }}
        run: |
          MAX_RETRIES=100
          RETRY_DELAY=10
          for ((i=1; i<=MAX_RETRIES; i++)); do
            if docker manifest inspect ${{ env.IMAGE_PATH }} > /dev/null 2>&1; then
              echo "Image ${{ env.IMAGE_PATH }} found!"
              exit 0
            fi
            echo "Image ${{ env.IMAGE_PATH }} found not found waiting for $RETRY_DELAY seconds before retrying..."
            sleep $RETRY_DELAY
          done
          echo "Timed out waiting for image to build'"
          exit 1

  helm_deployment_website:
    name: Helm Deployment ${{needs.check-deploy-label.outputs.project_name}} website
    needs: [check-deploy-label, check-if-website-deployment, check-if-image-is-build]
    if: ${{ needs.check-if-website-deployment.result == 'success' && needs.check-if-website-deployment.outputs.has-website == 'true' }}
    uses: ./.github/workflows/on-demand-deploy-helm-website.yml
    with:
      website_project: ${{needs.check-deploy-label.outputs.project_name}}
      api_url: https://api-${{ github.event.pull_request.number }}.reviews.wepublish.dev
    secrets: inherit
