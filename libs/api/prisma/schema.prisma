generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "../../testing/src/__generated__/fabbrica"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model MetadataProperty {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  key        String
  value      String
  public     Boolean

  ArticleRevision   ArticleRevision? @relation(fields: [articleRevisionId], references: [id], onDelete: Cascade)
  articleRevisionId String?

  PageRevision   PageRevision? @relation(fields: [pageRevisionId], references: [id], onDelete: Cascade)
  pageRevisionId String?

  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String?

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("properties")
}

model ArticleRevision {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  preTitle               String?
  title                  String?
  lead                   String?
  seoTitle               String?
  canonicalUrl           String?
  properties             MetadataProperty[]
  authors                ArticleRevisionAuthor[]
  breaking               Boolean
  blocks                 Json
  hideAuthor             Boolean
  socialMediaTitle       String?
  socialMediaDescription String?
  socialMediaAuthors     ArticleRevisionSocialMediaAuthor[]
  publishedAt            DateTime?
  archivedAt             DateTime?

  image   Image?  @relation("articleRevisionImage", fields: [imageID], references: [id])
  imageID String?

  socialMediaImage   Image?  @relation("articleRevisionSocialMediaImage", fields: [socialMediaImageID], references: [id])
  socialMediaImageID String?

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([publishedAt])
  @@map("articles.revisions")
}

model ArticleRevisionAuthor {
  revision   ArticleRevision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  revisionId String

  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@id([revisionId, authorId])
  @@map("articles.revisions.author")
}

model ArticleRevisionSocialMediaAuthor {
  revision   ArticleRevision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  revisionId String

  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@id([revisionId, authorId])
  @@map("articles.revisions.social-media-author")
}

model Article {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  publishedAt DateTime?

  slug            String?
  shared          Boolean
  hidden          Boolean @default(false)
  disableComments Boolean @default(false)
  likes           Int     @default(0)

  peer          Peer?   @relation(fields: [peerId], references: [id], onDelete: Cascade)
  peerId        String?
  peerArticleId String?

  navigations    NavigationLink[]
  tags           TaggedArticles[]
  revisions      ArticleRevision[]
  trackingPixels ArticleTrackingPixels[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([publishedAt])
  @@map("articles")
}

enum TrackingPixelProviderType {
  prolitteris @map("prolitteris")
}

model ArticleTrackingPixels {
  id                   String              @id @default(cuid())
  article              Article             @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId            String
  createdAt            DateTime            @default(now())
  modifiedAt           DateTime            @updatedAt
  tackingPixelMethodID String
  trackingPixelMethod  TrackingPixelMethod @relation(fields: [tackingPixelMethodID], references: [id])

  uri      String? @unique
  pixelUid String? @unique
  error    String?

  @@map("articles.tracking-pixels")
}

model TrackingPixelMethod {
  id                        String                    @id @default(cuid())
  createdAt                 DateTime                  @default(now())
  modifiedAt                DateTime                  @updatedAt
  trackingPixelProviderID   String                    @unique
  trackingPixelProviderType TrackingPixelProviderType

  ArticleTrackingPixels ArticleTrackingPixels[]

  @@map("tracking.pixels.methods")
}

model TaggedArticles {
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId  String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([articleId, tagId])
  @@map("articles.tagged-articles")
}

model AuthorsLinks {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  title String
  url   String

  Author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?

  @@map("authors.links")
}

model Author {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  modifiedAt DateTime       @updatedAt
  name       String
  slug       String
  jobTitle   String?
  links      AuthorsLinks[]
  bio        Json?

  imageID                     String?
  image                       Image?                             @relation(fields: [imageID], references: [id])
  articlesAsAuthor            ArticleRevisionAuthor[]
  articlesAsSocialMediaAuthor ArticleRevisionSocialMediaAuthor[]

  peer   Peer?   @relation(fields: [peerId], references: [id], onDelete: Cascade)
  peerId String?

  tags TaggedAuthors[]

  hideOnArticle Boolean @default(false)
  hideOnTeaser  Boolean @default(false)
  hideOnTeam    Boolean @default(false)

  @@unique([slug, peerId])
  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("authors")
}

model TaggedAuthors {
  author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([authorId, tagId])
  @@map("authors.tagged-authors")
}

model FocalPoint {
  x Float?
  y Float?

  imageId String @unique
  image   Image? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@map("images.focal-point")
}

model Image {
  id          String      @id
  createdAt   DateTime    @default(now())
  description String?
  extension   String
  fileSize    Int
  filename    String?
  focalPoint  FocalPoint?
  format      String
  license     String?
  link        String?
  mimeType    String
  modifiedAt  DateTime    @updatedAt
  source      String?
  tags        String[]
  title       String?
  height      Int
  width       Int

  Author     Author[]
  MemberPlan MemberPlan[]
  Comment    Comment[]

  articleRevisionSocialMediaImages ArticleRevision[] @relation("articleRevisionSocialMediaImage")
  articleRevisionImages            ArticleRevision[] @relation("articleRevisionImage")

  pageRevisionSocialMediaImages PageRevision[] @relation("pageRevisionSocialMediaImage")
  pageRevisionImages            PageRevision[] @relation("pageRevisionImage")

  peer   Peer?   @relation(fields: [peerId], references: [id], onDelete: Cascade)
  peerId String?

  users          User[]
  events         Event[]
  paymentMethods PaymentMethod[]

  banners               Banner[]
  peerProfileLogo       PeerProfile[] @relation("logo")
  peerProfileSquareLogo PeerProfile[] @relation("squareLogo")

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([title])
  @@index([tags])
  @@map("images")
}

enum CommentItemType {
  article @map("article")
  page    @map("page")
}

enum CommentRejectionReason {
  misconduct @map("misconduct")
  spam       @map("spam")
}

model CommentsRevisions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      Json?
  title     String?
  lead      String?

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([createdAt])
  @@map("comments.revisions")
}

enum CommentState {
  approved           @map("approved")
  pendingApproval    @map("pendingApproval")
  pendingUserChanges @map("pendingUserChanges")
  rejected           @map("rejected")
}

enum CommentAuthorType {
  team         @map("team")
  author       @map("author")
  verifiedUser @map("verifiedUser")
  guestUser    @map("guestUser")
}

model Comment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  itemID           String
  itemType         CommentItemType
  parentID         String?
  revisions        CommentsRevisions[]
  rejectionReason  CommentRejectionReason?
  state            CommentState
  source           String?
  authorType       CommentAuthorType
  guestUsername    String?
  guestUserImageID String?
  guestUserImage   Image?                  @relation(fields: [guestUserImageID], references: [id])
  userID           String?
  user             User?                   @relation(fields: [userID], references: [id])

  tags TaggedComments[]

  ratings           CommentRating[]
  overriddenRatings CommentRatingOverride[]
  featured          Boolean                 @default(false)

  @@index([createdAt])
  @@map("comments")
}

model TaggedComments {
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([commentId, tagId])
  @@map("comments.tagged-comments")
}

model CommentRatingSystem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name String? @unique

  answers CommentRatingSystemAnswer[]

  @@map("comments.rating-systems")
}

enum RatingSystemType {
  star @map("star")
}

model CommentRatingSystemAnswer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type   RatingSystemType
  answer String?

  ratingSystem   CommentRatingSystem @relation(fields: [ratingSystemId], references: [id], onDelete: Cascade)
  ratingSystemId String

  ratings           CommentRating[]
  overriddenRatings CommentRatingOverride[]

  @@unique([ratingSystemId, answer])
  @@map("comments.rating-system-answers")
}

model CommentRating {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String
  answer   CommentRatingSystemAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  value       Int
  fingerprint String?
  disabled    Boolean @default(false)

  @@unique([answerId, commentId, userId])
  @@map("comments.ratings")
}

model CommentRatingOverride {
  answerId String
  answer   CommentRatingSystemAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  value Int?

  @@unique([answerId, commentId])
  @@map("comments.rating-override")
}

model InvoiceItem {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name        String
  description String?
  quantity    Int
  amount      Int

  invoices  Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  invoiceId String?

  @@map("invoices.items")
}

model Invoice {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  mail                      String
  dueAt                     DateTime
  description               String?
  paidAt                    DateTime?
  canceledAt                DateTime?
  scheduledDeactivationAt   DateTime
  items                     InvoiceItem[]
  manuallySetAsPaidByUserId String?
  currency                  Currency

  subscriptionID String?
  subscription   Subscription? @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)

  subscriptionPeriods SubscriptionPeriod[]

  @@index([mail])
  @@map("invoices")
}

enum MailLogState {
  submitted @map("submitted")
  accepted  @map("accepted")
  delivered @map("delivered")
  deferred  @map("deferred")
  bounced   @map("bounced")
  rejected  @map("rejected")
}

model MailLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  recipientID    String
  recipient      User         @relation(fields: [recipientID], references: [id], onDelete: Cascade)
  state          MailLogState
  sentDate       DateTime
  mailProviderID String
  mailIdentifier String
  mailTemplate   MailTemplate @relation(fields: [mailTemplateId], references: [id])
  mailTemplateId String       @db.Uuid
  mailData       String?
  subject        String?

  @@index([mailIdentifier])
  @@map("mail.log")
}

enum PaymentPeriodicity {
  monthly   @map("monthly")
  quarterly @map("quarterly")
  biannual  @map("biannual")
  yearly    @map("yearly")
}

model AvailablePaymentMethod {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentMethodIDs     String[]
  paymentPeriodicities PaymentPeriodicity[]
  forceAutoRenewal     Boolean

  MemberPlan   MemberPlan? @relation(fields: [memberPlanId], references: [id], onDelete: Cascade)
  memberPlanId String?

  @@map("member.plans.payment-methods")
}

enum Currency {
  CHF @map("CHF")
  EUR @map("EUR")
}

model MemberPlan {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name                           String
  slug                           String                   @unique
  tags                           String[]
  description                    Json
  active                         Boolean
  currency                       Currency
  amountPerMonthMin              Float
  amountPerMonthTarget           Float?
  availablePaymentMethods        AvailablePaymentMethod[]
  migrateToTargetPaymentMethod   PaymentMethod?           @relation("PaymentMethodMigration", fields: [migrateToTargetPaymentMethodID], references: [id])
  migrateToTargetPaymentMethodID String?
  extendable                     Boolean                  @default(true)
  maxCount                       Int?

  imageID String?
  image   Image?  @relation(fields: [imageID], references: [id])

  successPageId String?
  successPage   Page?   @relation("successPage", fields: [successPageId], references: [id])

  failPageId String?
  failPage   Page?   @relation("failPage", fields: [failPageId], references: [id])

  confirmationPageId String?
  confirmationPage   Page?   @relation("confirmationPage", fields: [confirmationPageId], references: [id])

  subscription      Subscription[]
  subscriptionFlows SubscriptionFlow[]

  crowdfundings Crowdfunding[]

  @@index([name])
  @@map("member.plans")
}

model NavigationLink {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  label String
  type  String
  url   String?

  page   Page?   @relation(fields: [pageID], references: [id], onDelete: Cascade)
  pageID String?

  article   Article? @relation(fields: [articleID], references: [id], onDelete: Cascade)
  articleID String?

  navigation   Navigation? @relation(fields: [navigationId], references: [id], onDelete: Cascade)
  navigationId String?

  @@map("navigations.links")
}

model Navigation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  key   String           @unique
  links NavigationLink[]
  name  String

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("navigations")
}

model PageRevision {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  publishedAt            DateTime?
  archivedAt             DateTime?
  title                  String?
  description            String?
  properties             MetadataProperty[]
  socialMediaTitle       String?
  socialMediaDescription String?
  blocks                 Json

  imageID String?
  image   Image?  @relation("pageRevisionImage", fields: [imageID], references: [id])

  socialMediaImageID String?
  socialMediaImage   Image?  @relation("pageRevisionSocialMediaImage", fields: [socialMediaImageID], references: [id])

  pageId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([publishedAt])
  @@map("pages.revisions")
}

model Page {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  publishedAt DateTime?

  slug String?

  revisions               PageRevision[]
  navigations             NavigationLink[]
  tags                    TaggedPages[]
  memberPlansSuccess      MemberPlan[]     @relation("successPage")
  memberPlansFail         MemberPlan[]     @relation("failPage")
  memberPlansConfirmation MemberPlan[]     @relation("confirmationPage")
  banners                 Banner[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([publishedAt])
  @@map("pages")
}

model TaggedPages {
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId     String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([pageId, tagId])
  @@map("pages.tagged-pages")
}

model PaymentMethod {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  modifiedAt        DateTime @updatedAt
  name              String
  slug              String
  description       String
  paymentProviderID String
  active            Boolean

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String?

  Subscription      Subscription[]
  Payment           Payment[]
  subscriptionFlows SubscriptionFlow[]
  migrateFromPlans  MemberPlan[]       @relation("PaymentMethodMigration")

  @@map("payment.methods")
}

enum PaymentState {
  created            @map("created")
  submitted          @map("submitted")
  requiresUserAction @map("requiresUserAction")
  processing         @map("processing")
  paid               @map("paid")
  canceled           @map("canceled")
  declined           @map("declined")
}

model Payment {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  modifiedAt   DateTime     @updatedAt
  invoiceID    String
  state        PaymentState
  intentID     String?
  intentSecret String?
  intentData   String?
  paymentData  String?

  paymentMethodID String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  @@index([intentID])
  @@map("payments")
}

model PeerProfile {
  id                   String  @id @default(cuid())
  name                 String
  themeColor           String
  themeFontColor       String
  callToActionURL      String
  callToActionText     Json
  callToActionImageURL String?
  callToActionImageID  String?

  logoID String?
  logo   Image?  @relation("logo", fields: [logoID], references: [id])

  squareLogoId String?
  squareLogo   Image?  @relation("squareLogo", fields: [squareLogoId], references: [id])

  @@map("peerProfiles")
}

model Peer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name       String
  slug       String  @unique
  hostURL    String
  token      String
  isDisabled Boolean @default(false)

  articles Article[]
  images   Image[]
  tags     Tag[]
  authors  Author[]

  @@map("peers")
}

model Token {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name    String   @unique
  token   String
  roleIDs String[]

  @@map("tokens")
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([userID])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model SubscriptionPeriod {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  startsAt           DateTime
  endsAt             DateTime
  paymentPeriodicity PaymentPeriodicity
  amount             Float

  invoiceID String
  invoice   Invoice @relation(fields: [invoiceID], references: [id])

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  subscriptionId String?

  @@map("subscriptions.periods")
}

enum SubscriptionDeactivationReason {
  none                     @map("none")
  userSelfDeactivated      @map("userSelfDeactivated")
  invoiceNotPaid           @map("invoiceNotPaid")
  userReplacedSubscription @map("userReplacedSubscription")
}

model SubscriptionDeactivation {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  date   DateTime
  reason SubscriptionDeactivationReason

  subscriptionID String       @unique
  subscription   Subscription @relation(fields: [subscriptionID], references: [id], onDelete: Cascade)

  @@map("subscriptions.deactivation-reasons")
}

model Subscription {
  id                 String                    @id @default(cuid())
  createdAt          DateTime                  @default(now())
  modifiedAt         DateTime                  @updatedAt
  paymentPeriodicity PaymentPeriodicity
  monthlyAmount      Float
  autoRenew          Boolean
  startsAt           DateTime
  paidUntil          DateTime?
  periods            SubscriptionPeriod[]
  properties         MetadataProperty[]
  deactivation       SubscriptionDeactivation?
  extendable         Boolean                   @default(true)
  currency           Currency
  confirmed          Boolean                   @default(true)

  paymentMethodID String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  memberPlanID String
  memberPlan   MemberPlan @relation(fields: [memberPlanID], references: [id])

  userID String
  user   User   @relation(fields: [userID], references: [id])

  replacesSubscriptionID String?
  replacesSubscription   Subscription?  @relation(name: "ReplacementHistory", fields: [replacesSubscriptionID], references: [id])
  replacedBy             Subscription[] @relation("ReplacementHistory")

  invoices Invoice[]

  @@map("subscriptions")
}

model UserAddress {
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  company        String?
  streetAddress  String?
  streetAddress2 String?
  zipCode        String?
  city           String?
  country        String?

  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users.addresses")
}

model UserOAuth2Account {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String
  expiresAt         Int
  tokenType         String
  scope             String
  idToken           String
  oauthTokenSecret  String?
  oauthToken        String?
  sessionState      String?

  userId String?
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users.oauth2-accounts")
}

model PaymentProviderCustomer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentProviderID String
  customerID        String

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("users.payment-providers")
}

model User {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  modifiedAt      DateTime  @updatedAt
  birthday        DateTime? @db.Date
  email           String    @unique
  emailVerifiedAt DateTime?
  name            String
  firstName       String?
  flair           String?
  password        String
  active          Boolean
  lastLogin       DateTime?
  roleIDs         String[]
  userImageID     String?
  userImage       Image?    @relation(fields: [userImageID], references: [id])

  address                  UserAddress?
  properties               MetadataProperty[]
  oauth2Accounts           UserOAuth2Account[]
  paymentProviderCustomers PaymentProviderCustomer[]

  comments         Comment[]
  sessions         Session[]
  subscriptions    Subscription[]
  commentRatings   CommentRating[]
  pollVotes        PollVote[]
  mailSent         MailLog[]
  consents         UserConsent[]
  articleRevisions ArticleRevision[]
  pageRevisions    PageRevision[]

  @@map("users")
}

model UserRole {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  description   String?
  name          String   @unique
  permissionIDs String[]
  systemRole    Boolean

  @@map("users.roles")
}

model Setting {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  modifiedAt         DateTime @updatedAt
  name               String   @unique
  value              Json
  settingRestriction Json

  @@map("settings")
}

enum TagType {
  Comment @map("comment")
  Event   @map("event")
  Author  @map("author")
  Article @map("article")
  Page    @map("page")
}

model Tag {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type TagType
  tag  String?
  main Boolean @default(false)

  peer   Peer?   @relation(fields: [peerId], references: [id], onDelete: Cascade)
  peerId String?

  comments TaggedComments[]
  events   TaggedEvents[]
  authors  TaggedAuthors[]
  articles TaggedArticles[]
  pages    TaggedPages[]

  @@unique([type, tag])
  @@map("tags")
}

model Poll {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  opensAt  DateTime  @default(now())
  closedAt DateTime?

  question String?
  infoText Json?

  answers             PollAnswer[]
  votes               PollVote[]
  externalVoteSources PollExternalVoteSource[]

  @@map("polls")
}

model PollAnswer {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  answer String?

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  votes         PollVote[]
  externalVotes PollExternalVote[]

  @@map("polls.answers")
}

model PollVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String
  answer   PollAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  // While the poll can be infered through the answer, having the pollId in this table
  // allows to make sure a user only casts 1 vote per poll
  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  fingerprint String?
  disabled    Boolean @default(false)

  @@unique([pollId, userId])
  @@map("polls.votes")
}

model PollExternalVoteSource {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  source      String?
  voteAmounts PollExternalVote[]

  @@map("polls.external-vote-sources")
}

model PollExternalVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  answerId String
  answer   PollAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  sourceId String
  source   PollExternalVoteSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  amount Int @default(0)

  @@unique([answerId, sourceId])
  @@map("polls.external-votes")
}

enum EventStatus {
  Cancelled   @map("cancelled")
  Rescheduled @map("rescheduled")
  Postponed   @map("postponed")
  Scheduled   @map("scheduled")
}

model Event {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name        String
  lead        String?
  description Json[]
  status      EventStatus @default(Scheduled)

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id])

  location String?
  startsAt DateTime
  endsAt   DateTime?

  externalSourceName String?
  externalSourceId   String?

  tags TaggedEvents[]

  @@map("events")
}

model TaggedEvents {
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String   @db.Uuid
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId      String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  @@id([eventId, tagId])
  @@map("events.tagged-events")
}

model Consent {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name         String
  slug         String        @unique
  defaultValue Boolean
  userConsents UserConsent[]

  @@map("consents")
}

model UserConsent {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  consent   Consent @relation(fields: [consentId], references: [id], onDelete: Cascade)
  consentId String  @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  value Boolean

  @@unique([userId, consentId])
  @@map("user-consents")
}

enum UserEvent {
  ACCOUNT_CREATION
  PASSWORD_RESET
  LOGIN_LINK
  TEST_MAIL
}

model UserFlowMail {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  event UserEvent @unique

  mailTemplate   MailTemplate? @relation(fields: [mailTemplateId], references: [id]) // user creates a new account
  mailTemplateId String?       @db.Uuid

  @@map("user_communication_flows")
}

enum SubscriptionEvent {
  SUBSCRIBE
  CONFIRM_SUBSCRIPTION
  INVOICE_CREATION
  RENEWAL_SUCCESS
  RENEWAL_FAILED
  DEACTIVATION_UNPAID
  DEACTIVATION_BY_USER
  CUSTOM
}

model SubscriptionFlow {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  default Boolean @default(false)

  memberPlan   MemberPlan? @relation(fields: [memberPlanId], references: [id])
  memberPlanId String?

  paymentMethods PaymentMethod[]
  periodicities  PaymentPeriodicity[]
  autoRenewal    Boolean[]

  intervals SubscriptionInterval[] // send some more e-mails such as reminders

  @@map("subscription_communication_flows")
}

model SubscriptionInterval {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime          @default(now())
  modifiedAt         DateTime          @updatedAt
  event              SubscriptionEvent
  daysAwayFromEnding Int?              @db.SmallInt
  mailTemplate       MailTemplate?     @relation(fields: [mailTemplateId], references: [id])
  mailTemplateId     String?           @db.Uuid

  subscriptionFlow   SubscriptionFlow @relation(fields: [subscriptionFlowId], references: [id], onDelete: Cascade)
  subscriptionFlowId String           @db.Uuid

  @@map("subscriptions.intervals")
}

model MailTemplate {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name                   String
  description            String?
  externalMailTemplateId String  @unique
  remoteMissing          Boolean @default(false)

  subscriptionIntervals SubscriptionInterval[]

  userFlowMails UserFlowMail[]

  mailLog MailLog[]

  @@map("mail_templates")
}

model PeriodicJob {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  date                 DateTime  @unique @db.Date
  executionTime        DateTime?
  successfullyFinished DateTime?
  finishedWithError    DateTime?
  tries                Int       @default(0)
  error                String?

  @@map("periodic_jobs")
}

enum BlockType {
  RichText       @map("richText")
  Title          @map("title")
  Image          @map("image")
  ImageGallery   @map("imageGallery")
  Listicle       @map("listicle")
  Quote          @map("quote")
  Embed          @map("embed")
  LinkPageBreak  @map("linkPageBreak")
  TeaserGrid1    @map("teaserGrid1")
  TeaserGrid6    @map("teaserGrid6")
  TeaserGridFlex @map("teaserGridFlex")
  TeaserList     @map("teaserList")
  TeaserSlots    @map("teaserSlots")
  HTML           @map("html")
  Subscribe      @map("subscribe")
  Crowdfunding   @map("crowdfunding")
  Poll           @map("poll")
  Comment        @map("comment")
  Event          @map("event")
}

model BlockStyle {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name   String      @unique
  blocks BlockType[]

  @@map("block-content.styles")
}

model Banner {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  title String
  text  String
  cta   String?
  html  String?

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id])

  active Boolean @default(true)

  delay Int @default(0)

  showOnArticles     Boolean     @default(true)
  showOnPages        Page[]
  showForLoginStatus LoginStatus @default(ALL)

  actions BannerAction[]

  @@map("banners")
}

enum LoginStatus {
  LOGGED_IN  @map("logged_in")
  LOGGED_OUT @map("logged_out")
  ALL        @map("all")
}

model BannerAction {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  banner   Banner @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  bannerId String @db.Uuid

  label String
  url   String

  style String           @default("")
  role  BannerActionRole @default(OTHER)

  @@map("banner_actions")
}

enum BannerActionRole {
  PRIMARY @map("primary")
  CANCEL  @map("cancel")
  OTHER   @map("other")
}

model Crowdfunding {
  id                      String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt               DateTime           @default(now())
  modifiedAt              DateTime           @updatedAt
  name                    String
  countSubscriptionsFrom  DateTime?
  countSubscriptionsUntil DateTime?
  additionalRevenue       Int?
  memberPlans             MemberPlan[]
  goals                   CrowdfundingGoal[]

  @@map("crowdfundings")
}

model CrowdfundingGoal {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  modifiedAt     DateTime     @updatedAt
  title          String
  description    String?
  amount         Int
  Crowdfunding   Crowdfunding @relation(fields: [crowdfundingId], references: [id], onDelete: Cascade)
  crowdfundingId String       @db.Uuid

  @@map("crowdfunding_goals")
}
