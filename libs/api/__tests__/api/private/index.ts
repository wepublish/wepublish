// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Descendant} from 'slate'
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A hexidecimal color value. */
  Color: string;
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: string;
  RichText: Descendant[];
  Slug: string;
  /** The `Upload` scalar type represents a file upload. */
  Upload: File;
  /** A valid vote value */
  VoteValue: number;
};

export type Author = {
  __typename?: 'Author';
  bio?: Maybe<Scalars['RichText']>;
  createdAt: Scalars['DateTime'];
  hideOnArticle?: Maybe<Scalars['Boolean']>;
  hideOnTeam?: Maybe<Scalars['Boolean']>;
  hideOnTeaser?: Maybe<Scalars['Boolean']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  links?: Maybe<Array<AuthorLink>>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  peer?: Maybe<Peer>;
  peerId?: Maybe<Scalars['String']>;
  slug: Scalars['Slug'];
  tags: Array<Tag>;
  url: Scalars['String'];
};

export type AuthorConnection = {
  __typename?: 'AuthorConnection';
  nodes: Array<Author>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type AuthorFilter = {
  hideOnTeam?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
};

export type AuthorInput = {
  bio?: InputMaybe<Scalars['RichText']>;
  hideOnArticle?: InputMaybe<Scalars['Boolean']>;
  hideOnTeam?: InputMaybe<Scalars['Boolean']>;
  hideOnTeaser?: InputMaybe<Scalars['Boolean']>;
  imageID?: InputMaybe<Scalars['String']>;
  jobTitle?: InputMaybe<Scalars['String']>;
  links?: InputMaybe<Array<AuthorLinkInput>>;
  name: Scalars['String'];
  slug: Scalars['Slug'];
  tagIds?: InputMaybe<Array<Scalars['String']>>;
};

export type AuthorLink = {
  __typename?: 'AuthorLink';
  title: Scalars['String'];
  url: Scalars['String'];
};

export type AuthorLinkInput = {
  title: Scalars['String'];
  url: Scalars['String'];
};

export enum AuthorSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Name = 'NAME'
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod';
  forceAutoRenewal: Scalars['Boolean'];
  paymentMethods: Array<PaymentMethod>;
  paymentPeriodicities: Array<PaymentPeriodicity>;
};

export type AvailablePaymentMethodInput = {
  forceAutoRenewal: Scalars['Boolean'];
  paymentMethodIDs: Array<Scalars['String']>;
  paymentPeriodicities: Array<PaymentPeriodicity>;
};

export type Comment = {
  __typename?: 'Comment';
  authorType: CommentAuthorType;
  createdAt: Scalars['DateTime'];
  featured?: Maybe<Scalars['Boolean']>;
  guestUserImage?: Maybe<Image>;
  guestUsername?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  itemID: Scalars['String'];
  itemType: CommentItemType;
  modifiedAt: Scalars['DateTime'];
  overriddenRatings?: Maybe<Array<OverriddenRating>>;
  parentComment?: Maybe<Comment>;
  rejectionReason?: Maybe<CommentRejectionReason>;
  revisions: Array<CommentRevision>;
  source?: Maybe<Scalars['String']>;
  state: CommentState;
  tags: Array<Tag>;
  user?: Maybe<User>;
};

export enum CommentAuthorType {
  Author = 'author',
  GuestUser = 'guestUser',
  Team = 'team',
  VerifiedUser = 'verifiedUser'
}

export type CommentConnection = {
  __typename?: 'CommentConnection';
  nodes: Array<Comment>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type CommentFilter = {
  item?: InputMaybe<Scalars['String']>;
  itemID?: InputMaybe<Scalars['String']>;
  itemType?: InputMaybe<CommentItemType>;
  states?: InputMaybe<Array<CommentState>>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export enum CommentItemType {
  Article = 'article',
  Page = 'page'
}

export type CommentRatingOverrideUpdateInput = {
  answerId: Scalars['String'];
  value?: InputMaybe<Scalars['Int']>;
};

export type CommentRatingSystemAnswer = {
  __typename?: 'CommentRatingSystemAnswer';
  answer?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  ratingSystemId: Scalars['String'];
  type: RatingSystemType;
};

export enum CommentRejectionReason {
  Misconduct = 'misconduct',
  Spam = 'spam'
}

export type CommentRevision = {
  __typename?: 'CommentRevision';
  createdAt: Scalars['DateTime'];
  lead?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['RichText']>;
  title?: Maybe<Scalars['String']>;
};

export type CommentRevisionUpdateInput = {
  lead?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['RichText']>;
  title?: InputMaybe<Scalars['String']>;
};

export enum CommentSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum CommentState {
  Approved = 'approved',
  PendingApproval = 'pendingApproval',
  PendingUserChanges = 'pendingUserChanges',
  Rejected = 'rejected'
}

export type CreatePeerInput = {
  hostURL: Scalars['String'];
  information?: InputMaybe<Scalars['RichText']>;
  name: Scalars['String'];
  slug: Scalars['String'];
  token: Scalars['String'];
};

export type CreatedToken = {
  __typename?: 'CreatedToken';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  token: Scalars['String'];
};

export enum Currency {
  Chf = 'CHF',
  Eur = 'EUR'
}

export type DateFilter = {
  comparison: DateFilterComparison;
  date?: InputMaybe<Scalars['DateTime']>;
};

export enum DateFilterComparison {
  Equal = 'Equal',
  GreaterThan = 'GreaterThan',
  GreaterThanOrEqual = 'GreaterThanOrEqual',
  LowerThan = 'LowerThan',
  LowerThanOrEqual = 'LowerThanOrEqual'
}

export type FocalPoint = {
  __typename?: 'FocalPoint';
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type FullCommentRatingSystem = {
  __typename?: 'FullCommentRatingSystem';
  answers: Array<CommentRatingSystemAnswer>;
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
};

export type FullPoll = {
  __typename?: 'FullPoll';
  answers: Array<PollAnswerWithVoteCount>;
  closedAt?: Maybe<Scalars['DateTime']>;
  externalVoteSources: Array<PollExternalVoteSource>;
  id: Scalars['String'];
  infoText?: Maybe<Scalars['RichText']>;
  opensAt: Scalars['DateTime'];
  question?: Maybe<Scalars['String']>;
};

export type Image = {
  __typename?: 'Image';
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  extension: Scalars['String'];
  fileSize: Scalars['Int'];
  filename?: Maybe<Scalars['String']>;
  focalPoint?: Maybe<FocalPoint>;
  format: Scalars['String'];
  height: Scalars['Int'];
  id: Scalars['String'];
  license?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  mimeType: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  source?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  transformURL?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
};


export type ImageTransformUrlArgs = {
  input?: InputMaybe<ImageTransformation>;
};

export type ImageConnection = {
  __typename?: 'ImageConnection';
  nodes: Array<Image>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type ImageFilter = {
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export enum ImageOutput {
  Jpeg = 'jpeg',
  Png = 'png',
  Webp = 'webp'
}

export enum ImageRotation {
  Auto = 'Auto',
  Rotate0 = 'Rotate0',
  Rotate90 = 'Rotate90',
  Rotate180 = 'Rotate180',
  Rotate270 = 'Rotate270'
}

export enum ImageSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type ImageTransformation = {
  height?: InputMaybe<Scalars['Int']>;
  output?: InputMaybe<ImageOutput>;
  quality?: InputMaybe<Scalars['Float']>;
  rotation?: InputMaybe<ImageRotation>;
  width?: InputMaybe<Scalars['Int']>;
};

export type InputPoint = {
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type Invoice = {
  __typename?: 'Invoice';
  canceledAt?: Maybe<Scalars['DateTime']>;
  createdAt: Scalars['DateTime'];
  currency: Currency;
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  items: Array<InvoiceItem>;
  mail: Scalars['String'];
  manuallySetAsPaidByUserId?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  paidAt?: Maybe<Scalars['DateTime']>;
  total: Scalars['Int'];
};

export type InvoiceConnection = {
  __typename?: 'InvoiceConnection';
  nodes: Array<Invoice>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InvoiceFilter = {
  canceledAt?: InputMaybe<Scalars['Date']>;
  mail?: InputMaybe<Scalars['String']>;
  paidAt?: InputMaybe<Scalars['Date']>;
  subscriptionID?: InputMaybe<Scalars['String']>;
  userID?: InputMaybe<Scalars['String']>;
};

export type InvoiceInput = {
  description?: InputMaybe<Scalars['String']>;
  items: Array<InvoiceItemInput>;
  mail: Scalars['String'];
  manuallySetAsPaidByUserId?: InputMaybe<Scalars['String']>;
  subscriptionID?: InputMaybe<Scalars['String']>;
};

export type InvoiceItem = {
  __typename?: 'InvoiceItem';
  amount: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  quantity: Scalars['Int'];
  total: Scalars['Int'];
};

export type InvoiceItemInput = {
  amount: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  description?: InputMaybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  quantity: Scalars['Int'];
};

export enum InvoiceSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt',
  PaidAt = 'paidAt'
}

export type JwtToken = {
  __typename?: 'JWTToken';
  expiresAt: Scalars['String'];
  token: Scalars['String'];
};

export type MemberPlan = {
  __typename?: 'MemberPlan';
  active: Scalars['Boolean'];
  amountPerMonthMin: Scalars['Int'];
  amountPerMonthTarget?: Maybe<Scalars['Int']>;
  availablePaymentMethods: Array<AvailablePaymentMethod>;
  confirmationPageId?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  currency: Currency;
  description?: Maybe<Scalars['RichText']>;
  extendable: Scalars['Boolean'];
  failPageId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  maxCount?: Maybe<Scalars['Int']>;
  migrateToTargetPaymentMethodID?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  productType: ProductType;
  shortDescription?: Maybe<Scalars['RichText']>;
  slug: Scalars['String'];
  successPageId?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection';
  nodes: Array<MemberPlan>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MemberPlanFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  productType?: InputMaybe<ProductType>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export type MemberPlanInput = {
  active: Scalars['Boolean'];
  amountPerMonthMin: Scalars['Int'];
  amountPerMonthTarget?: InputMaybe<Scalars['Int']>;
  availablePaymentMethods: Array<AvailablePaymentMethodInput>;
  confirmationPageId?: InputMaybe<Scalars['String']>;
  currency: Currency;
  description?: InputMaybe<Scalars['RichText']>;
  extendable: Scalars['Boolean'];
  failPageId?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  maxCount?: InputMaybe<Scalars['Int']>;
  migrateToTargetPaymentMethodID?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  productType: ProductType;
  shortDescription?: InputMaybe<Scalars['RichText']>;
  slug: Scalars['String'];
  successPageId?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export enum MemberPlanSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Mutation = {
  __typename?: 'Mutation';
  approveComment: Comment;
  cancelSubscription?: Maybe<Subscription>;
  createAuthor?: Maybe<Author>;
  createComment: Comment;
  createInvoice?: Maybe<Invoice>;
  createMemberPlan?: Maybe<MemberPlan>;
  createPaymentFromInvoice?: Maybe<Payment>;
  createPaymentMethod?: Maybe<PaymentMethod>;
  createPeer: Peer;
  createPoll?: Maybe<PollWithAnswers>;
  createPollAnswer?: Maybe<PollAnswer>;
  createPollExternalVoteSource?: Maybe<PollExternalVoteSource>;
  createRatingSystemAnswer: CommentRatingSystemAnswer;
  createSession: SessionWithToken;
  createSessionWithJWT: SessionWithToken;
  createSubscription?: Maybe<Subscription>;
  createTag?: Maybe<Tag>;
  createToken: CreatedToken;
  createUser?: Maybe<User>;
  createUserRole?: Maybe<UserRole>;
  deleteAuthor?: Maybe<Author>;
  deleteComment: Comment;
  deleteImage?: Maybe<Image>;
  deleteInvoice?: Maybe<Invoice>;
  deleteMemberPlan?: Maybe<MemberPlan>;
  deletePaymentMethod?: Maybe<PaymentMethod>;
  deletePeer?: Maybe<Peer>;
  deletePoll?: Maybe<FullPoll>;
  deletePollAnswer?: Maybe<PollAnswerWithVoteCount>;
  deletePollExternalVoteSource?: Maybe<PollExternalVoteSource>;
  deleteRatingSystemAnswer: CommentRatingSystemAnswer;
  deleteSubscription?: Maybe<Subscription>;
  deleteTag?: Maybe<Tag>;
  deleteToken?: Maybe<CreatedToken>;
  deleteUser?: Maybe<User>;
  deleteUserRole?: Maybe<UserRole>;
  importSubscription?: Maybe<Subscription>;
  markInvoiceAsPaid?: Maybe<Invoice>;
  rejectComment: Comment;
  renewSubscription?: Maybe<Invoice>;
  requestChangesOnComment: Comment;
  resetUserPassword?: Maybe<User>;
  revokeActiveSession: Scalars['Boolean'];
  revokeSession: Scalars['Boolean'];
  sendJWTLogin: Scalars['String'];
  sendWebsiteLogin: Scalars['String'];
  sessions: Array<Session>;
  updateAuthor?: Maybe<Author>;
  updateComment: Comment;
  updateImage?: Maybe<Image>;
  updateInvoice?: Maybe<Invoice>;
  updateMemberPlan?: Maybe<MemberPlan>;
  updatePaymentMethod?: Maybe<PaymentMethod>;
  updatePeer: Peer;
  updatePeerProfile: PeerProfile;
  updatePoll?: Maybe<FullPoll>;
  updateRatingSystem: FullCommentRatingSystem;
  updateSubscription?: Maybe<Subscription>;
  updateTag?: Maybe<Tag>;
  updateUser?: Maybe<User>;
  updateUserRole?: Maybe<UserRole>;
  uploadImage?: Maybe<Image>;
};


export type MutationApproveCommentArgs = {
  id: Scalars['String'];
};


export type MutationCancelSubscriptionArgs = {
  id: Scalars['String'];
  reason: SubscriptionDeactivationReason;
};


export type MutationCreateAuthorArgs = {
  input: AuthorInput;
};


export type MutationCreateCommentArgs = {
  itemID: Scalars['String'];
  itemType: CommentItemType;
  parentID?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
  text?: InputMaybe<Scalars['RichText']>;
};


export type MutationCreateInvoiceArgs = {
  input: InvoiceInput;
};


export type MutationCreateMemberPlanArgs = {
  input: MemberPlanInput;
};


export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput;
};


export type MutationCreatePaymentMethodArgs = {
  input: PaymentMethodInput;
};


export type MutationCreatePeerArgs = {
  input: CreatePeerInput;
};


export type MutationCreatePollArgs = {
  closedAt?: InputMaybe<Scalars['DateTime']>;
  opensAt?: InputMaybe<Scalars['DateTime']>;
  question?: InputMaybe<Scalars['String']>;
};


export type MutationCreatePollAnswerArgs = {
  answer?: InputMaybe<Scalars['String']>;
  pollId: Scalars['String'];
};


export type MutationCreatePollExternalVoteSourceArgs = {
  pollId: Scalars['String'];
  source?: InputMaybe<Scalars['String']>;
};


export type MutationCreateRatingSystemAnswerArgs = {
  answer?: InputMaybe<Scalars['String']>;
  ratingSystemId: Scalars['String'];
  type?: InputMaybe<RatingSystemType>;
};


export type MutationCreateSessionArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String'];
};


export type MutationCreateSubscriptionArgs = {
  input: SubscriptionInput;
};


export type MutationCreateTagArgs = {
  description?: InputMaybe<Scalars['RichText']>;
  main?: InputMaybe<Scalars['Boolean']>;
  tag?: InputMaybe<Scalars['String']>;
  type: TagType;
};


export type MutationCreateTokenArgs = {
  input: TokenInput;
};


export type MutationCreateUserArgs = {
  input: UserInput;
  password: Scalars['String'];
};


export type MutationCreateUserRoleArgs = {
  input: UserRoleInput;
};


export type MutationDeleteAuthorArgs = {
  id: Scalars['String'];
};


export type MutationDeleteCommentArgs = {
  id: Scalars['String'];
};


export type MutationDeleteImageArgs = {
  id: Scalars['String'];
};


export type MutationDeleteInvoiceArgs = {
  id: Scalars['String'];
};


export type MutationDeleteMemberPlanArgs = {
  id: Scalars['String'];
};


export type MutationDeletePaymentMethodArgs = {
  id: Scalars['String'];
};


export type MutationDeletePeerArgs = {
  id: Scalars['String'];
};


export type MutationDeletePollArgs = {
  id: Scalars['String'];
};


export type MutationDeletePollAnswerArgs = {
  id: Scalars['String'];
};


export type MutationDeletePollExternalVoteSourceArgs = {
  id: Scalars['String'];
};


export type MutationDeleteRatingSystemAnswerArgs = {
  id: Scalars['String'];
};


export type MutationDeleteSubscriptionArgs = {
  id: Scalars['String'];
};


export type MutationDeleteTagArgs = {
  id: Scalars['String'];
};


export type MutationDeleteTokenArgs = {
  id: Scalars['String'];
};


export type MutationDeleteUserArgs = {
  id: Scalars['String'];
};


export type MutationDeleteUserRoleArgs = {
  id: Scalars['String'];
};


export type MutationImportSubscriptionArgs = {
  input: SubscriptionInput;
};


export type MutationMarkInvoiceAsPaidArgs = {
  id: Scalars['String'];
};


export type MutationRejectCommentArgs = {
  id: Scalars['String'];
  rejectionReason?: InputMaybe<CommentRejectionReason>;
};


export type MutationRenewSubscriptionArgs = {
  id: Scalars['String'];
};


export type MutationRequestChangesOnCommentArgs = {
  id: Scalars['String'];
  rejectionReason: CommentRejectionReason;
};


export type MutationResetUserPasswordArgs = {
  id: Scalars['String'];
  password: Scalars['String'];
  sendMail?: InputMaybe<Scalars['Boolean']>;
};


export type MutationRevokeSessionArgs = {
  id: Scalars['String'];
};


export type MutationSendJwtLoginArgs = {
  email: Scalars['String'];
  url: Scalars['String'];
};


export type MutationSendWebsiteLoginArgs = {
  email: Scalars['String'];
};


export type MutationUpdateAuthorArgs = {
  id: Scalars['String'];
  input: AuthorInput;
};


export type MutationUpdateCommentArgs = {
  featured?: InputMaybe<Scalars['Boolean']>;
  guestUserImageID?: InputMaybe<Scalars['String']>;
  guestUsername?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  ratingOverrides?: InputMaybe<Array<CommentRatingOverrideUpdateInput>>;
  revision?: InputMaybe<CommentRevisionUpdateInput>;
  source?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
  userID?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateImageArgs = {
  id: Scalars['String'];
  input: UpdateImageInput;
};


export type MutationUpdateInvoiceArgs = {
  id: Scalars['String'];
  input: InvoiceInput;
};


export type MutationUpdateMemberPlanArgs = {
  id: Scalars['String'];
  input: MemberPlanInput;
};


export type MutationUpdatePaymentMethodArgs = {
  id: Scalars['String'];
  input: PaymentMethodInput;
};


export type MutationUpdatePeerArgs = {
  id: Scalars['String'];
  input: UpdatePeerInput;
};


export type MutationUpdatePeerProfileArgs = {
  input: PeerProfileInput;
};


export type MutationUpdatePollArgs = {
  answers?: InputMaybe<Array<UpdatePollAnswer>>;
  closedAt?: InputMaybe<Scalars['DateTime']>;
  externalVoteSources?: InputMaybe<Array<UpdatePollExternalVoteSources>>;
  infoText?: InputMaybe<Scalars['RichText']>;
  opensAt?: InputMaybe<Scalars['DateTime']>;
  pollId: Scalars['String'];
  question?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateRatingSystemArgs = {
  answers?: InputMaybe<Array<UpdateCommentRatingSystemAnswer>>;
  name?: InputMaybe<Scalars['String']>;
  ratingSystemId: Scalars['String'];
};


export type MutationUpdateSubscriptionArgs = {
  id: Scalars['String'];
  input: SubscriptionInput;
};


export type MutationUpdateTagArgs = {
  description?: InputMaybe<Scalars['RichText']>;
  id: Scalars['String'];
  main?: InputMaybe<Scalars['Boolean']>;
  tag?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateUserArgs = {
  id: Scalars['String'];
  input: UserInput;
};


export type MutationUpdateUserRoleArgs = {
  id: Scalars['String'];
  input: UserRoleInput;
};


export type MutationUploadImageArgs = {
  input: UploadImageInput;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['String']>;
};

export type Payment = {
  __typename?: 'Payment';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  intentData?: Maybe<Scalars['String']>;
  intentID?: Maybe<Scalars['String']>;
  intentSecret?: Maybe<Scalars['String']>;
  invoice: Invoice;
  modifiedAt: Scalars['DateTime'];
  paymentData?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  state: PaymentState;
};

export type PaymentConnection = {
  __typename?: 'PaymentConnection';
  nodes: Array<Payment>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaymentFilter = {
  intentID?: InputMaybe<Scalars['String']>;
};

export type PaymentFromInvoiceInput = {
  failureURL?: InputMaybe<Scalars['String']>;
  invoiceID: Scalars['String'];
  paymentMethodID?: InputMaybe<Scalars['String']>;
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>;
  successURL?: InputMaybe<Scalars['String']>;
};

export type PaymentMethod = {
  __typename?: 'PaymentMethod';
  active: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  description: Scalars['String'];
  gracePeriod: Scalars['Int'];
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageId?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  paymentProvider?: Maybe<PaymentProvider>;
  slug: Scalars['Slug'];
};

export type PaymentMethodInput = {
  active: Scalars['Boolean'];
  description: Scalars['String'];
  gracePeriod: Scalars['Int'];
  imageId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  paymentProviderID: Scalars['String'];
  slug: Scalars['Slug'];
};

export enum PaymentPeriodicity {
  Biannual = 'biannual',
  Biennial = 'biennial',
  Lifetime = 'lifetime',
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Yearly = 'yearly'
}

export type PaymentProvider = {
  __typename?: 'PaymentProvider';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type PaymentProviderCustomer = {
  __typename?: 'PaymentProviderCustomer';
  customerID: Scalars['String'];
  paymentProviderID: Scalars['String'];
};

export enum PaymentSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum PaymentState {
  Canceled = 'canceled',
  Created = 'created',
  Declined = 'declined',
  Paid = 'paid',
  Processing = 'processing',
  RequiresUserAction = 'requiresUserAction',
  Submitted = 'submitted'
}

export type Peer = {
  __typename?: 'Peer';
  createdAt: Scalars['DateTime'];
  hostURL: Scalars['String'];
  id: Scalars['String'];
  information?: Maybe<Scalars['RichText']>;
  isDisabled?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  profile?: Maybe<PeerProfile>;
  slug: Scalars['String'];
};

export type PeerProfile = {
  __typename?: 'PeerProfile';
  callToActionImage?: Maybe<Image>;
  callToActionImageID?: Maybe<Scalars['String']>;
  callToActionImageURL?: Maybe<Scalars['String']>;
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
  hostURL: Scalars['String'];
  logo?: Maybe<Image>;
  logoID?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  squareLogo?: Maybe<Image>;
  squareLogoId?: Maybe<Scalars['String']>;
  themeColor: Scalars['Color'];
  themeFontColor: Scalars['Color'];
  websiteURL: Scalars['String'];
};

export type PeerProfileInput = {
  callToActionImageID?: InputMaybe<Scalars['String']>;
  callToActionImageURL?: InputMaybe<Scalars['String']>;
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
  logoID?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  squareLogoId?: InputMaybe<Scalars['String']>;
  themeColor: Scalars['Color'];
  themeFontColor: Scalars['Color'];
};

export type Permission = {
  __typename?: 'Permission';
  deprecated: Scalars['Boolean'];
  description: Scalars['String'];
  id: Scalars['String'];
};

export type Poll = {
  __typename?: 'Poll';
  closedAt?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
  opensAt: Scalars['DateTime'];
  question?: Maybe<Scalars['String']>;
};

export type PollAnswer = {
  __typename?: 'PollAnswer';
  answer?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  pollId: Scalars['String'];
};

export type PollAnswerWithVoteCount = {
  __typename?: 'PollAnswerWithVoteCount';
  answer?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  pollId: Scalars['String'];
  votes: Scalars['Int'];
};

export type PollConnection = {
  __typename?: 'PollConnection';
  nodes: Array<Poll>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PollExternalVote = {
  __typename?: 'PollExternalVote';
  amount: Scalars['VoteValue'];
  answerId: Scalars['String'];
  id: Scalars['String'];
};

export type PollExternalVoteSource = {
  __typename?: 'PollExternalVoteSource';
  id: Scalars['String'];
  source?: Maybe<Scalars['String']>;
  voteAmounts: Array<PollExternalVote>;
};

export type PollFilter = {
  openOnly?: InputMaybe<Scalars['Boolean']>;
};

export enum PollSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  OpensAt = 'OpensAt'
}

export type PollWithAnswers = {
  __typename?: 'PollWithAnswers';
  answers?: Maybe<Array<PollAnswer>>;
  closedAt?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
  opensAt: Scalars['DateTime'];
  question?: Maybe<Scalars['String']>;
};

export enum ProductType {
  Donation = 'Donation',
  Subscription = 'Subscription'
}

export type Properties = {
  __typename?: 'Properties';
  key: Scalars['String'];
  public: Scalars['Boolean'];
  value: Scalars['String'];
};

export type PropertiesInput = {
  key: Scalars['String'];
  public: Scalars['Boolean'];
  value: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  author?: Maybe<Author>;
  authors: AuthorConnection;
  comment?: Maybe<Comment>;
  comments: CommentConnection;
  createJWTForUser?: Maybe<JwtToken>;
  createJWTForWebsiteLogin?: Maybe<JwtToken>;
  image?: Maybe<Image>;
  images: ImageConnection;
  invoice?: Maybe<Invoice>;
  invoices: InvoiceConnection;
  me?: Maybe<User>;
  memberPlan?: Maybe<MemberPlan>;
  memberPlans: MemberPlanConnection;
  newSubscribersPerMonth?: Maybe<Array<Maybe<SubscribersPerMonth>>>;
  payment?: Maybe<Payment>;
  paymentMethod?: Maybe<PaymentMethod>;
  paymentMethods: Array<PaymentMethod>;
  paymentProviders: Array<PaymentProvider>;
  payments: PaymentConnection;
  peer?: Maybe<Peer>;
  peerProfile: PeerProfile;
  peers?: Maybe<Array<Peer>>;
  permissions?: Maybe<Array<Permission>>;
  poll?: Maybe<FullPoll>;
  polls?: Maybe<PollConnection>;
  ratingSystem: FullCommentRatingSystem;
  remotePeerProfile?: Maybe<PeerProfile>;
  sessions: Array<Session>;
  subscription?: Maybe<Subscription>;
  subscriptions: SubscriptionConnection;
  subscriptionsAsCsv?: Maybe<Scalars['String']>;
  tag?: Maybe<Tag>;
  tags?: Maybe<TagConnection>;
  tokens: Array<Token>;
  user?: Maybe<User>;
  userRole?: Maybe<UserRole>;
  userRoles: UserRoleConnection;
  users: UserConnection;
};


export type QueryAuthorArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['Slug']>;
};


export type QueryAuthorsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AuthorSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryCommentArgs = {
  id: Scalars['String'];
};


export type QueryCommentsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CommentFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<CommentSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryCreateJwtForUserArgs = {
  expiresInMinutes: Scalars['Int'];
  userId: Scalars['String'];
};


export type QueryImageArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryImagesArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ImageFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ImageSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryInvoiceArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryInvoicesArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<InvoiceFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<InvoiceSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryMemberPlanArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['Slug']>;
};


export type QueryMemberPlansArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<MemberPlanFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<MemberPlanSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryNewSubscribersPerMonthArgs = {
  monthsBack?: InputMaybe<Scalars['Int']>;
};


export type QueryPaymentArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryPaymentMethodArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryPaymentsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PaymentFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<PaymentSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryPeerArgs = {
  id: Scalars['String'];
};


export type QueryPollArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryPollsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PollFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<PollSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryRemotePeerProfileArgs = {
  hostURL: Scalars['String'];
  token: Scalars['String'];
};


export type QuerySubscriptionArgs = {
  id: Scalars['String'];
};


export type QuerySubscriptionsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SubscriptionFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<SubscriptionSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QuerySubscriptionsAsCsvArgs = {
  filter?: InputMaybe<SubscriptionFilter>;
};


export type QueryTagArgs = {
  id: Scalars['String'];
};


export type QueryTagsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<TagSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryUserArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryUserRoleArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryUserRolesArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UserRoleFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<UserRoleSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryUsersArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<UserFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<UserSort>;
  take?: InputMaybe<Scalars['Int']>;
};

export enum RatingSystemType {
  Star = 'star'
}

export type Session = {
  __typename?: 'Session';
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
  id: Scalars['String'];
  user: User;
};

export type SessionWithToken = {
  __typename?: 'SessionWithToken';
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
  id: Scalars['String'];
  token: Scalars['String'];
  user: User;
};

export enum SortOrder {
  Ascending = 'Ascending',
  Descending = 'Descending'
}

export type SubscribersPerMonth = {
  __typename?: 'SubscribersPerMonth';
  month: Scalars['String'];
  subscriberCount: Scalars['Int'];
};

export type Subscription = {
  __typename?: 'Subscription';
  autoRenew: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  currency: Currency;
  deactivation?: Maybe<SubscriptionDeactivation>;
  extendable: Scalars['Boolean'];
  id: Scalars['String'];
  memberPlan: MemberPlan;
  modifiedAt: Scalars['DateTime'];
  monthlyAmount: Scalars['Int'];
  paidUntil?: Maybe<Scalars['DateTime']>;
  paymentMethod: PaymentMethod;
  paymentPeriodicity: PaymentPeriodicity;
  properties: Array<Properties>;
  startsAt: Scalars['DateTime'];
  user?: Maybe<User>;
};

export type SubscriptionConnection = {
  __typename?: 'SubscriptionConnection';
  nodes: Array<Subscription>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type SubscriptionDeactivation = {
  __typename?: 'SubscriptionDeactivation';
  date: Scalars['DateTime'];
  reason: SubscriptionDeactivationReason;
};

export type SubscriptionDeactivationInput = {
  date: Scalars['DateTime'];
  reason: SubscriptionDeactivationReason;
};

export enum SubscriptionDeactivationReason {
  InvoiceNotPaid = 'invoiceNotPaid',
  None = 'none',
  UserReplacedSubscription = 'userReplacedSubscription',
  UserSelfDeactivated = 'userSelfDeactivated'
}

export type SubscriptionFilter = {
  autoRenew?: InputMaybe<Scalars['Boolean']>;
  cancellationDateFrom?: InputMaybe<DateFilter>;
  cancellationDateTo?: InputMaybe<DateFilter>;
  deactivationDateFrom?: InputMaybe<DateFilter>;
  deactivationDateTo?: InputMaybe<DateFilter>;
  deactivationReason?: InputMaybe<SubscriptionDeactivationReason>;
  extendable?: InputMaybe<Scalars['Boolean']>;
  memberPlanID?: InputMaybe<Scalars['String']>;
  paidUntil?: InputMaybe<DateFilter>;
  paidUntilFrom?: InputMaybe<DateFilter>;
  paidUntilTo?: InputMaybe<DateFilter>;
  paymentMethodID?: InputMaybe<Scalars['String']>;
  paymentPeriodicity?: InputMaybe<PaymentPeriodicity>;
  startsAt?: InputMaybe<DateFilter>;
  startsAtFrom?: InputMaybe<DateFilter>;
  startsAtTo?: InputMaybe<DateFilter>;
  userHasAddress?: InputMaybe<Scalars['Boolean']>;
  userID?: InputMaybe<Scalars['String']>;
};

export type SubscriptionInput = {
  autoRenew: Scalars['Boolean'];
  deactivation?: InputMaybe<SubscriptionDeactivationInput>;
  extendable: Scalars['Boolean'];
  memberPlanID: Scalars['String'];
  monthlyAmount: Scalars['Int'];
  paidUntil?: InputMaybe<Scalars['DateTime']>;
  paymentMethodID: Scalars['String'];
  paymentPeriodicity: PaymentPeriodicity;
  properties: Array<PropertiesInput>;
  startsAt: Scalars['DateTime'];
  userID: Scalars['String'];
};

export type SubscriptionPeriod = {
  __typename?: 'SubscriptionPeriod';
  amount: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  endsAt: Scalars['DateTime'];
  id: Scalars['String'];
  invoiceID: Scalars['String'];
  paymentPeriodicity: PaymentPeriodicity;
  startsAt: Scalars['DateTime'];
};

export enum SubscriptionSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Tag = {
  __typename?: 'Tag';
  description?: Maybe<Scalars['RichText']>;
  id: Scalars['String'];
  main: Scalars['Boolean'];
  tag?: Maybe<Scalars['String']>;
  type?: Maybe<TagType>;
  url: Scalars['String'];
};

export type TagConnection = {
  __typename?: 'TagConnection';
  nodes: Array<Tag>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type TagFilter = {
  tag?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<TagType>;
};

export enum TagSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Tag = 'Tag'
}

export enum TagType {
  Article = 'Article',
  Author = 'Author',
  Comment = 'Comment',
  Event = 'Event',
  Page = 'Page'
}

export type Token = {
  __typename?: 'Token';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
};

export type TokenInput = {
  name: Scalars['String'];
};

export type UpdateCommentRatingSystemAnswer = {
  answer?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  type?: InputMaybe<RatingSystemType>;
};

export type UpdateImageInput = {
  description?: InputMaybe<Scalars['String']>;
  filename?: InputMaybe<Scalars['String']>;
  focalPoint?: InputMaybe<InputPoint>;
  license?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type UpdatePeerInput = {
  hostURL?: InputMaybe<Scalars['String']>;
  information?: InputMaybe<Scalars['RichText']>;
  isDisabled?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['String']>;
};

export type UpdatePollAnswer = {
  answer?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
};

export type UpdatePollExternalVote = {
  amount?: InputMaybe<Scalars['VoteValue']>;
  id: Scalars['String'];
};

export type UpdatePollExternalVoteSources = {
  id: Scalars['String'];
  source?: InputMaybe<Scalars['String']>;
  voteAmounts?: InputMaybe<Array<UpdatePollExternalVote>>;
};

export type UploadImageInput = {
  description?: InputMaybe<Scalars['String']>;
  file: Scalars['Upload'];
  filename?: InputMaybe<Scalars['String']>;
  focalPoint?: InputMaybe<InputPoint>;
  license?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  active: Scalars['Boolean'];
  address?: Maybe<UserAddress>;
  birthday?: Maybe<Scalars['DateTime']>;
  createdAt: Scalars['DateTime'];
  email: Scalars['String'];
  emailVerifiedAt?: Maybe<Scalars['DateTime']>;
  firstName?: Maybe<Scalars['String']>;
  flair?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastLogin?: Maybe<Scalars['DateTime']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
  paymentProviderCustomers: Array<PaymentProviderCustomer>;
  properties: Array<Properties>;
  roles: Array<UserRole>;
  subscriptions: Array<UserSubscription>;
  userImage?: Maybe<Image>;
};

export type UserAddress = {
  __typename?: 'UserAddress';
  city?: Maybe<Scalars['String']>;
  company?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  streetAddress2?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type UserAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  company?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  streetAddress?: InputMaybe<Scalars['String']>;
  streetAddress2?: InputMaybe<Scalars['String']>;
  zipCode?: InputMaybe<Scalars['String']>;
};

export type UserConnection = {
  __typename?: 'UserConnection';
  nodes: Array<User>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type UserFilter = {
  name?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
  userRole?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type UserInput = {
  active: Scalars['Boolean'];
  address?: InputMaybe<UserAddressInput>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  email: Scalars['String'];
  emailVerifiedAt?: InputMaybe<Scalars['DateTime']>;
  firstName?: InputMaybe<Scalars['String']>;
  flair?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  note?: InputMaybe<Scalars['String']>;
  properties: Array<PropertiesInput>;
  roleIDs?: InputMaybe<Array<Scalars['String']>>;
  userImageID?: InputMaybe<Scalars['String']>;
};

export type UserRole = {
  __typename?: 'UserRole';
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name: Scalars['String'];
  permissions: Array<Permission>;
  systemRole: Scalars['Boolean'];
};

export type UserRoleConnection = {
  __typename?: 'UserRoleConnection';
  nodes: Array<UserRole>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type UserRoleFilter = {
  name?: InputMaybe<Scalars['String']>;
};

export type UserRoleInput = {
  description: Scalars['String'];
  name: Scalars['String'];
  permissionIDs?: InputMaybe<Array<Scalars['String']>>;
};

export enum UserRoleSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum UserSort {
  CreatedAt = 'createdAt',
  FirstName = 'firstName',
  ModifiedAt = 'modifiedAt',
  Name = 'name'
}

export type UserSubscription = {
  __typename?: 'UserSubscription';
  autoRenew: Scalars['Boolean'];
  confirmed: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  currency: Currency;
  deactivation?: Maybe<SubscriptionDeactivation>;
  id: Scalars['String'];
  invoices: Array<Invoice>;
  memberPlan: MemberPlan;
  modifiedAt: Scalars['DateTime'];
  monthlyAmount: Scalars['Int'];
  paidUntil?: Maybe<Scalars['DateTime']>;
  paymentPeriodicity: PaymentPeriodicity;
  periods: Array<SubscriptionPeriod>;
  properties: Array<Properties>;
  startsAt: Scalars['DateTime'];
};

export type OverriddenRating = {
  __typename?: 'overriddenRating';
  answerId: Scalars['String'];
  value?: Maybe<Scalars['Int']>;
};

export type AuthorRefFragment = { __typename?: 'Author', id: string, name: string, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null };

export type FullAuthorFragment = { __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null };

export type AuthorListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
}>;


export type AuthorListQuery = { __typename?: 'Query', authors: { __typename?: 'AuthorConnection', totalCount: number, nodes: Array<{ __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type AuthorQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type AuthorQuery = { __typename?: 'Query', author?: { __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } | null };

export type CreateAuthorMutationVariables = Exact<{
  input: AuthorInput;
}>;


export type CreateAuthorMutation = { __typename?: 'Mutation', createAuthor?: { __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } | null };

export type UpdateAuthorMutationVariables = Exact<{
  id: Scalars['String'];
  input: AuthorInput;
}>;


export type UpdateAuthorMutation = { __typename?: 'Mutation', updateAuthor?: { __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } | null };

export type DeleteAuthorMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteAuthorMutation = { __typename?: 'Mutation', deleteAuthor?: { __typename?: 'Author', slug: string, bio?: Descendant[] | null, id: string, name: string, links?: Array<{ __typename?: 'AuthorLink', title: string, url: string }> | null, image?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } | null };

export type CommentRevisionFragment = { __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string };

export type FullParentCommentFragment = { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> };

export type FullCommentUserFragment = { __typename?: 'User', id: string, name: string, firstName?: string | null, flair?: string | null, email: string };

export type FullCommentFragment = { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, source?: string | null, createdAt: string, modifiedAt: string, itemID: string, itemType: CommentItemType, featured?: boolean | null, guestUserImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, firstName?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }>, parentComment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> } | null, tags: Array<{ __typename?: 'Tag', id: string, tag?: string | null }>, overriddenRatings?: Array<{ __typename?: 'overriddenRating', answerId: string, value?: number | null }> | null };

export type CommentListQueryVariables = Exact<{
  filter?: InputMaybe<CommentFilter>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<SortOrder>;
  sort?: InputMaybe<CommentSort>;
}>;


export type CommentListQuery = { __typename?: 'Query', comments: { __typename?: 'CommentConnection', totalCount: number, nodes: Array<{ __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, source?: string | null, createdAt: string, modifiedAt: string, itemID: string, itemType: CommentItemType, featured?: boolean | null, guestUserImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, firstName?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }>, parentComment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> } | null, tags: Array<{ __typename?: 'Tag', id: string, tag?: string | null }>, overriddenRatings?: Array<{ __typename?: 'overriddenRating', answerId: string, value?: number | null }> | null }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type CommentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type CommentQuery = { __typename?: 'Query', comment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, source?: string | null, createdAt: string, modifiedAt: string, itemID: string, itemType: CommentItemType, featured?: boolean | null, guestUserImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, firstName?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }>, parentComment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> } | null, tags: Array<{ __typename?: 'Tag', id: string, tag?: string | null }>, overriddenRatings?: Array<{ __typename?: 'overriddenRating', answerId: string, value?: number | null }> | null } | null };

export type ApproveCommentMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type ApproveCommentMutation = { __typename?: 'Mutation', approveComment: { __typename?: 'Comment', state: CommentState } };

export type RejectCommentMutationVariables = Exact<{
  id: Scalars['String'];
  rejectionReason?: InputMaybe<CommentRejectionReason>;
}>;


export type RejectCommentMutation = { __typename?: 'Mutation', rejectComment: { __typename?: 'Comment', state: CommentState, rejectionReason?: CommentRejectionReason | null } };

export type RequestChangesOnCommentMutationVariables = Exact<{
  id: Scalars['String'];
  rejectionReason: CommentRejectionReason;
}>;


export type RequestChangesOnCommentMutation = { __typename?: 'Mutation', requestChangesOnComment: { __typename?: 'Comment', state: CommentState, rejectionReason?: CommentRejectionReason | null } };

export type UpdateCommentMutationVariables = Exact<{
  id: Scalars['String'];
  revision?: InputMaybe<CommentRevisionUpdateInput>;
  userID?: InputMaybe<Scalars['String']>;
  guestUsername?: InputMaybe<Scalars['String']>;
  guestUserImageID?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  source?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
  ratingOverrides?: InputMaybe<Array<CommentRatingOverrideUpdateInput> | CommentRatingOverrideUpdateInput>;
}>;


export type UpdateCommentMutation = { __typename?: 'Mutation', updateComment: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, source?: string | null, createdAt: string, modifiedAt: string, itemID: string, itemType: CommentItemType, featured?: boolean | null, guestUserImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, firstName?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }>, parentComment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> } | null, tags: Array<{ __typename?: 'Tag', id: string, tag?: string | null }>, overriddenRatings?: Array<{ __typename?: 'overriddenRating', answerId: string, value?: number | null }> | null } };

export type CreateCommentMutationVariables = Exact<{
  itemID: Scalars['String'];
  itemType: CommentItemType;
  parentID?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['RichText']>;
  tagIds?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type CreateCommentMutation = { __typename?: 'Mutation', createComment: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, source?: string | null, createdAt: string, modifiedAt: string, itemID: string, itemType: CommentItemType, featured?: boolean | null, guestUserImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, firstName?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }>, parentComment?: { __typename?: 'Comment', id: string, state: CommentState, rejectionReason?: CommentRejectionReason | null, guestUsername?: string | null, createdAt: string, modifiedAt: string, user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null, revisions: Array<{ __typename?: 'CommentRevision', text?: Descendant[] | null, title?: string | null, lead?: string | null, createdAt: string }> } | null, tags: Array<{ __typename?: 'Tag', id: string, tag?: string | null }>, overriddenRatings?: Array<{ __typename?: 'overriddenRating', answerId: string, value?: number | null }> | null } };

export type DeleteCommentMutationVariables = Exact<{
  deleteCommentId: Scalars['String'];
}>;


export type DeleteCommentMutation = { __typename?: 'Mutation', deleteComment: { __typename?: 'Comment', id: string } };

export type ImageUrLsFragment = { __typename?: 'Image', url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null };

export type ImageRefFragment = { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null };

export type FullImageFragment = { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, extension: string, width: number, height: number, fileSize: number, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, title?: string | null, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null };

export type ImageListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
}>;


export type ImageListQuery = { __typename?: 'Query', images: { __typename?: 'ImageConnection', nodes: Array<{ __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type ImageQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type ImageQuery = { __typename?: 'Query', image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, extension: string, width: number, height: number, fileSize: number, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, title?: string | null, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

export type UploadImageMutationVariables = Exact<{
  input: UploadImageInput;
}>;


export type UploadImageMutation = { __typename?: 'Mutation', uploadImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null };

export type UpdateImageMutationVariables = Exact<{
  id: Scalars['String'];
  input: UpdateImageInput;
}>;


export type UpdateImageMutation = { __typename?: 'Mutation', updateImage?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, extension: string, width: number, height: number, fileSize: number, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, title?: string | null, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

export type DeleteImageMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteImageMutation = { __typename?: 'Mutation', deleteImage?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, extension: string, width: number, height: number, fileSize: number, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, title?: string | null, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

export type FullPeerProfileFragment = { __typename?: 'PeerProfile', name: string, hostURL: string, themeColor: string, themeFontColor: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, squareLogo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, callToActionImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null };

export type PeerRefFragment = { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string };

export type PeerWithProfileFragment = { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string, profile?: { __typename?: 'PeerProfile', name: string, hostURL: string, themeColor: string, themeFontColor: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, squareLogo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, callToActionImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } | null };

export type PeerProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type PeerProfileQuery = { __typename?: 'Query', peerProfile: { __typename?: 'PeerProfile', name: string, hostURL: string, themeColor: string, themeFontColor: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, squareLogo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, callToActionImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } };

export type UpdatePeerProfileMutationVariables = Exact<{
  input: PeerProfileInput;
}>;


export type UpdatePeerProfileMutation = { __typename?: 'Mutation', updatePeerProfile: { __typename?: 'PeerProfile', name: string, hostURL: string, themeColor: string, themeFontColor: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, squareLogo?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null, callToActionImage?: { __typename?: 'Image', id: string, filename?: string | null, extension: string, title?: string | null, description?: string | null, width: number, height: number, url?: string | null, largeURL?: string | null, mediumURL?: string | null, thumbURL?: string | null, squareURL?: string | null, previewURL?: string | null, column1URL?: string | null, column6URL?: string | null } | null } };

export type PeerListQueryVariables = Exact<{ [key: string]: never; }>;


export type PeerListQuery = { __typename?: 'Query', peers?: Array<{ __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string }> | null };

export type PeerQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type PeerQuery = { __typename?: 'Query', peer?: { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string } | null };

export type CreatePeerMutationVariables = Exact<{
  input: CreatePeerInput;
}>;


export type CreatePeerMutation = { __typename?: 'Mutation', createPeer: { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string } };

export type UpdatePeerMutationVariables = Exact<{
  id: Scalars['String'];
  input: UpdatePeerInput;
}>;


export type UpdatePeerMutation = { __typename?: 'Mutation', updatePeer: { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string } };

export type DeletePeerMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeletePeerMutation = { __typename?: 'Mutation', deletePeer?: { __typename?: 'Peer', id: string, name: string, isDisabled?: boolean | null, slug: string, hostURL: string } | null };

export type CreateSubscriptionMutationVariables = Exact<{
  input: SubscriptionInput;
}>;


export type CreateSubscriptionMutation = { __typename?: 'Mutation', createSubscription?: { __typename?: 'Subscription', autoRenew: boolean, id: string, paidUntil?: string | null, monthlyAmount: number, extendable: boolean, user?: { __typename?: 'User', id: string } | null, memberPlan: { __typename?: 'MemberPlan', id: string }, paymentMethod: { __typename?: 'PaymentMethod', id: string } } | null };

export type RenewSubscriptionMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type RenewSubscriptionMutation = { __typename?: 'Mutation', renewSubscription?: { __typename?: 'Invoice', id: string } | null };

export type TagListQueryVariables = Exact<{
  filter?: InputMaybe<TagFilter>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<SortOrder>;
  sort?: InputMaybe<TagSort>;
}>;


export type TagListQuery = { __typename?: 'Query', tags?: { __typename?: 'TagConnection', totalCount: number, nodes: Array<{ __typename?: 'Tag', id: string, tag?: string | null, description?: Descendant[] | null }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } | null };

export type CreateTagMutationVariables = Exact<{
  tag?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichText']>;
  type: TagType;
}>;


export type CreateTagMutation = { __typename?: 'Mutation', createTag?: { __typename?: 'Tag', id: string, tag?: string | null, description?: Descendant[] | null } | null };

export type UpdateTagMutationVariables = Exact<{
  id: Scalars['String'];
  tag?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichText']>;
}>;


export type UpdateTagMutation = { __typename?: 'Mutation', updateTag?: { __typename?: 'Tag', id: string, tag?: string | null, description?: Descendant[] | null } | null };

export type DeleteTagMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteTagMutation = { __typename?: 'Mutation', deleteTag?: { __typename?: 'Tag', id: string, tag?: string | null, description?: Descendant[] | null } | null };

export type FullUserFragment = { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> };

export type UserListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
}>;


export type UserListQuery = { __typename?: 'Query', users: { __typename?: 'UserConnection', totalCount: number, nodes: Array<{ __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type UserQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type CreateUserMutationVariables = Exact<{
  input: UserInput;
  password: Scalars['String'];
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['String'];
  input: UserInput;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', updateUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type ResetUserPasswordMutationVariables = Exact<{
  id: Scalars['String'];
  password: Scalars['String'];
}>;


export type ResetUserPasswordMutation = { __typename?: 'Mutation', resetUserPassword?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: { __typename?: 'User', id: string, name: string, email: string, emailVerifiedAt?: string | null, flair?: string | null, roles: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }> } | null };

export type CreateSessionMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type CreateSessionMutation = { __typename?: 'Mutation', createSession: { __typename?: 'SessionWithToken', token: string, user: { __typename?: 'User', email: string } } };

export type CreateSessionWithJwtMutationVariables = Exact<{
  jwt: Scalars['String'];
}>;


export type CreateSessionWithJwtMutation = { __typename?: 'Mutation', createSessionWithJWT: { __typename?: 'SessionWithToken', token: string, user: { __typename?: 'User', email: string } } };

export type FullPermissionFragment = { __typename?: 'Permission', id: string, description: string, deprecated: boolean };

export type FullUserRoleFragment = { __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> };

export type UserRoleListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['String']>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
}>;


export type UserRoleListQuery = { __typename?: 'Query', userRoles: { __typename?: 'UserRoleConnection', totalCount: number, nodes: Array<{ __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type PermissionListQueryVariables = Exact<{ [key: string]: never; }>;


export type PermissionListQuery = { __typename?: 'Query', permissions?: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> | null };

export type UserRoleQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type UserRoleQuery = { __typename?: 'Query', userRole?: { __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> } | null };

export type CreateUserRoleMutationVariables = Exact<{
  input: UserRoleInput;
}>;


export type CreateUserRoleMutation = { __typename?: 'Mutation', createUserRole?: { __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> } | null };

export type UpdateUserRoleMutationVariables = Exact<{
  id: Scalars['String'];
  input: UserRoleInput;
}>;


export type UpdateUserRoleMutation = { __typename?: 'Mutation', updateUserRole?: { __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> } | null };

export type DeleteUserRoleMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteUserRoleMutation = { __typename?: 'Mutation', deleteUserRole?: { __typename?: 'UserRole', id: string, name: string, description?: string | null, systemRole: boolean, permissions: Array<{ __typename?: 'Permission', id: string, description: string, deprecated: boolean }> } | null };

export const ImageUrLs = gql`
    fragment ImageURLs on Image {
  url
  largeURL: transformURL(input: {width: 500})
  mediumURL: transformURL(input: {width: 300})
  thumbURL: transformURL(input: {width: 280, height: 200})
  squareURL: transformURL(input: {width: 100, height: 100})
  previewURL: transformURL(input: {width: 400, height: 200})
  column1URL: transformURL(input: {width: 800, height: 300})
  column6URL: transformURL(input: {width: 260, height: 300})
}
    `;
export const ImageRef = gql`
    fragment ImageRef on Image {
  id
  filename
  extension
  title
  description
  width
  height
  ...ImageURLs
}
    ${ImageUrLs}`;
export const AuthorRef = gql`
    fragment AuthorRef on Author {
  id
  name
  image {
    ...ImageRef
  }
}
    ${ImageRef}`;
export const FullAuthor = gql`
    fragment FullAuthor on Author {
  slug
  links {
    title
    url
  }
  bio
  ...AuthorRef
}
    ${AuthorRef}`;
export const FullPermission = gql`
    fragment FullPermission on Permission {
  id
  description
  deprecated
}
    `;
export const FullUserRole = gql`
    fragment FullUserRole on UserRole {
  id
  name
  description
  systemRole
  permissions {
    ...FullPermission
  }
}
    ${FullPermission}`;
export const FullUser = gql`
    fragment FullUser on User {
  id
  name
  email
  emailVerifiedAt
  flair
  roles {
    ...FullUserRole
  }
}
    ${FullUserRole}`;
export const CommentRevision = gql`
    fragment CommentRevision on CommentRevision {
  text
  title
  lead
  createdAt
}
    `;
export const FullCommentUser = gql`
    fragment FullCommentUser on User {
  id
  name
  firstName
  flair
  email
}
    `;
export const FullParentComment = gql`
    fragment FullParentComment on Comment {
  id
  state
  rejectionReason
  user {
    ...FullUser
  }
  guestUsername
  revisions {
    ...CommentRevision
  }
  createdAt
  modifiedAt
}
    ${FullUser}
${CommentRevision}`;
export const FullComment = gql`
    fragment FullComment on Comment {
  id
  state
  rejectionReason
  guestUsername
  guestUserImage {
    ...ImageRef
  }
  user {
    ...FullUser
  }
  revisions {
    ...CommentRevision
  }
  source
  user {
    ...FullCommentUser
  }
  createdAt
  modifiedAt
  itemID
  itemType
  parentComment {
    ...FullParentComment
  }
  tags {
    id
    tag
  }
  overriddenRatings {
    answerId
    value
  }
  featured
}
    ${ImageRef}
${FullUser}
${CommentRevision}
${FullCommentUser}
${FullParentComment}`;
export const FullImage = gql`
    fragment FullImage on Image {
  id
  createdAt
  modifiedAt
  filename
  extension
  width
  height
  fileSize
  description
  tags
  source
  link
  license
  focalPoint {
    x
    y
  }
  ...ImageRef
}
    ${ImageRef}`;
export const PeerRef = gql`
    fragment PeerRef on Peer {
  id
  name
  isDisabled
  slug
  hostURL
}
    `;
export const FullPeerProfile = gql`
    fragment FullPeerProfile on PeerProfile {
  name
  hostURL
  themeColor
  themeFontColor
  logo {
    ...ImageRef
  }
  squareLogo {
    ...ImageRef
  }
  callToActionText
  callToActionURL
  callToActionImage {
    ...ImageRef
  }
  callToActionImageURL
}
    ${ImageRef}`;
export const PeerWithProfile = gql`
    fragment PeerWithProfile on Peer {
  ...PeerRef
  profile {
    ...FullPeerProfile
  }
}
    ${PeerRef}
${FullPeerProfile}`;
export const AuthorList = gql`
    query AuthorList($filter: String, $cursor: String, $take: Int, $skip: Int) {
  authors(filter: {name: $filter}, cursor: $cursor, take: $take, skip: $skip) {
    nodes {
      ...FullAuthor
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    ${FullAuthor}`;
export const Author = gql`
    query Author($id: String!) {
  author(id: $id) {
    ...FullAuthor
  }
}
    ${FullAuthor}`;
export const CreateAuthor = gql`
    mutation CreateAuthor($input: AuthorInput!) {
  createAuthor(input: $input) {
    ...FullAuthor
  }
}
    ${FullAuthor}`;
export const UpdateAuthor = gql`
    mutation UpdateAuthor($id: String!, $input: AuthorInput!) {
  updateAuthor(id: $id, input: $input) {
    ...FullAuthor
  }
}
    ${FullAuthor}`;
export const DeleteAuthor = gql`
    mutation DeleteAuthor($id: String!) {
  deleteAuthor(id: $id) {
    ...FullAuthor
  }
}
    ${FullAuthor}`;
export const CommentList = gql`
    query CommentList($filter: CommentFilter, $cursor: String, $take: Int, $skip: Int, $order: SortOrder, $sort: CommentSort) {
  comments(
    filter: $filter
    cursor: $cursor
    take: $take
    skip: $skip
    order: $order
    sort: $sort
  ) {
    nodes {
      ...FullComment
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    ${FullComment}`;
export const Comment = gql`
    query Comment($id: String!) {
  comment(id: $id) {
    ...FullComment
  }
}
    ${FullComment}`;
export const ApproveComment = gql`
    mutation ApproveComment($id: String!) {
  approveComment(id: $id) {
    state
  }
}
    `;
export const RejectComment = gql`
    mutation RejectComment($id: String!, $rejectionReason: CommentRejectionReason) {
  rejectComment(id: $id, rejectionReason: $rejectionReason) {
    state
    rejectionReason
  }
}
    `;
export const RequestChangesOnComment = gql`
    mutation RequestChangesOnComment($id: String!, $rejectionReason: CommentRejectionReason!) {
  requestChangesOnComment(id: $id, rejectionReason: $rejectionReason) {
    state
    rejectionReason
  }
}
    `;
export const UpdateComment = gql`
    mutation updateComment($id: String!, $revision: CommentRevisionUpdateInput, $userID: String, $guestUsername: String, $guestUserImageID: String, $featured: Boolean, $source: String, $tagIds: [String!], $ratingOverrides: [CommentRatingOverrideUpdateInput!]) {
  updateComment(
    id: $id
    revision: $revision
    userID: $userID
    guestUsername: $guestUsername
    guestUserImageID: $guestUserImageID
    featured: $featured
    source: $source
    tagIds: $tagIds
    ratingOverrides: $ratingOverrides
  ) {
    ...FullComment
  }
}
    ${FullComment}`;
export const CreateComment = gql`
    mutation createComment($itemID: String!, $itemType: CommentItemType!, $parentID: String, $text: RichText, $tagIds: [String!]) {
  createComment(
    itemID: $itemID
    itemType: $itemType
    parentID: $parentID
    text: $text
    tagIds: $tagIds
  ) {
    ...FullComment
  }
}
    ${FullComment}`;
export const DeleteComment = gql`
    mutation DeleteComment($deleteCommentId: String!) {
  deleteComment(id: $deleteCommentId) {
    id
  }
}
    `;
export const ImageList = gql`
    query ImageList($filter: String, $cursor: String, $take: Int, $skip: Int) {
  images(filter: {title: $filter}, cursor: $cursor, take: $take, skip: $skip) {
    nodes {
      ...ImageRef
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    ${ImageRef}`;
export const Image = gql`
    query Image($id: String!) {
  image(id: $id) {
    ...FullImage
  }
}
    ${FullImage}`;
export const UploadImage = gql`
    mutation UploadImage($input: UploadImageInput!) {
  uploadImage(input: $input) {
    ...ImageRef
  }
}
    ${ImageRef}`;
export const UpdateImage = gql`
    mutation UpdateImage($id: String!, $input: UpdateImageInput!) {
  updateImage(id: $id, input: $input) {
    ...FullImage
  }
}
    ${FullImage}`;
export const DeleteImage = gql`
    mutation DeleteImage($id: String!) {
  deleteImage(id: $id) {
    ...FullImage
  }
}
    ${FullImage}`;
export const PeerProfile = gql`
    query PeerProfile {
  peerProfile {
    ...FullPeerProfile
  }
}
    ${FullPeerProfile}`;
export const UpdatePeerProfile = gql`
    mutation UpdatePeerProfile($input: PeerProfileInput!) {
  updatePeerProfile(input: $input) {
    ...FullPeerProfile
  }
}
    ${FullPeerProfile}`;
export const PeerList = gql`
    query PeerList {
  peers {
    ...PeerRef
  }
}
    ${PeerRef}`;
export const Peer = gql`
    query Peer($id: String!) {
  peer(id: $id) {
    ...PeerRef
  }
}
    ${PeerRef}`;
export const CreatePeer = gql`
    mutation CreatePeer($input: CreatePeerInput!) {
  createPeer(input: $input) {
    ...PeerRef
  }
}
    ${PeerRef}`;
export const UpdatePeer = gql`
    mutation UpdatePeer($id: String!, $input: UpdatePeerInput!) {
  updatePeer(id: $id, input: $input) {
    ...PeerRef
  }
}
    ${PeerRef}`;
export const DeletePeer = gql`
    mutation DeletePeer($id: String!) {
  deletePeer(id: $id) {
    ...PeerRef
  }
}
    ${PeerRef}`;
export const CreateSubscription = gql`
    mutation CreateSubscription($input: SubscriptionInput!) {
  createSubscription(input: $input) {
    autoRenew
    id
    paidUntil
    user {
      id
    }
    monthlyAmount
    memberPlan {
      id
    }
    extendable
    paymentMethod {
      id
    }
  }
}
    `;
export const RenewSubscription = gql`
    mutation RenewSubscription($id: String!) {
  renewSubscription(id: $id) {
    id
  }
}
    `;
export const TagList = gql`
    query TagList($filter: TagFilter, $cursor: String, $take: Int, $skip: Int, $order: SortOrder, $sort: TagSort) {
  tags(
    filter: $filter
    cursor: $cursor
    take: $take
    skip: $skip
    order: $order
    sort: $sort
  ) {
    nodes {
      id
      tag
      description
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    `;
export const CreateTag = gql`
    mutation CreateTag($tag: String, $description: RichText, $type: TagType!) {
  createTag(tag: $tag, description: $description, type: $type) {
    id
    tag
    description
  }
}
    `;
export const UpdateTag = gql`
    mutation UpdateTag($id: String!, $tag: String, $description: RichText) {
  updateTag(id: $id, tag: $tag, description: $description) {
    id
    tag
    description
  }
}
    `;
export const DeleteTag = gql`
    mutation DeleteTag($id: String!) {
  deleteTag(id: $id) {
    id
    tag
    description
  }
}
    `;
export const UserList = gql`
    query UserList($filter: String, $cursor: String, $take: Int, $skip: Int) {
  users(filter: {name: $filter}, cursor: $cursor, take: $take, skip: $skip) {
    nodes {
      ...FullUser
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    ${FullUser}`;
export const Me = gql`
    query Me {
  me {
    ...FullUser
  }
}
    ${FullUser}`;
export const User = gql`
    query User($id: String!) {
  user(id: $id) {
    ...FullUser
  }
}
    ${FullUser}`;
export const CreateUser = gql`
    mutation CreateUser($input: UserInput!, $password: String!) {
  createUser(input: $input, password: $password) {
    ...FullUser
  }
}
    ${FullUser}`;
export const UpdateUser = gql`
    mutation UpdateUser($id: String!, $input: UserInput!) {
  updateUser(id: $id, input: $input) {
    ...FullUser
  }
}
    ${FullUser}`;
export const ResetUserPassword = gql`
    mutation ResetUserPassword($id: String!, $password: String!) {
  resetUserPassword(id: $id, password: $password) {
    ...FullUser
  }
}
    ${FullUser}`;
export const DeleteUser = gql`
    mutation DeleteUser($id: String!) {
  deleteUser(id: $id) {
    ...FullUser
  }
}
    ${FullUser}`;
export const CreateSession = gql`
    mutation CreateSession($email: String!, $password: String!) {
  createSession(email: $email, password: $password) {
    user {
      email
    }
    token
  }
}
    `;
export const CreateSessionWithJwt = gql`
    mutation CreateSessionWithJWT($jwt: String!) {
  createSessionWithJWT(jwt: $jwt) {
    user {
      email
    }
    token
  }
}
    `;
export const UserRoleList = gql`
    query UserRoleList($filter: String, $cursor: String, $take: Int, $skip: Int) {
  userRoles(filter: {name: $filter}, cursor: $cursor, take: $take, skip: $skip) {
    nodes {
      ...FullUserRole
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    ${FullUserRole}`;
export const PermissionList = gql`
    query PermissionList {
  permissions {
    ...FullPermission
  }
}
    ${FullPermission}`;
export const UserRole = gql`
    query UserRole($id: String!) {
  userRole(id: $id) {
    ...FullUserRole
  }
}
    ${FullUserRole}`;
export const CreateUserRole = gql`
    mutation CreateUserRole($input: UserRoleInput!) {
  createUserRole(input: $input) {
    ...FullUserRole
  }
}
    ${FullUserRole}`;
export const UpdateUserRole = gql`
    mutation UpdateUserRole($id: String!, $input: UserRoleInput!) {
  updateUserRole(id: $id, input: $input) {
    ...FullUserRole
  }
}
    ${FullUserRole}`;
export const DeleteUserRole = gql`
    mutation DeleteUserRole($id: String!) {
  deleteUserRole(id: $id) {
    ...FullUserRole
  }
}
    ${FullUserRole}`;