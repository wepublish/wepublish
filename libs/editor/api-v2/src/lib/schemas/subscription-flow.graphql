query SubscriptionFlows($defaultFlowOnly: Boolean!, $memberPlanId: String) {
  subscriptionFlows(defaultFlowOnly: $defaultFlowOnly, memberPlanId: $memberPlanId) {
    ...SubscriptionFlow
  }
}

mutation CreateSubscriptionFlow(
  $memberPlanId: String!
  $paymentMethodIds: [String!]!
  $periodicities: [PaymentPeriodicity!]!
  $autoRenewal: [Boolean!]!
) {
  createSubscriptionFlow(
    memberPlanId: $memberPlanId
    paymentMethodIds: $paymentMethodIds
    periodicities: $periodicities
    autoRenewal: $autoRenewal
  ) {
    ...SubscriptionFlow
  }
}

mutation UpdateSubscriptionFlow(
  $id: String!
  $paymentMethodIds: [String!]!
  $periodicities: [PaymentPeriodicity!]!
  $autoRenewal: [Boolean!]!
) {
  updateSubscriptionFlow(
    id: $id
    paymentMethodIds: $paymentMethodIds
    periodicities: $periodicities
    autoRenewal: $autoRenewal
  ) {
    ...SubscriptionFlow
  }
}

mutation DeleteSubscriptionFlow($id: String!) {
  deleteSubscriptionFlow(id: $id) {
    ...SubscriptionFlow
  }
}

mutation CreateSubscriptionInterval(
  $subscriptionFlowId: String!
  $daysAwayFromEnding: Int
  $mailTemplateId: String
  $event: SubscriptionEvent!
) {
  createSubscriptionInterval(
    subscriptionFlowId: $subscriptionFlowId
    daysAwayFromEnding: $daysAwayFromEnding
    mailTemplateId: $mailTemplateId
    event: $event
  ) {
    ...SubscriptionFlow
  }
}

mutation UpdateSubscriptionInterval(
  $id: String!
  $daysAwayFromEnding: Int
  $mailTemplateId: String
) {
  updateSubscriptionInterval(
    id: $id
    daysAwayFromEnding: $daysAwayFromEnding
    mailTemplateId: $mailTemplateId
  ) {
    ...SubscriptionFlow
  }
}

mutation DeleteSubscriptionInterval($id: String!) {
  deleteSubscriptionInterval(id: $id) {
    ...SubscriptionFlow
  }
}

query ListPaymentMethods {
  paymentMethods {
    ...PaymentMethodRef
  }
}

fragment SubscriptionFlow on SubscriptionFlowModel {
  id
  default
  memberPlan {
    ...MemberPlanRef
  }
  autoRenewal
  paymentMethods {
    ...PaymentMethodRef
  }
  periodicities
  intervals {
    ...SubscriptionInterval
  }
  numberOfSubscriptions
}

fragment SubscriptionInterval on SubscriptionInterval {
  id
  daysAwayFromEnding
  event
  mailTemplate {
    ...MailTemplateRef
  }
}

fragment MailTemplateRef on MailTemplateRef {
  id
  name
}

fragment MemberPlanRef on MemberPlanRef {
  id
  name
}

fragment PaymentMethodRef on PaymentMethodRef {
  id
  name
}
