// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Node} from 'slate'
import gql from 'graphql-tag'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]?: Maybe<T[SubKey]>}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]: Maybe<T[SubKey]>}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Color: string
  Date: string
  DateTime: string
  GraphQLSettingValueType: any
  RichText: Node[]
  Slug: string
  Upload: File
  VoteValue: number
}

export type Action =
  | ArticleCreatedAction
  | AuthorCreatedAction
  | CommentCreatedAction
  | EventCreatedAction
  | PageCreatedAction
  | PollStartedAction
  | SubscriptionCreatedAction
  | UserCreatedAction

export type AllowedSettingVals = {
  __typename?: 'AllowedSettingVals'
  boolChoice?: Maybe<Scalars['Boolean']>
  stringChoice?: Maybe<Array<Maybe<Scalars['String']>>>
}

export type Article = {
  __typename?: 'Article'
  createdAt: Scalars['DateTime']
  disableComments?: Maybe<Scalars['Boolean']>
  draft?: Maybe<ArticleRevision>
  hidden?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  latest: ArticleRevision
  modifiedAt: Scalars['DateTime']
  pending?: Maybe<ArticleRevision>
  published?: Maybe<ArticleRevision>
  shared: Scalars['Boolean']
  tags: Array<Tag>
}

export type ArticleConnection = {
  __typename?: 'ArticleConnection'
  nodes: Array<Article>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ArticleCreatedAction = {
  __typename?: 'ArticleCreatedAction'
  article: Article
  date: Scalars['DateTime']
}

export type ArticleFilter = {
  authors?: InputMaybe<Array<Scalars['ID']>>
  draft?: InputMaybe<Scalars['Boolean']>
  includeHidden?: InputMaybe<Scalars['Boolean']>
  lead?: InputMaybe<Scalars['String']>
  pending?: InputMaybe<Scalars['Boolean']>
  preTitle?: InputMaybe<Scalars['String']>
  publicationDateFrom?: InputMaybe<DateFilter>
  publicationDateTo?: InputMaybe<DateFilter>
  published?: InputMaybe<Scalars['Boolean']>
  shared?: InputMaybe<Scalars['Boolean']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type ArticleInput = {
  authorIDs: Array<Scalars['ID']>
  blocks: Array<BlockInput>
  breaking: Scalars['Boolean']
  canonicalUrl?: InputMaybe<Scalars['String']>
  disableComments?: InputMaybe<Scalars['Boolean']>
  hidden?: InputMaybe<Scalars['Boolean']>
  hideAuthor: Scalars['Boolean']
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  preTitle?: InputMaybe<Scalars['String']>
  properties: Array<PropertiesInput>
  seoTitle?: InputMaybe<Scalars['String']>
  shared: Scalars['Boolean']
  slug?: InputMaybe<Scalars['Slug']>
  socialMediaAuthorIDs: Array<Scalars['ID']>
  socialMediaDescription?: InputMaybe<Scalars['String']>
  socialMediaImageID?: InputMaybe<Scalars['ID']>
  socialMediaTitle?: InputMaybe<Scalars['String']>
  tags: Array<Scalars['String']>
  title: Scalars['String']
}

export type ArticleNavigationLink = BaseNavigationLink & {
  __typename?: 'ArticleNavigationLink'
  article?: Maybe<Article>
  label: Scalars['String']
}

export type ArticleNavigationLinkInput = {
  articleID: Scalars['ID']
  label: Scalars['String']
}

export type ArticleRevision = {
  __typename?: 'ArticleRevision'
  authors: Array<Author>
  blocks: Array<Block>
  breaking: Scalars['Boolean']
  canonicalUrl?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  hideAuthor: Scalars['Boolean']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  properties: Array<Properties>
  publishAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  revision: Scalars['Int']
  seoTitle?: Maybe<Scalars['String']>
  slug?: Maybe<Scalars['String']>
  socialMediaAuthors: Array<Author>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImage?: Maybe<Image>
  socialMediaTitle?: Maybe<Scalars['String']>
  /** @deprecated Tags now live on the Article itself */
  tags: Array<Scalars['String']>
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export enum ArticleSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt',
  PublishAt = 'publishAt',
  PublishedAt = 'publishedAt',
  UpdatedAt = 'updatedAt'
}

export type ArticleTeaser = {
  __typename?: 'ArticleTeaser'
  article?: Maybe<Article>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type ArticleTeaserInput = {
  articleID: Scalars['ID']
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  preTitle?: InputMaybe<Scalars['String']>
  style?: InputMaybe<TeaserStyle>
  title?: InputMaybe<Scalars['String']>
}

export type AuthProvider = {
  __typename?: 'AuthProvider'
  name: Scalars['String']
  url: Scalars['String']
}

export type Author = {
  __typename?: 'Author'
  bio?: Maybe<Scalars['RichText']>
  createdAt: Scalars['DateTime']
  hideOnArticle?: Maybe<Scalars['Boolean']>
  hideOnTeam?: Maybe<Scalars['Boolean']>
  hideOnTeaser?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  image?: Maybe<Image>
  jobTitle?: Maybe<Scalars['String']>
  links?: Maybe<Array<AuthorLink>>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['Slug']
  tags: Array<Tag>
  url: Scalars['String']
}

export type AuthorConnection = {
  __typename?: 'AuthorConnection'
  nodes: Array<Author>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuthorCreatedAction = {
  __typename?: 'AuthorCreatedAction'
  author: Author
  date: Scalars['DateTime']
}

export type AuthorFilter = {
  hideOnTeam?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  tagIds?: InputMaybe<Array<Scalars['ID']>>
}

export type AuthorInput = {
  bio?: InputMaybe<Scalars['RichText']>
  hideOnArticle?: InputMaybe<Scalars['Boolean']>
  hideOnTeam?: InputMaybe<Scalars['Boolean']>
  hideOnTeaser?: InputMaybe<Scalars['Boolean']>
  imageID?: InputMaybe<Scalars['ID']>
  jobTitle?: InputMaybe<Scalars['String']>
  links?: InputMaybe<Array<AuthorLinkInput>>
  name: Scalars['String']
  slug: Scalars['Slug']
  tagIds?: InputMaybe<Array<Scalars['ID']>>
}

export type AuthorLink = {
  __typename?: 'AuthorLink'
  title: Scalars['String']
  url: Scalars['String']
}

export type AuthorLinkInput = {
  title: Scalars['String']
  url: Scalars['String']
}

export enum AuthorSort {
  Name = 'NAME',
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod'
  forceAutoRenewal: Scalars['Boolean']
  paymentMethods: Array<PaymentMethod>
  paymentPeriodicities: Array<PaymentPeriodicity>
}

export type AvailablePaymentMethodInput = {
  forceAutoRenewal: Scalars['Boolean']
  paymentMethodIDs: Array<Scalars['String']>
  paymentPeriodicities: Array<PaymentPeriodicity>
}

export type BaseNavigationLink = {
  label: Scalars['String']
}

export type BildwurfAdBlock = {
  __typename?: 'BildwurfAdBlock'
  blockStyle?: Maybe<Scalars['String']>
  zoneID: Scalars['String']
}

export type BildwurfAdBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  zoneID: Scalars['String']
}

export type Block =
  | BildwurfAdBlock
  | CommentBlock
  | EmbedBlock
  | EventBlock
  | FacebookPostBlock
  | FacebookVideoBlock
  | HtmlBlock
  | ImageBlock
  | ImageGalleryBlock
  | InstagramPostBlock
  | LinkPageBreakBlock
  | ListicleBlock
  | PolisConversationBlock
  | PollBlock
  | QuoteBlock
  | RichTextBlock
  | SoundCloudTrackBlock
  | TeaserGridBlock
  | TeaserGridFlexBlock
  | TeaserListBlock
  | TikTokVideoBlock
  | TitleBlock
  | TwitterTweetBlock
  | VimeoVideoBlock
  | YouTubeVideoBlock

export type BlockInput = {
  bildwurfAd?: InputMaybe<BildwurfAdBlockInput>
  comment?: InputMaybe<CommentBlockInput>
  embed?: InputMaybe<EmbedBlockInput>
  event?: InputMaybe<EventBlockInput>
  facebookPost?: InputMaybe<FacebookPostBlockInput>
  facebookVideo?: InputMaybe<FacebookVideoBlockInput>
  html?: InputMaybe<HtmlBlockInput>
  image?: InputMaybe<ImageBlockInput>
  imageGallery?: InputMaybe<ImageGalleryBlockInput>
  instagramPost?: InputMaybe<InstagramPostBlockInput>
  linkPageBreak?: InputMaybe<LinkPageBreakBlockInput>
  listicle?: InputMaybe<ListicleBlockInput>
  polisConversation?: InputMaybe<PolisConversationBlockInput>
  poll?: InputMaybe<PollBlockInput>
  quote?: InputMaybe<QuoteBlockInput>
  richText?: InputMaybe<RichTextBlockInput>
  soundCloudTrack?: InputMaybe<SoundCloudTrackBlockInput>
  teaserGrid?: InputMaybe<TeaserGridBlockInput>
  teaserGridFlex?: InputMaybe<TeaserGridFlexBlockInput>
  teaserList?: InputMaybe<TeaserListBlockInput>
  tikTokVideo?: InputMaybe<TikTokVideoBlockInput>
  title?: InputMaybe<TitleBlockInput>
  twitterTweet?: InputMaybe<TwitterTweetBlockInput>
  vimeoVideo?: InputMaybe<VimeoVideoBlockInput>
  youTubeVideo?: InputMaybe<YouTubeVideoBlockInput>
}

export type Comment = {
  __typename?: 'Comment'
  authorType: CommentAuthorType
  createdAt: Scalars['DateTime']
  featured?: Maybe<Scalars['Boolean']>
  guestUserImage?: Maybe<Image>
  guestUsername?: Maybe<Scalars['String']>
  id: Scalars['ID']
  itemID: Scalars['ID']
  itemType: CommentItemType
  modifiedAt: Scalars['DateTime']
  overriddenRatings?: Maybe<Array<OverriddenRating>>
  parentComment?: Maybe<Comment>
  peerId?: Maybe<Scalars['ID']>
  rejectionReason?: Maybe<CommentRejectionReason>
  revisions: Array<CommentRevision>
  source?: Maybe<Scalars['String']>
  state: CommentState
  tags: Array<Tag>
  user?: Maybe<User>
}

export enum CommentAuthorType {
  Author = 'author',
  GuestUser = 'guestUser',
  Team = 'team',
  VerifiedUser = 'verifiedUser'
}

export type CommentBlock = {
  __typename?: 'CommentBlock'
  blockStyle?: Maybe<Scalars['String']>
  comments: Array<Comment>
  filter: CommentBlockFilter
}

export type CommentBlockFilter = {
  __typename?: 'CommentBlockFilter'
  comments?: Maybe<Array<Scalars['ID']>>
  item?: Maybe<Scalars['ID']>
  tags?: Maybe<Array<Scalars['ID']>>
}

export type CommentBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  filter: CommentBlockInputFilter
}

export type CommentBlockInputFilter = {
  comments?: InputMaybe<Array<Scalars['ID']>>
  item?: InputMaybe<Scalars['ID']>
  tags?: InputMaybe<Array<Scalars['ID']>>
}

export type CommentConnection = {
  __typename?: 'CommentConnection'
  nodes: Array<Comment>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CommentCreatedAction = {
  __typename?: 'CommentCreatedAction'
  comment: Comment
  date: Scalars['DateTime']
}

export type CommentFilter = {
  item?: InputMaybe<Scalars['ID']>
  itemID?: InputMaybe<Scalars['ID']>
  itemType?: InputMaybe<CommentItemType>
  states?: InputMaybe<Array<CommentState>>
  tags?: InputMaybe<Array<Scalars['ID']>>
}

export enum CommentItemType {
  Article = 'article',
  Page = 'page',
  PeerArticle = 'peerArticle'
}

export type CommentRatingOverrideUpdateInput = {
  answerId: Scalars['ID']
  value?: InputMaybe<Scalars['Int']>
}

export type CommentRatingSystemAnswer = {
  __typename?: 'CommentRatingSystemAnswer'
  answer?: Maybe<Scalars['String']>
  id: Scalars['ID']
  ratingSystemId: Scalars['ID']
  type: RatingSystemType
}

export enum CommentRejectionReason {
  Misconduct = 'misconduct',
  Spam = 'spam'
}

export type CommentRevision = {
  __typename?: 'CommentRevision'
  createdAt: Scalars['DateTime']
  lead?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['RichText']>
  title?: Maybe<Scalars['String']>
}

export type CommentRevisionUpdateInput = {
  lead?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['RichText']>
  title?: InputMaybe<Scalars['String']>
}

export enum CommentSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum CommentState {
  Approved = 'approved',
  PendingApproval = 'pendingApproval',
  PendingUserChanges = 'pendingUserChanges',
  Rejected = 'rejected'
}

export type CreatePeerInput = {
  hostURL: Scalars['String']
  name: Scalars['String']
  slug: Scalars['String']
  token: Scalars['String']
}

export type CreatedToken = {
  __typename?: 'CreatedToken'
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  token: Scalars['String']
}

export enum Currency {
  Chf = 'CHF',
  Eur = 'EUR'
}

export type CustomTeaser = {
  __typename?: 'CustomTeaser'
  contentUrl?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  properties?: Maybe<Array<Properties>>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type CustomTeaserInput = {
  contentUrl?: InputMaybe<Scalars['String']>
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  preTitle?: InputMaybe<Scalars['String']>
  properties: Array<PropertiesInput>
  style?: InputMaybe<TeaserStyle>
  title?: InputMaybe<Scalars['String']>
}

export type DateFilter = {
  comparison: DateFilterComparison
  date?: InputMaybe<Scalars['DateTime']>
}

export enum DateFilterComparison {
  Eq = 'eq',
  Gt = 'gt',
  Gte = 'gte',
  Lt = 'lt',
  Lte = 'lte'
}

export type EmbedBlock = {
  __typename?: 'EmbedBlock'
  blockStyle?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Int']>
  sandbox?: Maybe<Scalars['String']>
  styleCustom?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  width?: Maybe<Scalars['Int']>
}

export type EmbedBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  height?: InputMaybe<Scalars['Int']>
  sandbox?: InputMaybe<Scalars['String']>
  styleCustom?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  url?: InputMaybe<Scalars['String']>
  width?: InputMaybe<Scalars['Int']>
}

export type Event = {
  __typename?: 'Event'
  description?: Maybe<Scalars['RichText']>
  endsAt?: Maybe<Scalars['DateTime']>
  externalSourceId?: Maybe<Scalars['String']>
  externalSourceName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  name: Scalars['String']
  startsAt: Scalars['DateTime']
  status: EventStatus
  tags: Array<Tag>
  url: Scalars['String']
}

export type EventBlock = {
  __typename?: 'EventBlock'
  blockStyle?: Maybe<Scalars['String']>
  events: Array<Event>
  filter: EventBlockFilter
}

export type EventBlockFilter = {
  __typename?: 'EventBlockFilter'
  events?: Maybe<Array<Scalars['ID']>>
  tags?: Maybe<Array<Scalars['ID']>>
}

export type EventBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  filter: EventBlockInputFilter
}

export type EventBlockInputFilter = {
  events?: InputMaybe<Array<Scalars['ID']>>
  tags?: InputMaybe<Array<Scalars['ID']>>
}

export type EventConnection = {
  __typename?: 'EventConnection'
  nodes: Array<Event>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type EventCreatedAction = {
  __typename?: 'EventCreatedAction'
  date: Scalars['DateTime']
  event: Event
}

export type EventFilter = {
  from?: InputMaybe<Scalars['DateTime']>
  location?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['ID']>>
  to?: InputMaybe<Scalars['DateTime']>
  upcomingOnly?: InputMaybe<Scalars['Boolean']>
}

export enum EventSort {
  CreatedAt = 'CreatedAt',
  EndsAt = 'EndsAt',
  ModifiedAt = 'ModifiedAt',
  StartsAt = 'StartsAt'
}

export enum EventStatus {
  Cancelled = 'Cancelled',
  Postponed = 'Postponed',
  Rescheduled = 'Rescheduled',
  Scheduled = 'Scheduled'
}

export type EventTeaser = {
  __typename?: 'EventTeaser'
  event?: Maybe<Event>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type EventTeaserInput = {
  eventID: Scalars['ID']
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  preTitle?: InputMaybe<Scalars['String']>
  style?: InputMaybe<TeaserStyle>
  title?: InputMaybe<Scalars['String']>
}

export type ExternalNavigationLink = BaseNavigationLink & {
  __typename?: 'ExternalNavigationLink'
  label: Scalars['String']
  url: Scalars['String']
}

export type ExternalNavigationLinkInput = {
  label: Scalars['String']
  url: Scalars['String']
}

export type FacebookPostBlock = {
  __typename?: 'FacebookPostBlock'
  blockStyle?: Maybe<Scalars['String']>
  postID: Scalars['String']
  userID: Scalars['String']
}

export type FacebookPostBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  postID: Scalars['String']
  userID: Scalars['String']
}

export type FacebookVideoBlock = {
  __typename?: 'FacebookVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type FacebookVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type FlexAlignment = {
  __typename?: 'FlexAlignment'
  h: Scalars['Int']
  i: Scalars['String']
  static: Scalars['Boolean']
  w: Scalars['Int']
  x: Scalars['Int']
  y: Scalars['Int']
}

export type FlexAlignmentInput = {
  h: Scalars['Int']
  i: Scalars['String']
  static: Scalars['Boolean']
  w: Scalars['Int']
  x: Scalars['Int']
  y: Scalars['Int']
}

export type FlexTeaser = {
  __typename?: 'FlexTeaser'
  alignment: FlexAlignment
  teaser?: Maybe<Teaser>
}

export type FlexTeaserInput = {
  alignment: FlexAlignmentInput
  blockStyle?: InputMaybe<Scalars['String']>
  teaser?: InputMaybe<TeaserInput>
}

export type FocalPoint = {
  __typename?: 'FocalPoint'
  x: Scalars['Float']
  y: Scalars['Float']
}

export type FullCommentRatingSystem = {
  __typename?: 'FullCommentRatingSystem'
  answers: Array<CommentRatingSystemAnswer>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
}

export type FullPoll = {
  __typename?: 'FullPoll'
  answers: Array<PollAnswerWithVoteCount>
  closedAt?: Maybe<Scalars['DateTime']>
  externalVoteSources: Array<PollExternalVoteSource>
  id: Scalars['ID']
  infoText?: Maybe<Scalars['RichText']>
  opensAt: Scalars['DateTime']
  question?: Maybe<Scalars['String']>
}

export type GalleryImageEdge = {
  __typename?: 'GalleryImageEdge'
  caption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
}

export type GalleryImageEdgeInput = {
  caption?: InputMaybe<Scalars['String']>
  imageID?: InputMaybe<Scalars['ID']>
}

export type HtmlBlock = {
  __typename?: 'HTMLBlock'
  blockStyle?: Maybe<Scalars['String']>
  html?: Maybe<Scalars['String']>
}

export type HtmlBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  html?: InputMaybe<Scalars['String']>
}

export type Image = {
  __typename?: 'Image'
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  extension: Scalars['String']
  fileSize: Scalars['Int']
  filename?: Maybe<Scalars['String']>
  focalPoint?: Maybe<FocalPoint>
  format: Scalars['String']
  height: Scalars['Int']
  id: Scalars['ID']
  license?: Maybe<Scalars['String']>
  link?: Maybe<Scalars['String']>
  mimeType: Scalars['String']
  modifiedAt: Scalars['DateTime']
  source?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  title?: Maybe<Scalars['String']>
  transformURL?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  width: Scalars['Int']
}

export type ImageTransformUrlArgs = {
  input?: InputMaybe<ImageTransformation>
}

export type ImageBlock = {
  __typename?: 'ImageBlock'
  blockStyle?: Maybe<Scalars['String']>
  caption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  linkUrl?: Maybe<Scalars['String']>
}

export type ImageBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  caption?: InputMaybe<Scalars['String']>
  imageID?: InputMaybe<Scalars['ID']>
  linkUrl?: InputMaybe<Scalars['String']>
}

export type ImageConnection = {
  __typename?: 'ImageConnection'
  nodes: Array<Image>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ImageFilter = {
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type ImageGalleryBlock = {
  __typename?: 'ImageGalleryBlock'
  blockStyle?: Maybe<Scalars['String']>
  images: Array<GalleryImageEdge>
}

export type ImageGalleryBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  images?: InputMaybe<Array<InputMaybe<GalleryImageEdgeInput>>>
}

export enum ImageOutput {
  Jpeg = 'jpeg',
  Png = 'png',
  Webp = 'webp'
}

export enum ImageRotation {
  Auto = 'Auto',
  Rotate0 = 'Rotate0',
  Rotate90 = 'Rotate90',
  Rotate180 = 'Rotate180',
  Rotate270 = 'Rotate270'
}

export enum ImageSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type ImageTransformation = {
  height?: InputMaybe<Scalars['Int']>
  output?: InputMaybe<ImageOutput>
  quality?: InputMaybe<Scalars['Float']>
  rotation?: InputMaybe<ImageRotation>
  width?: InputMaybe<Scalars['Int']>
}

export type InputPoint = {
  x: Scalars['Float']
  y: Scalars['Float']
}

export type InstagramPostBlock = {
  __typename?: 'InstagramPostBlock'
  blockStyle?: Maybe<Scalars['String']>
  postID: Scalars['String']
}

export type InstagramPostBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  postID: Scalars['String']
}

export type Invoice = {
  __typename?: 'Invoice'
  canceledAt?: Maybe<Scalars['DateTime']>
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  items: Array<InvoiceItem>
  mail: Scalars['String']
  manuallySetAsPaidByUserId?: Maybe<Scalars['ID']>
  modifiedAt: Scalars['DateTime']
  paidAt?: Maybe<Scalars['DateTime']>
  total: Scalars['Int']
}

export type InvoiceConnection = {
  __typename?: 'InvoiceConnection'
  nodes: Array<Invoice>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InvoiceFilter = {
  canceledAt?: InputMaybe<Scalars['Date']>
  mail?: InputMaybe<Scalars['String']>
  paidAt?: InputMaybe<Scalars['Date']>
  subscriptionID?: InputMaybe<Scalars['ID']>
  userID?: InputMaybe<Scalars['ID']>
}

export type InvoiceInput = {
  description?: InputMaybe<Scalars['String']>
  items: Array<InvoiceItemInput>
  mail: Scalars['String']
  manuallySetAsPaidByUserId?: InputMaybe<Scalars['ID']>
  subscriptionID?: InputMaybe<Scalars['ID']>
}

export type InvoiceItem = {
  __typename?: 'InvoiceItem'
  amount: Scalars['Int']
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  quantity: Scalars['Int']
  total: Scalars['Int']
}

export type InvoiceItemInput = {
  amount: Scalars['Int']
  createdAt: Scalars['DateTime']
  description?: InputMaybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  quantity: Scalars['Int']
}

export enum InvoiceSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt',
  PaidAt = 'paidAt'
}

export type JwtToken = {
  __typename?: 'JWTToken'
  expiresAt: Scalars['String']
  token: Scalars['String']
}

export type LinkPageBreakBlock = {
  __typename?: 'LinkPageBreakBlock'
  blockStyle?: Maybe<Scalars['String']>
  hideButton: Scalars['Boolean']
  image?: Maybe<Image>
  /** @deprecated Use block styles instead of this */
  layoutOption?: Maybe<Scalars['String']>
  linkTarget?: Maybe<Scalars['String']>
  linkText?: Maybe<Scalars['String']>
  linkURL?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
  /** @deprecated Use block styles instead of this */
  styleOption?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  templateOption?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
}

export type LinkPageBreakBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  hideButton: Scalars['Boolean']
  imageID?: InputMaybe<Scalars['ID']>
  layoutOption?: InputMaybe<Scalars['String']>
  linkTarget?: InputMaybe<Scalars['String']>
  linkText?: InputMaybe<Scalars['String']>
  linkURL?: InputMaybe<Scalars['String']>
  richText: Scalars['RichText']
  styleOption?: InputMaybe<Scalars['String']>
  templateOption?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
}

export type ListicleBlock = {
  __typename?: 'ListicleBlock'
  blockStyle?: Maybe<Scalars['String']>
  items: Array<ListicleItem>
}

export type ListicleBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  items?: InputMaybe<Array<InputMaybe<ListicleItemInput>>>
}

export type ListicleItem = {
  __typename?: 'ListicleItem'
  image?: Maybe<Image>
  richText: Scalars['RichText']
  title: Scalars['String']
}

export type ListicleItemInput = {
  imageID?: InputMaybe<Scalars['ID']>
  richText: Scalars['RichText']
  title: Scalars['String']
}

export type MemberPlan = {
  __typename?: 'MemberPlan'
  active: Scalars['Boolean']
  amountPerMonthMin: Scalars['Int']
  availablePaymentMethods: Array<AvailablePaymentMethod>
  createdAt: Scalars['DateTime']
  currency: Currency
  description?: Maybe<Scalars['RichText']>
  extendable: Scalars['Boolean']
  id: Scalars['ID']
  image?: Maybe<Image>
  maxCount?: Maybe<Scalars['Int']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['String']
  tags?: Maybe<Array<Scalars['String']>>
}

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection'
  nodes: Array<MemberPlan>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberPlanFilter = {
  active?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
}

export type MemberPlanInput = {
  active: Scalars['Boolean']
  amountPerMonthMin: Scalars['Int']
  availablePaymentMethods: Array<AvailablePaymentMethodInput>
  currency: Currency
  description?: InputMaybe<Scalars['RichText']>
  extendable: Scalars['Boolean']
  imageID?: InputMaybe<Scalars['ID']>
  maxCount?: InputMaybe<Scalars['Int']>
  name: Scalars['String']
  slug: Scalars['String']
  tags?: InputMaybe<Array<Scalars['String']>>
}

export enum MemberPlanSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Mutation = {
  __typename?: 'Mutation'
  approveComment: Comment
  cancelSubscription?: Maybe<Subscription>
  createArticle: Article
  createAuthor?: Maybe<Author>
  createComment: Comment
  createEvent?: Maybe<Event>
  createInvoice?: Maybe<Invoice>
  createMemberPlan?: Maybe<MemberPlan>
  createNavigation?: Maybe<Navigation>
  createPage: Page
  createPaymentFromInvoice?: Maybe<Payment>
  createPaymentMethod?: Maybe<PaymentMethod>
  createPeer: Peer
  createPoll?: Maybe<PollWithAnswers>
  createPollAnswer?: Maybe<PollAnswer>
  createPollExternalVoteSource?: Maybe<PollExternalVoteSource>
  createRatingSystemAnswer: CommentRatingSystemAnswer
  createSession: SessionWithToken
  createSessionWithJWT: SessionWithToken
  createSessionWithOAuth2Code: SessionWithToken
  createSubscription?: Maybe<Subscription>
  createTag?: Maybe<Tag>
  createToken: CreatedToken
  createUser?: Maybe<User>
  createUserRole?: Maybe<UserRole>
  deleteArticle?: Maybe<Article>
  deleteAuthor?: Maybe<Author>
  deleteComment: Comment
  deleteEvent?: Maybe<Event>
  deleteImage?: Maybe<Image>
  deleteInvoice?: Maybe<Invoice>
  deleteMemberPlan?: Maybe<MemberPlan>
  deleteNavigation?: Maybe<Navigation>
  deletePage?: Maybe<Page>
  deletePaymentMethod?: Maybe<PaymentMethod>
  deletePeer?: Maybe<Peer>
  deletePoll?: Maybe<FullPoll>
  deletePollAnswer?: Maybe<PollAnswerWithVoteCount>
  deletePollExternalVoteSource?: Maybe<PollExternalVoteSource>
  deleteRatingSystemAnswer: CommentRatingSystemAnswer
  deleteSubscription?: Maybe<Subscription>
  deleteTag?: Maybe<Tag>
  deleteToken?: Maybe<CreatedToken>
  deleteUser?: Maybe<User>
  deleteUserRole?: Maybe<UserRole>
  duplicateArticle: Article
  duplicatePage: Page
  markInvoiceAsPaid?: Maybe<Invoice>
  publishArticle?: Maybe<Article>
  publishPage?: Maybe<Page>
  rejectComment: Comment
  renewSubscription?: Maybe<Invoice>
  requestChangesOnComment: Comment
  resetUserPassword?: Maybe<User>
  revokeActiveSession: Scalars['Boolean']
  revokeSession: Scalars['Boolean']
  sendJWTLogin: Scalars['String']
  sendWebsiteLogin: Scalars['String']
  sessions: Array<Session>
  unpublishArticle?: Maybe<Article>
  unpublishPage?: Maybe<Page>
  updateArticle?: Maybe<Article>
  updateAuthor?: Maybe<Author>
  updateComment: Comment
  updateEvent?: Maybe<Event>
  updateImage?: Maybe<Image>
  updateInvoice?: Maybe<Invoice>
  updateMemberPlan?: Maybe<MemberPlan>
  updateNavigation?: Maybe<Navigation>
  updatePage?: Maybe<Page>
  updatePaymentMethod?: Maybe<PaymentMethod>
  updatePeer: Peer
  updatePeerProfile: PeerProfile
  updatePoll?: Maybe<FullPoll>
  updateRatingSystem: FullCommentRatingSystem
  updateSettingList?: Maybe<Array<Maybe<Setting>>>
  updateSubscription?: Maybe<Subscription>
  updateTag?: Maybe<Tag>
  updateUser?: Maybe<User>
  updateUserRole?: Maybe<UserRole>
  uploadImage?: Maybe<Image>
}

export type MutationApproveCommentArgs = {
  id: Scalars['ID']
}

export type MutationCancelSubscriptionArgs = {
  id: Scalars['ID']
  reason: SubscriptionDeactivationReason
}

export type MutationCreateArticleArgs = {
  input: ArticleInput
}

export type MutationCreateAuthorArgs = {
  input: AuthorInput
}

export type MutationCreateCommentArgs = {
  itemID: Scalars['ID']
  itemType: CommentItemType
  parentID?: InputMaybe<Scalars['ID']>
  tagIds?: InputMaybe<Array<Scalars['ID']>>
  text?: InputMaybe<Scalars['RichText']>
}

export type MutationCreateEventArgs = {
  description?: InputMaybe<Scalars['RichText']>
  endsAt?: InputMaybe<Scalars['DateTime']>
  externalSourceId?: InputMaybe<Scalars['String']>
  externalSourceName?: InputMaybe<Scalars['String']>
  imageId?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  location?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  startsAt: Scalars['DateTime']
  tagIds?: InputMaybe<Array<Scalars['ID']>>
}

export type MutationCreateInvoiceArgs = {
  input: InvoiceInput
}

export type MutationCreateMemberPlanArgs = {
  input: MemberPlanInput
}

export type MutationCreateNavigationArgs = {
  input: NavigationInput
}

export type MutationCreatePageArgs = {
  input: PageInput
}

export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput
}

export type MutationCreatePaymentMethodArgs = {
  input: PaymentMethodInput
}

export type MutationCreatePeerArgs = {
  input: CreatePeerInput
}

export type MutationCreatePollArgs = {
  closedAt?: InputMaybe<Scalars['DateTime']>
  opensAt?: InputMaybe<Scalars['DateTime']>
  question?: InputMaybe<Scalars['String']>
}

export type MutationCreatePollAnswerArgs = {
  answer?: InputMaybe<Scalars['String']>
  pollId: Scalars['ID']
}

export type MutationCreatePollExternalVoteSourceArgs = {
  pollId: Scalars['ID']
  source?: InputMaybe<Scalars['String']>
}

export type MutationCreateRatingSystemAnswerArgs = {
  answer?: InputMaybe<Scalars['String']>
  ratingSystemId: Scalars['ID']
  type?: InputMaybe<RatingSystemType>
}

export type MutationCreateSessionArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String']
}

export type MutationCreateSessionWithOAuth2CodeArgs = {
  code: Scalars['String']
  name: Scalars['String']
  redirectUri: Scalars['String']
}

export type MutationCreateSubscriptionArgs = {
  input: SubscriptionInput
}

export type MutationCreateTagArgs = {
  main?: InputMaybe<Scalars['Boolean']>
  tag?: InputMaybe<Scalars['String']>
  type: TagType
}

export type MutationCreateTokenArgs = {
  input: TokenInput
}

export type MutationCreateUserArgs = {
  input: UserInput
  password: Scalars['String']
}

export type MutationCreateUserRoleArgs = {
  input: UserRoleInput
}

export type MutationDeleteArticleArgs = {
  id: Scalars['ID']
}

export type MutationDeleteAuthorArgs = {
  id: Scalars['ID']
}

export type MutationDeleteCommentArgs = {
  id: Scalars['ID']
}

export type MutationDeleteEventArgs = {
  id: Scalars['ID']
}

export type MutationDeleteImageArgs = {
  id: Scalars['ID']
}

export type MutationDeleteInvoiceArgs = {
  id: Scalars['ID']
}

export type MutationDeleteMemberPlanArgs = {
  id: Scalars['ID']
}

export type MutationDeleteNavigationArgs = {
  id: Scalars['ID']
}

export type MutationDeletePageArgs = {
  id: Scalars['ID']
}

export type MutationDeletePaymentMethodArgs = {
  id: Scalars['ID']
}

export type MutationDeletePeerArgs = {
  id: Scalars['ID']
}

export type MutationDeletePollArgs = {
  id: Scalars['ID']
}

export type MutationDeletePollAnswerArgs = {
  id: Scalars['ID']
}

export type MutationDeletePollExternalVoteSourceArgs = {
  id: Scalars['ID']
}

export type MutationDeleteRatingSystemAnswerArgs = {
  id: Scalars['ID']
}

export type MutationDeleteSubscriptionArgs = {
  id: Scalars['ID']
}

export type MutationDeleteTagArgs = {
  id: Scalars['ID']
}

export type MutationDeleteTokenArgs = {
  id: Scalars['ID']
}

export type MutationDeleteUserArgs = {
  id: Scalars['ID']
}

export type MutationDeleteUserRoleArgs = {
  id: Scalars['ID']
}

export type MutationDuplicateArticleArgs = {
  id: Scalars['ID']
}

export type MutationDuplicatePageArgs = {
  id: Scalars['ID']
}

export type MutationMarkInvoiceAsPaidArgs = {
  id: Scalars['ID']
}

export type MutationPublishArticleArgs = {
  id: Scalars['ID']
  publishAt?: InputMaybe<Scalars['DateTime']>
  publishedAt?: InputMaybe<Scalars['DateTime']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
}

export type MutationPublishPageArgs = {
  id: Scalars['ID']
  publishAt?: InputMaybe<Scalars['DateTime']>
  publishedAt?: InputMaybe<Scalars['DateTime']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
}

export type MutationRejectCommentArgs = {
  id: Scalars['ID']
  rejectionReason?: InputMaybe<CommentRejectionReason>
}

export type MutationRenewSubscriptionArgs = {
  id: Scalars['ID']
}

export type MutationRequestChangesOnCommentArgs = {
  id: Scalars['ID']
  rejectionReason: CommentRejectionReason
}

export type MutationResetUserPasswordArgs = {
  id: Scalars['ID']
  password: Scalars['String']
  sendMail?: InputMaybe<Scalars['Boolean']>
}

export type MutationRevokeSessionArgs = {
  id: Scalars['ID']
}

export type MutationSendJwtLoginArgs = {
  email: Scalars['String']
  url: Scalars['String']
}

export type MutationSendWebsiteLoginArgs = {
  email: Scalars['String']
}

export type MutationUnpublishArticleArgs = {
  id: Scalars['ID']
}

export type MutationUnpublishPageArgs = {
  id: Scalars['ID']
}

export type MutationUpdateArticleArgs = {
  id: Scalars['ID']
  input: ArticleInput
}

export type MutationUpdateAuthorArgs = {
  id: Scalars['ID']
  input: AuthorInput
}

export type MutationUpdateCommentArgs = {
  featured?: InputMaybe<Scalars['Boolean']>
  guestUserImageID?: InputMaybe<Scalars['ID']>
  guestUsername?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  ratingOverrides?: InputMaybe<Array<CommentRatingOverrideUpdateInput>>
  revision?: InputMaybe<CommentRevisionUpdateInput>
  source?: InputMaybe<Scalars['String']>
  tagIds?: InputMaybe<Array<Scalars['ID']>>
  userID?: InputMaybe<Scalars['ID']>
}

export type MutationUpdateEventArgs = {
  description?: InputMaybe<Scalars['RichText']>
  endsAt?: InputMaybe<Scalars['DateTime']>
  externalSourceId?: InputMaybe<Scalars['String']>
  externalSourceName?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  imageId?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  location?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  startsAt?: InputMaybe<Scalars['DateTime']>
  status?: InputMaybe<EventStatus>
  tagIds?: InputMaybe<Array<Scalars['ID']>>
}

export type MutationUpdateImageArgs = {
  id: Scalars['ID']
  input: UpdateImageInput
}

export type MutationUpdateInvoiceArgs = {
  id: Scalars['ID']
  input: InvoiceInput
}

export type MutationUpdateMemberPlanArgs = {
  id: Scalars['ID']
  input: MemberPlanInput
}

export type MutationUpdateNavigationArgs = {
  id: Scalars['ID']
  input: NavigationInput
}

export type MutationUpdatePageArgs = {
  id: Scalars['ID']
  input: PageInput
}

export type MutationUpdatePaymentMethodArgs = {
  id: Scalars['ID']
  input: PaymentMethodInput
}

export type MutationUpdatePeerArgs = {
  id: Scalars['ID']
  input: UpdatePeerInput
}

export type MutationUpdatePeerProfileArgs = {
  input: PeerProfileInput
}

export type MutationUpdatePollArgs = {
  answers?: InputMaybe<Array<UpdatePollAnswer>>
  closedAt?: InputMaybe<Scalars['DateTime']>
  externalVoteSources?: InputMaybe<Array<UpdatePollExternalVoteSources>>
  infoText?: InputMaybe<Scalars['RichText']>
  opensAt?: InputMaybe<Scalars['DateTime']>
  pollId: Scalars['ID']
  question?: InputMaybe<Scalars['String']>
}

export type MutationUpdateRatingSystemArgs = {
  answers?: InputMaybe<Array<UpdateCommentRatingSystemAnswer>>
  name?: InputMaybe<Scalars['String']>
  ratingSystemId: Scalars['ID']
}

export type MutationUpdateSettingListArgs = {
  value?: InputMaybe<Array<InputMaybe<UpdateSettingArgs>>>
}

export type MutationUpdateSubscriptionArgs = {
  id: Scalars['ID']
  input: SubscriptionInput
}

export type MutationUpdateTagArgs = {
  id: Scalars['ID']
  main?: InputMaybe<Scalars['Boolean']>
  tag?: InputMaybe<Scalars['String']>
}

export type MutationUpdateUserArgs = {
  id: Scalars['ID']
  input: UserInput
}

export type MutationUpdateUserRoleArgs = {
  id: Scalars['ID']
  input: UserRoleInput
}

export type MutationUploadImageArgs = {
  input: UploadImageInput
}

export type Navigation = {
  __typename?: 'Navigation'
  id: Scalars['ID']
  key: Scalars['String']
  links: Array<NavigationLink>
  name: Scalars['String']
}

export type NavigationInput = {
  key: Scalars['String']
  links: Array<NavigationLinkInput>
  name: Scalars['String']
}

export type NavigationLink = ArticleNavigationLink | ExternalNavigationLink | PageNavigationLink

export type NavigationLinkInput = {
  article?: InputMaybe<ArticleNavigationLinkInput>
  external?: InputMaybe<ExternalNavigationLinkInput>
  page?: InputMaybe<PageNavigationLinkInput>
}

export type OAuth2Account = {
  __typename?: 'OAuth2Account'
  provider: Scalars['String']
  scope: Scalars['String']
  type: Scalars['String']
}

export type Page = {
  __typename?: 'Page'
  createdAt: Scalars['DateTime']
  draft?: Maybe<PageRevision>
  id: Scalars['ID']
  latest: PageRevision
  modifiedAt: Scalars['DateTime']
  pending?: Maybe<PageRevision>
  published?: Maybe<PageRevision>
  shared: Scalars['Boolean']
  tags: Array<Tag>
}

export type PageConnection = {
  __typename?: 'PageConnection'
  nodes: Array<Page>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PageCreatedAction = {
  __typename?: 'PageCreatedAction'
  date: Scalars['DateTime']
  page: Page
}

export type PageFilter = {
  description?: InputMaybe<Scalars['String']>
  draft?: InputMaybe<Scalars['Boolean']>
  pending?: InputMaybe<Scalars['Boolean']>
  publicationDateFrom?: InputMaybe<DateFilter>
  publicationDateTo?: InputMaybe<DateFilter>
  published?: InputMaybe<Scalars['Boolean']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type PageInfo = {
  __typename?: 'PageInfo'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['String']>
}

export type PageInput = {
  blocks: Array<BlockInput>
  description?: InputMaybe<Scalars['String']>
  imageID?: InputMaybe<Scalars['ID']>
  properties: Array<PropertiesInput>
  slug: Scalars['Slug']
  socialMediaDescription?: InputMaybe<Scalars['String']>
  socialMediaImageID?: InputMaybe<Scalars['ID']>
  socialMediaTitle?: InputMaybe<Scalars['String']>
  tags: Array<Scalars['String']>
  title: Scalars['String']
}

export type PageNavigationLink = BaseNavigationLink & {
  __typename?: 'PageNavigationLink'
  label: Scalars['String']
  page?: Maybe<Page>
}

export type PageNavigationLinkInput = {
  label: Scalars['String']
  pageID: Scalars['ID']
}

export type PageRevision = {
  __typename?: 'PageRevision'
  blocks: Array<Block>
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  properties: Array<Properties>
  publishAt?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  revision: Scalars['Int']
  slug?: Maybe<Scalars['Slug']>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImage?: Maybe<Image>
  socialMediaTitle?: Maybe<Scalars['String']>
  /** @deprecated Tags now live on the Page itself */
  tags: Array<Scalars['String']>
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export enum PageSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt',
  PublishAt = 'publishAt',
  PublishedAt = 'publishedAt',
  UpdatedAt = 'updatedAt'
}

export type PageTeaser = {
  __typename?: 'PageTeaser'
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  page?: Maybe<Page>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type PageTeaserInput = {
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  pageID: Scalars['ID']
  preTitle?: InputMaybe<Scalars['String']>
  style?: InputMaybe<TeaserStyle>
  title?: InputMaybe<Scalars['String']>
}

export type Payment = {
  __typename?: 'Payment'
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  intentData?: Maybe<Scalars['String']>
  intentID?: Maybe<Scalars['String']>
  intentSecret?: Maybe<Scalars['String']>
  invoice: Invoice
  modifiedAt: Scalars['DateTime']
  paymentData?: Maybe<Scalars['String']>
  paymentMethod: PaymentMethod
  state: PaymentState
}

export type PaymentConnection = {
  __typename?: 'PaymentConnection'
  nodes: Array<Payment>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PaymentFilter = {
  intentID?: InputMaybe<Scalars['String']>
}

export type PaymentFromInvoiceInput = {
  failureURL?: InputMaybe<Scalars['String']>
  invoiceID: Scalars['ID']
  paymentMethodID?: InputMaybe<Scalars['ID']>
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>
  successURL?: InputMaybe<Scalars['String']>
}

export type PaymentMethod = {
  __typename?: 'PaymentMethod'
  active: Scalars['Boolean']
  createdAt: Scalars['DateTime']
  description: Scalars['String']
  id: Scalars['ID']
  image?: Maybe<Image>
  imageId?: Maybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  paymentProvider?: Maybe<PaymentProvider>
  slug: Scalars['Slug']
}

export type PaymentMethodInput = {
  active: Scalars['Boolean']
  description: Scalars['String']
  imageId?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  paymentProviderID: Scalars['String']
  slug: Scalars['Slug']
}

export enum PaymentPeriodicity {
  Biannual = 'biannual',
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Yearly = 'yearly'
}

export type PaymentProvider = {
  __typename?: 'PaymentProvider'
  id: Scalars['ID']
  name: Scalars['String']
}

export type PaymentProviderCustomer = {
  __typename?: 'PaymentProviderCustomer'
  customerID: Scalars['String']
  paymentProviderID: Scalars['String']
}

export enum PaymentSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum PaymentState {
  Canceled = 'canceled',
  Created = 'created',
  Declined = 'declined',
  Paid = 'paid',
  Processing = 'processing',
  RequiresUserAction = 'requiresUserAction',
  Submitted = 'submitted'
}

export type Peer = {
  __typename?: 'Peer'
  createdAt: Scalars['DateTime']
  hostURL: Scalars['String']
  id: Scalars['ID']
  isDisabled?: Maybe<Scalars['Boolean']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  profile?: Maybe<PeerProfile>
  slug: Scalars['String']
}

export type PeerArticle = {
  __typename?: 'PeerArticle'
  article: Article
  peer: Peer
  peeredArticleURL: Scalars['String']
}

export type PeerArticleConnection = {
  __typename?: 'PeerArticleConnection'
  nodes: Array<PeerArticle>
  pageInfo: UnidirectionalPageInfo
  totalCount: Scalars['Int']
}

export type PeerArticleTeaser = {
  __typename?: 'PeerArticleTeaser'
  article?: Maybe<Article>
  articleID: Scalars['ID']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  peer?: Maybe<Peer>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type PeerArticleTeaserInput = {
  articleID: Scalars['ID']
  imageID?: InputMaybe<Scalars['ID']>
  lead?: InputMaybe<Scalars['String']>
  peerID: Scalars['ID']
  preTitle?: InputMaybe<Scalars['String']>
  style?: InputMaybe<TeaserStyle>
  title?: InputMaybe<Scalars['String']>
}

export type PeerProfile = {
  __typename?: 'PeerProfile'
  callToActionImage?: Maybe<Image>
  callToActionImageURL?: Maybe<Scalars['String']>
  callToActionText: Scalars['RichText']
  callToActionURL: Scalars['String']
  hostURL: Scalars['String']
  logo?: Maybe<Image>
  name: Scalars['String']
  themeColor: Scalars['Color']
  themeFontColor: Scalars['Color']
  websiteURL: Scalars['String']
}

export type PeerProfileInput = {
  callToActionImageID?: InputMaybe<Scalars['ID']>
  callToActionImageURL?: InputMaybe<Scalars['String']>
  callToActionText: Scalars['RichText']
  callToActionURL: Scalars['String']
  logoID?: InputMaybe<Scalars['ID']>
  name: Scalars['String']
  themeColor: Scalars['Color']
  themeFontColor: Scalars['Color']
}

export type Permission = {
  __typename?: 'Permission'
  deprecated: Scalars['Boolean']
  description: Scalars['String']
  id: Scalars['String']
}

export type PolisConversationBlock = {
  __typename?: 'PolisConversationBlock'
  blockStyle?: Maybe<Scalars['String']>
  conversationID: Scalars['String']
}

export type PolisConversationBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  conversationID: Scalars['String']
}

export type Poll = {
  __typename?: 'Poll'
  closedAt?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  opensAt: Scalars['DateTime']
  question?: Maybe<Scalars['String']>
}

export type PollAnswer = {
  __typename?: 'PollAnswer'
  answer?: Maybe<Scalars['String']>
  id: Scalars['ID']
  pollId: Scalars['ID']
}

export type PollAnswerWithVoteCount = {
  __typename?: 'PollAnswerWithVoteCount'
  answer?: Maybe<Scalars['String']>
  id: Scalars['ID']
  pollId: Scalars['ID']
  votes: Scalars['Int']
}

export type PollBlock = {
  __typename?: 'PollBlock'
  blockStyle?: Maybe<Scalars['String']>
  poll?: Maybe<FullPoll>
}

export type PollBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  pollId?: InputMaybe<Scalars['ID']>
}

export type PollConnection = {
  __typename?: 'PollConnection'
  nodes: Array<Poll>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PollExternalVote = {
  __typename?: 'PollExternalVote'
  amount: Scalars['VoteValue']
  answerId: Scalars['ID']
  id: Scalars['ID']
}

export type PollExternalVoteSource = {
  __typename?: 'PollExternalVoteSource'
  id: Scalars['ID']
  source?: Maybe<Scalars['String']>
  voteAmounts: Array<PollExternalVote>
}

export type PollFilter = {
  openOnly?: InputMaybe<Scalars['Boolean']>
}

export enum PollSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  OpensAt = 'OpensAt'
}

export type PollStartedAction = {
  __typename?: 'PollStartedAction'
  date: Scalars['DateTime']
  poll: Poll
}

export type PollWithAnswers = {
  __typename?: 'PollWithAnswers'
  answers?: Maybe<Array<PollAnswer>>
  closedAt?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  opensAt: Scalars['DateTime']
  question?: Maybe<Scalars['String']>
}

export type Properties = {
  __typename?: 'Properties'
  key: Scalars['String']
  public: Scalars['Boolean']
  value: Scalars['String']
}

export type PropertiesInput = {
  key: Scalars['String']
  public: Scalars['Boolean']
  value: Scalars['String']
}

export type Query = {
  __typename?: 'Query'
  actions: Array<Action>
  article?: Maybe<Article>
  articlePreviewLink?: Maybe<Scalars['String']>
  articles: ArticleConnection
  authProviders: Array<AuthProvider>
  author?: Maybe<Author>
  authors: AuthorConnection
  comment?: Maybe<Comment>
  comments: CommentConnection
  createJWTForUser?: Maybe<JwtToken>
  event?: Maybe<Event>
  events?: Maybe<EventConnection>
  image?: Maybe<Image>
  images: ImageConnection
  /** This query returns a list of original ids of imported events */
  importedEventsIds?: Maybe<Array<Maybe<Scalars['String']>>>
  invoice?: Maybe<Invoice>
  invoices: InvoiceConnection
  me?: Maybe<User>
  memberPlan?: Maybe<MemberPlan>
  memberPlans: MemberPlanConnection
  navigation?: Maybe<Navigation>
  navigations: Array<Navigation>
  newSubscribersPerMonth?: Maybe<Array<Maybe<SubscribersPerMonth>>>
  page?: Maybe<Page>
  pagePreviewLink?: Maybe<Scalars['String']>
  pages: PageConnection
  payment?: Maybe<Payment>
  paymentMethod?: Maybe<PaymentMethod>
  paymentMethods: Array<PaymentMethod>
  paymentProviders: Array<PaymentProvider>
  payments: PaymentConnection
  peer?: Maybe<Peer>
  peerArticle?: Maybe<Article>
  peerArticles: PeerArticleConnection
  peerProfile: PeerProfile
  peers?: Maybe<Array<Peer>>
  permissions?: Maybe<Array<Permission>>
  poll?: Maybe<FullPoll>
  polls?: Maybe<PollConnection>
  ratingSystem: FullCommentRatingSystem
  remotePeerProfile?: Maybe<PeerProfile>
  sessions: Array<Session>
  setting?: Maybe<Setting>
  settings: Array<Setting>
  subscription?: Maybe<Subscription>
  subscriptions: SubscriptionConnection
  subscriptionsAsCsv?: Maybe<Scalars['String']>
  tags?: Maybe<TagConnection>
  tokens: Array<Token>
  user?: Maybe<User>
  userRole?: Maybe<UserRole>
  userRoles: UserRoleConnection
  users: UserConnection
}

export type QueryArticleArgs = {
  id: Scalars['ID']
}

export type QueryArticlePreviewLinkArgs = {
  hours: Scalars['Int']
  id: Scalars['ID']
}

export type QueryArticlesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<ArticleFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<ArticleSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryAuthProvidersArgs = {
  redirectUri?: InputMaybe<Scalars['String']>
}

export type QueryAuthorArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
}

export type QueryAuthorsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<AuthorFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<AuthorSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryCommentArgs = {
  id: Scalars['ID']
}

export type QueryCommentsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<CommentFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<CommentSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryCreateJwtForUserArgs = {
  expiresInMinutes: Scalars['Int']
  userId: Scalars['String']
}

export type QueryEventArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryEventsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<EventFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<EventSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryImageArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryImagesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<ImageFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<ImageSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryInvoiceArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryInvoicesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<InvoiceFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<InvoiceSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryMemberPlanArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
}

export type QueryMemberPlansArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<MemberPlanFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<MemberPlanSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryNavigationArgs = {
  id?: InputMaybe<Scalars['ID']>
  key?: InputMaybe<Scalars['ID']>
}

export type QueryNewSubscribersPerMonthArgs = {
  monthsBack?: InputMaybe<Scalars['Int']>
}

export type QueryPageArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryPagePreviewLinkArgs = {
  hours: Scalars['Int']
  id: Scalars['ID']
}

export type QueryPagesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<PageFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<PageSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPaymentArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryPaymentMethodArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryPaymentsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<PaymentFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<PaymentSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPeerArgs = {
  id: Scalars['ID']
}

export type QueryPeerArticleArgs = {
  id: Scalars['ID']
  peerID: Scalars['ID']
}

export type QueryPeerArticlesArgs = {
  cursors?: InputMaybe<Scalars['String']>
  filter?: InputMaybe<ArticleFilter>
  first?: InputMaybe<Scalars['Int']>
  order?: InputMaybe<SortOrder>
  peerFilter?: InputMaybe<Scalars['String']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<ArticleSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPollArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryPollsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<PollFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<PollSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryRemotePeerProfileArgs = {
  hostURL: Scalars['String']
  token: Scalars['String']
}

export type QuerySettingArgs = {
  name: Scalars['String']
}

export type QuerySubscriptionArgs = {
  id: Scalars['ID']
}

export type QuerySubscriptionsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<SubscriptionFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<SubscriptionSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QuerySubscriptionsAsCsvArgs = {
  filter?: InputMaybe<SubscriptionFilter>
}

export type QueryTagsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<TagFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<TagSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryUserArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryUserRoleArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type QueryUserRolesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<UserRoleFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<UserRoleSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryUsersArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<UserFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<UserSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QuoteBlock = {
  __typename?: 'QuoteBlock'
  author?: Maybe<Scalars['String']>
  blockStyle?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  quote?: Maybe<Scalars['String']>
}

export type QuoteBlockInput = {
  author?: InputMaybe<Scalars['String']>
  blockStyle?: InputMaybe<Scalars['String']>
  imageID?: InputMaybe<Scalars['ID']>
  quote?: InputMaybe<Scalars['String']>
}

export enum RatingSystemType {
  Star = 'star'
}

export type RichTextBlock = {
  __typename?: 'RichTextBlock'
  blockStyle?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
}

export type RichTextBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  richText: Scalars['RichText']
}

export type Session = {
  __typename?: 'Session'
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
  id: Scalars['ID']
  user: User
}

export type SessionWithToken = {
  __typename?: 'SessionWithToken'
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
  id: Scalars['ID']
  token: Scalars['String']
  user: User
}

export type Setting = {
  __typename?: 'Setting'
  id: Scalars['ID']
  name: SettingName
  settingRestriction?: Maybe<SettingRestriction>
  value: Scalars['GraphQLSettingValueType']
}

export enum SettingName {
  AllowCommentEditing = 'allowCommentEditing',
  AllowGuestCommentRating = 'allowGuestCommentRating',
  AllowGuestCommenting = 'allowGuestCommenting',
  AllowGuestPollVoting = 'allowGuestPollVoting',
  BodyScript = 'bodyScript',
  CommentCharLimit = 'commentCharLimit',
  HeadScript = 'headScript',
  MakeActiveSubscribersApiPublic = 'makeActiveSubscribersApiPublic',
  MakeExpectedRevenueApiPublic = 'makeExpectedRevenueApiPublic',
  MakeNewDeactivationsApiPublic = 'makeNewDeactivationsApiPublic',
  MakeNewSubscribersApiPublic = 'makeNewSubscribersApiPublic',
  MakeRenewingSubscribersApiPublic = 'makeRenewingSubscribersApiPublic',
  MakeRevenueApiPublic = 'makeRevenueApiPublic',
  PeeringTimeoutInMs = 'peeringTimeoutInMs',
  ResetPasswordJwtExpiresMin = 'resetPasswordJwtExpiresMin',
  SendLoginJwtExpiresMin = 'sendLoginJwtExpiresMin'
}

export type SettingRestriction = {
  __typename?: 'SettingRestriction'
  allowedValues?: Maybe<AllowedSettingVals>
  inputLength?: Maybe<Scalars['Int']>
  maxValue?: Maybe<Scalars['Int']>
  minValue?: Maybe<Scalars['Int']>
}

export enum SortOrder {
  Ascending = 'Ascending',
  Descending = 'Descending'
}

export type SoundCloudTrackBlock = {
  __typename?: 'SoundCloudTrackBlock'
  blockStyle?: Maybe<Scalars['String']>
  trackID: Scalars['String']
}

export type SoundCloudTrackBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  trackID: Scalars['String']
}

export type SubscribersPerMonth = {
  __typename?: 'SubscribersPerMonth'
  month: Scalars['String']
  subscriberCount: Scalars['Int']
}

export type Subscription = {
  __typename?: 'Subscription'
  autoRenew: Scalars['Boolean']
  createdAt: Scalars['DateTime']
  deactivation?: Maybe<SubscriptionDeactivation>
  extendable: Scalars['Boolean']
  id: Scalars['ID']
  memberPlan: MemberPlan
  modifiedAt: Scalars['DateTime']
  monthlyAmount: Scalars['Int']
  paidUntil?: Maybe<Scalars['DateTime']>
  paymentMethod: PaymentMethod
  paymentPeriodicity: PaymentPeriodicity
  properties: Array<Properties>
  startsAt: Scalars['DateTime']
  user?: Maybe<User>
}

export type SubscriptionConnection = {
  __typename?: 'SubscriptionConnection'
  nodes: Array<Subscription>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type SubscriptionCreatedAction = {
  __typename?: 'SubscriptionCreatedAction'
  date: Scalars['DateTime']
  subscription: Subscription
}

export type SubscriptionDeactivation = {
  __typename?: 'SubscriptionDeactivation'
  date: Scalars['DateTime']
  reason: SubscriptionDeactivationReason
}

export type SubscriptionDeactivationInput = {
  date: Scalars['DateTime']
  reason: SubscriptionDeactivationReason
}

export enum SubscriptionDeactivationReason {
  InvoiceNotPaid = 'invoiceNotPaid',
  None = 'none',
  UserSelfDeactivated = 'userSelfDeactivated'
}

export type SubscriptionFilter = {
  autoRenew?: InputMaybe<Scalars['Boolean']>
  cancellationDateFrom?: InputMaybe<DateFilter>
  cancellationDateTo?: InputMaybe<DateFilter>
  deactivationDateFrom?: InputMaybe<DateFilter>
  deactivationDateTo?: InputMaybe<DateFilter>
  deactivationReason?: InputMaybe<SubscriptionDeactivationReason>
  extendable?: InputMaybe<Scalars['Boolean']>
  memberPlanID?: InputMaybe<Scalars['String']>
  paidUntil?: InputMaybe<DateFilter>
  paidUntilFrom?: InputMaybe<DateFilter>
  paidUntilTo?: InputMaybe<DateFilter>
  paymentMethodID?: InputMaybe<Scalars['String']>
  paymentPeriodicity?: InputMaybe<PaymentPeriodicity>
  startsAt?: InputMaybe<DateFilter>
  startsAtFrom?: InputMaybe<DateFilter>
  startsAtTo?: InputMaybe<DateFilter>
  userHasAddress?: InputMaybe<Scalars['Boolean']>
  userID?: InputMaybe<Scalars['ID']>
}

export type SubscriptionInput = {
  autoRenew: Scalars['Boolean']
  deactivation?: InputMaybe<SubscriptionDeactivationInput>
  extendable: Scalars['Boolean']
  memberPlanID: Scalars['String']
  monthlyAmount: Scalars['Int']
  paidUntil?: InputMaybe<Scalars['DateTime']>
  paymentMethodID: Scalars['String']
  paymentPeriodicity: PaymentPeriodicity
  properties: Array<PropertiesInput>
  startsAt: Scalars['DateTime']
  userID: Scalars['ID']
}

export type SubscriptionPeriod = {
  __typename?: 'SubscriptionPeriod'
  amount: Scalars['Int']
  createdAt: Scalars['DateTime']
  endsAt: Scalars['DateTime']
  id: Scalars['ID']
  invoiceID: Scalars['ID']
  paymentPeriodicity: PaymentPeriodicity
  startsAt: Scalars['DateTime']
}

export enum SubscriptionSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Tag = {
  __typename?: 'Tag'
  id: Scalars['ID']
  main: Scalars['Boolean']
  tag?: Maybe<Scalars['String']>
  type?: Maybe<TagType>
  url: Scalars['String']
}

export type TagConnection = {
  __typename?: 'TagConnection'
  nodes: Array<Tag>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TagFilter = {
  tag?: InputMaybe<Scalars['String']>
  type?: InputMaybe<TagType>
}

export enum TagSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Tag = 'Tag'
}

export enum TagType {
  Article = 'Article',
  Author = 'Author',
  Comment = 'Comment',
  Event = 'Event',
  Page = 'Page'
}

export type Teaser = ArticleTeaser | CustomTeaser | EventTeaser | PageTeaser | PeerArticleTeaser

export type TeaserGridBlock = {
  __typename?: 'TeaserGridBlock'
  blockStyle?: Maybe<Scalars['String']>
  numColumns: Scalars['Int']
  teasers: Array<Maybe<Teaser>>
}

export type TeaserGridBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  numColumns: Scalars['Int']
  teasers: Array<InputMaybe<TeaserInput>>
}

export type TeaserGridFlexBlock = {
  __typename?: 'TeaserGridFlexBlock'
  blockStyle?: Maybe<Scalars['String']>
  flexTeasers: Array<Maybe<FlexTeaser>>
}

export type TeaserGridFlexBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  flexTeasers: Array<FlexTeaserInput>
}

export type TeaserInput = {
  article?: InputMaybe<ArticleTeaserInput>
  custom?: InputMaybe<CustomTeaserInput>
  event?: InputMaybe<EventTeaserInput>
  page?: InputMaybe<PageTeaserInput>
  peerArticle?: InputMaybe<PeerArticleTeaserInput>
}

export type TeaserListBlock = {
  __typename?: 'TeaserListBlock'
  blockStyle?: Maybe<Scalars['String']>
  filter: TeaserListBlockFilter
  skip?: Maybe<Scalars['Int']>
  take?: Maybe<Scalars['Int']>
  teaserType?: Maybe<TeaserType>
  teasers: Array<Maybe<Teaser>>
  title?: Maybe<Scalars['String']>
}

export type TeaserListBlockFilter = {
  __typename?: 'TeaserListBlockFilter'
  tagObjects: Array<Tag>
  tags?: Maybe<Array<Scalars['ID']>>
}

export type TeaserListBlockFilterInput = {
  tags?: InputMaybe<Array<Scalars['ID']>>
}

export type TeaserListBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  filter: TeaserListBlockFilterInput
  skip?: InputMaybe<Scalars['Int']>
  take?: InputMaybe<Scalars['Int']>
  teaserType?: InputMaybe<TeaserType>
  title?: InputMaybe<Scalars['String']>
}

export enum TeaserStyle {
  Default = 'default',
  Light = 'light',
  Text = 'text'
}

export enum TeaserType {
  Article = 'article',
  Custom = 'custom',
  Event = 'event',
  Page = 'page',
  PeerArticle = 'peerArticle'
}

export type TikTokVideoBlock = {
  __typename?: 'TikTokVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type TikTokVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type TitleBlock = {
  __typename?: 'TitleBlock'
  blockStyle?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type TitleBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  lead?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type Token = {
  __typename?: 'Token'
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
}

export type TokenInput = {
  name: Scalars['String']
}

export type TwitterTweetBlock = {
  __typename?: 'TwitterTweetBlock'
  blockStyle?: Maybe<Scalars['String']>
  tweetID: Scalars['String']
  userID: Scalars['String']
}

export type TwitterTweetBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  tweetID: Scalars['String']
  userID: Scalars['String']
}

export type UnidirectionalPageInfo = {
  __typename?: 'UnidirectionalPageInfo'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
}

export type UpdateCommentRatingSystemAnswer = {
  answer?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  type?: InputMaybe<RatingSystemType>
}

export type UpdateImageInput = {
  description?: InputMaybe<Scalars['String']>
  filename?: InputMaybe<Scalars['String']>
  focalPoint?: InputMaybe<InputPoint>
  license?: InputMaybe<Scalars['String']>
  link?: InputMaybe<Scalars['String']>
  source?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type UpdatePeerInput = {
  hostURL?: InputMaybe<Scalars['String']>
  isDisabled?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
  token?: InputMaybe<Scalars['String']>
}

export type UpdatePollAnswer = {
  answer?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
}

export type UpdatePollExternalVote = {
  amount?: InputMaybe<Scalars['VoteValue']>
  id: Scalars['ID']
}

export type UpdatePollExternalVoteSources = {
  id: Scalars['ID']
  source?: InputMaybe<Scalars['String']>
  voteAmounts?: InputMaybe<Array<UpdatePollExternalVote>>
}

export type UpdateSettingArgs = {
  name: SettingName
  value: Scalars['GraphQLSettingValueType']
}

export type UploadImageInput = {
  description?: InputMaybe<Scalars['String']>
  file: Scalars['Upload']
  filename?: InputMaybe<Scalars['String']>
  focalPoint?: InputMaybe<InputPoint>
  license?: InputMaybe<Scalars['String']>
  link?: InputMaybe<Scalars['String']>
  source?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type User = {
  __typename?: 'User'
  active: Scalars['Boolean']
  address?: Maybe<UserAddress>
  birthday?: Maybe<Scalars['DateTime']>
  createdAt: Scalars['DateTime']
  email: Scalars['String']
  emailVerifiedAt?: Maybe<Scalars['DateTime']>
  firstName?: Maybe<Scalars['String']>
  flair?: Maybe<Scalars['String']>
  id: Scalars['String']
  lastLogin?: Maybe<Scalars['DateTime']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  oauth2Accounts: Array<OAuth2Account>
  paymentProviderCustomers: Array<PaymentProviderCustomer>
  preferredName?: Maybe<Scalars['String']>
  properties: Array<Properties>
  roles: Array<UserRole>
  subscriptions: Array<UserSubscription>
  userImage?: Maybe<Image>
}

export type UserAddress = {
  __typename?: 'UserAddress'
  city?: Maybe<Scalars['String']>
  company?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
  streetAddress2?: Maybe<Scalars['String']>
  zipCode?: Maybe<Scalars['String']>
}

export type UserAddressInput = {
  city?: InputMaybe<Scalars['String']>
  company?: InputMaybe<Scalars['String']>
  country?: InputMaybe<Scalars['String']>
  streetAddress?: InputMaybe<Scalars['String']>
  streetAddress2?: InputMaybe<Scalars['String']>
  zipCode?: InputMaybe<Scalars['String']>
}

export type UserConnection = {
  __typename?: 'UserConnection'
  nodes: Array<User>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UserCreatedAction = {
  __typename?: 'UserCreatedAction'
  date: Scalars['DateTime']
  user: User
}

export type UserFilter = {
  name?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  userRole?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
}

export type UserInput = {
  active: Scalars['Boolean']
  address?: InputMaybe<UserAddressInput>
  birthday?: InputMaybe<Scalars['DateTime']>
  email: Scalars['String']
  emailVerifiedAt?: InputMaybe<Scalars['DateTime']>
  firstName?: InputMaybe<Scalars['String']>
  flair?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  preferredName?: InputMaybe<Scalars['String']>
  properties: Array<PropertiesInput>
  roleIDs?: InputMaybe<Array<Scalars['String']>>
  userImageID?: InputMaybe<Scalars['ID']>
}

export type UserRole = {
  __typename?: 'UserRole'
  description?: Maybe<Scalars['String']>
  id: Scalars['String']
  name: Scalars['String']
  permissions: Array<Permission>
  systemRole: Scalars['Boolean']
}

export type UserRoleConnection = {
  __typename?: 'UserRoleConnection'
  nodes: Array<UserRole>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UserRoleFilter = {
  name?: InputMaybe<Scalars['String']>
}

export type UserRoleInput = {
  description: Scalars['String']
  name: Scalars['String']
  permissionIDs?: InputMaybe<Array<Scalars['String']>>
}

export enum UserRoleSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export enum UserSort {
  CreatedAt = 'createdAt',
  FirstName = 'firstName',
  ModifiedAt = 'modifiedAt',
  Name = 'name'
}

export type UserSubscription = {
  __typename?: 'UserSubscription'
  autoRenew: Scalars['Boolean']
  createdAt: Scalars['DateTime']
  deactivation?: Maybe<SubscriptionDeactivation>
  id: Scalars['ID']
  invoices: Array<Invoice>
  memberPlan: MemberPlan
  modifiedAt: Scalars['DateTime']
  monthlyAmount: Scalars['Int']
  paidUntil?: Maybe<Scalars['DateTime']>
  paymentPeriodicity: PaymentPeriodicity
  periods: Array<SubscriptionPeriod>
  properties: Array<Properties>
  startsAt: Scalars['DateTime']
}

export type VimeoVideoBlock = {
  __typename?: 'VimeoVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  videoID: Scalars['String']
}

export type VimeoVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  videoID: Scalars['String']
}

export type YouTubeVideoBlock = {
  __typename?: 'YouTubeVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  videoID: Scalars['String']
}

export type YouTubeVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>
  videoID: Scalars['String']
}

export type OverriddenRating = {
  __typename?: 'overriddenRating'
  answerId: Scalars['ID']
  value?: Maybe<Scalars['Int']>
}

export type MutationArticleFragment = {
  __typename?: 'Article'
  id: string
  shared: boolean
  tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
  draft?: {
    __typename?: 'ArticleRevision'
    publishedAt?: string | null
    updatedAt?: string | null
    revision: number
  } | null
  pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
  published?: {
    __typename?: 'ArticleRevision'
    publishedAt?: string | null
    updatedAt?: string | null
    revision: number
  } | null
  latest: {
    __typename?: 'ArticleRevision'
    publishedAt?: string | null
    updatedAt?: string | null
    revision: number
    title?: string | null
    preTitle?: string | null
    lead?: string | null
    slug?: string | null
    breaking: boolean
    properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
  }
}

export type ArticleRefFragment = {
  __typename?: 'Article'
  id: string
  createdAt: string
  modifiedAt: string
  tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
  draft?: {__typename?: 'ArticleRevision'; revision: number} | null
  pending?: {__typename?: 'ArticleRevision'; revision: number} | null
  published?: {
    __typename?: 'ArticleRevision'
    publishedAt?: string | null
    updatedAt?: string | null
    revision: number
  } | null
  latest: {
    __typename?: 'ArticleRevision'
    publishedAt?: string | null
    updatedAt?: string | null
    revision: number
    preTitle?: string | null
    title?: string | null
    lead?: string | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  }
}

export type ArticleListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
}>

export type ArticleListQuery = {
  __typename?: 'Query'
  articles: {
    __typename?: 'ArticleConnection'
    totalCount: number
    nodes: Array<{
      __typename?: 'Article'
      id: string
      createdAt: string
      modifiedAt: string
      tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
      draft?: {__typename?: 'ArticleRevision'; revision: number} | null
      pending?: {__typename?: 'ArticleRevision'; revision: number} | null
      published?: {
        __typename?: 'ArticleRevision'
        publishedAt?: string | null
        updatedAt?: string | null
        revision: number
      } | null
      latest: {
        __typename?: 'ArticleRevision'
        publishedAt?: string | null
        updatedAt?: string | null
        revision: number
        preTitle?: string | null
        title?: string | null
        lead?: string | null
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
      }
    }>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  }
}

export type CreateArticleMutationVariables = Exact<{
  input: ArticleInput
}>

export type CreateArticleMutation = {
  __typename?: 'Mutation'
  createArticle: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      title?: string | null
      preTitle?: string | null
      lead?: string | null
      slug?: string | null
      breaking: boolean
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
    }
  }
}

export type UpdateArticleMutationVariables = Exact<{
  id: Scalars['ID']
  input: ArticleInput
}>

export type UpdateArticleMutation = {
  __typename?: 'Mutation'
  updateArticle?: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      title?: string | null
      preTitle?: string | null
      lead?: string | null
      slug?: string | null
      breaking: boolean
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
    }
  } | null
}

export type PublishArticleMutationVariables = Exact<{
  id: Scalars['ID']
  publishAt: Scalars['DateTime']
  publishedAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
}>

export type PublishArticleMutation = {
  __typename?: 'Mutation'
  publishArticle?: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      title?: string | null
      preTitle?: string | null
      lead?: string | null
      slug?: string | null
      breaking: boolean
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
    }
  } | null
}

export type UnpublishArticleMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type UnpublishArticleMutation = {
  __typename?: 'Mutation'
  unpublishArticle?: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      title?: string | null
      preTitle?: string | null
      lead?: string | null
      slug?: string | null
      breaking: boolean
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
    }
  } | null
}

export type DeleteArticleMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteArticleMutation = {
  __typename?: 'Mutation'
  deleteArticle?: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      title?: string | null
      preTitle?: string | null
      lead?: string | null
      slug?: string | null
      breaking: boolean
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
    }
  } | null
}

export type ArticleQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ArticleQuery = {
  __typename?: 'Query'
  article?: {
    __typename?: 'Article'
    id: string
    shared: boolean
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null; type?: TagType | null}>
    pending?: {__typename?: 'ArticleRevision'; publishAt?: string | null} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      slug?: string | null
      preTitle?: string | null
      title?: string | null
      lead?: string | null
      hideAuthor: boolean
      breaking: boolean
      socialMediaTitle?: string | null
      socialMediaDescription?: string | null
      image?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
      properties: Array<{__typename?: 'Properties'; key: string; value: string; public: boolean}>
      authors: Array<{
        __typename?: 'Author'
        id: string
        name: string
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
      }>
      socialMediaAuthors: Array<{
        __typename?: 'Author'
        id: string
        name: string
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
      }>
      socialMediaImage?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
      blocks: Array<
        | {__typename: 'BildwurfAdBlock'}
        | {__typename: 'CommentBlock'}
        | {
            __typename: 'EmbedBlock'
            url?: string | null
            title?: string | null
            width?: number | null
            height?: number | null
            styleCustom?: string | null
            sandbox?: string | null
          }
        | {__typename: 'EventBlock'}
        | {__typename: 'FacebookPostBlock'; userID: string; postID: string}
        | {__typename: 'FacebookVideoBlock'; userID: string; videoID: string}
        | {__typename: 'HTMLBlock'}
        | {
            __typename: 'ImageBlock'
            caption?: string | null
            image?: {
              __typename?: 'Image'
              id: string
              link?: string | null
              filename?: string | null
              extension: string
              title?: string | null
              description?: string | null
              width: number
              height: number
              url?: string | null
              largeURL?: string | null
              mediumURL?: string | null
              thumbURL?: string | null
              squareURL?: string | null
              previewURL?: string | null
              column1URL?: string | null
              column6URL?: string | null
            } | null
          }
        | {
            __typename: 'ImageGalleryBlock'
            images: Array<{
              __typename?: 'GalleryImageEdge'
              caption?: string | null
              image?: {
                __typename?: 'Image'
                id: string
                link?: string | null
                filename?: string | null
                extension: string
                title?: string | null
                description?: string | null
                width: number
                height: number
                url?: string | null
                largeURL?: string | null
                mediumURL?: string | null
                thumbURL?: string | null
                squareURL?: string | null
                previewURL?: string | null
                column1URL?: string | null
                column6URL?: string | null
              } | null
            }>
          }
        | {__typename: 'InstagramPostBlock'; postID: string}
        | {
            __typename: 'LinkPageBreakBlock'
            text?: string | null
            linkText?: string | null
            linkURL?: string | null
          }
        | {
            __typename: 'ListicleBlock'
            items: Array<{
              __typename?: 'ListicleItem'
              title: string
              richText: Node[]
              image?: {
                __typename?: 'Image'
                id: string
                link?: string | null
                filename?: string | null
                extension: string
                title?: string | null
                description?: string | null
                width: number
                height: number
                url?: string | null
                largeURL?: string | null
                mediumURL?: string | null
                thumbURL?: string | null
                squareURL?: string | null
                previewURL?: string | null
                column1URL?: string | null
                column6URL?: string | null
              } | null
            }>
          }
        | {__typename: 'PolisConversationBlock'}
        | {__typename: 'PollBlock'}
        | {
            __typename: 'QuoteBlock'
            quote?: string | null
            author?: string | null
            image?: {
              __typename?: 'Image'
              id: string
              link?: string | null
              filename?: string | null
              extension: string
              title?: string | null
              description?: string | null
              width: number
              height: number
              url?: string | null
              largeURL?: string | null
              mediumURL?: string | null
              thumbURL?: string | null
              squareURL?: string | null
              previewURL?: string | null
              column1URL?: string | null
              column6URL?: string | null
            } | null
          }
        | {__typename: 'RichTextBlock'; richText: Node[]}
        | {__typename: 'SoundCloudTrackBlock'; trackID: string}
        | {
            __typename: 'TeaserGridBlock'
            numColumns: number
            teasers: Array<
              | {
                  __typename?: 'ArticleTeaser'
                  style: TeaserStyle
                  preTitle?: string | null
                  title?: string | null
                  lead?: string | null
                  image?: {
                    __typename?: 'Image'
                    id: string
                    link?: string | null
                    filename?: string | null
                    extension: string
                    title?: string | null
                    description?: string | null
                    width: number
                    height: number
                    url?: string | null
                    largeURL?: string | null
                    mediumURL?: string | null
                    thumbURL?: string | null
                    squareURL?: string | null
                    previewURL?: string | null
                    column1URL?: string | null
                    column6URL?: string | null
                  } | null
                  article?: {
                    __typename?: 'Article'
                    id: string
                    createdAt: string
                    modifiedAt: string
                    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
                    draft?: {__typename?: 'ArticleRevision'; revision: number} | null
                    pending?: {__typename?: 'ArticleRevision'; revision: number} | null
                    published?: {
                      __typename?: 'ArticleRevision'
                      publishedAt?: string | null
                      updatedAt?: string | null
                      revision: number
                    } | null
                    latest: {
                      __typename?: 'ArticleRevision'
                      publishedAt?: string | null
                      updatedAt?: string | null
                      revision: number
                      preTitle?: string | null
                      title?: string | null
                      lead?: string | null
                      image?: {
                        __typename?: 'Image'
                        id: string
                        link?: string | null
                        filename?: string | null
                        extension: string
                        title?: string | null
                        description?: string | null
                        width: number
                        height: number
                        url?: string | null
                        largeURL?: string | null
                        mediumURL?: string | null
                        thumbURL?: string | null
                        squareURL?: string | null
                        previewURL?: string | null
                        column1URL?: string | null
                        column6URL?: string | null
                      } | null
                    }
                  } | null
                }
              | {__typename?: 'CustomTeaser'}
              | {
                  __typename?: 'EventTeaser'
                  style: TeaserStyle
                  preTitle?: string | null
                  title?: string | null
                  lead?: string | null
                  image?: {
                    __typename?: 'Image'
                    id: string
                    link?: string | null
                    filename?: string | null
                    extension: string
                    title?: string | null
                    description?: string | null
                    width: number
                    height: number
                    url?: string | null
                    largeURL?: string | null
                    mediumURL?: string | null
                    thumbURL?: string | null
                    squareURL?: string | null
                    previewURL?: string | null
                    column1URL?: string | null
                    column6URL?: string | null
                  } | null
                  event?: {__typename?: 'Event'; id: string} | null
                }
              | {
                  __typename?: 'PageTeaser'
                  style: TeaserStyle
                  preTitle?: string | null
                  title?: string | null
                  lead?: string | null
                  image?: {
                    __typename?: 'Image'
                    id: string
                    link?: string | null
                    filename?: string | null
                    extension: string
                    title?: string | null
                    description?: string | null
                    width: number
                    height: number
                    url?: string | null
                    largeURL?: string | null
                    mediumURL?: string | null
                    thumbURL?: string | null
                    squareURL?: string | null
                    previewURL?: string | null
                    column1URL?: string | null
                    column6URL?: string | null
                  } | null
                  page?: {__typename?: 'Page'; id: string} | null
                }
              | {
                  __typename?: 'PeerArticleTeaser'
                  style: TeaserStyle
                  preTitle?: string | null
                  title?: string | null
                  lead?: string | null
                  articleID: string
                  image?: {
                    __typename?: 'Image'
                    id: string
                    link?: string | null
                    filename?: string | null
                    extension: string
                    title?: string | null
                    description?: string | null
                    width: number
                    height: number
                    url?: string | null
                    largeURL?: string | null
                    mediumURL?: string | null
                    thumbURL?: string | null
                    squareURL?: string | null
                    previewURL?: string | null
                    column1URL?: string | null
                    column6URL?: string | null
                  } | null
                  article?: {
                    __typename?: 'Article'
                    id: string
                    createdAt: string
                    modifiedAt: string
                    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
                    draft?: {__typename?: 'ArticleRevision'; revision: number} | null
                    pending?: {__typename?: 'ArticleRevision'; revision: number} | null
                    published?: {
                      __typename?: 'ArticleRevision'
                      publishedAt?: string | null
                      updatedAt?: string | null
                      revision: number
                    } | null
                    latest: {
                      __typename?: 'ArticleRevision'
                      publishedAt?: string | null
                      updatedAt?: string | null
                      revision: number
                      preTitle?: string | null
                      title?: string | null
                      lead?: string | null
                      image?: {
                        __typename?: 'Image'
                        id: string
                        link?: string | null
                        filename?: string | null
                        extension: string
                        title?: string | null
                        description?: string | null
                        width: number
                        height: number
                        url?: string | null
                        largeURL?: string | null
                        mediumURL?: string | null
                        thumbURL?: string | null
                        squareURL?: string | null
                        previewURL?: string | null
                        column1URL?: string | null
                        column6URL?: string | null
                      } | null
                    }
                  } | null
                }
              | null
            >
          }
        | {__typename: 'TeaserGridFlexBlock'}
        | {__typename: 'TeaserListBlock'}
        | {__typename: 'TikTokVideoBlock'}
        | {__typename: 'TitleBlock'; title?: string | null; lead?: string | null}
        | {__typename: 'TwitterTweetBlock'; userID: string; tweetID: string}
        | {__typename: 'VimeoVideoBlock'; videoID: string}
        | {__typename: 'YouTubeVideoBlock'; videoID: string}
      >
    }
  } | null
}

export type AuthorRefFragment = {
  __typename?: 'Author'
  id: string
  name: string
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

export type FullAuthorFragment = {
  __typename?: 'Author'
  slug: string
  bio?: Node[] | null
  id: string
  name: string
  links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

export type AuthorListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
}>

export type AuthorListQuery = {
  __typename?: 'Query'
  authors: {
    __typename?: 'AuthorConnection'
    totalCount: number
    nodes: Array<{
      __typename?: 'Author'
      slug: string
      bio?: Node[] | null
      id: string
      name: string
      links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
      image?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
    }>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  }
}

export type AuthorQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AuthorQuery = {
  __typename?: 'Query'
  author?: {
    __typename?: 'Author'
    slug: string
    bio?: Node[] | null
    id: string
    name: string
    links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  } | null
}

export type CreateAuthorMutationVariables = Exact<{
  input: AuthorInput
}>

export type CreateAuthorMutation = {
  __typename?: 'Mutation'
  createAuthor?: {
    __typename?: 'Author'
    slug: string
    bio?: Node[] | null
    id: string
    name: string
    links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  } | null
}

export type UpdateAuthorMutationVariables = Exact<{
  id: Scalars['ID']
  input: AuthorInput
}>

export type UpdateAuthorMutation = {
  __typename?: 'Mutation'
  updateAuthor?: {
    __typename?: 'Author'
    slug: string
    bio?: Node[] | null
    id: string
    name: string
    links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  } | null
}

export type DeleteAuthorMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteAuthorMutation = {
  __typename?: 'Mutation'
  deleteAuthor?: {
    __typename?: 'Author'
    slug: string
    bio?: Node[] | null
    id: string
    name: string
    links?: Array<{__typename?: 'AuthorLink'; title: string; url: string}> | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  } | null
}

export type AuthorBySlugQueryVariables = Exact<{
  slug: Scalars['Slug']
}>

export type AuthorBySlugQuery = {
  __typename?: 'Query'
  author?: {__typename?: 'Author'; id: string} | null
}

type FullTeaser_ArticleTeaser_Fragment = {
  __typename?: 'ArticleTeaser'
  style: TeaserStyle
  preTitle?: string | null
  title?: string | null
  lead?: string | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
  article?: {
    __typename?: 'Article'
    id: string
    createdAt: string
    modifiedAt: string
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {__typename?: 'ArticleRevision'; revision: number} | null
    pending?: {__typename?: 'ArticleRevision'; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      preTitle?: string | null
      title?: string | null
      lead?: string | null
      image?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
    }
  } | null
}

type FullTeaser_CustomTeaser_Fragment = {__typename?: 'CustomTeaser'}

type FullTeaser_EventTeaser_Fragment = {
  __typename?: 'EventTeaser'
  style: TeaserStyle
  preTitle?: string | null
  title?: string | null
  lead?: string | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
  event?: {__typename?: 'Event'; id: string} | null
}

type FullTeaser_PageTeaser_Fragment = {
  __typename?: 'PageTeaser'
  style: TeaserStyle
  preTitle?: string | null
  title?: string | null
  lead?: string | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
  page?: {__typename?: 'Page'; id: string} | null
}

type FullTeaser_PeerArticleTeaser_Fragment = {
  __typename?: 'PeerArticleTeaser'
  style: TeaserStyle
  preTitle?: string | null
  title?: string | null
  lead?: string | null
  articleID: string
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
  article?: {
    __typename?: 'Article'
    id: string
    createdAt: string
    modifiedAt: string
    tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
    draft?: {__typename?: 'ArticleRevision'; revision: number} | null
    pending?: {__typename?: 'ArticleRevision'; revision: number} | null
    published?: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
    } | null
    latest: {
      __typename?: 'ArticleRevision'
      publishedAt?: string | null
      updatedAt?: string | null
      revision: number
      preTitle?: string | null
      title?: string | null
      lead?: string | null
      image?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
    }
  } | null
}

export type FullTeaserFragment =
  | FullTeaser_ArticleTeaser_Fragment
  | FullTeaser_CustomTeaser_Fragment
  | FullTeaser_EventTeaser_Fragment
  | FullTeaser_PageTeaser_Fragment
  | FullTeaser_PeerArticleTeaser_Fragment

type FullBlock_BildwurfAdBlock_Fragment = {__typename: 'BildwurfAdBlock'}

type FullBlock_CommentBlock_Fragment = {__typename: 'CommentBlock'}

type FullBlock_EmbedBlock_Fragment = {
  __typename: 'EmbedBlock'
  url?: string | null
  title?: string | null
  width?: number | null
  height?: number | null
  styleCustom?: string | null
  sandbox?: string | null
}

type FullBlock_EventBlock_Fragment = {__typename: 'EventBlock'}

type FullBlock_FacebookPostBlock_Fragment = {
  __typename: 'FacebookPostBlock'
  userID: string
  postID: string
}

type FullBlock_FacebookVideoBlock_Fragment = {
  __typename: 'FacebookVideoBlock'
  userID: string
  videoID: string
}

type FullBlock_HtmlBlock_Fragment = {__typename: 'HTMLBlock'}

type FullBlock_ImageBlock_Fragment = {
  __typename: 'ImageBlock'
  caption?: string | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

type FullBlock_ImageGalleryBlock_Fragment = {
  __typename: 'ImageGalleryBlock'
  images: Array<{
    __typename?: 'GalleryImageEdge'
    caption?: string | null
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  }>
}

type FullBlock_InstagramPostBlock_Fragment = {__typename: 'InstagramPostBlock'; postID: string}

type FullBlock_LinkPageBreakBlock_Fragment = {
  __typename: 'LinkPageBreakBlock'
  text?: string | null
  linkText?: string | null
  linkURL?: string | null
}

type FullBlock_ListicleBlock_Fragment = {
  __typename: 'ListicleBlock'
  items: Array<{
    __typename?: 'ListicleItem'
    title: string
    richText: Node[]
    image?: {
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    } | null
  }>
}

type FullBlock_PolisConversationBlock_Fragment = {__typename: 'PolisConversationBlock'}

type FullBlock_PollBlock_Fragment = {__typename: 'PollBlock'}

type FullBlock_QuoteBlock_Fragment = {
  __typename: 'QuoteBlock'
  quote?: string | null
  author?: string | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

type FullBlock_RichTextBlock_Fragment = {__typename: 'RichTextBlock'; richText: Node[]}

type FullBlock_SoundCloudTrackBlock_Fragment = {__typename: 'SoundCloudTrackBlock'; trackID: string}

type FullBlock_TeaserGridBlock_Fragment = {
  __typename: 'TeaserGridBlock'
  numColumns: number
  teasers: Array<
    | {
        __typename?: 'ArticleTeaser'
        style: TeaserStyle
        preTitle?: string | null
        title?: string | null
        lead?: string | null
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
        article?: {
          __typename?: 'Article'
          id: string
          createdAt: string
          modifiedAt: string
          tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
          draft?: {__typename?: 'ArticleRevision'; revision: number} | null
          pending?: {__typename?: 'ArticleRevision'; revision: number} | null
          published?: {
            __typename?: 'ArticleRevision'
            publishedAt?: string | null
            updatedAt?: string | null
            revision: number
          } | null
          latest: {
            __typename?: 'ArticleRevision'
            publishedAt?: string | null
            updatedAt?: string | null
            revision: number
            preTitle?: string | null
            title?: string | null
            lead?: string | null
            image?: {
              __typename?: 'Image'
              id: string
              link?: string | null
              filename?: string | null
              extension: string
              title?: string | null
              description?: string | null
              width: number
              height: number
              url?: string | null
              largeURL?: string | null
              mediumURL?: string | null
              thumbURL?: string | null
              squareURL?: string | null
              previewURL?: string | null
              column1URL?: string | null
              column6URL?: string | null
            } | null
          }
        } | null
      }
    | {__typename?: 'CustomTeaser'}
    | {
        __typename?: 'EventTeaser'
        style: TeaserStyle
        preTitle?: string | null
        title?: string | null
        lead?: string | null
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
        event?: {__typename?: 'Event'; id: string} | null
      }
    | {
        __typename?: 'PageTeaser'
        style: TeaserStyle
        preTitle?: string | null
        title?: string | null
        lead?: string | null
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
        page?: {__typename?: 'Page'; id: string} | null
      }
    | {
        __typename?: 'PeerArticleTeaser'
        style: TeaserStyle
        preTitle?: string | null
        title?: string | null
        lead?: string | null
        articleID: string
        image?: {
          __typename?: 'Image'
          id: string
          link?: string | null
          filename?: string | null
          extension: string
          title?: string | null
          description?: string | null
          width: number
          height: number
          url?: string | null
          largeURL?: string | null
          mediumURL?: string | null
          thumbURL?: string | null
          squareURL?: string | null
          previewURL?: string | null
          column1URL?: string | null
          column6URL?: string | null
        } | null
        article?: {
          __typename?: 'Article'
          id: string
          createdAt: string
          modifiedAt: string
          tags: Array<{__typename?: 'Tag'; id: string; tag?: string | null}>
          draft?: {__typename?: 'ArticleRevision'; revision: number} | null
          pending?: {__typename?: 'ArticleRevision'; revision: number} | null
          published?: {
            __typename?: 'ArticleRevision'
            publishedAt?: string | null
            updatedAt?: string | null
            revision: number
          } | null
          latest: {
            __typename?: 'ArticleRevision'
            publishedAt?: string | null
            updatedAt?: string | null
            revision: number
            preTitle?: string | null
            title?: string | null
            lead?: string | null
            image?: {
              __typename?: 'Image'
              id: string
              link?: string | null
              filename?: string | null
              extension: string
              title?: string | null
              description?: string | null
              width: number
              height: number
              url?: string | null
              largeURL?: string | null
              mediumURL?: string | null
              thumbURL?: string | null
              squareURL?: string | null
              previewURL?: string | null
              column1URL?: string | null
              column6URL?: string | null
            } | null
          }
        } | null
      }
    | null
  >
}

type FullBlock_TeaserGridFlexBlock_Fragment = {__typename: 'TeaserGridFlexBlock'}

type FullBlock_TeaserListBlock_Fragment = {__typename: 'TeaserListBlock'}

type FullBlock_TikTokVideoBlock_Fragment = {__typename: 'TikTokVideoBlock'}

type FullBlock_TitleBlock_Fragment = {
  __typename: 'TitleBlock'
  title?: string | null
  lead?: string | null
}

type FullBlock_TwitterTweetBlock_Fragment = {
  __typename: 'TwitterTweetBlock'
  userID: string
  tweetID: string
}

type FullBlock_VimeoVideoBlock_Fragment = {__typename: 'VimeoVideoBlock'; videoID: string}

type FullBlock_YouTubeVideoBlock_Fragment = {__typename: 'YouTubeVideoBlock'; videoID: string}

export type FullBlockFragment =
  | FullBlock_BildwurfAdBlock_Fragment
  | FullBlock_CommentBlock_Fragment
  | FullBlock_EmbedBlock_Fragment
  | FullBlock_EventBlock_Fragment
  | FullBlock_FacebookPostBlock_Fragment
  | FullBlock_FacebookVideoBlock_Fragment
  | FullBlock_HtmlBlock_Fragment
  | FullBlock_ImageBlock_Fragment
  | FullBlock_ImageGalleryBlock_Fragment
  | FullBlock_InstagramPostBlock_Fragment
  | FullBlock_LinkPageBreakBlock_Fragment
  | FullBlock_ListicleBlock_Fragment
  | FullBlock_PolisConversationBlock_Fragment
  | FullBlock_PollBlock_Fragment
  | FullBlock_QuoteBlock_Fragment
  | FullBlock_RichTextBlock_Fragment
  | FullBlock_SoundCloudTrackBlock_Fragment
  | FullBlock_TeaserGridBlock_Fragment
  | FullBlock_TeaserGridFlexBlock_Fragment
  | FullBlock_TeaserListBlock_Fragment
  | FullBlock_TikTokVideoBlock_Fragment
  | FullBlock_TitleBlock_Fragment
  | FullBlock_TwitterTweetBlock_Fragment
  | FullBlock_VimeoVideoBlock_Fragment
  | FullBlock_YouTubeVideoBlock_Fragment

export type ImageUrLsFragment = {
  __typename?: 'Image'
  url?: string | null
  largeURL?: string | null
  mediumURL?: string | null
  thumbURL?: string | null
  squareURL?: string | null
  previewURL?: string | null
  column1URL?: string | null
  column6URL?: string | null
}

export type ImageRefFragment = {
  __typename?: 'Image'
  id: string
  link?: string | null
  filename?: string | null
  extension: string
  title?: string | null
  description?: string | null
  width: number
  height: number
  url?: string | null
  largeURL?: string | null
  mediumURL?: string | null
  thumbURL?: string | null
  squareURL?: string | null
  previewURL?: string | null
  column1URL?: string | null
  column6URL?: string | null
}

export type FullImageFragment = {
  __typename?: 'Image'
  id: string
  createdAt: string
  modifiedAt: string
  filename?: string | null
  extension: string
  width: number
  height: number
  fileSize: number
  description?: string | null
  tags: Array<string>
  source?: string | null
  link?: string | null
  license?: string | null
  title?: string | null
  url?: string | null
  largeURL?: string | null
  mediumURL?: string | null
  thumbURL?: string | null
  squareURL?: string | null
  previewURL?: string | null
  column1URL?: string | null
  column6URL?: string | null
  focalPoint?: {__typename?: 'FocalPoint'; x: number; y: number} | null
}

export type ImageListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
}>

export type ImageListQuery = {
  __typename?: 'Query'
  images: {
    __typename?: 'ImageConnection'
    nodes: Array<{
      __typename?: 'Image'
      id: string
      link?: string | null
      filename?: string | null
      extension: string
      title?: string | null
      description?: string | null
      width: number
      height: number
      url?: string | null
      largeURL?: string | null
      mediumURL?: string | null
      thumbURL?: string | null
      squareURL?: string | null
      previewURL?: string | null
      column1URL?: string | null
      column6URL?: string | null
    }>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  }
}

export type ImageQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ImageQuery = {
  __typename?: 'Query'
  image?: {
    __typename?: 'Image'
    id: string
    createdAt: string
    modifiedAt: string
    filename?: string | null
    extension: string
    width: number
    height: number
    fileSize: number
    description?: string | null
    tags: Array<string>
    source?: string | null
    link?: string | null
    license?: string | null
    title?: string | null
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
    focalPoint?: {__typename?: 'FocalPoint'; x: number; y: number} | null
  } | null
}

export type UploadImageMutationVariables = Exact<{
  input: UploadImageInput
}>

export type UploadImageMutation = {
  __typename?: 'Mutation'
  uploadImage?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

export type UpdateImageMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateImageInput
}>

export type UpdateImageMutation = {
  __typename?: 'Mutation'
  updateImage?: {
    __typename?: 'Image'
    id: string
    createdAt: string
    modifiedAt: string
    filename?: string | null
    extension: string
    width: number
    height: number
    fileSize: number
    description?: string | null
    tags: Array<string>
    source?: string | null
    link?: string | null
    license?: string | null
    title?: string | null
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
    focalPoint?: {__typename?: 'FocalPoint'; x: number; y: number} | null
  } | null
}

export type DeleteImageMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteImageMutation = {
  __typename?: 'Mutation'
  deleteImage?: {
    __typename?: 'Image'
    id: string
    createdAt: string
    modifiedAt: string
    filename?: string | null
    extension: string
    width: number
    height: number
    fileSize: number
    description?: string | null
    tags: Array<string>
    source?: string | null
    link?: string | null
    license?: string | null
    title?: string | null
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
    focalPoint?: {__typename?: 'FocalPoint'; x: number; y: number} | null
  } | null
}

export type MemberPlanRefFragment = {
  __typename?: 'MemberPlan'
  id: string
  name: string
  description?: Node[] | null
  slug: string
  active: boolean
  tags?: Array<string> | null
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

export type FullMemberPlanFragment = {
  __typename?: 'MemberPlan'
  tags?: Array<string> | null
  amountPerMonthMin: number
  extendable: boolean
  maxCount?: number | null
  id: string
  name: string
  description?: Node[] | null
  slug: string
  active: boolean
  availablePaymentMethods: Array<{
    __typename?: 'AvailablePaymentMethod'
    paymentPeriodicities: Array<PaymentPeriodicity>
    forceAutoRenewal: boolean
    paymentMethods: Array<{__typename?: 'PaymentMethod'; id: string; name: string; slug: string}>
  }>
  image?: {
    __typename?: 'Image'
    id: string
    link?: string | null
    filename?: string | null
    extension: string
    title?: string | null
    description?: string | null
    width: number
    height: number
    url?: string | null
    largeURL?: string | null
    mediumURL?: string | null
    thumbURL?: string | null
    squareURL?: string | null
    previewURL?: string | null
    column1URL?: string | null
    column6URL?: string | null
  } | null
}

export type MemberPlanListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
}>

export type MemberPlanListQuery = {
  __typename?: 'Query'
  memberPlans: {
    __typename?: 'MemberPlanConnection'
    totalCount: number
    nodes: Array<{
      __typename?: 'MemberPlan'
      tags?: Array<string> | null
      amountPerMonthMin: number
      extendable: boolean
      maxCount?: number | null
      id: string
      name: string
      description?: Node[] | null
      slug: string
      active: boolean
      availablePaymentMethods: Array<{
        __typename?: 'AvailablePaymentMethod'
        paymentPeriodicities: Array<PaymentPeriodicity>
        forceAutoRenewal: boolean
        paymentMethods: Array<{
          __typename?: 'PaymentMethod'
          id: string
          name: string
          slug: string
        }>
      }>
      image?: {
        __typename?: 'Image'
        id: string
        link?: string | null
        filename?: string | null
        extension: string
        title?: string | null
        description?: string | null
        width: number
        height: number
        url?: string | null
        largeURL?: string | null
        mediumURL?: string | null
        thumbURL?: string | null
        squareURL?: string | null
        previewURL?: string | null
        column1URL?: string | null
        column6URL?: string | null
      } | null
    }>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  }
}

export type CreateSubscriptionMutationVariables = Exact<{
  input: SubscriptionInput
}>

export type CreateSubscriptionMutation = {
  __typename?: 'Mutation'
  createSubscription?: {
    __typename?: 'Subscription'
    autoRenew: boolean
    id: string
    paidUntil?: string | null
    monthlyAmount: number
    extendable: boolean
    user?: {__typename?: 'User'; id: string} | null
    memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
    paymentMethod: {__typename?: 'PaymentMethod'; id: string}
  } | null
}

export type RenewSubscriptionMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type RenewSubscriptionMutation = {
  __typename?: 'Mutation'
  renewSubscription?: {__typename?: 'Invoice'; id: string} | null
}

export type DeleteSubscriptionMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteSubscriptionMutation = {
  __typename?: 'Mutation'
  deleteSubscription?: {__typename?: 'Subscription'; id: string} | null
}

export type TagListQueryVariables = Exact<{
  filter?: InputMaybe<TagFilter>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  order?: InputMaybe<SortOrder>
  sort?: InputMaybe<TagSort>
}>

export type TagListQuery = {
  __typename?: 'Query'
  tags?: {
    __typename?: 'TagConnection'
    totalCount: number
    nodes: Array<{__typename?: 'Tag'; id: string; tag?: string | null; main: boolean}>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  } | null
}

export type CreateTagMutationVariables = Exact<{
  tag?: InputMaybe<Scalars['String']>
  type: TagType
  main?: InputMaybe<Scalars['Boolean']>
}>

export type CreateTagMutation = {
  __typename?: 'Mutation'
  createTag?: {__typename?: 'Tag'; id: string; tag?: string | null; main: boolean} | null
}

export type UpdateTagMutationVariables = Exact<{
  id: Scalars['ID']
  tag?: InputMaybe<Scalars['String']>
  main?: InputMaybe<Scalars['Boolean']>
}>

export type UpdateTagMutation = {
  __typename?: 'Mutation'
  updateTag?: {__typename?: 'Tag'; id: string; tag?: string | null; main: boolean} | null
}

export type DeleteTagMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteTagMutation = {
  __typename?: 'Mutation'
  deleteTag?: {__typename?: 'Tag'; id: string; tag?: string | null} | null
}

export type FullUserFragment = {
  __typename?: 'User'
  id: string
  name: string
  email: string
  emailVerifiedAt?: string | null
  flair?: string | null
  subscriptions: Array<{
    __typename?: 'UserSubscription'
    id: string
    memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
  }>
}

export type UserListQueryVariables = Exact<{
  filter?: InputMaybe<Scalars['String']>
  cursor?: InputMaybe<Scalars['ID']>
  take?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
}>

export type UserListQuery = {
  __typename?: 'Query'
  users: {
    __typename?: 'UserConnection'
    totalCount: number
    nodes: Array<{
      __typename?: 'User'
      id: string
      name: string
      email: string
      emailVerifiedAt?: string | null
      flair?: string | null
      subscriptions: Array<{
        __typename?: 'UserSubscription'
        id: string
        memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
      }>
    }>
    pageInfo: {
      __typename?: 'PageInfo'
      startCursor?: string | null
      endCursor?: string | null
      hasNextPage: boolean
      hasPreviousPage: boolean
    }
  }
}

export type CreateUserMutationVariables = Exact<{
  input: UserInput
  password: Scalars['String']
}>

export type CreateUserMutation = {
  __typename?: 'Mutation'
  createUser?: {
    __typename?: 'User'
    id: string
    name: string
    email: string
    emailVerifiedAt?: string | null
    flair?: string | null
    subscriptions: Array<{
      __typename?: 'UserSubscription'
      id: string
      memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
    }>
  } | null
}

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['ID']
  input: UserInput
}>

export type UpdateUserMutation = {
  __typename?: 'Mutation'
  updateUser?: {
    __typename?: 'User'
    id: string
    name: string
    email: string
    emailVerifiedAt?: string | null
    flair?: string | null
    subscriptions: Array<{
      __typename?: 'UserSubscription'
      id: string
      memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
    }>
  } | null
}

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteUserMutation = {
  __typename?: 'Mutation'
  deleteUser?: {
    __typename?: 'User'
    id: string
    name: string
    email: string
    emailVerifiedAt?: string | null
    flair?: string | null
    subscriptions: Array<{
      __typename?: 'UserSubscription'
      id: string
      memberPlan: {__typename?: 'MemberPlan'; id: string; slug: string}
    }>
  } | null
}

export const MutationArticle = gql`
  fragment MutationArticle on Article {
    id
    shared
    tags {
      id
      tag
    }
    draft {
      publishedAt
      updatedAt
      revision
    }
    pending {
      publishAt
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      revision
      title
      preTitle
      lead
      slug
      breaking
      properties {
        key
        value
        public
      }
    }
  }
`
export const ImageUrLs = gql`
  fragment ImageURLs on Image {
    url
    largeURL: transformURL(input: {width: 500})
    mediumURL: transformURL(input: {width: 300})
    thumbURL: transformURL(input: {width: 280, height: 200})
    squareURL: transformURL(input: {width: 100, height: 100})
    previewURL: transformURL(input: {width: 400, height: 200})
    column1URL: transformURL(input: {width: 800, height: 300})
    column6URL: transformURL(input: {width: 260, height: 300})
  }
`
export const ImageRef = gql`
  fragment ImageRef on Image {
    id
    link
    filename
    extension
    title
    description
    width
    height
    ...ImageURLs
  }
  ${ImageUrLs}
`
export const AuthorRef = gql`
  fragment AuthorRef on Author {
    id
    name
    image {
      ...ImageRef
    }
  }
  ${ImageRef}
`
export const FullAuthor = gql`
  fragment FullAuthor on Author {
    slug
    links {
      title
      url
    }
    bio
    ...AuthorRef
  }
  ${AuthorRef}
`
export const ArticleRef = gql`
  fragment ArticleRef on Article {
    id
    createdAt
    modifiedAt
    tags {
      id
      tag
    }
    draft {
      revision
    }
    pending {
      revision
    }
    published {
      publishedAt
      updatedAt
      revision
    }
    latest {
      publishedAt
      updatedAt
      revision
      preTitle
      title
      lead
      image {
        ...ImageRef
      }
    }
  }
  ${ImageRef}
`
export const FullTeaser = gql`
  fragment FullTeaser on Teaser {
    ... on ArticleTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      article {
        ...ArticleRef
      }
    }
    ... on PeerArticleTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      articleID
      article {
        ...ArticleRef
      }
    }
    ... on PageTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      page {
        id
      }
    }
    ... on EventTeaser {
      style
      image {
        ...ImageRef
      }
      preTitle
      title
      lead
      event {
        id
      }
    }
  }
  ${ImageRef}
  ${ArticleRef}
`
export const FullBlock = gql`
  fragment FullBlock on Block {
    __typename
    ... on TitleBlock {
      title
      lead
    }
    ... on RichTextBlock {
      richText
    }
    ... on QuoteBlock {
      quote
      author
      image {
        ...ImageRef
      }
    }
    ... on LinkPageBreakBlock {
      text
      linkText
      linkURL
    }
    ... on ImageBlock {
      caption
      image {
        ...ImageRef
      }
    }
    ... on ImageGalleryBlock {
      images {
        caption
        image {
          ...ImageRef
        }
      }
    }
    ... on ListicleBlock {
      items {
        title
        image {
          ...ImageRef
        }
        richText
      }
    }
    ... on FacebookPostBlock {
      userID
      postID
    }
    ... on FacebookVideoBlock {
      userID
      videoID
    }
    ... on InstagramPostBlock {
      postID
    }
    ... on TwitterTweetBlock {
      userID
      tweetID
    }
    ... on VimeoVideoBlock {
      videoID
    }
    ... on YouTubeVideoBlock {
      videoID
    }
    ... on SoundCloudTrackBlock {
      trackID
    }
    ... on EmbedBlock {
      url
      title
      width
      height
      styleCustom
      sandbox
    }
    ... on TeaserGridBlock {
      teasers {
        ...FullTeaser
      }
      numColumns
    }
  }
  ${ImageRef}
  ${FullTeaser}
`
export const FullImage = gql`
  fragment FullImage on Image {
    id
    createdAt
    modifiedAt
    filename
    extension
    width
    height
    fileSize
    description
    tags
    source
    link
    license
    focalPoint {
      x
      y
    }
    ...ImageRef
  }
  ${ImageRef}
`
export const MemberPlanRef = gql`
  fragment MemberPlanRef on MemberPlan {
    id
    name
    description
    slug
    active
    tags
    image {
      ...ImageRef
    }
  }
  ${ImageRef}
`
export const FullMemberPlan = gql`
  fragment FullMemberPlan on MemberPlan {
    tags
    amountPerMonthMin
    availablePaymentMethods {
      paymentMethods {
        id
        name
        slug
      }
      paymentPeriodicities
      forceAutoRenewal
    }
    ...MemberPlanRef
    extendable
    maxCount
  }
  ${MemberPlanRef}
`
export const FullUser = gql`
  fragment FullUser on User {
    id
    name
    email
    emailVerifiedAt
    subscriptions {
      id
      memberPlan {
        id
        slug
      }
    }
    flair
  }
`
export const ArticleList = gql`
  query ArticleList($filter: String, $cursor: ID, $take: Int) {
    articles(take: $take, cursor: $cursor, filter: {title: $filter}) {
      nodes {
        ...ArticleRef
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${ArticleRef}
`
export const CreateArticle = gql`
  mutation CreateArticle($input: ArticleInput!) {
    createArticle(input: $input) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const UpdateArticle = gql`
  mutation UpdateArticle($id: ID!, $input: ArticleInput!) {
    updateArticle(id: $id, input: $input) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const PublishArticle = gql`
  mutation PublishArticle(
    $id: ID!
    $publishAt: DateTime!
    $publishedAt: DateTime!
    $updatedAt: DateTime!
  ) {
    publishArticle(
      id: $id
      publishAt: $publishAt
      publishedAt: $publishedAt
      updatedAt: $updatedAt
    ) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const UnpublishArticle = gql`
  mutation UnpublishArticle($id: ID!) {
    unpublishArticle(id: $id) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const DeleteArticle = gql`
  mutation DeleteArticle($id: ID!) {
    deleteArticle(id: $id) {
      ...MutationArticle
    }
  }
  ${MutationArticle}
`
export const Article = gql`
  query Article($id: ID!) {
    article(id: $id) {
      id
      shared
      tags {
        id
        tag
        type
      }
      pending {
        publishAt
      }
      published {
        publishedAt
        updatedAt
      }
      latest {
        publishedAt
        updatedAt
        revision
        slug
        preTitle
        title
        lead
        image {
          ...ImageRef
        }
        properties {
          key
          value
          public
        }
        authors {
          ...AuthorRef
        }
        hideAuthor
        breaking
        socialMediaTitle
        socialMediaDescription
        socialMediaAuthors {
          ...AuthorRef
        }
        socialMediaImage {
          ...ImageRef
        }
        blocks {
          ...FullBlock
        }
      }
    }
  }
  ${ImageRef}
  ${AuthorRef}
  ${FullBlock}
`
export const AuthorList = gql`
  query AuthorList($filter: String, $cursor: ID, $take: Int, $skip: Int) {
    authors(filter: {name: $filter}, cursor: $cursor, take: $take, skip: $skip) {
      nodes {
        ...FullAuthor
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullAuthor}
`
export const Author = gql`
  query Author($id: ID!) {
    author(id: $id) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const CreateAuthor = gql`
  mutation CreateAuthor($input: AuthorInput!) {
    createAuthor(input: $input) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const UpdateAuthor = gql`
  mutation UpdateAuthor($id: ID!, $input: AuthorInput!) {
    updateAuthor(id: $id, input: $input) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const DeleteAuthor = gql`
  mutation DeleteAuthor($id: ID!) {
    deleteAuthor(id: $id) {
      ...FullAuthor
    }
  }
  ${FullAuthor}
`
export const AuthorBySlug = gql`
  query AuthorBySlug($slug: Slug!) {
    author(slug: $slug) {
      id
    }
  }
`
export const ImageList = gql`
  query ImageList($filter: String, $cursor: ID, $take: Int, $skip: Int) {
    images(filter: {title: $filter}, cursor: $cursor, take: $take, skip: $skip) {
      nodes {
        ...ImageRef
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
  ${ImageRef}
`
export const Image = gql`
  query Image($id: ID!) {
    image(id: $id) {
      ...FullImage
    }
  }
  ${FullImage}
`
export const UploadImage = gql`
  mutation UploadImage($input: UploadImageInput!) {
    uploadImage(input: $input) {
      ...ImageRef
    }
  }
  ${ImageRef}
`
export const UpdateImage = gql`
  mutation UpdateImage($id: ID!, $input: UpdateImageInput!) {
    updateImage(id: $id, input: $input) {
      ...FullImage
    }
  }
  ${FullImage}
`
export const DeleteImage = gql`
  mutation DeleteImage($id: ID!) {
    deleteImage(id: $id) {
      ...FullImage
    }
  }
  ${FullImage}
`
export const MemberPlanList = gql`
  query MemberPlanList($filter: String, $cursor: ID, $take: Int, $skip: Int) {
    memberPlans(filter: {name: $filter}, cursor: $cursor, take: $take, skip: $skip) {
      nodes {
        ...FullMemberPlan
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullMemberPlan}
`
export const CreateSubscription = gql`
  mutation CreateSubscription($input: SubscriptionInput!) {
    createSubscription(input: $input) {
      autoRenew
      id
      paidUntil
      user {
        id
      }
      monthlyAmount
      memberPlan {
        id
        slug
      }
      extendable
      paymentMethod {
        id
      }
    }
  }
`
export const RenewSubscription = gql`
  mutation RenewSubscription($id: ID!) {
    renewSubscription(id: $id) {
      id
    }
  }
`
export const DeleteSubscription = gql`
  mutation DeleteSubscription($id: ID!) {
    deleteSubscription(id: $id) {
      id
    }
  }
`
export const TagList = gql`
  query TagList(
    $filter: TagFilter
    $cursor: ID
    $take: Int
    $skip: Int
    $order: SortOrder
    $sort: TagSort
  ) {
    tags(filter: $filter, cursor: $cursor, take: $take, skip: $skip, order: $order, sort: $sort) {
      nodes {
        id
        tag
        main
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
`
export const CreateTag = gql`
  mutation CreateTag($tag: String, $type: TagType!, $main: Boolean) {
    createTag(tag: $tag, type: $type, main: $main) {
      id
      tag
      main
    }
  }
`
export const UpdateTag = gql`
  mutation UpdateTag($id: ID!, $tag: String, $main: Boolean) {
    updateTag(id: $id, tag: $tag, main: $main) {
      id
      tag
      main
    }
  }
`
export const DeleteTag = gql`
  mutation DeleteTag($id: ID!) {
    deleteTag(id: $id) {
      id
      tag
    }
  }
`
export const UserList = gql`
  query UserList($filter: String, $cursor: ID, $take: Int, $skip: Int) {
    users(filter: {text: $filter}, cursor: $cursor, take: $take, skip: $skip) {
      nodes {
        ...FullUser
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
      totalCount
    }
  }
  ${FullUser}
`
export const CreateUser = gql`
  mutation CreateUser($input: UserInput!, $password: String!) {
    createUser(input: $input, password: $password) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const UpdateUser = gql`
  mutation UpdateUser($id: ID!, $input: UserInput!) {
    updateUser(id: $id, input: $input) {
      ...FullUser
    }
  }
  ${FullUser}
`
export const DeleteUser = gql`
  mutation DeleteUser($id: ID!) {
    deleteUser(id: $id) {
      ...FullUser
    }
  }
  ${FullUser}
`
