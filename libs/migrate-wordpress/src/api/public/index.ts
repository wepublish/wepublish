// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Node} from 'slate'
import gql from 'graphql-tag'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]?: Maybe<T[SubKey]>}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]: Maybe<T[SubKey]>}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A hexidecimal color value. */
  Color: string
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: string
  /** Setting Value */
  GraphQLSettingValueType: any
  RichText: Node[]
  Slug: string
  /** The `Upload` scalar type represents a file upload. */
  Upload: File
  /** A valid vote value */
  VoteValue: number
  _Any: any
  _FieldSet: any
  link__Import: any
}

export type AllowedSettingVals = {
  __typename?: 'AllowedSettingVals'
  boolChoice?: Maybe<Scalars['Boolean']>
  stringChoice?: Maybe<Array<Scalars['String']>>
}

export type Article = {
  __typename?: 'Article'
  authors: Array<Author>
  blocks: Array<Block>
  breaking: Scalars['Boolean']
  canonicalUrl?: Maybe<Scalars['String']>
  comments: Array<Comment>
  disableComments?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  likes: Scalars['Int']
  peeredArticleURL?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  properties: Array<PublicProperties>
  publishedAt: Scalars['DateTime']
  seoTitle?: Maybe<Scalars['String']>
  slug: Scalars['Slug']
  socialMediaAuthors: Array<Author>
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImage?: Maybe<Image>
  socialMediaTitle?: Maybe<Scalars['String']>
  tags: Array<Tag>
  title: Scalars['String']
  trackingPixels?: Maybe<Array<Maybe<TrackingPixel>>>
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
}

export type ArticleConnection = {
  __typename?: 'ArticleConnection'
  nodes: Array<Article>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ArticleFilter = {
  authors?: InputMaybe<Array<Scalars['ID']>>
  body?: InputMaybe<Scalars['String']>
  includeHidden?: InputMaybe<Scalars['Boolean']>
  lead?: InputMaybe<Scalars['String']>
  preTitle?: InputMaybe<Scalars['String']>
  publicationDateFrom?: InputMaybe<DateFilter>
  publicationDateTo?: InputMaybe<DateFilter>
  shared?: InputMaybe<Scalars['Boolean']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type ArticleNavigationLink = BaseNavigationLink & {
  __typename?: 'ArticleNavigationLink'
  article?: Maybe<Article>
  label: Scalars['String']
}

export enum ArticleSort {
  PublishedAt = 'publishedAt',
  UpdatedAt = 'updatedAt'
}

export type ArticleTeaser = {
  __typename?: 'ArticleTeaser'
  article?: Maybe<Article>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type AuthProvider = {
  __typename?: 'AuthProvider'
  name: Scalars['String']
  url: Scalars['String']
}

export type Author = {
  __typename?: 'Author'
  bio?: Maybe<Scalars['RichText']>
  createdAt: Scalars['DateTime']
  hideOnArticle?: Maybe<Scalars['Boolean']>
  hideOnTeam?: Maybe<Scalars['Boolean']>
  hideOnTeaser?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  image?: Maybe<Image>
  jobTitle?: Maybe<Scalars['String']>
  links?: Maybe<Array<AuthorLink>>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['Slug']
  tags: Array<Tag>
  url: Scalars['String']
}

export type AuthorConnection = {
  __typename?: 'AuthorConnection'
  nodes: Array<Author>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuthorFilter = {
  hideOnTeam?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  tagIds?: InputMaybe<Array<Scalars['ID']>>
}

export type AuthorLink = {
  __typename?: 'AuthorLink'
  title: Scalars['String']
  url: Scalars['String']
}

export enum AuthorSort {
  Name = 'NAME',
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod'
  forceAutoRenewal: Scalars['Boolean']
  paymentMethods: Array<PaymentMethod>
  paymentPeriodicities: Array<PaymentPeriodicity>
}

export type Banner = {
  __typename?: 'Banner'
  actions?: Maybe<Array<BannerAction>>
  active: Scalars['Boolean']
  cta?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  imageId?: Maybe<Scalars['String']>
  showOnArticles: Scalars['Boolean']
  showOnPages?: Maybe<Array<PageModel>>
  text: Scalars['String']
  title: Scalars['String']
}

export type BannerAction = {
  __typename?: 'BannerAction'
  id: Scalars['ID']
  label: Scalars['String']
  role: BannerActionRole
  style: Scalars['String']
  url: Scalars['String']
}

export enum BannerActionRole {
  Cancel = 'CANCEL',
  Other = 'OTHER',
  Primary = 'PRIMARY'
}

export enum BannerDocumentType {
  Article = 'ARTICLE',
  Page = 'PAGE'
}

export type BaseNavigationLink = {
  label: Scalars['String']
}

export type BildwurfAdBlock = {
  __typename?: 'BildwurfAdBlock'
  blockStyle?: Maybe<Scalars['String']>
  zoneID: Scalars['String']
}

export type Block =
  | BildwurfAdBlock
  | CommentBlock
  | EmbedBlock
  | EventBlock
  | FacebookPostBlock
  | FacebookVideoBlock
  | HtmlBlock
  | ImageBlock
  | ImageGalleryBlock
  | InstagramPostBlock
  | LinkPageBreakBlock
  | ListicleBlock
  | PolisConversationBlock
  | PollBlock
  | QuoteBlock
  | RichTextBlock
  | SoundCloudTrackBlock
  | TeaserGridBlock
  | TeaserGridFlexBlock
  | TeaserListBlock
  | TikTokVideoBlock
  | TitleBlock
  | TwitterTweetBlock
  | VimeoVideoBlock
  | YouTubeVideoBlock

export type BlockStyle = {
  __typename?: 'BlockStyle'
  blocks: Array<BlockType>
  createdAt: Scalars['DateTime']
  id: Scalars['String']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
}

export enum BlockType {
  Comment = 'Comment',
  Embed = 'Embed',
  Event = 'Event',
  Html = 'HTML',
  Image = 'Image',
  ImageGallery = 'ImageGallery',
  LinkPageBreak = 'LinkPageBreak',
  Listicle = 'Listicle',
  Poll = 'Poll',
  Quote = 'Quote',
  RichText = 'RichText',
  TeaserGrid1 = 'TeaserGrid1',
  TeaserGrid6 = 'TeaserGrid6',
  TeaserGridFlex = 'TeaserGridFlex',
  TeaserList = 'TeaserList',
  Title = 'Title'
}

export type CalculatedRating = {
  __typename?: 'CalculatedRating'
  answer: CommentRatingSystemAnswer
  count: Scalars['Int']
  mean: Scalars['Float']
  total: Scalars['Int']
}

export enum CaptchaType {
  Algebraic = 'Algebraic',
  CfTurnstile = 'CfTurnstile'
}

export type Challenge = {
  __typename?: 'Challenge'
  challenge?: Maybe<Scalars['String']>
  challengeID?: Maybe<Scalars['String']>
  type?: Maybe<CaptchaType>
  validUntil?: Maybe<Scalars['Date']>
}

export type ChallengeInput = {
  challengeID?: InputMaybe<Scalars['String']>
  challengeSolution: Scalars['String']
}

export type Comment = {
  __typename?: 'Comment'
  authorType: CommentAuthorType
  calculatedRatings: Array<CalculatedRating>
  children: Array<Comment>
  createdAt: Scalars['DateTime']
  featured?: Maybe<Scalars['Boolean']>
  guestUserImage?: Maybe<Image>
  guestUsername?: Maybe<Scalars['String']>
  id: Scalars['ID']
  itemID: Scalars['ID']
  itemType: CommentItemType
  lead?: Maybe<Scalars['String']>
  modifiedAt?: Maybe<Scalars['DateTime']>
  overriddenRatings: Array<OverriddenRating>
  parentID?: Maybe<Scalars['ID']>
  peerId?: Maybe<Scalars['ID']>
  rejectionReason?: Maybe<Scalars['String']>
  source?: Maybe<Scalars['String']>
  state: CommentState
  tags: Array<Tag>
  text?: Maybe<Scalars['RichText']>
  title?: Maybe<Scalars['String']>
  url: Scalars['String']
  user?: Maybe<User>
  userRatings: Array<CommentRating>
}

export enum CommentAuthorType {
  Author = 'author',
  GuestUser = 'guestUser',
  Team = 'team',
  VerifiedUser = 'verifiedUser'
}

export type CommentBlock = {
  __typename?: 'CommentBlock'
  blockStyle?: Maybe<Scalars['String']>
  comments: Array<Comment>
}

export type CommentInput = {
  challenge?: InputMaybe<ChallengeInput>
  guestUsername?: InputMaybe<Scalars['String']>
  itemID: Scalars['ID']
  itemType: CommentItemType
  parentID?: InputMaybe<Scalars['ID']>
  peerId?: InputMaybe<Scalars['ID']>
  text: Scalars['RichText']
  title?: InputMaybe<Scalars['String']>
}

export enum CommentItemType {
  Article = 'article',
  Page = 'page',
  PeerArticle = 'peerArticle'
}

export type CommentRating = {
  __typename?: 'CommentRating'
  answer: CommentRatingSystemAnswer
  commentId: Scalars['ID']
  createdAt: Scalars['DateTime']
  disabled?: Maybe<Scalars['Boolean']>
  fingerprint?: Maybe<Scalars['String']>
  id: Scalars['ID']
  userId?: Maybe<Scalars['ID']>
  value: Scalars['Int']
}

export type CommentRatingSystemAnswer = {
  __typename?: 'CommentRatingSystemAnswer'
  answer?: Maybe<Scalars['String']>
  id: Scalars['ID']
  ratingSystemId: Scalars['ID']
  type: RatingSystemType
}

export enum CommentSort {
  Rating = 'rating'
}

export enum CommentState {
  Approved = 'approved',
  PendingApproval = 'pendingApproval',
  PendingUserChanges = 'pendingUserChanges',
  Rejected = 'rejected'
}

export type CommentUpdateInput = {
  id: Scalars['ID']
  lead?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['RichText']>
  title?: InputMaybe<Scalars['String']>
}

export type Consent = {
  __typename?: 'Consent'
  createdAt: Scalars['DateTime']
  defaultValue: Scalars['Boolean']
  id: Scalars['String']
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  slug: Scalars['String']
}

export type ConsentFilter = {
  defaultValue?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
}

export type CreateBannerActionInput = {
  label: Scalars['String']
  role: BannerActionRole
  style: Scalars['String']
  url: Scalars['String']
}

export type CreateBannerInput = {
  actions?: InputMaybe<Array<CreateBannerActionInput>>
  active: Scalars['Boolean']
  cta?: InputMaybe<Scalars['String']>
  imageId?: InputMaybe<Scalars['String']>
  showOnArticles: Scalars['Boolean']
  showOnPages?: InputMaybe<Array<PageModelInput>>
  text: Scalars['String']
  title: Scalars['String']
}

export enum Currency {
  Chf = 'CHF',
  Eur = 'EUR'
}

export type CustomTeaser = {
  __typename?: 'CustomTeaser'
  contentUrl?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  properties: Array<PublicProperties>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type DashboardInvoice = {
  __typename?: 'DashboardInvoice'
  amount: Scalars['Int']
  dueAt: Scalars['DateTime']
  memberPlan?: Maybe<Scalars['String']>
  paidAt?: Maybe<Scalars['DateTime']>
}

export type DashboardSubscription = {
  __typename?: 'DashboardSubscription'
  deactivationDate?: Maybe<Scalars['DateTime']>
  endsAt?: Maybe<Scalars['DateTime']>
  memberPlan: Scalars['String']
  monthlyAmount: Scalars['Int']
  paymentPeriodicity: PaymentPeriodicity
  reasonForDeactivation?: Maybe<SubscriptionDeactivationReason>
  renewsAt?: Maybe<Scalars['DateTime']>
  startsAt: Scalars['DateTime']
}

export type DateFilter = {
  comparison: DateFilterComparison
  date?: InputMaybe<Scalars['DateTime']>
}

export enum DateFilterComparison {
  Eq = 'eq',
  Gt = 'gt',
  Gte = 'gte',
  Lt = 'lt',
  Lte = 'lte'
}

export type DeletePollVotesResult = {
  __typename?: 'DeletePollVotesResult'
  count: Scalars['Int']
}

export type EmbedBlock = {
  __typename?: 'EmbedBlock'
  blockStyle?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Int']>
  sandbox?: Maybe<Scalars['String']>
  styleCustom?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  width?: Maybe<Scalars['Int']>
}

export type Event = {
  __typename?: 'Event'
  description?: Maybe<Scalars['RichText']>
  endsAt?: Maybe<Scalars['DateTime']>
  externalSourceId?: Maybe<Scalars['String']>
  externalSourceName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  name: Scalars['String']
  startsAt: Scalars['DateTime']
  status: EventStatus
  tags: Array<Tag>
  url: Scalars['String']
}

export type EventBlock = {
  __typename?: 'EventBlock'
  blockStyle?: Maybe<Scalars['String']>
  events: Array<Event>
  filter: EventBlockFilter
}

export type EventBlockFilter = {
  __typename?: 'EventBlockFilter'
  events?: Maybe<Array<Scalars['ID']>>
  tags?: Maybe<Array<Scalars['ID']>>
}

export type EventConnection = {
  __typename?: 'EventConnection'
  nodes: Array<Event>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type EventFilter = {
  from?: InputMaybe<Scalars['DateTime']>
  location?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['ID']>>
  to?: InputMaybe<Scalars['DateTime']>
  upcomingOnly?: InputMaybe<Scalars['Boolean']>
}

export type EventFromSource = {
  __typename?: 'EventFromSource'
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['RichText']>
  endsAt?: Maybe<Scalars['DateTime']>
  externalSourceId?: Maybe<Scalars['String']>
  externalSourceName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  imageUrl?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  startsAt: Scalars['DateTime']
  status: EventStatus
}

export enum EventSort {
  CreatedAt = 'CreatedAt',
  EndsAt = 'EndsAt',
  ModifiedAt = 'ModifiedAt',
  StartsAt = 'StartsAt'
}

export enum EventStatus {
  Cancelled = 'Cancelled',
  Postponed = 'Postponed',
  Rescheduled = 'Rescheduled',
  Scheduled = 'Scheduled'
}

export type EventTeaser = {
  __typename?: 'EventTeaser'
  event?: Maybe<Event>
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type EventV2 = {
  __typename?: 'EventV2'
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['RichText']>
  endsAt?: Maybe<Scalars['DateTime']>
  externalSourceId?: Maybe<Scalars['String']>
  externalSourceName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  imageId?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  startsAt: Scalars['DateTime']
  status: EventStatus
}

export type ExternalNavigationLink = BaseNavigationLink & {
  __typename?: 'ExternalNavigationLink'
  label: Scalars['String']
  url: Scalars['String']
}

export type FacebookPostBlock = {
  __typename?: 'FacebookPostBlock'
  blockStyle?: Maybe<Scalars['String']>
  postID: Scalars['String']
  userID: Scalars['String']
}

export type FacebookVideoBlock = {
  __typename?: 'FacebookVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type FlexAlignment = {
  __typename?: 'FlexAlignment'
  h: Scalars['Int']
  w: Scalars['Int']
  x: Scalars['Int']
  y: Scalars['Int']
}

export type FlexTeaser = {
  __typename?: 'FlexTeaser'
  alignment: FlexAlignment
  teaser?: Maybe<Teaser>
}

export type FocalPoint = {
  __typename?: 'FocalPoint'
  x: Scalars['Float']
  y: Scalars['Float']
}

export type FullCommentRatingSystem = {
  __typename?: 'FullCommentRatingSystem'
  answers: Array<CommentRatingSystemAnswer>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
}

export type FullPoll = {
  __typename?: 'FullPoll'
  answers: Array<PollAnswerWithVoteCount>
  closedAt?: Maybe<Scalars['DateTime']>
  externalVoteSources: Array<PollExternalVoteSource>
  id: Scalars['ID']
  infoText?: Maybe<Scalars['RichText']>
  opensAt: Scalars['DateTime']
  question?: Maybe<Scalars['String']>
}

export type GalleryImageEdge = {
  __typename?: 'GalleryImageEdge'
  caption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
}

export type HtmlBlock = {
  __typename?: 'HTMLBlock'
  blockStyle?: Maybe<Scalars['String']>
  html?: Maybe<Scalars['String']>
}

export type Image = {
  __typename?: 'Image'
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  extension: Scalars['String']
  fileSize: Scalars['Int']
  filename?: Maybe<Scalars['String']>
  focalPoint?: Maybe<FocalPoint>
  format: Scalars['String']
  height: Scalars['Int']
  id: Scalars['ID']
  license?: Maybe<Scalars['String']>
  link?: Maybe<Scalars['String']>
  mimeType: Scalars['String']
  modifiedAt: Scalars['DateTime']
  source?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  title?: Maybe<Scalars['String']>
  transformURL?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  width: Scalars['Int']
}

export type ImageTransformUrlArgs = {
  input?: InputMaybe<ImageTransformation>
}

export type ImageBlock = {
  __typename?: 'ImageBlock'
  blockStyle?: Maybe<Scalars['String']>
  caption?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  linkUrl?: Maybe<Scalars['String']>
}

export type ImageGalleryBlock = {
  __typename?: 'ImageGalleryBlock'
  blockStyle?: Maybe<Scalars['String']>
  images: Array<GalleryImageEdge>
}

export enum ImageOutput {
  Jpeg = 'jpeg',
  Png = 'png',
  Webp = 'webp'
}

export enum ImageRotation {
  Auto = 'Auto',
  Rotate0 = 'Rotate0',
  Rotate90 = 'Rotate90',
  Rotate180 = 'Rotate180',
  Rotate270 = 'Rotate270'
}

export type ImageTransformation = {
  height?: InputMaybe<Scalars['Int']>
  output?: InputMaybe<ImageOutput>
  quality?: InputMaybe<Scalars['Float']>
  rotation?: InputMaybe<ImageRotation>
  width?: InputMaybe<Scalars['Int']>
}

export type ImageV2 = {
  __typename?: 'ImageV2'
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['RichText']>
  extension: Scalars['String']
  fileSize: Scalars['Int']
  filename?: Maybe<Scalars['String']>
  focalPoint?: Maybe<FocalPoint>
  format: Scalars['String']
  height: Scalars['Int']
  id: Scalars['ID']
  license?: Maybe<Scalars['String']>
  link?: Maybe<Scalars['String']>
  mimeType: Scalars['String']
  modifiedAt: Scalars['DateTime']
  source?: Maybe<Scalars['String']>
  tags: Array<Scalars['String']>
  title?: Maybe<Scalars['String']>
  width: Scalars['Int']
}

export type ImportedEventFilter = {
  from?: InputMaybe<Scalars['String']>
  location?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  providers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  to?: InputMaybe<Scalars['String']>
}

export enum ImportedEventSort {
  CreatedAt = 'CREATED_AT',
  EndsAt = 'ENDS_AT',
  ModifiedAt = 'MODIFIED_AT',
  StartsAt = 'STARTS_AT'
}

export type ImportedEventsDocument = {
  __typename?: 'ImportedEventsDocument'
  nodes: Array<EventFromSource>
  pageInfo: PageInfo
  totalCount: Scalars['Float']
}

export type InputPoint = {
  x: Scalars['Float']
  y: Scalars['Float']
}

export type InstagramPostBlock = {
  __typename?: 'InstagramPostBlock'
  blockStyle?: Maybe<Scalars['String']>
  postID: Scalars['String']
}

export type Invoice = {
  __typename?: 'Invoice'
  canceledAt?: Maybe<Scalars['DateTime']>
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  dueAt: Scalars['DateTime']
  id: Scalars['ID']
  items: Array<InvoiceItem>
  mail: Scalars['String']
  modifiedAt: Scalars['DateTime']
  paidAt?: Maybe<Scalars['DateTime']>
  subscription?: Maybe<Subscription>
  subscriptionID: Scalars['ID']
  total: Scalars['Int']
}

export type InvoiceItem = {
  __typename?: 'InvoiceItem'
  amount: Scalars['Int']
  createdAt: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  quantity: Scalars['Int']
  total: Scalars['Int']
}

export type LikeCreateInput = {
  articleId: Scalars['ID']
}

export type LikeDeleteInput = {
  articleId: Scalars['ID']
}

export type LinkPageBreakBlock = {
  __typename?: 'LinkPageBreakBlock'
  blockStyle?: Maybe<Scalars['String']>
  hideButton: Scalars['Boolean']
  image?: Maybe<Image>
  /** @deprecated Use block styles instead of this */
  layoutOption?: Maybe<Scalars['String']>
  linkTarget?: Maybe<Scalars['String']>
  linkText?: Maybe<Scalars['String']>
  linkURL?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
  /** @deprecated Use block styles instead of this */
  styleOption?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  templateOption?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
}

export type ListicleBlock = {
  __typename?: 'ListicleBlock'
  blockStyle?: Maybe<Scalars['String']>
  items: Array<ListicleItem>
}

export type ListicleItem = {
  __typename?: 'ListicleItem'
  image?: Maybe<Image>
  richText: Scalars['RichText']
  title: Scalars['String']
}

export type MailProviderModel = {
  __typename?: 'MailProviderModel'
  name: Scalars['String']
}

export type MailTemplateRef = {
  __typename?: 'MailTemplateRef'
  id: Scalars['String']
  name: Scalars['String']
}

export type MailTemplateWithUrlAndStatusModel = {
  __typename?: 'MailTemplateWithUrlAndStatusModel'
  description?: Maybe<Scalars['String']>
  externalMailTemplateId: Scalars['String']
  id: Scalars['String']
  name: Scalars['String']
  remoteMissing: Scalars['Boolean']
  status: Scalars['String']
  url: Scalars['String']
}

export type MemberPlan = {
  __typename?: 'MemberPlan'
  amountPerMonthMin: Scalars['Int']
  amountPerMonthTarget?: Maybe<Scalars['Int']>
  availablePaymentMethods: Array<AvailablePaymentMethod>
  currency: Currency
  description?: Maybe<Scalars['RichText']>
  extendable: Scalars['Boolean']
  failPage?: Maybe<Page>
  failPageId?: Maybe<Scalars['ID']>
  id: Scalars['ID']
  image?: Maybe<Image>
  maxCount?: Maybe<Scalars['Int']>
  name: Scalars['String']
  slug: Scalars['String']
  successPage?: Maybe<Page>
  successPageId?: Maybe<Scalars['ID']>
  tags?: Maybe<Array<Scalars['String']>>
}

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection'
  nodes: Array<MemberPlan>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberPlanFilter = {
  active?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
}

export enum MemberPlanSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Mutation = {
  __typename?: 'Mutation'
  /** This mutation allows to add a comment. The input is of type CommentInput. */
  addComment: Comment
  /** Add a like to an existing article. */
  addLike: Scalars['Int']
  /** This mutation allows to cancel the users subscriptions. The deactivation date will be either paidUntil or now */
  cancelUserSubscription?: Maybe<Subscription>
  createBanner: Banner
  /** Creates a new block style. */
  createBlockStyle: BlockStyle
  /**
   *
   *       Create a new consent.
   *
   */
  createConsent: Consent
  /** This mutation allows to create payment by taking an input of type PaymentFromInvoiceInput. */
  createPaymentFromInvoice?: Maybe<Payment>
  /** This mutation allows to create payment by referencing a subscription. */
  createPaymentFromSubscription?: Maybe<Payment>
  createSession: SessionWithToken
  createSessionWithJWT: SessionWithToken
  createSessionWithOAuth2Code: SessionWithToken
  /** Allows authenticated users to create additional subscriptions */
  createSubscription: Payment
  /** Create a new subscription flow */
  createSubscriptionFlow: Array<SubscriptionFlowModel>
  /** Create a subscription interval */
  createSubscriptionInterval: Array<SubscriptionFlowModel>
  /**
   *
   *       Creates a new userConsent based on input.
   *       Returns created userConsent.
   *
   */
  createUserConsent: UserConsent
  deleteBanner?: Maybe<Scalars['Boolean']>
  /** Deletes an existing block style. */
  deleteBlockStyle: BlockStyle
  /**
   *
   *       Deletes an existing consent.
   *
   */
  deleteConsent: Consent
  /** Delete poll votes */
  deletePollVotes: DeletePollVotesResult
  /** Delete an existing subscription flow */
  deleteSubscriptionFlow: Array<SubscriptionFlowModel>
  /** Delete an existing subscription interval */
  deleteSubscriptionInterval: Array<SubscriptionFlowModel>
  /**
   *
   *       Delete an existing userConsent by id.
   *       Returns deleted userConsent.
   *
   */
  deleteUserConsent: UserConsent
  /** This mutation extends an subscription early */
  extendSubscription: Payment
  /**
   *
   *       Creates and event based on data from importable events list and an id and provider.
   *       Also, uploads an image to WePublish Image library.
   *
   */
  importEvent: Scalars['String']
  /** This mutation allows to rate a comment. Supports logged in and anonymous */
  rateComment: Comment
  /** This mutation allows to register a new member, */
  registerMember: Registration
  /** This mutation allows to register a new member, select a member plan, payment method and create an invoice.  */
  registerMemberAndReceivePayment: RegistrationAndPayment
  /** Remove a like from an existing article. */
  removeLike: Scalars['Int']
  /** This mutation revokes and deletes the active session. */
  revokeActiveSession: Scalars['Boolean']
  /** This mutation sends a login link to the email if the user exists. Method will always return email address */
  sendWebsiteLogin: Scalars['String']
  syncTemplates?: Maybe<Scalars['Boolean']>
  /** Sends a test email for the given event */
  testSystemMail: Scalars['Boolean']
  updateBanner: Banner
  /** Updates an existing block style. */
  updateBlockStyle: BlockStyle
  /** This mutation allows to update a comment. The input is of type CommentUpdateInput which contains the ID of the comment you want to update and the new text. */
  updateComment: Comment
  /**
   *
   *       Updates an existing consent.
   *
   */
  updateConsent: Consent
  /** This mutation allows to update the user's password by entering the new password. The repeated new password gives an error if the passwords don't match or if the user is not authenticated. */
  updatePassword?: Maybe<User>
  /** This mutation allows to update the Payment Provider Customers */
  updatePaymentProviderCustomers: Array<PaymentProviderCustomer>
  /** Updates an existing setting. */
  updateSetting: Setting
  /** Update an existing subscription flow */
  updateSubscriptionFlow: Array<SubscriptionFlowModel>
  /** Update an existing subscription interval */
  updateSubscriptionInterval: Array<SubscriptionFlowModel>
  /** Updates an existing mail flow */
  updateSystemMail: Array<SystemMailModel>
  /** This mutation allows to update the user's data by taking an input of type UserInput. */
  updateUser?: Maybe<User>
  /**
   *
   *       Updates an existing userConsent based on input.
   *       Returns updated userConsent.
   *
   */
  updateUserConsent: UserConsent
  /** This mutation allows to update the user's subscription by taking an input of type UserSubscription and throws an error if the user doesn't already have a subscription. Updating user subscriptions will set deactivation to null */
  updateUserSubscription?: Maybe<Subscription>
  /** This mutation allows to upload and update the user's profile image. */
  uploadUserProfileImage?: Maybe<User>
  /** This mutation allows to vote on a poll (or update one's decision). Supports logged in and anonymous */
  voteOnPoll?: Maybe<PollVote>
}

export type MutationAddCommentArgs = {
  input: CommentInput
}

export type MutationAddLikeArgs = {
  input: LikeCreateInput
}

export type MutationCancelUserSubscriptionArgs = {
  id: Scalars['ID']
}

export type MutationCreateBannerArgs = {
  input: CreateBannerInput
}

export type MutationCreateBlockStyleArgs = {
  blocks: Array<BlockType>
  name: Scalars['String']
}

export type MutationCreateConsentArgs = {
  defaultValue: Scalars['Boolean']
  name: Scalars['String']
  slug: Scalars['String']
}

export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput
}

export type MutationCreatePaymentFromSubscriptionArgs = {
  failureURL?: InputMaybe<Scalars['String']>
  subscriptionId?: InputMaybe<Scalars['ID']>
  successURL?: InputMaybe<Scalars['String']>
}

export type MutationCreateSessionArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String']
}

export type MutationCreateSessionWithOAuth2CodeArgs = {
  code: Scalars['String']
  name: Scalars['String']
  redirectUri: Scalars['String']
}

export type MutationCreateSubscriptionArgs = {
  autoRenew: Scalars['Boolean']
  deactivateSubscriptionId?: InputMaybe<Scalars['ID']>
  failureURL?: InputMaybe<Scalars['String']>
  memberPlanID?: InputMaybe<Scalars['ID']>
  memberPlanSlug?: InputMaybe<Scalars['Slug']>
  monthlyAmount: Scalars['Int']
  paymentMethodID?: InputMaybe<Scalars['ID']>
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>
  paymentPeriodicity: PaymentPeriodicity
  subscriptionProperties?: InputMaybe<Array<PublicPropertiesInput>>
  successURL?: InputMaybe<Scalars['String']>
}

export type MutationCreateSubscriptionFlowArgs = {
  autoRenewal: Array<Scalars['Boolean']>
  memberPlanId: Scalars['String']
  paymentMethodIds: Array<Scalars['String']>
  periodicities: Array<PaymentPeriodicity>
}

export type MutationCreateSubscriptionIntervalArgs = {
  daysAwayFromEnding?: InputMaybe<Scalars['Int']>
  event: SubscriptionEvent
  mailTemplateId?: InputMaybe<Scalars['String']>
  subscriptionFlowId: Scalars['String']
}

export type MutationCreateUserConsentArgs = {
  consentId: Scalars['String']
  userId: Scalars['String']
  value: Scalars['Boolean']
}

export type MutationDeleteBannerArgs = {
  id: Scalars['String']
}

export type MutationDeleteBlockStyleArgs = {
  id: Scalars['String']
}

export type MutationDeleteConsentArgs = {
  id: Scalars['String']
}

export type MutationDeletePollVotesArgs = {
  ids: Array<Scalars['ID']>
}

export type MutationDeleteSubscriptionFlowArgs = {
  id: Scalars['String']
}

export type MutationDeleteSubscriptionIntervalArgs = {
  id: Scalars['String']
}

export type MutationDeleteUserConsentArgs = {
  id: Scalars['String']
}

export type MutationExtendSubscriptionArgs = {
  failureURL?: InputMaybe<Scalars['String']>
  subscriptionId: Scalars['ID']
  successURL?: InputMaybe<Scalars['String']>
}

export type MutationImportEventArgs = {
  id: Scalars['String']
  source: Scalars['String']
}

export type MutationRateCommentArgs = {
  answerId: Scalars['ID']
  commentId: Scalars['ID']
  value: Scalars['Int']
}

export type MutationRegisterMemberArgs = {
  address?: InputMaybe<UserAddressInput>
  birthday?: InputMaybe<Scalars['DateTime']>
  challengeAnswer: ChallengeInput
  email: Scalars['String']
  firstName?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  password?: InputMaybe<Scalars['String']>
}

export type MutationRegisterMemberAndReceivePaymentArgs = {
  address?: InputMaybe<UserAddressInput>
  autoRenew: Scalars['Boolean']
  birthday?: InputMaybe<Scalars['DateTime']>
  challengeAnswer: ChallengeInput
  email: Scalars['String']
  failureURL?: InputMaybe<Scalars['String']>
  firstName?: InputMaybe<Scalars['String']>
  memberPlanID?: InputMaybe<Scalars['ID']>
  memberPlanSlug?: InputMaybe<Scalars['Slug']>
  monthlyAmount: Scalars['Int']
  name: Scalars['String']
  password?: InputMaybe<Scalars['String']>
  paymentMethodID?: InputMaybe<Scalars['ID']>
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>
  paymentPeriodicity: PaymentPeriodicity
  subscriptionProperties?: InputMaybe<Array<PublicPropertiesInput>>
  successURL?: InputMaybe<Scalars['String']>
}

export type MutationRemoveLikeArgs = {
  input: LikeDeleteInput
}

export type MutationSendWebsiteLoginArgs = {
  email: Scalars['String']
}

export type MutationTestSystemMailArgs = {
  event: UserEvent
}

export type MutationUpdateBannerArgs = {
  input: UpdateBannerInput
}

export type MutationUpdateBlockStyleArgs = {
  blocks?: InputMaybe<Array<BlockType>>
  id: Scalars['String']
  name?: InputMaybe<Scalars['String']>
}

export type MutationUpdateCommentArgs = {
  input: CommentUpdateInput
}

export type MutationUpdateConsentArgs = {
  defaultValue?: InputMaybe<Scalars['Boolean']>
  id: Scalars['String']
  name?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
}

export type MutationUpdatePasswordArgs = {
  password: Scalars['String']
  passwordRepeated: Scalars['String']
}

export type MutationUpdatePaymentProviderCustomersArgs = {
  input: Array<PaymentProviderCustomerInput>
}

export type MutationUpdateSettingArgs = {
  name: SettingName
  value: Scalars['GraphQLSettingValueType']
}

export type MutationUpdateSubscriptionFlowArgs = {
  autoRenewal?: InputMaybe<Array<Scalars['Boolean']>>
  id: Scalars['String']
  paymentMethodIds?: InputMaybe<Array<Scalars['String']>>
  periodicities?: InputMaybe<Array<PaymentPeriodicity>>
}

export type MutationUpdateSubscriptionIntervalArgs = {
  daysAwayFromEnding?: InputMaybe<Scalars['Int']>
  id: Scalars['String']
  mailTemplateId?: InputMaybe<Scalars['String']>
}

export type MutationUpdateSystemMailArgs = {
  event: UserEvent
  mailTemplateId: Scalars['String']
}

export type MutationUpdateUserArgs = {
  input: UserInput
}

export type MutationUpdateUserConsentArgs = {
  id: Scalars['String']
  value: Scalars['Boolean']
}

export type MutationUpdateUserSubscriptionArgs = {
  id: Scalars['ID']
  input: SubscriptionInput
}

export type MutationUploadUserProfileImageArgs = {
  uploadImageInput?: InputMaybe<UploadImageInput>
}

export type MutationVoteOnPollArgs = {
  answerId: Scalars['ID']
}

export type Navigation = {
  __typename?: 'Navigation'
  id: Scalars['ID']
  key: Scalars['String']
  links: Array<NavigationLink>
  name: Scalars['String']
}

export type NavigationLink = ArticleNavigationLink | ExternalNavigationLink | PageNavigationLink

export type OAuth2Account = {
  __typename?: 'OAuth2Account'
  provider: Scalars['String']
  scope: Scalars['String']
  type: Scalars['String']
}

export type Page = {
  __typename?: 'Page'
  blocks: Array<Block>
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  properties: Array<PublicProperties>
  publishedAt: Scalars['DateTime']
  slug: Scalars['Slug']
  socialMediaDescription?: Maybe<Scalars['String']>
  socialMediaImage?: Maybe<Image>
  socialMediaTitle?: Maybe<Scalars['String']>
  tags: Array<Tag>
  title: Scalars['String']
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
}

export type PageConnection = {
  __typename?: 'PageConnection'
  nodes: Array<Page>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PageInfo = {
  __typename?: 'PageInfo'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['String']>
}

export type PageModel = {
  __typename?: 'PageModel'
  id: Scalars['ID']
}

export type PageModelInput = {
  id: Scalars['ID']
}

export type PageNavigationLink = BaseNavigationLink & {
  __typename?: 'PageNavigationLink'
  label: Scalars['String']
  page?: Maybe<Page>
}

export type PageTeaser = {
  __typename?: 'PageTeaser'
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  page?: Maybe<Page>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type PaginatedPollVotes = {
  __typename?: 'PaginatedPollVotes'
  nodes: Array<PollVote>
  pageInfo: PageInfo
  totalCount: Scalars['Float']
}

export type Payment = {
  __typename?: 'Payment'
  id: Scalars['ID']
  intentSecret?: Maybe<Scalars['String']>
  paymentMethod: PaymentMethod
  state: PaymentState
}

export type PaymentFromInvoiceInput = {
  failureURL?: InputMaybe<Scalars['String']>
  invoiceID: Scalars['ID']
  paymentMethodID?: InputMaybe<Scalars['ID']>
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>
  successURL?: InputMaybe<Scalars['String']>
}

export type PaymentMethod = {
  __typename?: 'PaymentMethod'
  description: Scalars['String']
  id: Scalars['ID']
  image?: Maybe<Image>
  imageId?: Maybe<Scalars['String']>
  name: Scalars['String']
  paymentProviderID: Scalars['String']
  slug: Scalars['Slug']
}

export enum PaymentPeriodicity {
  Biannual = 'biannual',
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Yearly = 'yearly'
}

export type PaymentProviderCustomer = {
  __typename?: 'PaymentProviderCustomer'
  customerID: Scalars['String']
  paymentProviderID: Scalars['String']
}

export type PaymentProviderCustomerInput = {
  customerID: Scalars['String']
  paymentProviderID: Scalars['String']
}

export enum PaymentState {
  Canceled = 'canceled',
  Created = 'created',
  Declined = 'declined',
  Paid = 'paid',
  Processing = 'processing',
  RequiresUserAction = 'requiresUserAction',
  Submitted = 'submitted'
}

export type Peer = {
  __typename?: 'Peer'
  createdAt: Scalars['DateTime']
  hostURL: Scalars['String']
  id: Scalars['ID']
  isDisabled?: Maybe<Scalars['Boolean']>
  modifiedAt: Scalars['DateTime']
  name: Scalars['String']
  profile?: Maybe<PeerProfile>
  slug: Scalars['String']
}

export type PeerArticleTeaser = {
  __typename?: 'PeerArticleTeaser'
  article?: Maybe<Article>
  articleID: Scalars['ID']
  image?: Maybe<Image>
  lead?: Maybe<Scalars['String']>
  peer?: Maybe<Peer>
  preTitle?: Maybe<Scalars['String']>
  /** @deprecated Use block styles instead of this */
  style: TeaserStyle
  title?: Maybe<Scalars['String']>
}

export type PeerProfile = {
  __typename?: 'PeerProfile'
  callToActionImage?: Maybe<Image>
  callToActionImageURL?: Maybe<Scalars['String']>
  callToActionText: Scalars['RichText']
  callToActionURL: Scalars['String']
  hostURL: Scalars['String']
  logo?: Maybe<Image>
  name: Scalars['String']
  themeColor: Scalars['Color']
  themeFontColor: Scalars['Color']
  websiteURL: Scalars['String']
}

export type PeriodicJob = {
  __typename?: 'PeriodicJob'
  createdAt: Scalars['DateTime']
  date: Scalars['DateTime']
  error?: Maybe<Scalars['String']>
  executionTime?: Maybe<Scalars['DateTime']>
  finishedWithError?: Maybe<Scalars['DateTime']>
  id: Scalars['String']
  modifiedAt: Scalars['DateTime']
  successfullyFinished?: Maybe<Scalars['DateTime']>
  tries: Scalars['Float']
}

export type Phrase = {
  __typename?: 'Phrase'
  articles?: Maybe<PhraseResultArticleContent>
  pages?: Maybe<PhraseResultPageContent>
}

export type PhraseResultArticleContent = {
  __typename?: 'PhraseResultArticleContent'
  nodes: Array<Article>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PhraseResultPageContent = {
  __typename?: 'PhraseResultPageContent'
  nodes: Array<Page>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PolisConversationBlock = {
  __typename?: 'PolisConversationBlock'
  blockStyle?: Maybe<Scalars['String']>
  conversationID: Scalars['String']
}

export type PollAnswerInVote = {
  __typename?: 'PollAnswerInVote'
  answer: Scalars['String']
  id: Scalars['ID']
}

export type PollAnswerWithVoteCount = {
  __typename?: 'PollAnswerWithVoteCount'
  answer?: Maybe<Scalars['String']>
  id: Scalars['ID']
  pollId: Scalars['ID']
  votes: Scalars['Int']
}

export type PollBlock = {
  __typename?: 'PollBlock'
  blockStyle?: Maybe<Scalars['String']>
  poll?: Maybe<FullPoll>
}

export type PollExternalVote = {
  __typename?: 'PollExternalVote'
  amount: Scalars['VoteValue']
  answerId: Scalars['ID']
  id: Scalars['ID']
}

export type PollExternalVoteSource = {
  __typename?: 'PollExternalVoteSource'
  id: Scalars['ID']
  source?: Maybe<Scalars['String']>
  voteAmounts: Array<PollExternalVote>
}

export type PollVote = {
  __typename?: 'PollVote'
  answer: PollAnswerInVote
  answerId: Scalars['ID']
  createdAt: Scalars['DateTime']
  disabled: Scalars['Boolean']
  fingerprint?: Maybe<Scalars['String']>
  id: Scalars['ID']
  pollId: Scalars['ID']
  userId?: Maybe<Scalars['ID']>
}

export type PollVoteFilter = {
  answerIds?: InputMaybe<Array<Scalars['String']>>
  fingerprint?: InputMaybe<Scalars['String']>
  from?: InputMaybe<Scalars['DateTime']>
  pollId?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['DateTime']>
  userId?: InputMaybe<Scalars['String']>
}

export enum PollVoteSort {
  CreatedAt = 'CreatedAt'
}

export type PublicProperties = {
  __typename?: 'PublicProperties'
  key: Scalars['String']
  value: Scalars['String']
}

export type PublicPropertiesInput = {
  key: Scalars['String']
  value: Scalars['String']
}

export type PublishedPageFilter = {
  tags?: InputMaybe<Array<Scalars['String']>>
}

export enum PublishedPageSort {
  PublishedAt = 'publishedAt',
  UpdatedAt = 'updatedAt'
}

export type Query = {
  __typename?: 'Query'
  _entities: Array<Maybe<_Entity>>
  _service: _Service
  /**
   *
   *       Returns all active subscribers.
   *       Includes subscribers with a cancelled but not run out subscription.
   *
   */
  activeSubscribers: Array<DashboardSubscription>
  /** This query takes either the ID, slug or token and returns the article. */
  article?: Maybe<Article>
  /** This query returns the articles. */
  articles: ArticleConnection
  /** This query returns the redirect Uri. */
  authProviders: Array<AuthProvider>
  /** This query takes either the ID or the slug and returns the author. */
  author?: Maybe<Author>
  /** This query is to get the authors. */
  authors: AuthorConnection
  banner: Banner
  banners: Array<Banner>
  /** Returns a list of block styles. */
  blockStyles: Array<BlockStyle>
  /** This query generates a challenge which can be used to access protected endpoints. */
  challenge: Challenge
  /** This mutation will check the invoice status and update with information from the paymentProvider */
  checkInvoiceStatus?: Maybe<Invoice>
  /** This query returns the comments of an item. */
  comments: Array<Comment>
  /**
   *
   *       Returns a consent by id.
   *
   */
  consent: Consent
  /**
   *
   *       Returns all consents.
   *
   */
  consents: Array<Consent>
  /** This query returns an event */
  event: Event
  /**
   *
   *       Returns a list of Importable Event Providers
   *
   */
  eventProviders: Array<Scalars['String']>
  /** This query returns a list of events */
  events?: Maybe<EventConnection>
  /**
   *
   *       Returns the expected revenue for the time period given.
   *       Excludes cancelled or manually set as paid invoices.
   *
   */
  expectedRevenue: Array<DashboardInvoice>
  /** Returns an image by id. */
  getImage: ImageV2
  /**
   *
   *       Returns the most viewed articles in descending order.
   *
   */
  hotAndTrending: Array<Article>
  /**
   *
   *       Returns a more detailed version of a single importable event, by id and source.
   *
   */
  importedEvent: EventFromSource
  /**
   *
   *       Returns a list of imported events from external sources, transformed to match our model.
   *
   */
  importedEvents: ImportedEventsDocument
  /**
   *
   *       Returns a list of external source ids of already imported events.
   *
   */
  importedEventsIds: Array<Scalars['String']>
  /** This query returns the invoices  of the authenticated user. */
  invoices: Array<Invoice>
  /** Return all mail templates */
  mailTemplates: Array<MailTemplateWithUrlAndStatusModel>
  /** This query returns the user. */
  me?: Maybe<User>
  /** This query returns a member plan. */
  memberPlan?: Maybe<MemberPlan>
  /** This query returns the member plans. */
  memberPlans: MemberPlanConnection
  /** This query takes either the ID or the key and returns the navigation. */
  navigation?: Maybe<Navigation>
  /** This query returns all navigations. */
  navigations?: Maybe<Array<Navigation>>
  /**
   *
   *       Returns all new deactivations in a given timeframe.
   *       This considers the time the deactivation was made, not when the subscription runs out.
   *
   */
  newDeactivations: Array<DashboardSubscription>
  /**
   *
   *       Returns all new subscribers in a given timeframe.
   *       Includes already deactivated ones.
   *
   */
  newSubscribers: Array<DashboardSubscription>
  /** This query takes either the ID, slug or token and returns the page. */
  page?: Maybe<Page>
  /** This query returns the pages. */
  pages: PageConnection
  /** Returns all payment methods */
  paymentMethods: Array<PaymentMethod>
  /** This query takes either the ID or the slug and returns the peer profile. */
  peer?: Maybe<Peer>
  /** This query takes either the peer ID or the peer slug and returns the article. */
  peerArticle?: Maybe<Article>
  /** This query returns the peer profile. */
  peerProfile: PeerProfile
  periodicJobLog: Array<PeriodicJob>
  /** This query performs a fulltext search on titles and blocks of articles/pages and returns all matching ones. */
  phrase?: Maybe<Phrase>
  /** This query returns a poll with all the needed data */
  poll: FullPoll
  /** Returns a paginated list of poll votes */
  pollVotes: PaginatedPollVotes
  primaryBanner: Banner
  provider: MailProviderModel
  ratingSystem: FullCommentRatingSystem
  /**
   *
   *       Returns all renewing subscribers in a given timeframe.
   *
   */
  renewingSubscribers: Array<DashboardSubscription>
  /**
   *
   *       Returns the revenue generated for the time period given.
   *       Only includes paid invoices that have not been manually paid.
   *
   */
  revenue: Array<DashboardInvoice>
  /**
   *
   *       Returns a single setting by name.
   *
   */
  setting: Setting
  /**
   *
   *       Returns a single setting by id.
   *
   */
  settingById: Setting
  /**
   *
   *       Returns all settings.
   *
   */
  settings: Array<Setting>
  stats?: Maybe<Stats>
  /** Returns all subscription flows */
  subscriptionFlows: Array<SubscriptionFlowModel>
  /** This query returns the subscriptions of the authenticated user. */
  subscriptions: Array<Subscription>
  /** Returns all mail flows */
  systemMails: Array<SystemMailModel>
  /** This query returns a list of tags */
  tags?: Maybe<TagConnection>
  /**
   *
   *       Returns a single userConsent by id.
   *
   */
  userConsent: UserConsent
  /**
   *
   *       Returns a list of userConsents. Possible to filter.
   *
   */
  userConsents: Array<UserConsent>
  /** This query returns the answerId of a poll if the user has already voted on it. */
  userPollVote?: Maybe<Scalars['ID']>
  versionInformation: VersionInformation
}

export type Query_EntitiesArgs = {
  representations: Array<Scalars['_Any']>
}

export type QueryArticleArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
  token?: InputMaybe<Scalars['String']>
}

export type QueryArticlesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<ArticleFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<ArticleSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryAuthProvidersArgs = {
  redirectUri?: InputMaybe<Scalars['String']>
}

export type QueryAuthorArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
}

export type QueryAuthorsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<AuthorFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<AuthorSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryBannerArgs = {
  id: Scalars['String']
}

export type QueryBannersArgs = {
  skip: Scalars['Int']
  take: Scalars['Int']
}

export type QueryCheckInvoiceStatusArgs = {
  id: Scalars['ID']
}

export type QueryCommentsArgs = {
  itemId: Scalars['ID']
  order?: InputMaybe<SortOrder>
  sort?: InputMaybe<CommentSort>
}

export type QueryConsentArgs = {
  id: Scalars['String']
}

export type QueryConsentsArgs = {
  filter?: InputMaybe<ConsentFilter>
}

export type QueryEventArgs = {
  id: Scalars['ID']
}

export type QueryEventsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<EventFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<EventSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryExpectedRevenueArgs = {
  end?: InputMaybe<Scalars['DateTime']>
  start: Scalars['DateTime']
}

export type QueryGetImageArgs = {
  id: Scalars['String']
}

export type QueryHotAndTrendingArgs = {
  start?: InputMaybe<Scalars['DateTime']>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryImportedEventArgs = {
  filter: SingleEventFilter
}

export type QueryImportedEventsArgs = {
  filter?: InputMaybe<ImportedEventFilter>
  order?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<ImportedEventSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryMemberPlanArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
}

export type QueryMemberPlansArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<MemberPlanFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<MemberPlanSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryNavigationArgs = {
  id?: InputMaybe<Scalars['ID']>
  key?: InputMaybe<Scalars['ID']>
}

export type QueryNewDeactivationsArgs = {
  end?: InputMaybe<Scalars['DateTime']>
  start: Scalars['DateTime']
}

export type QueryNewSubscribersArgs = {
  end?: InputMaybe<Scalars['DateTime']>
  start: Scalars['DateTime']
}

export type QueryPageArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
  token?: InputMaybe<Scalars['String']>
}

export type QueryPagesArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<PublishedPageFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<PublishedPageSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPeerArgs = {
  id?: InputMaybe<Scalars['ID']>
  slug?: InputMaybe<Scalars['Slug']>
}

export type QueryPeerArticleArgs = {
  id: Scalars['ID']
  peerID?: InputMaybe<Scalars['ID']>
  peerSlug?: InputMaybe<Scalars['Slug']>
}

export type QueryPeriodicJobLogArgs = {
  skip?: InputMaybe<Scalars['Int']>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPhraseArgs = {
  articleSort?: InputMaybe<ArticleSort>
  order?: InputMaybe<SortOrder>
  pageSort?: InputMaybe<PublishedPageSort>
  query: Scalars['String']
  skip?: InputMaybe<Scalars['Int']>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPollArgs = {
  id: Scalars['ID']
}

export type QueryPollVotesArgs = {
  cursorId?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<PollVoteFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<PollVoteSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryPrimaryBannerArgs = {
  documentId: Scalars['ID']
  documentType: BannerDocumentType
}

export type QueryRenewingSubscribersArgs = {
  end?: InputMaybe<Scalars['DateTime']>
  start: Scalars['DateTime']
}

export type QueryRevenueArgs = {
  end?: InputMaybe<Scalars['DateTime']>
  start: Scalars['DateTime']
}

export type QuerySettingArgs = {
  name: Scalars['String']
}

export type QuerySettingByIdArgs = {
  id: Scalars['String']
}

export type QuerySettingsArgs = {
  filter?: InputMaybe<SettingFilter>
}

export type QuerySubscriptionFlowsArgs = {
  defaultFlowOnly: Scalars['Boolean']
  memberPlanId?: InputMaybe<Scalars['String']>
}

export type QueryTagsArgs = {
  cursor?: InputMaybe<Scalars['ID']>
  filter?: InputMaybe<TagFilter>
  order?: InputMaybe<SortOrder>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<TagSort>
  take?: InputMaybe<Scalars['Int']>
}

export type QueryUserConsentArgs = {
  id: Scalars['String']
}

export type QueryUserConsentsArgs = {
  name?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
  value?: InputMaybe<Scalars['Boolean']>
}

export type QueryUserPollVoteArgs = {
  pollId: Scalars['ID']
}

export type QuoteBlock = {
  __typename?: 'QuoteBlock'
  author?: Maybe<Scalars['String']>
  blockStyle?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  quote?: Maybe<Scalars['String']>
}

export enum RatingSystemType {
  Star = 'star'
}

export type Registration = {
  __typename?: 'Registration'
  session: UserSession
  user: User
}

export type RegistrationAndPayment = {
  __typename?: 'RegistrationAndPayment'
  payment: Payment
  session: UserSession
  user: User
}

export type RichTextBlock = {
  __typename?: 'RichTextBlock'
  blockStyle?: Maybe<Scalars['String']>
  richText: Scalars['RichText']
}

export type SessionWithToken = {
  __typename?: 'SessionWithToken'
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
  token: Scalars['String']
  user: User
}

export type Setting = {
  __typename?: 'Setting'
  id: Scalars['ID']
  name: SettingName
  settingRestriction?: Maybe<SettingRestriction>
  value?: Maybe<Scalars['GraphQLSettingValueType']>
}

export type SettingFilter = {
  name?: InputMaybe<Scalars['String']>
}

export enum SettingName {
  AllowCommentEditing = 'ALLOW_COMMENT_EDITING',
  AllowGuestCommenting = 'ALLOW_GUEST_COMMENTING',
  AllowGuestCommentRating = 'ALLOW_GUEST_COMMENT_RATING',
  AllowGuestPollVoting = 'ALLOW_GUEST_POLL_VOTING',
  CommentCharLimit = 'COMMENT_CHAR_LIMIT',
  MailProviderName = 'MAIL_PROVIDER_NAME',
  MakeActiveSubscribersApiPublic = 'MAKE_ACTIVE_SUBSCRIBERS_API_PUBLIC',
  MakeExpectedRevenueApiPublic = 'MAKE_EXPECTED_REVENUE_API_PUBLIC',
  MakeNewDeactivationsApiPublic = 'MAKE_NEW_DEACTIVATIONS_API_PUBLIC',
  MakeNewSubscribersApiPublic = 'MAKE_NEW_SUBSCRIBERS_API_PUBLIC',
  MakeRenewingSubscribersApiPublic = 'MAKE_RENEWING_SUBSCRIBERS_API_PUBLIC',
  MakeRevenueApiPublic = 'MAKE_REVENUE_API_PUBLIC',
  PeeringTimeoutMs = 'PEERING_TIMEOUT_MS',
  ResetPasswordJwtExpiresMin = 'RESET_PASSWORD_JWT_EXPIRES_MIN',
  SendLoginJwtExpiresMin = 'SEND_LOGIN_JWT_EXPIRES_MIN'
}

export type SettingRestriction = {
  __typename?: 'SettingRestriction'
  allowedValues?: Maybe<AllowedSettingVals>
  inputLength?: Maybe<Scalars['Int']>
  maxValue?: Maybe<Scalars['Int']>
  minValue?: Maybe<Scalars['Int']>
}

export type SingleEventFilter = {
  id: Scalars['String']
  source: Scalars['String']
}

export enum SortOrder {
  Ascending = 'Ascending',
  Descending = 'Descending'
}

export type SoundCloudTrackBlock = {
  __typename?: 'SoundCloudTrackBlock'
  blockStyle?: Maybe<Scalars['String']>
  trackID: Scalars['String']
}

export type Stats = {
  __typename?: 'Stats'
  articlesCount: Scalars['Int']
  authorsCount: Scalars['Int']
  firstArticleDate?: Maybe<Scalars['DateTime']>
}

export type Subscription = {
  __typename?: 'Subscription'
  autoRenew: Scalars['Boolean']
  deactivation?: Maybe<SubscriptionDeactivation>
  extendable: Scalars['Boolean']
  id: Scalars['ID']
  memberPlan: MemberPlan
  monthlyAmount: Scalars['Int']
  paidUntil?: Maybe<Scalars['DateTime']>
  paymentMethod: PaymentMethod
  paymentPeriodicity: PaymentPeriodicity
  properties: Array<PublicProperties>
  startsAt: Scalars['DateTime']
  url: Scalars['String']
}

export type SubscriptionDeactivation = {
  __typename?: 'SubscriptionDeactivation'
  date: Scalars['DateTime']
  reason: SubscriptionDeactivationReason
}

export enum SubscriptionDeactivationReason {
  InvoiceNotPaid = 'invoiceNotPaid',
  None = 'none',
  UserSelfDeactivated = 'userSelfDeactivated'
}

export enum SubscriptionEvent {
  Custom = 'CUSTOM',
  DeactivationByUser = 'DEACTIVATION_BY_USER',
  DeactivationUnpaid = 'DEACTIVATION_UNPAID',
  InvoiceCreation = 'INVOICE_CREATION',
  RenewalFailed = 'RENEWAL_FAILED',
  RenewalSuccess = 'RENEWAL_SUCCESS',
  Subscribe = 'SUBSCRIBE'
}

export type SubscriptionFlowModel = {
  __typename?: 'SubscriptionFlowModel'
  autoRenewal: Array<Scalars['Boolean']>
  default: Scalars['Boolean']
  id: Scalars['String']
  intervals: Array<SubscriptionInterval>
  memberPlan?: Maybe<MemberPlan>
  numberOfSubscriptions: Scalars['Int']
  paymentMethods: Array<PaymentMethod>
  periodicities: Array<PaymentPeriodicity>
}

export type SubscriptionInput = {
  autoRenew: Scalars['Boolean']
  id: Scalars['ID']
  memberPlanID: Scalars['String']
  monthlyAmount: Scalars['Int']
  paymentMethodID: Scalars['String']
  paymentPeriodicity: PaymentPeriodicity
}

export type SubscriptionInterval = {
  __typename?: 'SubscriptionInterval'
  daysAwayFromEnding?: Maybe<Scalars['Int']>
  event: SubscriptionEvent
  id: Scalars['String']
  mailTemplate?: Maybe<MailTemplateRef>
}

export type SystemMailModel = {
  __typename?: 'SystemMailModel'
  event: UserEvent
  mailTemplate?: Maybe<MailTemplateRef>
}

export type Tag = {
  __typename?: 'Tag'
  id: Scalars['ID']
  main: Scalars['Boolean']
  tag?: Maybe<Scalars['String']>
  type?: Maybe<TagType>
  url: Scalars['String']
}

export type TagConnection = {
  __typename?: 'TagConnection'
  nodes: Array<Tag>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TagFilter = {
  tag?: InputMaybe<Scalars['String']>
  type?: InputMaybe<TagType>
}

export enum TagSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Tag = 'Tag'
}

export enum TagType {
  Article = 'Article',
  Author = 'Author',
  Comment = 'Comment',
  Event = 'Event',
  Page = 'Page'
}

export type Teaser = ArticleTeaser | CustomTeaser | EventTeaser | PageTeaser | PeerArticleTeaser

export type TeaserGridBlock = {
  __typename?: 'TeaserGridBlock'
  blockStyle?: Maybe<Scalars['String']>
  numColumns: Scalars['Int']
  teasers: Array<Maybe<Teaser>>
}

export type TeaserGridFlexBlock = {
  __typename?: 'TeaserGridFlexBlock'
  blockStyle?: Maybe<Scalars['String']>
  flexTeasers: Array<FlexTeaser>
}

export type TeaserListBlock = {
  __typename?: 'TeaserListBlock'
  blockStyle?: Maybe<Scalars['String']>
  filter: TeaserListBlockFilter
  skip?: Maybe<Scalars['Int']>
  take?: Maybe<Scalars['Int']>
  teaserType?: Maybe<TeaserType>
  teasers: Array<Maybe<Teaser>>
  title?: Maybe<Scalars['String']>
}

export type TeaserListBlockFilter = {
  __typename?: 'TeaserListBlockFilter'
  tagObjects: Array<Tag>
  tags?: Maybe<Array<Scalars['ID']>>
}

export enum TeaserStyle {
  Default = 'default',
  Light = 'light',
  Text = 'text'
}

export enum TeaserType {
  Article = 'article',
  Custom = 'custom',
  Event = 'event',
  Page = 'page',
  PeerArticle = 'peerArticle'
}

export type TikTokVideoBlock = {
  __typename?: 'TikTokVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  userID: Scalars['String']
  videoID: Scalars['String']
}

export type TitleBlock = {
  __typename?: 'TitleBlock'
  blockStyle?: Maybe<Scalars['String']>
  lead?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type TrackingPixel = {
  __typename?: 'TrackingPixel'
  id: Scalars['ID']
  trackingPixelMethod: TrackingPixelMethod
  uri?: Maybe<Scalars['String']>
}

export type TrackingPixelMethod = {
  __typename?: 'TrackingPixelMethod'
  trackingPixelProviderType: TrackingPixelProviderType
}

export enum TrackingPixelProviderType {
  Prolitteris = 'prolitteris'
}

export type TwitterTweetBlock = {
  __typename?: 'TwitterTweetBlock'
  blockStyle?: Maybe<Scalars['String']>
  tweetID: Scalars['String']
  userID: Scalars['String']
}

export type UpdateBannerInput = {
  actions?: InputMaybe<Array<CreateBannerActionInput>>
  active: Scalars['Boolean']
  cta?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  imageId?: InputMaybe<Scalars['String']>
  showOnArticles: Scalars['Boolean']
  showOnPages?: InputMaybe<Array<PageModelInput>>
  text: Scalars['String']
  title: Scalars['String']
}

export type UploadImageInput = {
  description?: InputMaybe<Scalars['String']>
  file: Scalars['Upload']
  filename?: InputMaybe<Scalars['String']>
  focalPoint?: InputMaybe<InputPoint>
  license?: InputMaybe<Scalars['String']>
  link?: InputMaybe<Scalars['String']>
  source?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
  title?: InputMaybe<Scalars['String']>
}

export type User = {
  __typename?: 'User'
  address?: Maybe<UserAddress>
  birthday?: Maybe<Scalars['DateTime']>
  email: Scalars['String']
  emailVerifiedAt?: Maybe<Scalars['DateTime']>
  firstName?: Maybe<Scalars['String']>
  flair?: Maybe<Scalars['String']>
  id: Scalars['String']
  image?: Maybe<Image>
  lastLogin?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  oauth2Accounts: Array<OAuth2Account>
  paymentProviderCustomers: Array<PaymentProviderCustomer>
  properties: Array<PublicProperties>
  roleIDs?: Maybe<Array<Scalars['String']>>
  userImageID?: Maybe<Scalars['String']>
}

export type UserAddress = {
  __typename?: 'UserAddress'
  city?: Maybe<Scalars['String']>
  company?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
  streetAddress2?: Maybe<Scalars['String']>
  zipCode?: Maybe<Scalars['String']>
}

export type UserAddressInput = {
  city?: InputMaybe<Scalars['String']>
  company?: InputMaybe<Scalars['String']>
  country?: InputMaybe<Scalars['String']>
  streetAddress?: InputMaybe<Scalars['String']>
  streetAddress2?: InputMaybe<Scalars['String']>
  zipCode?: InputMaybe<Scalars['String']>
}

export type UserConsent = {
  __typename?: 'UserConsent'
  consent: Consent
  createdAt: Scalars['DateTime']
  id: Scalars['String']
  modifiedAt: Scalars['DateTime']
  user: User
  value: Scalars['Boolean']
}

export enum UserEvent {
  AccountCreation = 'ACCOUNT_CREATION',
  LoginLink = 'LOGIN_LINK',
  PasswordReset = 'PASSWORD_RESET',
  TestMail = 'TEST_MAIL'
}

export type UserInput = {
  address?: InputMaybe<UserAddressInput>
  birthday?: InputMaybe<Scalars['DateTime']>
  email: Scalars['String']
  firstName?: InputMaybe<Scalars['String']>
  flair?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  uploadImageInput?: InputMaybe<UploadImageInput>
}

export type UserSession = {
  __typename?: 'UserSession'
  createdAt: Scalars['DateTime']
  expiresAt: Scalars['DateTime']
  token: Scalars['String']
}

export type VersionInformation = {
  __typename?: 'VersionInformation'
  version: Scalars['String']
}

export type VimeoVideoBlock = {
  __typename?: 'VimeoVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  videoID: Scalars['String']
}

export type YouTubeVideoBlock = {
  __typename?: 'YouTubeVideoBlock'
  blockStyle?: Maybe<Scalars['String']>
  videoID: Scalars['String']
}

export type _Entity =
  | Article
  | Event
  | Image
  | MemberPlan
  | Page
  | PaymentMethod
  | PollVote
  | Tag
  | User

export type _Service = {
  __typename?: '_Service'
  sdl?: Maybe<Scalars['String']>
}

export type OverriddenRating = {
  __typename?: 'overriddenRating'
  answerId: Scalars['ID']
  value?: Maybe<Scalars['Int']>
}

export type ArticleRefFragment = {__typename?: 'Article'; id: string}

export type ArticleQueryVariables = Exact<{
  slug: Scalars['Slug']
}>

export type ArticleQuery = {
  __typename?: 'Query'
  article?: {
    __typename?: 'Article'
    id: string
    url: string
    authors: Array<{__typename?: 'Author'; id: string}>
    tags: Array<{__typename?: 'Tag'; id: string}>
    blocks: Array<
      | {__typename: 'BildwurfAdBlock'}
      | {__typename: 'CommentBlock'}
      | {__typename: 'EmbedBlock'}
      | {__typename: 'EventBlock'}
      | {__typename: 'FacebookPostBlock'}
      | {__typename: 'FacebookVideoBlock'}
      | {__typename: 'HTMLBlock'}
      | {__typename: 'ImageBlock'}
      | {__typename: 'ImageGalleryBlock'}
      | {__typename: 'InstagramPostBlock'}
      | {__typename: 'LinkPageBreakBlock'}
      | {__typename: 'ListicleBlock'}
      | {__typename: 'PolisConversationBlock'}
      | {__typename: 'PollBlock'}
      | {__typename: 'QuoteBlock'}
      | {__typename: 'RichTextBlock'; richText: Node[]}
      | {__typename: 'SoundCloudTrackBlock'}
      | {__typename: 'TeaserGridBlock'}
      | {__typename: 'TeaserGridFlexBlock'}
      | {__typename: 'TeaserListBlock'}
      | {__typename: 'TikTokVideoBlock'}
      | {__typename: 'TitleBlock'}
      | {__typename: 'TwitterTweetBlock'}
      | {__typename: 'VimeoVideoBlock'}
      | {__typename: 'YouTubeVideoBlock'}
    >
  } | null
}

export type FullBlockStyleFragment = {
  __typename?: 'BlockStyle'
  id: string
  createdAt: string
  modifiedAt: string
  name: string
  blocks: Array<BlockType>
}

export type BlockStylesQueryVariables = Exact<{[key: string]: never}>

export type BlockStylesQuery = {
  __typename?: 'Query'
  blockStyles: Array<{
    __typename?: 'BlockStyle'
    id: string
    createdAt: string
    modifiedAt: string
    name: string
    blocks: Array<BlockType>
  }>
}

export const ArticleRef = gql`
  fragment ArticleRef on Article {
    id
  }
`
export const FullBlockStyle = gql`
  fragment FullBlockStyle on BlockStyle {
    id
    createdAt
    modifiedAt
    name
    blocks
  }
`
export const Article = gql`
  query Article($slug: Slug!) {
    article(slug: $slug) {
      id
      url
      authors {
        id
      }
      tags {
        id
      }
      blocks {
        __typename
        ... on RichTextBlock {
          richText
        }
      }
    }
  }
`
export const BlockStyles = gql`
  query BlockStyles {
    blockStyles {
      ...FullBlockStyle
    }
  }
  ${FullBlockStyle}
`
