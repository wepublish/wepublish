// THIS FILE IS AUTOGENERATED, EDIT WITH CAUTION
import {Descendant} from 'slate'
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A hexadecimal color value (#RRGGBB) */
  Color: string;
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: string;
  /** Setting Value */
  GraphQLSettingValueType: any;
  RichText: Descendant[];
  Slug: string;
  /** The `Upload` scalar type represents a file upload. */
  Upload: File;
  /** A valid vote value */
  VoteValue: any;
};

export type Action = ArticleCreatedAction | AuthorCreatedAction | CommentCreatedAction | EventCreatedAction | PageCreatedAction | PollStartedAction | SubscriptionCreatedAction | UserCreatedAction;

export enum ActionType {
  ArticleCreated = 'ArticleCreated',
  AuthorCreated = 'AuthorCreated',
  CommentCreated = 'CommentCreated',
  EventCreated = 'EventCreated',
  PageCreated = 'PageCreated',
  PollStarted = 'PollStarted',
  SubscriptionCreated = 'SubscriptionCreated',
  UserCreated = 'UserCreated'
}

export type AllowedSettingVals = {
  __typename?: 'AllowedSettingVals';
  boolChoice?: Maybe<Scalars['Boolean']>;
  stringChoice?: Maybe<Array<Scalars['String']>>;
};

export type Article = HasOptionalPaywall & HasOptionalPeerLc & {
  __typename?: 'Article';
  createdAt: Scalars['DateTime'];
  disableComments: Scalars['Boolean'];
  draft?: Maybe<ArticleRevision>;
  hidden: Scalars['Boolean'];
  id: Scalars['String'];
  latest: ArticleRevision;
  likes: Scalars['Int'];
  modifiedAt: Scalars['DateTime'];
  paywall?: Maybe<Paywall>;
  paywallId?: Maybe<Scalars['String']>;
  peer?: Maybe<Peer>;
  peerArticleId?: Maybe<Scalars['String']>;
  peerId?: Maybe<Scalars['String']>;
  pending?: Maybe<ArticleRevision>;
  previewUrl: Scalars['String'];
  published?: Maybe<ArticleRevision>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  shared: Scalars['Boolean'];
  slug?: Maybe<Scalars['String']>;
  tags: Array<Tag>;
  trackingPixels: Array<TrackingPixel>;
  url: Scalars['String'];
};

export type ArticleCreatedAction = BaseAction & HasArticleLc & {
  __typename?: 'ArticleCreatedAction';
  actionType: ActionType;
  article: Article;
  articleId: Scalars['String'];
  date: Scalars['DateTime'];
};

export type ArticleFilter = {
  authors?: InputMaybe<Array<Scalars['String']>>;
  body?: InputMaybe<Scalars['String']>;
  draft?: InputMaybe<Scalars['Boolean']>;
  excludeIds?: InputMaybe<Array<Scalars['String']>>;
  ids?: InputMaybe<Array<Scalars['String']>>;
  includeHidden?: InputMaybe<Scalars['Boolean']>;
  lead?: InputMaybe<Scalars['String']>;
  peerId?: InputMaybe<Scalars['String']>;
  pending?: InputMaybe<Scalars['Boolean']>;
  preTitle?: InputMaybe<Scalars['String']>;
  publicationDateFrom?: InputMaybe<DateFilter>;
  publicationDateTo?: InputMaybe<DateFilter>;
  published?: InputMaybe<Scalars['Boolean']>;
  shared?: InputMaybe<Scalars['Boolean']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type ArticleNavigationLink = BaseNavigationLink & HasArticle & {
  __typename?: 'ArticleNavigationLink';
  article: Article;
  articleID: Scalars['String'];
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  label: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  type: NavigationLinkType;
};

export type ArticleRevision = HasBlockContent & {
  __typename?: 'ArticleRevision';
  authors: Array<Author>;
  blocks: Array<BlockContent>;
  breaking: Scalars['Boolean'];
  canonicalUrl?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  hideAuthor: Scalars['Boolean'];
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  properties: Array<Property>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  seoTitle?: Maybe<Scalars['String']>;
  socialMediaAuthors: Array<Author>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaImage?: Maybe<Image>;
  socialMediaImageID?: Maybe<Scalars['String']>;
  socialMediaTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum ArticleSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  PublishedAt = 'PublishedAt'
}

export type ArticleTeaser = BaseTeaser & HasImage & HasOptionalArticle & {
  __typename?: 'ArticleTeaser';
  article?: Maybe<Article>;
  articleID?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type ArticleTeaserInput = {
  articleID?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type Author = HasImage & HasOptionalPeerLc & {
  __typename?: 'Author';
  bio?: Maybe<Scalars['RichText']>;
  createdAt: Scalars['DateTime'];
  hideOnArticle: Scalars['Boolean'];
  hideOnTeam: Scalars['Boolean'];
  hideOnTeaser: Scalars['Boolean'];
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  links?: Maybe<Array<AuthorLink>>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  peer?: Maybe<Peer>;
  peerId?: Maybe<Scalars['String']>;
  slug: Scalars['Slug'];
  tags: Array<Tag>;
  url: Scalars['String'];
};

export type AuthorCreatedAction = BaseAction & HasAuthor & {
  __typename?: 'AuthorCreatedAction';
  actionType: ActionType;
  author: Author;
  authorId: Scalars['String'];
  date: Scalars['DateTime'];
};

export type AuthorFilter = {
  hideOnTeam?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
};

export type AuthorLink = {
  __typename?: 'AuthorLink';
  title: Scalars['String'];
  url: Scalars['String'];
};

/** Sorting options for authors */
export enum AuthorSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Name = 'Name'
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod';
  forceAutoRenewal: Scalars['Boolean'];
  paymentMethods: Array<PaymentMethod>;
  paymentPeriodicities: Array<PaymentPeriodicity>;
};

export type Banner = {
  __typename?: 'Banner';
  actions?: Maybe<Array<BannerAction>>;
  active: Scalars['Boolean'];
  cta?: Maybe<Scalars['String']>;
  delay: Scalars['Int'];
  html?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageId?: Maybe<Scalars['String']>;
  showForLoginStatus: LoginStatus;
  showOnArticles: Scalars['Boolean'];
  showOnPages?: Maybe<Array<PageModel>>;
  text: Scalars['String'];
  title: Scalars['String'];
};

export type BannerAction = {
  __typename?: 'BannerAction';
  id: Scalars['String'];
  label: Scalars['String'];
  role: BannerActionRole;
  style: Scalars['String'];
  url: Scalars['String'];
};

export enum BannerActionRole {
  Cancel = 'CANCEL',
  Other = 'OTHER',
  Primary = 'PRIMARY'
}

export enum BannerDocumentType {
  Article = 'ARTICLE',
  Page = 'PAGE'
}

export type BaseAction = {
  actionType: ActionType;
  date: Scalars['DateTime'];
};

export type BaseBlock = {
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type BaseNavigationLink = {
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  label: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  type: NavigationLinkType;
};

export type BaseTeaser = {
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type BildwurfAdBlock = BaseBlock & {
  __typename?: 'BildwurfAdBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
  zoneID?: Maybe<Scalars['String']>;
};

export type BildwurfAdBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  zoneID?: InputMaybe<Scalars['String']>;
};

export type BlockContent = BildwurfAdBlock | BreakBlock | CommentBlock | CrowdfundingBlock | EventBlock | FacebookPostBlock | FacebookVideoBlock | HtmlBlock | IFrameBlock | ImageBlock | ImageGalleryBlock | InstagramPostBlock | ListicleBlock | PolisConversationBlock | PollBlock | QuoteBlock | RichTextBlock | SoundCloudTrackBlock | SubscribeBlock | TeaserGridBlock | TeaserGridFlexBlock | TeaserListBlock | TeaserSlotsBlock | TikTokVideoBlock | TitleBlock | TwitterTweetBlock | UnknownBlock | VimeoVideoBlock | YouTubeVideoBlock;

export type BlockContentInput = {
  bildwurfAd?: InputMaybe<BildwurfAdBlockInput>;
  comment?: InputMaybe<CommentBlockInput>;
  crowdfunding?: InputMaybe<CrowdfundingBlockInput>;
  embed?: InputMaybe<IFrameBlockInput>;
  event?: InputMaybe<EventBlockInput>;
  facebookPost?: InputMaybe<FacebookPostBlockInput>;
  facebookVideo?: InputMaybe<FacebookVideoBlockInput>;
  html?: InputMaybe<HtmlBlockInput>;
  image?: InputMaybe<ImageBlockInput>;
  imageGallery?: InputMaybe<ImageGalleryBlockInput>;
  instagramPost?: InputMaybe<InstagramPostBlockInput>;
  linkPageBreak?: InputMaybe<BreakBlockInput>;
  listicle?: InputMaybe<ListicleBlockInput>;
  polisConversation?: InputMaybe<PolisConversationBlockInput>;
  poll?: InputMaybe<PollBlockInput>;
  quote?: InputMaybe<QuoteBlockInput>;
  richText?: InputMaybe<RichTextBlockInput>;
  soundCloudTrack?: InputMaybe<SoundCloudTrackBlockInput>;
  subscribe?: InputMaybe<SubscribeBlockInput>;
  teaserGrid?: InputMaybe<TeaserGridBlockInput>;
  teaserGridFlex?: InputMaybe<TeaserGridFlexBlockInput>;
  teaserList?: InputMaybe<TeaserListBlockInput>;
  teaserSlots?: InputMaybe<TeaserSlotsBlockInput>;
  tikTokVideo?: InputMaybe<TikTokVideoBlockInput>;
  title?: InputMaybe<TitleBlockInput>;
  twitterTweet?: InputMaybe<TwitterTweetBlockInput>;
  vimeoVideo?: InputMaybe<VimeoVideoBlockInput>;
  youTubeVideo?: InputMaybe<YouTubeVideoBlockInput>;
};

export type BlockStyle = {
  __typename?: 'BlockStyle';
  blocks: Array<EditorBlockType>;
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
};

export enum BlockType {
  BildwurfAd = 'BildwurfAd',
  Comment = 'Comment',
  Crowdfunding = 'Crowdfunding',
  Embed = 'Embed',
  Event = 'Event',
  FacebookPost = 'FacebookPost',
  FacebookVideo = 'FacebookVideo',
  Html = 'HTML',
  Image = 'Image',
  ImageGallery = 'ImageGallery',
  InstagramPost = 'InstagramPost',
  LinkPageBreak = 'LinkPageBreak',
  Listicle = 'Listicle',
  PolisConversation = 'PolisConversation',
  Poll = 'Poll',
  Quote = 'Quote',
  RichText = 'RichText',
  SoundCloudTrack = 'SoundCloudTrack',
  Subscribe = 'Subscribe',
  TeaserGrid = 'TeaserGrid',
  TeaserGridFlex = 'TeaserGridFlex',
  TeaserList = 'TeaserList',
  TeaserSlots = 'TeaserSlots',
  TikTokVideo = 'TikTokVideo',
  Title = 'Title',
  TwitterTweet = 'TwitterTweet',
  VimeoVideo = 'VimeoVideo',
  YouTubeVideo = 'YouTubeVideo'
}

export type BreakBlock = BaseBlock & HasImage & {
  __typename?: 'BreakBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  hideButton?: Maybe<Scalars['Boolean']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  linkTarget?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  linkURL?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  text?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type BreakBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  hideButton?: InputMaybe<Scalars['Boolean']>;
  imageID?: InputMaybe<Scalars['String']>;
  linkTarget?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
  linkURL?: InputMaybe<Scalars['String']>;
  richText: Scalars['RichText'];
  text?: InputMaybe<Scalars['String']>;
};

export type CalculatedRating = {
  __typename?: 'CalculatedRating';
  answer: CommentRatingSystemAnswer;
  count: Scalars['Int'];
  mean: Scalars['Float'];
  total: Scalars['Int'];
};

export enum CaptchaType {
  Algebraic = 'Algebraic',
  CfTurnstile = 'CfTurnstile'
}

export type Challenge = {
  __typename?: 'Challenge';
  challenge?: Maybe<Scalars['String']>;
  challengeID?: Maybe<Scalars['String']>;
  type: CaptchaType;
  validUntil?: Maybe<Scalars['Date']>;
};

export type ChallengeInput = {
  challengeID: Scalars['String'];
  challengeSolution: Scalars['String'];
};

export type Comment = {
  __typename?: 'Comment';
  authorType: CommentAuthorType;
  calculatedRatings: Array<CalculatedRating>;
  children: Array<Comment>;
  createdAt: Scalars['DateTime'];
  featured?: Maybe<Scalars['Boolean']>;
  guestUserImage?: Maybe<Image>;
  guestUsername?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  itemID: Scalars['String'];
  itemType: CommentItemType;
  lead?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  overriddenRatings: Array<OverriddenRating>;
  parentComment?: Maybe<Comment>;
  parentID?: Maybe<Scalars['String']>;
  rejectionReason?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  state: CommentState;
  tags: Array<Tag>;
  text?: Maybe<Scalars['RichText']>;
  title?: Maybe<Scalars['String']>;
  url: Scalars['String'];
  user?: Maybe<User>;
  userRatings: Array<CommentRating>;
};

export enum CommentAuthorType {
  Author = 'author',
  GuestUser = 'guestUser',
  Team = 'team',
  VerifiedUser = 'verifiedUser'
}

export type CommentBlock = BaseBlock & {
  __typename?: 'CommentBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  comments: Array<Comment>;
  filter: CommentBlockFilter;
  type: BlockType;
};

export type CommentBlockFilter = {
  __typename?: 'CommentBlockFilter';
  comments?: Maybe<Array<Scalars['String']>>;
  item?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type CommentBlockFilterInput = {
  comments?: InputMaybe<Array<Scalars['String']>>;
  item?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export type CommentBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  filter: CommentBlockFilterInput;
};

export type CommentCreatedAction = BaseAction & HasComment & {
  __typename?: 'CommentCreatedAction';
  actionType: ActionType;
  comment: Comment;
  commentId: Scalars['String'];
  date: Scalars['DateTime'];
};

export type CommentInput = {
  challenge?: InputMaybe<ChallengeInput>;
  guestUsername?: InputMaybe<Scalars['String']>;
  itemID: Scalars['String'];
  itemType: CommentItemType;
  parentID?: InputMaybe<Scalars['String']>;
  text: Scalars['RichText'];
  title?: InputMaybe<Scalars['String']>;
};

export enum CommentItemType {
  Article = 'article',
  Page = 'page'
}

export type CommentRating = {
  __typename?: 'CommentRating';
  answer: CommentRatingSystemAnswer;
  commentId: Scalars['String'];
  createdAt: Scalars['DateTime'];
  disabled?: Maybe<Scalars['Boolean']>;
  fingerprint?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  userId?: Maybe<Scalars['String']>;
  value: Scalars['Int'];
};

export type CommentRatingSystemAnswer = {
  __typename?: 'CommentRatingSystemAnswer';
  answer?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  ratingSystemId: Scalars['String'];
  type: RatingSystemType;
};

export enum CommentSort {
  Rating = 'rating'
}

export enum CommentState {
  Approved = 'approved',
  PendingApproval = 'pendingApproval',
  PendingUserChanges = 'pendingUserChanges',
  Rejected = 'rejected'
}

export type CommentUpdateInput = {
  id: Scalars['String'];
  lead?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['RichText']>;
  title?: InputMaybe<Scalars['String']>;
};

export type Consent = {
  __typename?: 'Consent';
  createdAt: Scalars['DateTime'];
  defaultValue: Scalars['Boolean'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type ConsentFilter = {
  defaultValue?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};

export type CreateBannerActionInput = {
  label: Scalars['String'];
  role: BannerActionRole;
  style: Scalars['String'];
  url: Scalars['String'];
};

export type CreateBannerInput = {
  actions?: InputMaybe<Array<CreateBannerActionInput>>;
  active: Scalars['Boolean'];
  cta?: InputMaybe<Scalars['String']>;
  delay: Scalars['Int'];
  html?: InputMaybe<Scalars['String']>;
  imageId?: InputMaybe<Scalars['String']>;
  showForLoginStatus: LoginStatus;
  showOnArticles: Scalars['Boolean'];
  showOnPages?: InputMaybe<Array<PageModelInput>>;
  text: Scalars['String'];
  title: Scalars['String'];
};

export type CreateCrowdfundingGoalInput = {
  amount: Scalars['Float'];
  description?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
};

export type CreateCrowdfundingInput = {
  additionalRevenue?: InputMaybe<Scalars['Float']>;
  countSubscriptionsFrom?: InputMaybe<Scalars['DateTime']>;
  countSubscriptionsUntil?: InputMaybe<Scalars['DateTime']>;
  goals?: InputMaybe<Array<CreateCrowdfundingGoalInput>>;
  memberPlans?: InputMaybe<Array<CreateCrowdfundingMemberPlan>>;
  name: Scalars['String'];
};

export type CreateCrowdfundingMemberPlan = {
  id: Scalars['String'];
};

export type Crowdfunding = {
  __typename?: 'Crowdfunding';
  additionalRevenue?: Maybe<Scalars['Float']>;
  countSubscriptionsFrom?: Maybe<Scalars['DateTime']>;
  countSubscriptionsUntil?: Maybe<Scalars['DateTime']>;
  createdAt: Scalars['DateTime'];
  goals: Array<CrowdfundingGoal>;
  id: Scalars['String'];
  memberPlans: Array<CrowdfundingMemberPlan>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  revenue?: Maybe<Scalars['Float']>;
};

export type CrowdfundingBlock = BaseBlock & HasOptionalCrowdfunding & {
  __typename?: 'CrowdfundingBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  crowdfunding?: Maybe<CrowdfundingWithActiveGoal>;
  crowdfundingId?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type CrowdfundingBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  crowdfundingId?: InputMaybe<Scalars['String']>;
};

export type CrowdfundingGoal = {
  __typename?: 'CrowdfundingGoal';
  amount: Scalars['Float'];
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  title: Scalars['String'];
};

export type CrowdfundingGoalWithProgress = {
  __typename?: 'CrowdfundingGoalWithProgress';
  amount: Scalars['Float'];
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  progress?: Maybe<Scalars['Float']>;
  title: Scalars['String'];
};

export type CrowdfundingMemberPlan = {
  __typename?: 'CrowdfundingMemberPlan';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type CrowdfundingWithActiveGoal = {
  __typename?: 'CrowdfundingWithActiveGoal';
  activeCrowdfundingGoal?: Maybe<CrowdfundingGoalWithProgress>;
  additionalRevenue?: Maybe<Scalars['Float']>;
  countSubscriptionsFrom?: Maybe<Scalars['DateTime']>;
  countSubscriptionsUntil?: Maybe<Scalars['DateTime']>;
  createdAt: Scalars['DateTime'];
  goals: Array<CrowdfundingGoal>;
  id: Scalars['String'];
  memberPlans: Array<CrowdfundingMemberPlan>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  revenue?: Maybe<Scalars['Float']>;
};

export enum Currency {
  Chf = 'CHF',
  Eur = 'EUR'
}

export type CustomTeaser = BaseTeaser & HasImage & {
  __typename?: 'CustomTeaser';
  contentUrl?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<NonDbProperty>>;
  title?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type CustomTeaserInput = {
  contentUrl?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  properties?: InputMaybe<Array<PropertyInput>>;
  title?: InputMaybe<Scalars['String']>;
};

export type DailySubscriptionStats = {
  __typename?: 'DailySubscriptionStats';
  createdSubscriptionCount: Scalars['Int'];
  createdSubscriptionUsers: Array<DailySubscriptionStatsUser>;
  date: Scalars['String'];
  deactivatedSubscriptionCount: Scalars['Int'];
  deactivatedSubscriptionUsers: Array<DailySubscriptionStatsUser>;
  overdueSubscriptionCount: Scalars['Int'];
  overdueSubscriptionUsers: Array<DailySubscriptionStatsUser>;
  renewedSubscriptionCount: Scalars['Int'];
  renewedSubscriptionUsers: Array<DailySubscriptionStatsUser>;
  replacedSubscriptionCount: Scalars['Int'];
  replacedSubscriptionUsers: Array<DailySubscriptionStatsUser>;
  totalActiveSubscriptionCount: Scalars['Int'];
};

export type DailySubscriptionStatsUser = {
  __typename?: 'DailySubscriptionStatsUser';
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  name: Scalars['String'];
};

export type DashboardInvoice = {
  __typename?: 'DashboardInvoice';
  amount: Scalars['Int'];
  dueAt: Scalars['DateTime'];
  memberPlan?: Maybe<Scalars['String']>;
  paidAt?: Maybe<Scalars['DateTime']>;
};

export type DashboardSubscription = {
  __typename?: 'DashboardSubscription';
  deactivationDate?: Maybe<Scalars['DateTime']>;
  endsAt?: Maybe<Scalars['DateTime']>;
  memberPlan: Scalars['String'];
  monthlyAmount: Scalars['Int'];
  paymentPeriodicity: PaymentPeriodicity;
  reasonForDeactivation?: Maybe<SubscriptionDeactivationReason>;
  renewsAt?: Maybe<Scalars['DateTime']>;
  startsAt: Scalars['DateTime'];
};

export type DateFilter = {
  comparison: DateFilterComparison;
  date?: InputMaybe<Scalars['DateTime']>;
};

export enum DateFilterComparison {
  Equal = 'Equal',
  GreaterThan = 'GreaterThan',
  GreaterThanOrEqual = 'GreaterThanOrEqual',
  LowerThan = 'LowerThan',
  LowerThanOrEqual = 'LowerThanOrEqual'
}

export type DeletePollVotesResult = {
  __typename?: 'DeletePollVotesResult';
  count: Scalars['Int'];
};

export enum EditorBlockType {
  Comment = 'Comment',
  Crowdfunding = 'Crowdfunding',
  Embed = 'Embed',
  Event = 'Event',
  Html = 'HTML',
  Image = 'Image',
  ImageGallery = 'ImageGallery',
  LinkPageBreak = 'LinkPageBreak',
  Listicle = 'Listicle',
  Poll = 'Poll',
  Quote = 'Quote',
  RichText = 'RichText',
  Subscribe = 'Subscribe',
  TeaserGrid1 = 'TeaserGrid1',
  TeaserGrid6 = 'TeaserGrid6',
  TeaserGridFlex = 'TeaserGridFlex',
  TeaserList = 'TeaserList',
  TeaserSlots = 'TeaserSlots',
  Title = 'Title'
}

export type Event = {
  __typename?: 'Event';
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['RichText']>;
  endsAt?: Maybe<Scalars['DateTime']>;
  externalSourceId?: Maybe<Scalars['String']>;
  externalSourceName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageId?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  startsAt: Scalars['DateTime'];
  status: EventStatus;
  tags?: Maybe<Array<Tag>>;
  url: Scalars['String'];
};

export type EventBlock = BaseBlock & {
  __typename?: 'EventBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  events: Array<Event>;
  filter: EventBlockFilter;
  type: BlockType;
};

export type EventBlockFilter = {
  __typename?: 'EventBlockFilter';
  events?: Maybe<Array<Scalars['String']>>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type EventBlockFilterInput = {
  events?: InputMaybe<Array<Scalars['String']>>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export type EventBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  filter: EventBlockFilterInput;
};

export type EventCreatedAction = BaseAction & HasEventLc & {
  __typename?: 'EventCreatedAction';
  actionType: ActionType;
  date: Scalars['DateTime'];
  event: Event;
  eventId: Scalars['String'];
};

export type EventFilter = {
  from?: InputMaybe<Scalars['DateTime']>;
  location?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  to?: InputMaybe<Scalars['DateTime']>;
  upcomingOnly?: InputMaybe<Scalars['Boolean']>;
};

export type EventFromSource = {
  __typename?: 'EventFromSource';
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['RichText']>;
  endsAt?: Maybe<Scalars['DateTime']>;
  externalSourceId?: Maybe<Scalars['String']>;
  externalSourceName?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  imageUrl?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  startsAt: Scalars['DateTime'];
  status: EventStatus;
};

export enum EventSort {
  CreatedAt = 'CreatedAt',
  EndsAt = 'EndsAt',
  ModifiedAt = 'ModifiedAt',
  StartsAt = 'StartsAt'
}

export enum EventStatus {
  Cancelled = 'Cancelled',
  Postponed = 'Postponed',
  Rescheduled = 'Rescheduled',
  Scheduled = 'Scheduled'
}

export type EventTeaser = BaseTeaser & HasImage & HasOptionalEvent & {
  __typename?: 'EventTeaser';
  event?: Maybe<Event>;
  eventID?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type EventTeaserInput = {
  eventID?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ExternalNavigationLink = BaseNavigationLink & {
  __typename?: 'ExternalNavigationLink';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  label: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  type: NavigationLinkType;
  url?: Maybe<Scalars['String']>;
};

export type FacebookPostBlock = BaseBlock & {
  __typename?: 'FacebookPostBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  postID?: Maybe<Scalars['String']>;
  type: BlockType;
  userID?: Maybe<Scalars['String']>;
};

export type FacebookPostBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  postID?: InputMaybe<Scalars['String']>;
  userID?: InputMaybe<Scalars['String']>;
};

export type FacebookVideoBlock = BaseBlock & {
  __typename?: 'FacebookVideoBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
  userID?: Maybe<Scalars['String']>;
  videoID?: Maybe<Scalars['String']>;
};

export type FacebookVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  userID?: InputMaybe<Scalars['String']>;
  videoID?: InputMaybe<Scalars['String']>;
};

export type FlexAlignment = {
  __typename?: 'FlexAlignment';
  h: Scalars['Int'];
  i: Scalars['String'];
  static: Scalars['Boolean'];
  w: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
};

export type FlexAlignmentInput = {
  h: Scalars['Int'];
  i: Scalars['String'];
  static: Scalars['Boolean'];
  w: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
};

export type FlexTeaser = {
  __typename?: 'FlexTeaser';
  alignment: FlexAlignment;
  teaser?: Maybe<Teaser>;
};

export type FlexTeaserInput = {
  alignment: FlexAlignmentInput;
  teaser?: InputMaybe<TeaserInput>;
};

export type FocalPoint = {
  __typename?: 'FocalPoint';
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type FocalPointInput = {
  x: Scalars['Float'];
  y: Scalars['Float'];
};

export type FullCommentRatingSystem = {
  __typename?: 'FullCommentRatingSystem';
  answers: Array<CommentRatingSystemAnswer>;
  id: Scalars['String'];
  name?: Maybe<Scalars['String']>;
};

export type FullPoll = {
  __typename?: 'FullPoll';
  answers: Array<PollAnswerWithVoteCount>;
  closedAt?: Maybe<Scalars['DateTime']>;
  externalVoteSources: Array<PollExternalVoteSource>;
  id: Scalars['String'];
  infoText?: Maybe<Scalars['RichText']>;
  opensAt: Scalars['DateTime'];
  question?: Maybe<Scalars['String']>;
};

export type HtmlBlock = BaseBlock & {
  __typename?: 'HTMLBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  html?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type HtmlBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  html?: InputMaybe<Scalars['String']>;
};

export type HasArticle = {
  article: Article;
  articleID: Scalars['String'];
};

export type HasArticleLc = {
  article: Article;
  articleId: Scalars['String'];
};

export type HasAuthor = {
  author: Author;
  authorId: Scalars['String'];
};

export type HasBlockContent = {
  blocks: Array<BlockContent>;
};

export type HasComment = {
  comment: Comment;
  commentId: Scalars['String'];
};

export type HasEventLc = {
  event: Event;
  eventId: Scalars['String'];
};

export type HasImage = {
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
};

export type HasImageLc = {
  image?: Maybe<Image>;
  imageId?: Maybe<Scalars['String']>;
};

export type HasOptionalArticle = {
  article?: Maybe<Article>;
  articleID?: Maybe<Scalars['String']>;
};

export type HasOptionalCrowdfunding = {
  crowdfunding?: Maybe<CrowdfundingWithActiveGoal>;
  crowdfundingId?: Maybe<Scalars['String']>;
};

export type HasOptionalEvent = {
  event?: Maybe<Event>;
  eventID?: Maybe<Scalars['String']>;
};

export type HasOptionalPage = {
  page?: Maybe<Page>;
  pageID?: Maybe<Scalars['String']>;
};

export type HasOptionalPaywall = {
  paywall?: Maybe<Paywall>;
  paywallId?: Maybe<Scalars['String']>;
};

export type HasOptionalPeerLc = {
  peer?: Maybe<Peer>;
  peerId?: Maybe<Scalars['String']>;
};

export type HasOptionalPoll = {
  poll?: Maybe<FullPoll>;
  pollId?: Maybe<Scalars['String']>;
};

export type HasOptionalSubscription = {
  subscription?: Maybe<PublicSubscription>;
  subscriptionID?: Maybe<Scalars['String']>;
};

export type HasPage = {
  page: Page;
  pageID: Scalars['String'];
};

export type HasPageLc = {
  page: Page;
  pageId: Scalars['String'];
};

export type HasPaymentMethod = {
  paymentMethod: PaymentMethod;
  paymentMethodID: Scalars['String'];
};

export type HasPoll = {
  poll: FullPoll;
  pollId: Scalars['String'];
};

export type HasSubscriptionLc = {
  subscription: PublicSubscription;
  subscriptionId: Scalars['String'];
};

export type HasUser = {
  user: User;
  userID: Scalars['String'];
};

export type HasUserLc = {
  user: User;
  userId: Scalars['String'];
};

export type IFrameBlock = BaseBlock & {
  __typename?: 'IFrameBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  sandbox?: Maybe<Scalars['String']>;
  styleCustom?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: BlockType;
  url?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};

export type IFrameBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Int']>;
  sandbox?: InputMaybe<Scalars['String']>;
  styleCustom?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type Image = {
  __typename?: 'Image';
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  extension: Scalars['String'];
  fileSize: Scalars['Int'];
  filename?: Maybe<Scalars['String']>;
  focalPoint?: Maybe<FocalPoint>;
  format: Scalars['String'];
  height: Scalars['Int'];
  id: Scalars['String'];
  license?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  mimeType: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  source?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  transformURL?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
};


export type ImageTransformUrlArgs = {
  input?: InputMaybe<ImageTransformation>;
};

export type ImageBlock = BaseBlock & HasImage & {
  __typename?: 'ImageBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  caption?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  linkUrl?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type ImageBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  caption?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  linkUrl?: InputMaybe<Scalars['String']>;
};

export type ImageGalleryBlock = BaseBlock & {
  __typename?: 'ImageGalleryBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  images: Array<ImageGalleryImage>;
  type: BlockType;
};

export type ImageGalleryBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  images: Array<ImageGalleryImageInput>;
};

export type ImageGalleryImage = HasImage & {
  __typename?: 'ImageGalleryImage';
  caption?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
};

export type ImageGalleryImageInput = {
  caption?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
};

export enum ImageOutput {
  Jpeg = 'jpeg',
  Png = 'png',
  Webp = 'webp'
}

export enum ImageRotation {
  Auto = 'Auto',
  Rotate0 = 'Rotate0',
  Rotate90 = 'Rotate90',
  Rotate180 = 'Rotate180',
  Rotate270 = 'Rotate270'
}

export type ImageTransformation = {
  blur?: InputMaybe<Scalars['Boolean']>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Int']>;
  negate?: InputMaybe<Scalars['Boolean']>;
  output?: InputMaybe<ImageOutput>;
  quality?: InputMaybe<Scalars['Float']>;
  rotation?: InputMaybe<ImageRotation>;
  sharpen?: InputMaybe<Scalars['Boolean']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type ImportArticleOptions = {
  importAuthors?: InputMaybe<Scalars['Boolean']>;
  importContentImages?: InputMaybe<Scalars['Boolean']>;
  importTags?: InputMaybe<Scalars['Boolean']>;
};

export type ImportedEventFilter = {
  from?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  providers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  to?: InputMaybe<Scalars['String']>;
};

export enum ImportedEventSort {
  CreatedAt = 'CREATED_AT',
  EndsAt = 'ENDS_AT',
  ModifiedAt = 'MODIFIED_AT',
  StartsAt = 'STARTS_AT'
}

export type ImportedEventsDocument = {
  __typename?: 'ImportedEventsDocument';
  nodes: Array<EventFromSource>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type InstagramPostBlock = BaseBlock & {
  __typename?: 'InstagramPostBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  postID?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type InstagramPostBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  postID?: InputMaybe<Scalars['String']>;
};

export type Invoice = HasOptionalSubscription & {
  __typename?: 'Invoice';
  canceledAt?: Maybe<Scalars['DateTime']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  dueAt: Scalars['DateTime'];
  id: Scalars['String'];
  items: Array<InvoiceItem>;
  mail: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  paidAt?: Maybe<Scalars['DateTime']>;
  subscription?: Maybe<PublicSubscription>;
  subscriptionID?: Maybe<Scalars['String']>;
  total: Scalars['Int'];
};

export type InvoiceItem = {
  __typename?: 'InvoiceItem';
  amount: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  quantity: Scalars['Int'];
  total: Scalars['Int'];
};

export type ListicleBlock = BaseBlock & {
  __typename?: 'ListicleBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  items: Array<ListicleItem>;
  type: BlockType;
};

export type ListicleBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  items: Array<ListicleItemInput>;
};

export type ListicleItem = HasImage & {
  __typename?: 'ListicleItem';
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  title?: Maybe<Scalars['String']>;
};

export type ListicleItemInput = {
  imageID?: InputMaybe<Scalars['String']>;
  richText: Scalars['RichText'];
  title?: InputMaybe<Scalars['String']>;
};

export enum LoginStatus {
  All = 'ALL',
  LoggedIn = 'LOGGED_IN',
  LoggedOut = 'LOGGED_OUT',
  Subscribed = 'SUBSCRIBED',
  Unsubscribed = 'UNSUBSCRIBED'
}

export type MailProviderModel = {
  __typename?: 'MailProviderModel';
  name: Scalars['String'];
};

export type MailTemplateRef = {
  __typename?: 'MailTemplateRef';
  id: Scalars['String'];
  name: Scalars['String'];
};

export type MailTemplateWithUrlAndStatusModel = {
  __typename?: 'MailTemplateWithUrlAndStatusModel';
  description?: Maybe<Scalars['String']>;
  externalMailTemplateId: Scalars['String'];
  id: Scalars['String'];
  name: Scalars['String'];
  remoteMissing: Scalars['Boolean'];
  status: Scalars['String'];
  url: Scalars['String'];
};

export type MemberPlan = HasImage & {
  __typename?: 'MemberPlan';
  amountPerMonthMin: Scalars['Int'];
  amountPerMonthTarget?: Maybe<Scalars['Int']>;
  availablePaymentMethods: Array<AvailablePaymentMethod>;
  confirmationPageId?: Maybe<Scalars['String']>;
  currency: Currency;
  description?: Maybe<Scalars['RichText']>;
  extendable: Scalars['Boolean'];
  failPageId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  maxCount?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  shortDescription?: Maybe<Scalars['RichText']>;
  slug: Scalars['String'];
  successPageId?: Maybe<Scalars['String']>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type MemberPlanConnection = {
  __typename?: 'MemberPlanConnection';
  nodes: Array<MemberPlan>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type MemberPlanFilter = {
  active?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export enum MemberPlanSort {
  CreatedAt = 'createdAt',
  ModifiedAt = 'modifiedAt'
}

export type Mutation = {
  __typename?: 'Mutation';
  /** Create a new comment */
  addComment: Comment;
  /** This mutation allows to update the user's subscription by taking an input of type UserSubscription and throws an error if the user doesn't already have a subscription. Updating user subscriptions will set deactivation to null */
  cancelUserSubscription?: Maybe<PublicSubscription>;
  /** Creates an article. */
  createArticle: Article;
  createBanner: Banner;
  /** Creates a new block style. */
  createBlockStyle: BlockStyle;
  /**
   *
   *       Create a new consent.
   *
   */
  createConsent: Consent;
  /** Create a new Crowdfunding */
  createCrowdfunding: Crowdfunding;
  /** Creates a new event. */
  createEvent: Event;
  /** Creates a new navigation. */
  createNavigation: Navigation;
  /** Creates an page. */
  createPage: Page;
  /** This mutation allows to create payment by taking an input of type PaymentFromInvoiceInput. */
  createPaymentFromInvoice?: Maybe<Payment>;
  /** This mutation allows to create payment by referencing a subscription. */
  createPaymentFromSubscription?: Maybe<Payment>;
  /** Creates a paywall. */
  createPaywall: Paywall;
  /** Creates a paywall bypass token. */
  createPaywallBypass: PaywallBypass;
  createSession: SessionWithToken;
  createSessionWithJWT: SessionWithToken;
  /** Allows authenticated users to create additional subscriptions */
  createSubscription: Payment;
  /** Create a new subscription flow */
  createSubscriptionFlow: Array<SubscriptionFlowModel>;
  /** Create a subscription interval */
  createSubscriptionInterval: Array<SubscriptionFlowModel>;
  /** Allows guests and authenticated users to create additional subscriptions */
  createSubscriptionWithConfirmation: Scalars['Boolean'];
  /**
   *
   *       Creates a new userConsent based on input.
   *       Returns created userConsent.
   *
   */
  createUserConsent: UserConsent;
  /** Deletes an article. */
  deleteArticle: Scalars['String'];
  deleteBanner?: Maybe<Scalars['Boolean']>;
  /** Deletes an existing block style. */
  deleteBlockStyle: BlockStyle;
  /**
   *
   *       Deletes an existing consent.
   *
   */
  deleteConsent: Consent;
  deleteCrowdfunding?: Maybe<Scalars['Boolean']>;
  /** Deletes an existing event. */
  deleteEvent: Event;
  /** Deletes an existing navigation. */
  deleteNavigation: Navigation;
  /** Deletes an page. */
  deletePage: Scalars['String'];
  /** Deletes a paywall. */
  deletePaywall: Paywall;
  /** Deletes a paywall bypass token. */
  deletePaywallBypass: Scalars['String'];
  /** Delete poll votes */
  deletePollVotes: DeletePollVotesResult;
  /** Delete an existing subscription flow */
  deleteSubscriptionFlow: Array<SubscriptionFlowModel>;
  /** Delete an existing subscription interval */
  deleteSubscriptionInterval: Array<SubscriptionFlowModel>;
  /**
   *
   *       Delete an existing userConsent by id.
   *       Returns deleted userConsent.
   *
   */
  deleteUserConsent: UserConsent;
  /** Dislikes an article. */
  dislikeArticle: Article;
  /** Duplicates an article. */
  duplicateArticle: Article;
  /** Duplicates an page. */
  duplicatePage: Page;
  /** Allows authenticated users to extend existing subscriptions */
  extendSubscription: Payment;
  /**
   *
   *       Creates and event based on data from importable events list and an id and provider.
   *       Also, uploads an image to WePublish Image library.
   *
   */
  importEvent: Scalars['String'];
  /** Imports an article from a peer as a draft. */
  importPeerArticle: Article;
  /** Likes an article. */
  likeArticle: Article;
  /** Publishes an article at the given time. */
  publishArticle: Article;
  /** Publishes an page at the given time. */
  publishPage: Page;
  /** This mutation allows to rate a comment. Supports logged in and anonymous */
  rateComment: Comment;
  /** This mutation registers a new member by providing name, email, and other required information. */
  registerMember: Registration;
  /** This mutation revokes and deletes the active session. */
  revokeActiveSession: Scalars['Boolean'];
  /** This mutation sends a login link to the email if the user exists. Method will always return email address */
  sendWebsiteLogin: Scalars['String'];
  syncTemplates?: Maybe<Scalars['Boolean']>;
  /** Sends a test email for the given event */
  testSystemMail: Scalars['Boolean'];
  /** Unpublishes all revisions of an article. */
  unpublishArticle: Article;
  /** Unpublishes all revisions of an page. */
  unpublishPage: Page;
  /** Updates an article. */
  updateArticle: Article;
  updateBanner: Banner;
  /** Updates an existing block style. */
  updateBlockStyle: BlockStyle;
  /** Update an existing comment */
  updateComment: Comment;
  /**
   *
   *       Updates an existing consent.
   *
   */
  updateConsent: Consent;
  /** Update a single crowdfunding */
  updateCrowdfunding: CrowdfundingWithActiveGoal;
  /** Updates an existing event. */
  updateEvent: Event;
  /** Updates an existing navigation. */
  updateNavigation: Navigation;
  /** Updates an page. */
  updatePage: Page;
  /** This mutation allows to update the user's password by entering the new password. The repeated new password gives an error if the passwords don't match or if the user is not authenticated. */
  updatePassword: User;
  /** This mutation allows to update the Payment Provider Customers */
  updatePaymentProviderCustomers: Array<PaymentProviderCustomer>;
  /** Updates a paywall. */
  updatePaywall: Paywall;
  /** Updates an existing setting. */
  updateSetting: Setting;
  /** Update an existing subscription flow */
  updateSubscriptionFlow: Array<SubscriptionFlowModel>;
  /** Update an existing subscription interval */
  updateSubscriptionInterval: Array<SubscriptionFlowModel>;
  /** Updates an existing mail flow */
  updateSystemMail: Array<SystemMailModel>;
  /** This mutation allows to update the user's data by taking an input of type UserInput. */
  updateUser?: Maybe<User>;
  /**
   *
   *       Updates an existing userConsent based on input.
   *       Returns updated userConsent.
   *
   */
  updateUserConsent: UserConsent;
  /** This mutation allows to update the user's subscription by taking an input of type UserSubscription and throws an error if the user doesn't already have a subscription. Updating user subscriptions will set deactivation to null */
  updateUserSubscription?: Maybe<PublicSubscription>;
  /** This mutation allows to upload and update the user's profile image. */
  uploadUserProfileImage?: Maybe<User>;
  /** This mutation allows to vote on a poll (or update one's decision). Supports logged in and anonymous */
  voteOnPoll?: Maybe<PollVote>;
};


export type MutationAddCommentArgs = {
  input: CommentInput;
};


export type MutationCancelUserSubscriptionArgs = {
  id: Scalars['String'];
};


export type MutationCreateArticleArgs = {
  authorIds: Array<Scalars['String']>;
  blocks: Array<BlockContentInput>;
  breaking: Scalars['Boolean'];
  canonicalUrl?: InputMaybe<Scalars['String']>;
  disableComments: Scalars['Boolean'];
  hidden: Scalars['Boolean'];
  hideAuthor: Scalars['Boolean'];
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  likes?: InputMaybe<Scalars['Int']>;
  paywallId?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  properties: Array<PropertyInput>;
  seoTitle?: InputMaybe<Scalars['String']>;
  shared: Scalars['Boolean'];
  slug?: InputMaybe<Scalars['String']>;
  socialMediaAuthorIds: Array<Scalars['String']>;
  socialMediaDescription?: InputMaybe<Scalars['String']>;
  socialMediaImageID?: InputMaybe<Scalars['String']>;
  socialMediaTitle?: InputMaybe<Scalars['String']>;
  tagIds: Array<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};


export type MutationCreateBannerArgs = {
  input: CreateBannerInput;
};


export type MutationCreateBlockStyleArgs = {
  blocks: Array<EditorBlockType>;
  name: Scalars['String'];
};


export type MutationCreateConsentArgs = {
  defaultValue: Scalars['Boolean'];
  name: Scalars['String'];
  slug: Scalars['String'];
};


export type MutationCreateCrowdfundingArgs = {
  input: CreateCrowdfundingInput;
};


export type MutationCreateEventArgs = {
  description?: InputMaybe<Scalars['RichText']>;
  endsAt?: InputMaybe<Scalars['DateTime']>;
  imageId?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  startsAt: Scalars['DateTime'];
  status?: EventStatus;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
};


export type MutationCreateNavigationArgs = {
  key: Scalars['String'];
  links: Array<NavigationLinkInput>;
  name: Scalars['String'];
};


export type MutationCreatePageArgs = {
  blocks: Array<BlockContentInput>;
  description?: InputMaybe<Scalars['String']>;
  hidden: Scalars['Boolean'];
  imageID?: InputMaybe<Scalars['String']>;
  properties: Array<PropertyInput>;
  slug?: InputMaybe<Scalars['String']>;
  socialMediaDescription?: InputMaybe<Scalars['String']>;
  socialMediaImageID?: InputMaybe<Scalars['String']>;
  socialMediaTitle?: InputMaybe<Scalars['String']>;
  tagIds: Array<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};


export type MutationCreatePaymentFromInvoiceArgs = {
  input: PaymentFromInvoiceInput;
};


export type MutationCreatePaymentFromSubscriptionArgs = {
  failureURL?: InputMaybe<Scalars['String']>;
  subscriptionId?: InputMaybe<Scalars['String']>;
  successURL?: InputMaybe<Scalars['String']>;
};


export type MutationCreatePaywallArgs = {
  active: Scalars['Boolean'];
  anyMemberPlan: Scalars['Boolean'];
  circumventDescription?: InputMaybe<Scalars['RichText']>;
  description?: InputMaybe<Scalars['RichText']>;
  memberPlanIds?: Array<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};


export type MutationCreatePaywallBypassArgs = {
  paywallId: Scalars['String'];
  token: Scalars['String'];
};


export type MutationCreateSessionArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationCreateSessionWithJwtArgs = {
  jwt: Scalars['String'];
};


export type MutationCreateSubscriptionArgs = {
  autoRenew: Scalars['Boolean'];
  deactivateSubscriptionId?: InputMaybe<Scalars['String']>;
  failureURL?: InputMaybe<Scalars['String']>;
  memberPlanID?: InputMaybe<Scalars['String']>;
  memberPlanSlug?: InputMaybe<Scalars['Slug']>;
  monthlyAmount: Scalars['Int'];
  paymentMethodID?: InputMaybe<Scalars['String']>;
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>;
  paymentPeriodicity: PaymentPeriodicity;
  subscriptionProperties?: InputMaybe<Array<PropertyInput>>;
  successURL?: InputMaybe<Scalars['String']>;
};


export type MutationCreateSubscriptionFlowArgs = {
  autoRenewal: Array<Scalars['Boolean']>;
  memberPlanId: Scalars['String'];
  paymentMethodIds: Array<Scalars['String']>;
  periodicities: Array<PaymentPeriodicity>;
};


export type MutationCreateSubscriptionIntervalArgs = {
  daysAwayFromEnding?: InputMaybe<Scalars['Int']>;
  event: SubscriptionEvent;
  mailTemplateId?: InputMaybe<Scalars['String']>;
  subscriptionFlowId: Scalars['String'];
};


export type MutationCreateSubscriptionWithConfirmationArgs = {
  autoRenew: Scalars['Boolean'];
  memberPlanID?: InputMaybe<Scalars['String']>;
  memberPlanSlug?: InputMaybe<Scalars['Slug']>;
  monthlyAmount: Scalars['Int'];
  paymentMethodID?: InputMaybe<Scalars['String']>;
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>;
  paymentPeriodicity: PaymentPeriodicity;
  subscriptionProperties?: InputMaybe<Array<PropertyInput>>;
  userId?: InputMaybe<Scalars['String']>;
};


export type MutationCreateUserConsentArgs = {
  consentId: Scalars['String'];
  userId: Scalars['String'];
  value: Scalars['Boolean'];
};


export type MutationDeleteArticleArgs = {
  id: Scalars['String'];
};


export type MutationDeleteBannerArgs = {
  id: Scalars['String'];
};


export type MutationDeleteBlockStyleArgs = {
  id: Scalars['String'];
};


export type MutationDeleteConsentArgs = {
  id: Scalars['String'];
};


export type MutationDeleteCrowdfundingArgs = {
  id: Scalars['String'];
};


export type MutationDeleteEventArgs = {
  id: Scalars['String'];
};


export type MutationDeleteNavigationArgs = {
  id: Scalars['String'];
};


export type MutationDeletePageArgs = {
  id: Scalars['String'];
};


export type MutationDeletePaywallArgs = {
  id: Scalars['String'];
};


export type MutationDeletePaywallBypassArgs = {
  id: Scalars['String'];
};


export type MutationDeletePollVotesArgs = {
  ids: Array<Scalars['String']>;
};


export type MutationDeleteSubscriptionFlowArgs = {
  id: Scalars['String'];
};


export type MutationDeleteSubscriptionIntervalArgs = {
  id: Scalars['String'];
};


export type MutationDeleteUserConsentArgs = {
  id: Scalars['String'];
};


export type MutationDislikeArticleArgs = {
  id: Scalars['String'];
};


export type MutationDuplicateArticleArgs = {
  id: Scalars['String'];
};


export type MutationDuplicatePageArgs = {
  id: Scalars['String'];
};


export type MutationExtendSubscriptionArgs = {
  failureURL?: InputMaybe<Scalars['String']>;
  subscriptionId: Scalars['String'];
  successURL?: InputMaybe<Scalars['String']>;
};


export type MutationImportEventArgs = {
  id: Scalars['String'];
  source: Scalars['String'];
};


export type MutationImportPeerArticleArgs = {
  articleId: Scalars['String'];
  options?: ImportArticleOptions;
  peerId: Scalars['String'];
};


export type MutationLikeArticleArgs = {
  id: Scalars['String'];
};


export type MutationPublishArticleArgs = {
  id: Scalars['String'];
  publishedAt: Scalars['DateTime'];
};


export type MutationPublishPageArgs = {
  id: Scalars['String'];
  publishedAt: Scalars['DateTime'];
};


export type MutationRateCommentArgs = {
  answerId: Scalars['String'];
  commentId: Scalars['String'];
  value: Scalars['Int'];
};


export type MutationRegisterMemberArgs = {
  address?: InputMaybe<UserAddressInput>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  challengeAnswer: ChallengeInput;
  email: Scalars['String'];
  firstName?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  password?: InputMaybe<Scalars['String']>;
};


export type MutationSendWebsiteLoginArgs = {
  email: Scalars['String'];
};


export type MutationTestSystemMailArgs = {
  event: UserEvent;
};


export type MutationUnpublishArticleArgs = {
  id: Scalars['String'];
};


export type MutationUnpublishPageArgs = {
  id: Scalars['String'];
};


export type MutationUpdateArticleArgs = {
  authorIds: Array<Scalars['String']>;
  blocks: Array<BlockContentInput>;
  breaking: Scalars['Boolean'];
  canonicalUrl?: InputMaybe<Scalars['String']>;
  disableComments: Scalars['Boolean'];
  hidden: Scalars['Boolean'];
  hideAuthor: Scalars['Boolean'];
  id: Scalars['String'];
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  likes?: InputMaybe<Scalars['Int']>;
  paywallId?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  properties: Array<PropertyInput>;
  seoTitle?: InputMaybe<Scalars['String']>;
  shared: Scalars['Boolean'];
  slug?: InputMaybe<Scalars['String']>;
  socialMediaAuthorIds: Array<Scalars['String']>;
  socialMediaDescription?: InputMaybe<Scalars['String']>;
  socialMediaImageID?: InputMaybe<Scalars['String']>;
  socialMediaTitle?: InputMaybe<Scalars['String']>;
  tagIds: Array<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateBannerArgs = {
  input: UpdateBannerInput;
};


export type MutationUpdateBlockStyleArgs = {
  blocks?: InputMaybe<Array<EditorBlockType>>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateCommentArgs = {
  input: CommentUpdateInput;
};


export type MutationUpdateConsentArgs = {
  defaultValue?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateCrowdfundingArgs = {
  input: UpdateCrowdfundingInput;
};


export type MutationUpdateEventArgs = {
  description?: InputMaybe<Scalars['RichText']>;
  endsAt?: InputMaybe<Scalars['DateTime']>;
  id: Scalars['String'];
  imageId?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  startsAt?: InputMaybe<Scalars['DateTime']>;
  status?: InputMaybe<EventStatus>;
  tagIds?: InputMaybe<Array<Scalars['String']>>;
};


export type MutationUpdateNavigationArgs = {
  id: Scalars['String'];
  key: Scalars['String'];
  links: Array<NavigationLinkInput>;
  name: Scalars['String'];
};


export type MutationUpdatePageArgs = {
  blocks: Array<BlockContentInput>;
  description?: InputMaybe<Scalars['String']>;
  hidden: Scalars['Boolean'];
  id: Scalars['String'];
  imageID?: InputMaybe<Scalars['String']>;
  properties: Array<PropertyInput>;
  slug?: InputMaybe<Scalars['String']>;
  socialMediaDescription?: InputMaybe<Scalars['String']>;
  socialMediaImageID?: InputMaybe<Scalars['String']>;
  socialMediaTitle?: InputMaybe<Scalars['String']>;
  tagIds: Array<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};


export type MutationUpdatePasswordArgs = {
  password: Scalars['String'];
  passwordRepeated: Scalars['String'];
};


export type MutationUpdatePaymentProviderCustomersArgs = {
  input: Array<PaymentProviderCustomerInput>;
};


export type MutationUpdatePaywallArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  anyMemberPlan?: InputMaybe<Scalars['Boolean']>;
  bypassTokens?: InputMaybe<Array<Scalars['String']>>;
  circumventDescription?: InputMaybe<Scalars['RichText']>;
  description?: InputMaybe<Scalars['RichText']>;
  id: Scalars['String'];
  memberPlanIds?: InputMaybe<Array<Scalars['String']>>;
  name?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateSettingArgs = {
  name: SettingName;
  value: Scalars['GraphQLSettingValueType'];
};


export type MutationUpdateSubscriptionFlowArgs = {
  autoRenewal?: InputMaybe<Array<Scalars['Boolean']>>;
  id: Scalars['String'];
  paymentMethodIds?: InputMaybe<Array<Scalars['String']>>;
  periodicities?: InputMaybe<Array<PaymentPeriodicity>>;
};


export type MutationUpdateSubscriptionIntervalArgs = {
  daysAwayFromEnding?: InputMaybe<Scalars['Int']>;
  id: Scalars['String'];
  mailTemplateId?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateSystemMailArgs = {
  event: UserEvent;
  mailTemplateId: Scalars['String'];
};


export type MutationUpdateUserArgs = {
  input: UserInput;
};


export type MutationUpdateUserConsentArgs = {
  id: Scalars['String'];
  value: Scalars['Boolean'];
};


export type MutationUpdateUserSubscriptionArgs = {
  id: Scalars['String'];
  input: UserSubscriptionInput;
};


export type MutationUploadUserProfileImageArgs = {
  uploadImageInput?: InputMaybe<UploadImageInput>;
};


export type MutationVoteOnPollArgs = {
  answerId: Scalars['String'];
};

export type Navigation = {
  __typename?: 'Navigation';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  key: Scalars['String'];
  links: Array<BaseNavigationLink>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
};

export type NavigationLinkInput = {
  articleID?: InputMaybe<Scalars['String']>;
  label: Scalars['String'];
  pageID?: InputMaybe<Scalars['String']>;
  type: Scalars['String'];
  url?: InputMaybe<Scalars['String']>;
};

export enum NavigationLinkType {
  Article = 'Article',
  External = 'External',
  Page = 'Page'
}

export type NonDbProperty = {
  __typename?: 'NonDbProperty';
  key: Scalars['String'];
  public: Scalars['Boolean'];
  value: Scalars['String'];
};

export type Page = {
  __typename?: 'Page';
  createdAt: Scalars['DateTime'];
  draft?: Maybe<PageRevision>;
  hidden: Scalars['Boolean'];
  id: Scalars['String'];
  latest: PageRevision;
  modifiedAt: Scalars['DateTime'];
  pending?: Maybe<PageRevision>;
  previewUrl: Scalars['String'];
  published?: Maybe<PageRevision>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  slug?: Maybe<Scalars['String']>;
  tags: Array<Tag>;
  url: Scalars['String'];
};

export type PageCreatedAction = BaseAction & HasPageLc & {
  __typename?: 'PageCreatedAction';
  actionType: ActionType;
  date: Scalars['DateTime'];
  page: Page;
  pageId: Scalars['String'];
};

export type PageFilter = {
  description?: InputMaybe<Scalars['String']>;
  draft?: InputMaybe<Scalars['Boolean']>;
  includeHidden?: InputMaybe<Scalars['Boolean']>;
  pending?: InputMaybe<Scalars['Boolean']>;
  publicationDateFrom?: InputMaybe<DateFilter>;
  publicationDateTo?: InputMaybe<DateFilter>;
  published?: InputMaybe<Scalars['Boolean']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['String']>;
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor?: Maybe<Scalars['String']>;
};

export type PageModel = {
  __typename?: 'PageModel';
  id: Scalars['String'];
};

export type PageModelInput = {
  id: Scalars['String'];
};

export type PageNavigationLink = BaseNavigationLink & HasPage & {
  __typename?: 'PageNavigationLink';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  label: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  page: Page;
  pageID: Scalars['String'];
  type: NavigationLinkType;
};

export type PageRevision = HasBlockContent & {
  __typename?: 'PageRevision';
  blocks: Array<BlockContent>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  properties: Array<Property>;
  publishedAt?: Maybe<Scalars['DateTime']>;
  socialMediaDescription?: Maybe<Scalars['String']>;
  socialMediaImage?: Maybe<Image>;
  socialMediaImageID?: Maybe<Scalars['String']>;
  socialMediaTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export enum PageSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  PublishedAt = 'PublishedAt'
}

export type PageTeaser = BaseTeaser & HasImage & HasOptionalPage & {
  __typename?: 'PageTeaser';
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  page?: Maybe<Page>;
  pageID?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: Scalars['String'];
};

export type PageTeaserInput = {
  imageID?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  pageID?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type PaginatedArticles = {
  __typename?: 'PaginatedArticles';
  nodes: Array<Article>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaginatedAuthors = {
  __typename?: 'PaginatedAuthors';
  nodes: Array<Author>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaginatedEvents = {
  __typename?: 'PaginatedEvents';
  nodes: Array<Event>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaginatedPages = {
  __typename?: 'PaginatedPages';
  nodes: Array<Page>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaginatedPeerArticle = {
  __typename?: 'PaginatedPeerArticle';
  nodes: Array<PeerArticle>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type PaginatedPollVotes = {
  __typename?: 'PaginatedPollVotes';
  nodes: Array<PollVote>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type Payment = HasPaymentMethod & {
  __typename?: 'Payment';
  id: Scalars['String'];
  intentSecret: Scalars['String'];
  paymentMethod: PaymentMethod;
  paymentMethodID: Scalars['String'];
  state: PaymentState;
};

export type PaymentFromInvoiceInput = {
  failureURL?: InputMaybe<Scalars['String']>;
  invoiceID: Scalars['String'];
  paymentMethodID?: InputMaybe<Scalars['String']>;
  paymentMethodSlug?: InputMaybe<Scalars['Slug']>;
  successURL?: InputMaybe<Scalars['String']>;
};

export type PaymentMethod = HasImageLc & {
  __typename?: 'PaymentMethod';
  description: Scalars['String'];
  gracePeriod: Scalars['Int'];
  id: Scalars['String'];
  image?: Maybe<Image>;
  imageId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  paymentProviderID: Scalars['String'];
  slug: Scalars['Slug'];
};

export enum PaymentPeriodicity {
  Biannual = 'biannual',
  Biennial = 'biennial',
  Lifetime = 'lifetime',
  Monthly = 'monthly',
  Quarterly = 'quarterly',
  Yearly = 'yearly'
}

export type PaymentProviderCustomer = {
  __typename?: 'PaymentProviderCustomer';
  customerID: Scalars['String'];
  paymentProviderID: Scalars['String'];
};

export type PaymentProviderCustomerInput = {
  customerID: Scalars['String'];
  paymentProviderID: Scalars['String'];
};

export enum PaymentState {
  Canceled = 'canceled',
  Created = 'created',
  Declined = 'declined',
  Paid = 'paid',
  Processing = 'processing',
  RequiresUserAction = 'requiresUserAction',
  Submitted = 'submitted'
}

export type Paywall = {
  __typename?: 'Paywall';
  active: Scalars['Boolean'];
  anyMemberPlan: Scalars['Boolean'];
  bypasses: Array<PaywallBypass>;
  circumventDescription?: Maybe<Scalars['RichText']>;
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['RichText']>;
  id: Scalars['String'];
  memberPlans: Array<MemberPlan>;
  modifiedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
};

export type PaywallBypass = {
  __typename?: 'PaywallBypass';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  paywallId: Scalars['String'];
  token: Scalars['String'];
};

export type Peer = {
  __typename?: 'Peer';
  createdAt: Scalars['DateTime'];
  hostURL: Scalars['String'];
  id: Scalars['String'];
  information?: Maybe<Scalars['RichText']>;
  isDisabled?: Maybe<Scalars['Boolean']>;
  modifiedAt: Scalars['DateTime'];
  name: Scalars['String'];
  profile?: Maybe<RemotePeerProfile>;
  slug: Scalars['String'];
};

export type PeerArticle = HasOptionalPeerLc & {
  __typename?: 'PeerArticle';
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  latest: PeerArticleRevision;
  modifiedAt: Scalars['DateTime'];
  peer?: Maybe<Peer>;
  peerId?: Maybe<Scalars['String']>;
  publishedAt: Scalars['DateTime'];
  slug?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};

export type PeerArticleFilter = {
  authors?: InputMaybe<Array<Scalars['String']>>;
  body?: InputMaybe<Scalars['String']>;
  excludeIds?: InputMaybe<Array<Scalars['String']>>;
  ids?: InputMaybe<Array<Scalars['String']>>;
  lead?: InputMaybe<Scalars['String']>;
  peerId?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  publicationDateFrom?: InputMaybe<DateFilter>;
  publicationDateTo?: InputMaybe<DateFilter>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type PeerArticleRevision = {
  __typename?: 'PeerArticleRevision';
  id: Scalars['String'];
  image?: Maybe<PeerImage>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  seoTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type PeerImage = {
  __typename?: 'PeerImage';
  createdAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  extension: Scalars['String'];
  fileSize: Scalars['Int'];
  filename?: Maybe<Scalars['String']>;
  focalPoint?: Maybe<FocalPoint>;
  format: Scalars['String'];
  height: Scalars['Int'];
  id: Scalars['String'];
  l?: Maybe<Scalars['String']>;
  lSquare?: Maybe<Scalars['String']>;
  license?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  m?: Maybe<Scalars['String']>;
  mSquare?: Maybe<Scalars['String']>;
  mimeType: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  s?: Maybe<Scalars['String']>;
  sSquare?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
  xl?: Maybe<Scalars['String']>;
  xlSquare?: Maybe<Scalars['String']>;
  xs?: Maybe<Scalars['String']>;
  xsSquare?: Maybe<Scalars['String']>;
  xxl?: Maybe<Scalars['String']>;
  xxlSquare?: Maybe<Scalars['String']>;
  xxs?: Maybe<Scalars['String']>;
  xxsSquare?: Maybe<Scalars['String']>;
};

export type PeerProfile = {
  __typename?: 'PeerProfile';
  callToActionImage?: Maybe<Image>;
  callToActionImageID?: Maybe<Scalars['String']>;
  callToActionImageURL?: Maybe<Scalars['String']>;
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
  hostURL: Scalars['String'];
  logo?: Maybe<Image>;
  logoID?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  squareLogo?: Maybe<Image>;
  squareLogoId?: Maybe<Scalars['String']>;
  themeColor: Scalars['Color'];
  themeFontColor: Scalars['Color'];
  websiteURL: Scalars['String'];
};

export type PeriodicJob = {
  __typename?: 'PeriodicJob';
  createdAt: Scalars['DateTime'];
  date: Scalars['DateTime'];
  error?: Maybe<Scalars['String']>;
  executionTime?: Maybe<Scalars['DateTime']>;
  finishedWithError?: Maybe<Scalars['DateTime']>;
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  successfullyFinished?: Maybe<Scalars['DateTime']>;
  tries: Scalars['Float'];
};

export type Phrase = {
  __typename?: 'Phrase';
  articles: PaginatedArticles;
  pages: PaginatedPages;
};

export type PolisConversationBlock = BaseBlock & {
  __typename?: 'PolisConversationBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  conversationID?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type PolisConversationBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  conversationID?: InputMaybe<Scalars['String']>;
};

export type PollAnswerInVote = {
  __typename?: 'PollAnswerInVote';
  answer: Scalars['String'];
  id: Scalars['String'];
};

export type PollAnswerWithVoteCount = {
  __typename?: 'PollAnswerWithVoteCount';
  answer?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  pollId: Scalars['String'];
  votes: Scalars['Int'];
};

export type PollBlock = BaseBlock & HasOptionalPoll & {
  __typename?: 'PollBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  poll?: Maybe<FullPoll>;
  pollId?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type PollBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  pollId?: InputMaybe<Scalars['String']>;
};

export type PollExternalVote = {
  __typename?: 'PollExternalVote';
  amount: Scalars['VoteValue'];
  answerId: Scalars['String'];
  id: Scalars['String'];
};

export type PollExternalVoteSource = {
  __typename?: 'PollExternalVoteSource';
  id: Scalars['String'];
  source?: Maybe<Scalars['String']>;
  voteAmounts: Array<PollExternalVote>;
};

export type PollStartedAction = BaseAction & HasPoll & {
  __typename?: 'PollStartedAction';
  actionType: ActionType;
  date: Scalars['DateTime'];
  poll: FullPoll;
  pollId: Scalars['String'];
};

export type PollVote = {
  __typename?: 'PollVote';
  answer: PollAnswerInVote;
  answerId: Scalars['String'];
  createdAt: Scalars['DateTime'];
  disabled: Scalars['Boolean'];
  fingerprint?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  pollId: Scalars['String'];
  userId?: Maybe<Scalars['String']>;
};

export type PollVoteFilter = {
  answerIds?: InputMaybe<Array<Scalars['String']>>;
  fingerprint?: InputMaybe<Scalars['String']>;
  from?: InputMaybe<Scalars['DateTime']>;
  pollId?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['DateTime']>;
  userId?: InputMaybe<Scalars['String']>;
};

export enum PollVoteSort {
  CreatedAt = 'CreatedAt'
}

export type Property = {
  __typename?: 'Property';
  id: Scalars['String'];
  key: Scalars['String'];
  public: Scalars['Boolean'];
  value: Scalars['String'];
};

export type PropertyInput = {
  id?: InputMaybe<Scalars['String']>;
  key: Scalars['String'];
  public: Scalars['Boolean'];
  value: Scalars['String'];
};

export type PublicSubscription = HasPaymentMethod & HasUser & {
  __typename?: 'PublicSubscription';
  autoRenew: Scalars['Boolean'];
  canExtend: Scalars['Boolean'];
  deactivation?: Maybe<SubscriptionDeactivation>;
  extendable: Scalars['Boolean'];
  id: Scalars['String'];
  memberPlan: MemberPlan;
  monthlyAmount: Scalars['Int'];
  paidUntil?: Maybe<Scalars['DateTime']>;
  paymentMethod: PaymentMethod;
  paymentMethodID: Scalars['String'];
  paymentPeriodicity: PaymentPeriodicity;
  properties: Array<Property>;
  startsAt: Scalars['DateTime'];
  url: Scalars['String'];
  user: User;
  userID: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  /** Returns latest actions */
  actions: Array<Action>;
  /**
   *
   *       Returns all active subscribers.
   *       Includes subscribers with a cancelled but not run out subscription.
   *
   */
  activeSubscribers: Array<DashboardSubscription>;
  /** Returns an article by id or slug. */
  article: Article;
  /** Returns a paginated list of articles based on the filters given. */
  articles: PaginatedArticles;
  /** Get an author by ID or slug */
  author?: Maybe<Author>;
  /** Get a paginated list of authors with optional filtering and sorting */
  authors: PaginatedAuthors;
  banner: Banner;
  banners: Array<Banner>;
  /** Returns a list of block styles. */
  blockStyles: Array<BlockStyle>;
  /** This query generates a challenge which can be used to access protected endpoints. */
  challenge: Challenge;
  /** Check the status of an invoice and update with information from the payment provider */
  checkInvoiceStatus?: Maybe<Invoice>;
  /** This query returns the comments of an item. */
  comments: Array<Comment>;
  /**
   *
   *       Returns a consent by id.
   *
   */
  consent: Consent;
  /**
   *
   *       Returns all consents.
   *
   */
  consents: Array<Consent>;
  /** Get a single crowdfunding by id with calculated progress */
  crowdfunding: CrowdfundingWithActiveGoal;
  /** Returns a paginated list of crowdfundings. */
  crowdfundings: Array<Crowdfunding>;
  /**
   *
   *       Returns daily stats in a given timeframe.
   *
   */
  dailySubscriptionStats: Array<DailySubscriptionStats>;
  /** Returns a event by id. */
  event: Event;
  /**
   *
   *       Returns a list of Importable Event Providers
   *
   */
  eventProviders: Array<Scalars['String']>;
  /** Returns a paginated list of events based on the filters given. */
  events: PaginatedEvents;
  /**
   *
   *       Returns the expected revenue for the time period given.
   *       Excludes cancelled or manually set as paid invoices.
   *
   */
  expectedRevenue: Array<DashboardInvoice>;
  /** Returns an image by id. */
  getImage: Image;
  /**
   *
   *       Returns the most viewed articles in descending order.
   *
   */
  hotAndTrending: Array<Article>;
  /**
   *
   *       Returns a more detailed version of a single importable event, by id and source.
   *
   */
  importedEvent: EventFromSource;
  /**
   *
   *       Returns a list of imported events from external sources, transformed to match our model.
   *
   */
  importedEvents: ImportedEventsDocument;
  /**
   *
   *       Returns a list of external source ids of already imported events.
   *
   */
  importedEventsIds: Array<Scalars['String']>;
  /** Get all invoices for the authenticated user */
  invoices: Array<Invoice>;
  /** Return all mail templates */
  mailTemplates: Array<MailTemplateWithUrlAndStatusModel>;
  /** This query returns the user. */
  me?: Maybe<User>;
  /** This query returns a member plan. */
  memberPlan?: Maybe<MemberPlan>;
  /** This query returns the member plans. */
  memberPlans: MemberPlanConnection;
  /** Returns a navigation by id. */
  navigation: Navigation;
  /** Returns a list of navigations. */
  navigations: Array<Navigation>;
  /**
   *
   *       Returns all new deactivations in a given timeframe.
   *       This considers the time the deactivation was made, not when the subscription runs out.
   *
   */
  newDeactivations: Array<DashboardSubscription>;
  /**
   *
   *       Returns all new subscribers in a given timeframe.
   *       Includes already deactivated ones.
   *
   */
  newSubscribers: Array<DashboardSubscription>;
  /** Returns an page by id or slug. */
  page: Page;
  /** Returns a paginated list of pages based on the filters given. */
  pages: PaginatedPages;
  /** Returns all payment methods */
  paymentMethods: Array<PaymentMethod>;
  /** Returns an paywall by id. */
  paywall: Paywall;
  /** Returns a list of paywalls based on the filters given. */
  paywalls: Array<Paywall>;
  /** This query takes either the ID or the slug and returns the peer profile. */
  peer?: Maybe<Peer>;
  /** Returns a paginated list of peer articles based on the filters given. */
  peerArticles: PaginatedPeerArticle;
  /** This query returns the peer profile. */
  peerProfile: PeerProfile;
  periodicJobLog: Array<PeriodicJob>;
  /** This query performs a fulltext search on titles and blocks of articles/phrases and returns all matching ones. */
  phrase: Phrase;
  poll: FullPoll;
  /** Returns a paginated list of poll votes */
  pollVotes: PaginatedPollVotes;
  primaryBanner?: Maybe<Banner>;
  provider: MailProviderModel;
  /** This query returns the comment rating system. */
  ratingSystem: FullCommentRatingSystem;
  /**
   *
   *       Returns all renewing subscribers in a given timeframe.
   *
   */
  renewingSubscribers: Array<DashboardSubscription>;
  /**
   *
   *       Returns the revenue generated for the time period given.
   *       Only includes paid invoices that have not been manually paid.
   *
   */
  revenue: Array<DashboardInvoice>;
  /**
   *
   *       Returns a single setting by name.
   *
   */
  setting: Setting;
  /**
   *
   *       Returns a single setting by id.
   *
   */
  settingById: Setting;
  /**
   *
   *       Returns all settings.
   *
   */
  settings: Array<Setting>;
  stats?: Maybe<Stats>;
  /** Returns all subscription flows */
  subscriptionFlows: Array<SubscriptionFlowModel>;
  /** This query returns the subscriptions of the authenticated user. */
  subscriptions: Array<PublicSubscription>;
  /** Returns all mail flows */
  systemMails: Array<SystemMailModel>;
  /** This query returns a list of tags */
  tags: TagConnection;
  /**
   *
   *       Returns a single userConsent by id.
   *
   */
  userConsent: UserConsent;
  /**
   *
   *       Returns a list of userConsents. Possible to filter.
   *
   */
  userConsents: Array<UserConsent>;
  userPollVote?: Maybe<Scalars['String']>;
  versionInformation: VersionInformation;
};


export type QueryArticleArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};


export type QueryArticlesArgs = {
  cursorId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArticleFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ArticleSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryAuthorArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['Slug']>;
};


export type QueryAuthorsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<AuthorSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryBannerArgs = {
  id: Scalars['String'];
};


export type QueryBannersArgs = {
  skip: Scalars['Int'];
  take: Scalars['Int'];
};


export type QueryCheckInvoiceStatusArgs = {
  id: Scalars['String'];
};


export type QueryCommentsArgs = {
  itemId: Scalars['String'];
  order?: InputMaybe<SortOrder>;
  sort?: InputMaybe<CommentSort>;
};


export type QueryConsentArgs = {
  id: Scalars['String'];
};


export type QueryConsentsArgs = {
  filter?: InputMaybe<ConsentFilter>;
};


export type QueryCrowdfundingArgs = {
  id: Scalars['String'];
};


export type QueryDailySubscriptionStatsArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  memberPlanIds?: InputMaybe<Array<Scalars['String']>>;
  start: Scalars['DateTime'];
};


export type QueryEventArgs = {
  id: Scalars['String'];
};


export type QueryEventsArgs = {
  cursorId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EventFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<EventSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryExpectedRevenueArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  start: Scalars['DateTime'];
};


export type QueryGetImageArgs = {
  id: Scalars['String'];
};


export type QueryHotAndTrendingArgs = {
  start?: InputMaybe<Scalars['DateTime']>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryImportedEventArgs = {
  filter: SingleEventFilter;
};


export type QueryImportedEventsArgs = {
  filter?: InputMaybe<ImportedEventFilter>;
  order?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ImportedEventSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryMemberPlanArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['Slug']>;
};


export type QueryMemberPlansArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<MemberPlanFilter>;
  order?: SortOrder;
  skip?: Scalars['Int'];
  sort?: MemberPlanSort;
  take?: Scalars['Int'];
};


export type QueryNavigationArgs = {
  id: Scalars['String'];
};


export type QueryNewDeactivationsArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  start: Scalars['DateTime'];
};


export type QueryNewSubscribersArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  start: Scalars['DateTime'];
};


export type QueryPageArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};


export type QueryPagesArgs = {
  cursorId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PageFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<PageSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryPaywallArgs = {
  id: Scalars['String'];
};


export type QueryPeerArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['Slug']>;
};


export type QueryPeerArticlesArgs = {
  filter?: InputMaybe<PeerArticleFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ArticleSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryPeriodicJobLogArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryPhraseArgs = {
  articleSort?: ArticleSort;
  order?: SortOrder;
  pageSort?: PageSort;
  query: Scalars['String'];
  skip?: Scalars['Int'];
  take?: Scalars['Int'];
};


export type QueryPollArgs = {
  id: Scalars['String'];
};


export type QueryPollVotesArgs = {
  cursorId?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<PollVoteFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<PollVoteSort>;
  take?: InputMaybe<Scalars['Int']>;
};


export type QueryPrimaryBannerArgs = {
  documentId: Scalars['String'];
  documentType: BannerDocumentType;
  hasSubscription: Scalars['Boolean'];
  loggedIn: Scalars['Boolean'];
};


export type QueryRenewingSubscribersArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  start: Scalars['DateTime'];
};


export type QueryRevenueArgs = {
  end?: InputMaybe<Scalars['DateTime']>;
  start: Scalars['DateTime'];
};


export type QuerySettingArgs = {
  name: Scalars['String'];
};


export type QuerySettingByIdArgs = {
  id: Scalars['String'];
};


export type QuerySettingsArgs = {
  filter?: InputMaybe<SettingFilter>;
};


export type QuerySubscriptionFlowsArgs = {
  defaultFlowOnly: Scalars['Boolean'];
  memberPlanId?: InputMaybe<Scalars['String']>;
};


export type QueryTagsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<TagFilter>;
  order?: InputMaybe<SortOrder>;
  skip?: Scalars['Int'];
  sort?: TagSort;
  take?: Scalars['Int'];
};


export type QueryUserConsentArgs = {
  id: Scalars['String'];
};


export type QueryUserConsentsArgs = {
  name?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['Boolean']>;
};


export type QueryUserPollVoteArgs = {
  pollId: Scalars['String'];
};

export type QuoteBlock = BaseBlock & HasImage & {
  __typename?: 'QuoteBlock';
  author?: Maybe<Scalars['String']>;
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  image?: Maybe<Image>;
  imageID?: Maybe<Scalars['String']>;
  quote?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type QuoteBlockInput = {
  author?: InputMaybe<Scalars['String']>;
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  imageID?: InputMaybe<Scalars['String']>;
  quote?: InputMaybe<Scalars['String']>;
};

export enum RatingSystemType {
  Star = 'star'
}

export type Registration = {
  __typename?: 'Registration';
  session: SessionWithTokenWithoutUser;
  user: User;
};

export type RemotePeerProfile = {
  __typename?: 'RemotePeerProfile';
  callToActionImage?: Maybe<PeerImage>;
  callToActionImageID?: Maybe<Scalars['String']>;
  callToActionImageURL?: Maybe<Scalars['String']>;
  callToActionText: Scalars['RichText'];
  callToActionURL: Scalars['String'];
  hostURL: Scalars['String'];
  logo?: Maybe<PeerImage>;
  logoID?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  squareLogo?: Maybe<PeerImage>;
  squareLogoId?: Maybe<Scalars['String']>;
  themeColor: Scalars['Color'];
  themeFontColor: Scalars['Color'];
  websiteURL: Scalars['String'];
};

export type RichTextBlock = BaseBlock & {
  __typename?: 'RichTextBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  richText: Scalars['RichText'];
  type: BlockType;
};

export type RichTextBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  richText: Scalars['RichText'];
};

export type SessionWithToken = {
  __typename?: 'SessionWithToken';
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
  token: Scalars['String'];
  user: User;
};

export type SessionWithTokenWithoutUser = {
  __typename?: 'SessionWithTokenWithoutUser';
  createdAt: Scalars['DateTime'];
  expiresAt: Scalars['DateTime'];
  token: Scalars['String'];
};

export type Setting = {
  __typename?: 'Setting';
  id: Scalars['String'];
  name: SettingName;
  settingRestriction?: Maybe<SettingRestriction>;
  value?: Maybe<Scalars['GraphQLSettingValueType']>;
};

export type SettingFilter = {
  name?: InputMaybe<Scalars['String']>;
};

export enum SettingName {
  AllowCommentEditing = 'ALLOW_COMMENT_EDITING',
  AllowGuestCommenting = 'ALLOW_GUEST_COMMENTING',
  AllowGuestCommentRating = 'ALLOW_GUEST_COMMENT_RATING',
  AllowGuestPollVoting = 'ALLOW_GUEST_POLL_VOTING',
  CommentCharLimit = 'COMMENT_CHAR_LIMIT',
  MailProviderName = 'MAIL_PROVIDER_NAME',
  MakeActiveSubscribersApiPublic = 'MAKE_ACTIVE_SUBSCRIBERS_API_PUBLIC',
  MakeExpectedRevenueApiPublic = 'MAKE_EXPECTED_REVENUE_API_PUBLIC',
  MakeNewDeactivationsApiPublic = 'MAKE_NEW_DEACTIVATIONS_API_PUBLIC',
  MakeNewSubscribersApiPublic = 'MAKE_NEW_SUBSCRIBERS_API_PUBLIC',
  MakeRenewingSubscribersApiPublic = 'MAKE_RENEWING_SUBSCRIBERS_API_PUBLIC',
  MakeRevenueApiPublic = 'MAKE_REVENUE_API_PUBLIC',
  NewArticlePaywall = 'NEW_ARTICLE_PAYWALL',
  NewArticlePeering = 'NEW_ARTICLE_PEERING',
  PeeringTimeoutMs = 'PEERING_TIMEOUT_MS',
  ResetPasswordJwtExpiresMin = 'RESET_PASSWORD_JWT_EXPIRES_MIN',
  SendLoginJwtExpiresMin = 'SEND_LOGIN_JWT_EXPIRES_MIN',
  ShowPendingWhenNotPublished = 'SHOW_PENDING_WHEN_NOT_PUBLISHED'
}

export type SettingRestriction = {
  __typename?: 'SettingRestriction';
  allowedValues?: Maybe<AllowedSettingVals>;
  inputLength?: Maybe<Scalars['Int']>;
  maxValue?: Maybe<Scalars['Int']>;
  minValue?: Maybe<Scalars['Int']>;
};

export type SingleEventFilter = {
  id: Scalars['String'];
  source: Scalars['String'];
};

export enum SortOrder {
  Ascending = 'Ascending',
  Descending = 'Descending'
}

export type SoundCloudTrackBlock = BaseBlock & {
  __typename?: 'SoundCloudTrackBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  trackID?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type SoundCloudTrackBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  trackID?: InputMaybe<Scalars['String']>;
};

export type Stats = {
  __typename?: 'Stats';
  articlesCount: Scalars['Int'];
  authorsCount: Scalars['Int'];
  firstArticleDate?: Maybe<Scalars['DateTime']>;
};

export type SubscribeBlock = BaseBlock & {
  __typename?: 'SubscribeBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type SubscribeBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
};

export type SubscriptionCreatedAction = BaseAction & HasSubscriptionLc & {
  __typename?: 'SubscriptionCreatedAction';
  actionType: ActionType;
  date: Scalars['DateTime'];
  subscription: PublicSubscription;
  subscriptionId: Scalars['String'];
};

export type SubscriptionDeactivation = {
  __typename?: 'SubscriptionDeactivation';
  date: Scalars['DateTime'];
  reason: SubscriptionDeactivationReason;
};

export enum SubscriptionDeactivationReason {
  InvoiceNotPaid = 'invoiceNotPaid',
  None = 'none',
  UserReplacedSubscription = 'userReplacedSubscription',
  UserSelfDeactivated = 'userSelfDeactivated'
}

export enum SubscriptionEvent {
  ConfirmSubscription = 'CONFIRM_SUBSCRIPTION',
  Custom = 'CUSTOM',
  DeactivationByUser = 'DEACTIVATION_BY_USER',
  DeactivationUnpaid = 'DEACTIVATION_UNPAID',
  InvoiceCreation = 'INVOICE_CREATION',
  RenewalFailed = 'RENEWAL_FAILED',
  RenewalSuccess = 'RENEWAL_SUCCESS',
  Subscribe = 'SUBSCRIBE'
}

export type SubscriptionFlowModel = {
  __typename?: 'SubscriptionFlowModel';
  autoRenewal: Array<Scalars['Boolean']>;
  default: Scalars['Boolean'];
  id: Scalars['String'];
  intervals: Array<SubscriptionInterval>;
  memberPlan?: Maybe<MemberPlan>;
  numberOfSubscriptions: Scalars['Int'];
  paymentMethods: Array<PaymentMethod>;
  periodicities: Array<PaymentPeriodicity>;
};

export type SubscriptionInterval = {
  __typename?: 'SubscriptionInterval';
  daysAwayFromEnding?: Maybe<Scalars['Int']>;
  event: SubscriptionEvent;
  id: Scalars['String'];
  mailTemplate?: Maybe<MailTemplateRef>;
};

export type SystemMailModel = {
  __typename?: 'SystemMailModel';
  event: UserEvent;
  mailTemplate?: Maybe<MailTemplateRef>;
};

export type Tag = {
  __typename?: 'Tag';
  description?: Maybe<Scalars['RichText']>;
  id: Scalars['String'];
  main: Scalars['Boolean'];
  tag?: Maybe<Scalars['String']>;
  type?: Maybe<TagType>;
  url: Scalars['String'];
};

export type TagConnection = {
  __typename?: 'TagConnection';
  nodes: Array<Tag>;
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

export type TagFilter = {
  tag?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<TagType>;
};

export enum TagSort {
  CreatedAt = 'CreatedAt',
  ModifiedAt = 'ModifiedAt',
  Tag = 'Tag'
}

/** Type of tag. */
export enum TagType {
  Article = 'Article',
  Author = 'Author',
  Comment = 'Comment',
  Event = 'Event',
  Page = 'Page'
}

export type Teaser = ArticleTeaser | CustomTeaser | EventTeaser | PageTeaser;

export type TeaserGridBlock = BaseBlock & {
  __typename?: 'TeaserGridBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  numColumns: Scalars['Int'];
  teasers: Array<Maybe<Teaser>>;
  type: BlockType;
};

export type TeaserGridBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  numColumns: Scalars['Int'];
  teasers: Array<InputMaybe<TeaserInput>>;
};

export type TeaserGridFlexBlock = BaseBlock & {
  __typename?: 'TeaserGridFlexBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  flexTeasers: Array<FlexTeaser>;
  type: BlockType;
};

export type TeaserGridFlexBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  flexTeasers: Array<FlexTeaserInput>;
};

export type TeaserInput = {
  article?: InputMaybe<ArticleTeaserInput>;
  custom?: InputMaybe<CustomTeaserInput>;
  event?: InputMaybe<EventTeaserInput>;
  page?: InputMaybe<PageTeaserInput>;
};

export type TeaserListBlock = BaseBlock & {
  __typename?: 'TeaserListBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  filter: TeaserListBlockFilter;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<TeaserListBlockSort>;
  take?: Maybe<Scalars['Int']>;
  teaserType: TeaserType;
  teasers: Array<Maybe<Teaser>>;
  title?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type TeaserListBlockFilter = {
  __typename?: 'TeaserListBlockFilter';
  tagObjects: Array<Tag>;
  tags?: Maybe<Array<Scalars['String']>>;
};

export type TeaserListBlockFilterInput = {
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export type TeaserListBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  filter: TeaserListBlockFilterInput;
  skip?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<TeaserListBlockSort>;
  take?: InputMaybe<Scalars['Int']>;
  teaserType: TeaserType;
  title?: InputMaybe<Scalars['String']>;
};

export enum TeaserListBlockSort {
  HotAndTrending = 'HotAndTrending',
  PublishedAt = 'PublishedAt',
  UpdatedAt = 'UpdatedAt'
}

export type TeaserSlot = {
  __typename?: 'TeaserSlot';
  teaser?: Maybe<Teaser>;
  type: TeaserSlotType;
};

export type TeaserSlotInput = {
  teaser?: InputMaybe<TeaserInput>;
  type?: TeaserSlotType;
};

export enum TeaserSlotType {
  Autofill = 'Autofill',
  Manual = 'Manual'
}

export type TeaserSlotsAutofillConfig = BaseBlock & {
  __typename?: 'TeaserSlotsAutofillConfig';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  filter?: Maybe<TeaserListBlockFilter>;
  sort?: Maybe<TeaserListBlockSort>;
  teaserType?: Maybe<TeaserType>;
  type: BlockType;
};

export type TeaserSlotsAutofillConfigInput = {
  enabled: Scalars['Boolean'];
  filter?: InputMaybe<TeaserListBlockFilterInput>;
  sort?: InputMaybe<TeaserListBlockSort>;
  teaserType?: InputMaybe<TeaserType>;
};

export type TeaserSlotsBlock = BaseBlock & {
  __typename?: 'TeaserSlotsBlock';
  autofillConfig: TeaserSlotsAutofillConfig;
  autofillTeasers: Array<Teaser>;
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  slots: Array<TeaserSlot>;
  teasers: Array<Maybe<Teaser>>;
  title?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type TeaserSlotsBlockInput = {
  autofillConfig: TeaserSlotsAutofillConfigInput;
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  slots: Array<TeaserSlotInput>;
  title?: InputMaybe<Scalars['String']>;
};

export enum TeaserType {
  Article = 'Article',
  Custom = 'Custom',
  Event = 'Event',
  Page = 'Page'
}

export type TikTokVideoBlock = BaseBlock & {
  __typename?: 'TikTokVideoBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
  userID?: Maybe<Scalars['String']>;
  videoID?: Maybe<Scalars['String']>;
};

export type TikTokVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  userID?: InputMaybe<Scalars['String']>;
  videoID?: InputMaybe<Scalars['String']>;
};

export type TitleBlock = BaseBlock & {
  __typename?: 'TitleBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  lead?: Maybe<Scalars['String']>;
  preTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type TitleBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  lead?: InputMaybe<Scalars['String']>;
  preTitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type TrackingPixel = {
  __typename?: 'TrackingPixel';
  error?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  pixelUid?: Maybe<Scalars['String']>;
  trackingPixelMethod: TrackingPixelMethod;
  uri?: Maybe<Scalars['String']>;
};

export type TrackingPixelMethod = {
  __typename?: 'TrackingPixelMethod';
  id: Scalars['String'];
  trackingPixelProviderID: Scalars['String'];
  trackingPixelProviderType: TrackingPixelProviderType;
};

export enum TrackingPixelProviderType {
  Prolitteris = 'prolitteris'
}

export type TwitterTweetBlock = BaseBlock & {
  __typename?: 'TwitterTweetBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  tweetID?: Maybe<Scalars['String']>;
  type: BlockType;
  userID?: Maybe<Scalars['String']>;
};

export type TwitterTweetBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  tweetID?: InputMaybe<Scalars['String']>;
  userID?: InputMaybe<Scalars['String']>;
};

export type UnknownBlock = {
  __typename?: 'UnknownBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
};

export type UpdateBannerInput = {
  actions?: InputMaybe<Array<CreateBannerActionInput>>;
  active: Scalars['Boolean'];
  cta?: InputMaybe<Scalars['String']>;
  delay: Scalars['Int'];
  html?: InputMaybe<Scalars['String']>;
  id: Scalars['String'];
  imageId?: InputMaybe<Scalars['String']>;
  showForLoginStatus: LoginStatus;
  showOnArticles: Scalars['Boolean'];
  showOnPages?: InputMaybe<Array<PageModelInput>>;
  text: Scalars['String'];
  title: Scalars['String'];
};

export type UpdateCrowdfundingInput = {
  additionalRevenue?: InputMaybe<Scalars['Float']>;
  countSubscriptionsFrom?: InputMaybe<Scalars['DateTime']>;
  countSubscriptionsUntil?: InputMaybe<Scalars['DateTime']>;
  goals?: InputMaybe<Array<CreateCrowdfundingGoalInput>>;
  id: Scalars['String'];
  memberPlans?: InputMaybe<Array<CreateCrowdfundingMemberPlan>>;
  name: Scalars['String'];
};

export type UploadImageInput = {
  description?: InputMaybe<Scalars['String']>;
  file: Scalars['Upload'];
  filename?: InputMaybe<Scalars['String']>;
  focalPoint?: InputMaybe<FocalPointInput>;
  license?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  source?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  title?: InputMaybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  address?: Maybe<UserAddress>;
  birthday?: Maybe<Scalars['DateTime']>;
  email: Scalars['String'];
  firstName?: Maybe<Scalars['String']>;
  flair?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  image?: Maybe<Image>;
  name: Scalars['String'];
  paymentProviderCustomers: Array<PaymentProviderCustomer>;
  permissions: Array<Scalars['String']>;
  properties: Array<Property>;
};

export type UserAddress = {
  __typename?: 'UserAddress';
  city?: Maybe<Scalars['String']>;
  company?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  streetAddress?: Maybe<Scalars['String']>;
  streetAddress2?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type UserAddressInput = {
  city?: InputMaybe<Scalars['String']>;
  company?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  streetAddress?: InputMaybe<Scalars['String']>;
  streetAddress2?: InputMaybe<Scalars['String']>;
  zipCode?: InputMaybe<Scalars['String']>;
};

export type UserConsent = {
  __typename?: 'UserConsent';
  consent: Consent;
  createdAt: Scalars['DateTime'];
  id: Scalars['String'];
  modifiedAt: Scalars['DateTime'];
  user: User;
  value: Scalars['Boolean'];
};

export type UserCreatedAction = BaseAction & HasUserLc & {
  __typename?: 'UserCreatedAction';
  actionType: ActionType;
  date: Scalars['DateTime'];
  user: User;
  userId: Scalars['String'];
};

export enum UserEvent {
  AccountCreation = 'ACCOUNT_CREATION',
  LoginLink = 'LOGIN_LINK',
  PasswordReset = 'PASSWORD_RESET',
  TestMail = 'TEST_MAIL'
}

export type UserInput = {
  address?: InputMaybe<UserAddressInput>;
  birthday?: InputMaybe<Scalars['DateTime']>;
  email: Scalars['String'];
  firstName?: InputMaybe<Scalars['String']>;
  flair?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  uploadImageInput?: InputMaybe<UploadImageInput>;
};

export type UserSubscriptionInput = {
  autoRenew: Scalars['Boolean'];
  id: Scalars['String'];
  memberPlanID: Scalars['String'];
  monthlyAmount: Scalars['Int'];
  paymentMethodID: Scalars['String'];
  paymentPeriodicity: PaymentPeriodicity;
};

export type VersionInformation = {
  __typename?: 'VersionInformation';
  version: Scalars['String'];
};

export type VimeoVideoBlock = BaseBlock & {
  __typename?: 'VimeoVideoBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
  videoID?: Maybe<Scalars['String']>;
};

export type VimeoVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  videoID?: InputMaybe<Scalars['String']>;
};

export type YouTubeVideoBlock = BaseBlock & {
  __typename?: 'YouTubeVideoBlock';
  blockStyle?: Maybe<Scalars['String']>;
  blockStyleName?: Maybe<Scalars['String']>;
  type: BlockType;
  videoID?: Maybe<Scalars['String']>;
};

export type YouTubeVideoBlockInput = {
  blockStyle?: InputMaybe<Scalars['String']>;
  blockStyleName?: InputMaybe<Scalars['String']>;
  videoID?: InputMaybe<Scalars['String']>;
};

export type OverriddenRating = {
  __typename?: 'overriddenRating';
  answerId: Scalars['String'];
  value?: Maybe<Scalars['Int']>;
};

type ImportBlock_BildwurfAdBlock_Fragment = { __typename: 'BildwurfAdBlock' };

type ImportBlock_BreakBlock_Fragment = { __typename: 'BreakBlock', blockStyle?: string | null, type: BlockType, text?: string | null, richText: Descendant[], hideButton?: boolean | null, linkTarget?: string | null, linkText?: string | null, linkURL?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

type ImportBlock_CommentBlock_Fragment = { __typename: 'CommentBlock' };

type ImportBlock_CrowdfundingBlock_Fragment = { __typename: 'CrowdfundingBlock' };

type ImportBlock_EventBlock_Fragment = { __typename: 'EventBlock' };

type ImportBlock_FacebookPostBlock_Fragment = { __typename: 'FacebookPostBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, postID?: string | null };

type ImportBlock_FacebookVideoBlock_Fragment = { __typename: 'FacebookVideoBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, videoID?: string | null };

type ImportBlock_HtmlBlock_Fragment = { __typename: 'HTMLBlock' };

type ImportBlock_IFrameBlock_Fragment = { __typename: 'IFrameBlock', blockStyle?: string | null, type: BlockType, url?: string | null, title?: string | null, width?: number | null, height?: number | null, styleCustom?: string | null, sandbox?: string | null };

type ImportBlock_ImageBlock_Fragment = { __typename: 'ImageBlock', blockStyle?: string | null, type: BlockType, caption?: string | null, linkUrl?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

type ImportBlock_ImageGalleryBlock_Fragment = { __typename: 'ImageGalleryBlock', blockStyle?: string | null, type: BlockType, images: Array<{ __typename?: 'ImageGalleryImage', caption?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null }> };

type ImportBlock_InstagramPostBlock_Fragment = { __typename: 'InstagramPostBlock', blockStyle?: string | null, type: BlockType, postID?: string | null };

type ImportBlock_ListicleBlock_Fragment = { __typename: 'ListicleBlock', blockStyle?: string | null, type: BlockType, items: Array<{ __typename?: 'ListicleItem', title?: string | null, richText: Descendant[], image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null }> };

type ImportBlock_PolisConversationBlock_Fragment = { __typename: 'PolisConversationBlock', blockStyle?: string | null, type: BlockType, conversationID?: string | null };

type ImportBlock_PollBlock_Fragment = { __typename: 'PollBlock' };

type ImportBlock_QuoteBlock_Fragment = { __typename: 'QuoteBlock', blockStyle?: string | null, type: BlockType, quote?: string | null, author?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

type ImportBlock_RichTextBlock_Fragment = { __typename: 'RichTextBlock', blockStyle?: string | null, type: BlockType, richText: Descendant[] };

type ImportBlock_SoundCloudTrackBlock_Fragment = { __typename: 'SoundCloudTrackBlock', blockStyle?: string | null, type: BlockType, trackID?: string | null };

type ImportBlock_SubscribeBlock_Fragment = { __typename: 'SubscribeBlock' };

type ImportBlock_TeaserGridBlock_Fragment = { __typename: 'TeaserGridBlock' };

type ImportBlock_TeaserGridFlexBlock_Fragment = { __typename: 'TeaserGridFlexBlock' };

type ImportBlock_TeaserListBlock_Fragment = { __typename: 'TeaserListBlock' };

type ImportBlock_TeaserSlotsBlock_Fragment = { __typename: 'TeaserSlotsBlock' };

type ImportBlock_TikTokVideoBlock_Fragment = { __typename: 'TikTokVideoBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, videoID?: string | null };

type ImportBlock_TitleBlock_Fragment = { __typename: 'TitleBlock', blockStyle?: string | null, type: BlockType, title?: string | null, lead?: string | null };

type ImportBlock_TwitterTweetBlock_Fragment = { __typename: 'TwitterTweetBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, tweetID?: string | null };

type ImportBlock_UnknownBlock_Fragment = { __typename: 'UnknownBlock' };

type ImportBlock_VimeoVideoBlock_Fragment = { __typename: 'VimeoVideoBlock', blockStyle?: string | null, type: BlockType, videoID?: string | null };

type ImportBlock_YouTubeVideoBlock_Fragment = { __typename: 'YouTubeVideoBlock', blockStyle?: string | null, type: BlockType, videoID?: string | null };

export type ImportBlockFragment = ImportBlock_BildwurfAdBlock_Fragment | ImportBlock_BreakBlock_Fragment | ImportBlock_CommentBlock_Fragment | ImportBlock_CrowdfundingBlock_Fragment | ImportBlock_EventBlock_Fragment | ImportBlock_FacebookPostBlock_Fragment | ImportBlock_FacebookVideoBlock_Fragment | ImportBlock_HtmlBlock_Fragment | ImportBlock_IFrameBlock_Fragment | ImportBlock_ImageBlock_Fragment | ImportBlock_ImageGalleryBlock_Fragment | ImportBlock_InstagramPostBlock_Fragment | ImportBlock_ListicleBlock_Fragment | ImportBlock_PolisConversationBlock_Fragment | ImportBlock_PollBlock_Fragment | ImportBlock_QuoteBlock_Fragment | ImportBlock_RichTextBlock_Fragment | ImportBlock_SoundCloudTrackBlock_Fragment | ImportBlock_SubscribeBlock_Fragment | ImportBlock_TeaserGridBlock_Fragment | ImportBlock_TeaserGridFlexBlock_Fragment | ImportBlock_TeaserListBlock_Fragment | ImportBlock_TeaserSlotsBlock_Fragment | ImportBlock_TikTokVideoBlock_Fragment | ImportBlock_TitleBlock_Fragment | ImportBlock_TwitterTweetBlock_Fragment | ImportBlock_UnknownBlock_Fragment | ImportBlock_VimeoVideoBlock_Fragment | ImportBlock_YouTubeVideoBlock_Fragment;

export type SlimArticleRevisionFragment = { __typename?: 'ArticleRevision', id: string, createdAt: string, preTitle?: string | null, title?: string | null, lead?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

export type SlimArticleFragment = { __typename?: 'Article', id: string, publishedAt?: string | null, createdAt: string, modifiedAt: string, slug?: string | null, url: string, latest: { __typename?: 'ArticleRevision', id: string, createdAt: string, preTitle?: string | null, title?: string | null, lead?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } };

export type ArticleListQueryVariables = Exact<{
  filter?: InputMaybe<ArticleFilter>;
  take?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  order?: InputMaybe<SortOrder>;
  sort?: InputMaybe<ArticleSort>;
}>;


export type ArticleListQuery = { __typename?: 'Query', articles: { __typename?: 'PaginatedArticles', totalCount: number, nodes: Array<{ __typename?: 'Article', id: string, publishedAt?: string | null, createdAt: string, modifiedAt: string, slug?: string | null, url: string, latest: { __typename?: 'ArticleRevision', id: string, createdAt: string, preTitle?: string | null, title?: string | null, lead?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, endCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type ArticleQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type ArticleQuery = { __typename?: 'Query', article: { __typename?: 'Article', id: string, url: string, slug?: string | null, tags: Array<{ __typename?: 'Tag', tag?: string | null }>, published?: { __typename?: 'ArticleRevision', title?: string | null, lead?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null, blocks: Array<{ __typename: 'BildwurfAdBlock' } | { __typename: 'BreakBlock', blockStyle?: string | null, type: BlockType, text?: string | null, richText: Descendant[], hideButton?: boolean | null, linkTarget?: string | null, linkText?: string | null, linkURL?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } | { __typename: 'CommentBlock' } | { __typename: 'CrowdfundingBlock' } | { __typename: 'EventBlock' } | { __typename: 'FacebookPostBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, postID?: string | null } | { __typename: 'FacebookVideoBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, videoID?: string | null } | { __typename: 'HTMLBlock' } | { __typename: 'IFrameBlock', blockStyle?: string | null, type: BlockType, url?: string | null, title?: string | null, width?: number | null, height?: number | null, styleCustom?: string | null, sandbox?: string | null } | { __typename: 'ImageBlock', blockStyle?: string | null, type: BlockType, caption?: string | null, linkUrl?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } | { __typename: 'ImageGalleryBlock', blockStyle?: string | null, type: BlockType, images: Array<{ __typename?: 'ImageGalleryImage', caption?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null }> } | { __typename: 'InstagramPostBlock', blockStyle?: string | null, type: BlockType, postID?: string | null } | { __typename: 'ListicleBlock', blockStyle?: string | null, type: BlockType, items: Array<{ __typename?: 'ListicleItem', title?: string | null, richText: Descendant[], image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null }> } | { __typename: 'PolisConversationBlock', blockStyle?: string | null, type: BlockType, conversationID?: string | null } | { __typename: 'PollBlock' } | { __typename: 'QuoteBlock', blockStyle?: string | null, type: BlockType, quote?: string | null, author?: string | null, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } | { __typename: 'RichTextBlock', blockStyle?: string | null, type: BlockType, richText: Descendant[] } | { __typename: 'SoundCloudTrackBlock', blockStyle?: string | null, type: BlockType, trackID?: string | null } | { __typename: 'SubscribeBlock' } | { __typename: 'TeaserGridBlock' } | { __typename: 'TeaserGridFlexBlock' } | { __typename: 'TeaserListBlock' } | { __typename: 'TeaserSlotsBlock' } | { __typename: 'TikTokVideoBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, videoID?: string | null } | { __typename: 'TitleBlock', blockStyle?: string | null, type: BlockType, title?: string | null, lead?: string | null } | { __typename: 'TwitterTweetBlock', blockStyle?: string | null, type: BlockType, userID?: string | null, tweetID?: string | null } | { __typename: 'UnknownBlock' } | { __typename: 'VimeoVideoBlock', blockStyle?: string | null, type: BlockType, videoID?: string | null } | { __typename: 'YouTubeVideoBlock', blockStyle?: string | null, type: BlockType, videoID?: string | null }>, authors: Array<{ __typename?: 'Author', name: string, slug: string, bio?: Descendant[] | null, jobTitle?: string | null, hideOnArticle: boolean, image?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null }> } | null } };

export type ImageUrLsFragment = { __typename?: 'Image', url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null };

export type RemoteImageFragment = { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null };

export type RemotePeerProfileFragment = { __typename?: 'PeerProfile', name: string, hostURL: string, websiteURL: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null, squareLogo?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null, callToActionImage?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null };

export type PeerProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type PeerProfileQuery = { __typename?: 'Query', peerProfile: { __typename?: 'PeerProfile', name: string, hostURL: string, websiteURL: string, callToActionText: Descendant[], callToActionURL: string, callToActionImageURL?: string | null, logo?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null, squareLogo?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null, callToActionImage?: { __typename?: 'Image', id: string, createdAt: string, modifiedAt: string, filename?: string | null, format: string, mimeType: string, extension: string, width: number, height: number, fileSize: number, title?: string | null, description?: string | null, tags: Array<string>, source?: string | null, link?: string | null, license?: string | null, url?: string | null, xxl?: string | null, xl?: string | null, l?: string | null, m?: string | null, s?: string | null, xs?: string | null, xxs?: string | null, xxlSquare?: string | null, xlSquare?: string | null, lSquare?: string | null, mSquare?: string | null, sSquare?: string | null, xsSquare?: string | null, xxsSquare?: string | null, focalPoint?: { __typename?: 'FocalPoint', x: number, y: number } | null } | null } };

export const ImageUrLs = gql`
    fragment ImageURLs on Image {
  url
  xxl: transformURL(input: {width: 1500, output: png, quality: 0.8})
  xl: transformURL(input: {width: 1200, output: png, quality: 0.8})
  l: transformURL(input: {width: 1000, output: png, quality: 0.8})
  m: transformURL(input: {width: 800, output: png, quality: 0.8})
  s: transformURL(input: {width: 500, output: png, quality: 0.8})
  xs: transformURL(input: {width: 300, output: png, quality: 0.8})
  xxs: transformURL(input: {width: 200, output: png, quality: 0.8})
  xxlSquare: transformURL(
    input: {width: 1500, height: 1500, output: png, quality: 0.8}
  )
  xlSquare: transformURL(
    input: {width: 1200, height: 1200, output: png, quality: 0.8}
  )
  lSquare: transformURL(
    input: {width: 1000, height: 1000, output: png, quality: 0.8}
  )
  mSquare: transformURL(
    input: {width: 800, height: 800, output: png, quality: 0.8}
  )
  sSquare: transformURL(
    input: {width: 500, height: 500, output: png, quality: 0.8}
  )
  xsSquare: transformURL(
    input: {width: 300, height: 300, output: png, quality: 0.8}
  )
  xxsSquare: transformURL(
    input: {width: 200, height: 200, output: png, quality: 0.8}
  )
}
    `;
export const RemoteImage = gql`
    fragment RemoteImage on Image {
  id
  createdAt
  modifiedAt
  filename
  format
  mimeType
  extension
  width
  height
  fileSize
  title
  description
  tags
  source
  link
  license
  focalPoint {
    x
    y
  }
  ...ImageURLs
}
    ${ImageUrLs}`;
export const ImportBlock = gql`
    fragment ImportBlock on BlockContent {
  __typename
  ... on TitleBlock {
    blockStyle
    type
    title
    lead
  }
  ... on ImageBlock {
    blockStyle
    type
    caption
    linkUrl
    image {
      ...RemoteImage
    }
  }
  ... on ImageGalleryBlock {
    blockStyle
    type
    images {
      caption
      image {
        ...RemoteImage
      }
    }
  }
  ... on QuoteBlock {
    blockStyle
    type
    quote
    author
    image {
      ...RemoteImage
    }
  }
  ... on RichTextBlock {
    blockStyle
    type
    richText
  }
  ... on ListicleBlock {
    blockStyle
    type
    items {
      title
      richText
      image {
        ...RemoteImage
      }
    }
  }
  ... on BreakBlock {
    blockStyle
    type
    text
    richText
    hideButton
    linkTarget
    linkText
    linkURL
    image {
      ...RemoteImage
    }
  }
  ... on FacebookPostBlock {
    blockStyle
    type
    userID
    postID
  }
  ... on FacebookVideoBlock {
    blockStyle
    type
    userID
    videoID
  }
  ... on InstagramPostBlock {
    blockStyle
    type
    postID
  }
  ... on TwitterTweetBlock {
    blockStyle
    type
    userID
    tweetID
  }
  ... on VimeoVideoBlock {
    blockStyle
    type
    videoID
  }
  ... on YouTubeVideoBlock {
    blockStyle
    type
    videoID
  }
  ... on SoundCloudTrackBlock {
    blockStyle
    type
    trackID
  }
  ... on PolisConversationBlock {
    blockStyle
    type
    conversationID
  }
  ... on TikTokVideoBlock {
    blockStyle
    type
    userID
    videoID
  }
  ... on IFrameBlock {
    blockStyle
    type
    url
    title
    width
    height
    styleCustom
    sandbox
  }
}
    ${RemoteImage}`;
export const SlimArticleRevision = gql`
    fragment SlimArticleRevision on ArticleRevision {
  id
  createdAt
  preTitle
  title
  lead
  image {
    ...RemoteImage
  }
}
    ${RemoteImage}`;
export const SlimArticle = gql`
    fragment SlimArticle on Article {
  id
  publishedAt
  createdAt
  modifiedAt
  slug
  url
  latest {
    ...SlimArticleRevision
  }
}
    ${SlimArticleRevision}`;
export const RemotePeerProfile = gql`
    fragment RemotePeerProfile on PeerProfile {
  name
  logo {
    ...RemoteImage
  }
  squareLogo {
    ...RemoteImage
  }
  hostURL
  websiteURL
  callToActionText
  callToActionURL
  callToActionImageURL
  callToActionImage {
    ...RemoteImage
  }
}
    ${RemoteImage}`;
export const ArticleList = gql`
    query ArticleList($filter: ArticleFilter, $take: Int, $skip: Int, $order: SortOrder, $sort: ArticleSort) {
  articles(filter: $filter, take: $take, skip: $skip, order: $order, sort: $sort) {
    nodes {
      ...SlimArticle
    }
    pageInfo {
      startCursor
      endCursor
      hasNextPage
      hasPreviousPage
    }
    totalCount
  }
}
    ${SlimArticle}`;
export const Article = gql`
    query Article($id: String!) {
  article(id: $id) {
    id
    url
    slug
    tags {
      tag
    }
    published {
      title
      lead
      image {
        ...RemoteImage
      }
      blocks {
        ...ImportBlock
      }
      authors {
        name
        slug
        bio
        jobTitle
        image {
          ...RemoteImage
        }
        hideOnArticle
      }
    }
  }
}
    ${RemoteImage}
${ImportBlock}`;
export const PeerProfile = gql`
    query PeerProfile {
  peerProfile {
    ...RemotePeerProfile
  }
}
    ${RemotePeerProfile}`;

      export interface PossibleTypesResultData {
        possibleTypes: {
          [key: string]: string[]
        }
      }
      const result: PossibleTypesResultData = {
  "possibleTypes": {
    "Action": [
      "ArticleCreatedAction",
      "AuthorCreatedAction",
      "CommentCreatedAction",
      "EventCreatedAction",
      "PageCreatedAction",
      "PollStartedAction",
      "SubscriptionCreatedAction",
      "UserCreatedAction"
    ],
    "BaseAction": [
      "ArticleCreatedAction",
      "AuthorCreatedAction",
      "CommentCreatedAction",
      "EventCreatedAction",
      "PageCreatedAction",
      "PollStartedAction",
      "SubscriptionCreatedAction",
      "UserCreatedAction"
    ],
    "BaseBlock": [
      "BildwurfAdBlock",
      "BreakBlock",
      "CommentBlock",
      "CrowdfundingBlock",
      "EventBlock",
      "FacebookPostBlock",
      "FacebookVideoBlock",
      "HTMLBlock",
      "IFrameBlock",
      "ImageBlock",
      "ImageGalleryBlock",
      "InstagramPostBlock",
      "ListicleBlock",
      "PolisConversationBlock",
      "PollBlock",
      "QuoteBlock",
      "RichTextBlock",
      "SoundCloudTrackBlock",
      "SubscribeBlock",
      "TeaserGridBlock",
      "TeaserGridFlexBlock",
      "TeaserListBlock",
      "TeaserSlotsAutofillConfig",
      "TeaserSlotsBlock",
      "TikTokVideoBlock",
      "TitleBlock",
      "TwitterTweetBlock",
      "VimeoVideoBlock",
      "YouTubeVideoBlock"
    ],
    "BaseNavigationLink": [
      "ArticleNavigationLink",
      "ExternalNavigationLink",
      "PageNavigationLink"
    ],
    "BaseTeaser": [
      "ArticleTeaser",
      "CustomTeaser",
      "EventTeaser",
      "PageTeaser"
    ],
    "BlockContent": [
      "BildwurfAdBlock",
      "BreakBlock",
      "CommentBlock",
      "CrowdfundingBlock",
      "EventBlock",
      "FacebookPostBlock",
      "FacebookVideoBlock",
      "HTMLBlock",
      "IFrameBlock",
      "ImageBlock",
      "ImageGalleryBlock",
      "InstagramPostBlock",
      "ListicleBlock",
      "PolisConversationBlock",
      "PollBlock",
      "QuoteBlock",
      "RichTextBlock",
      "SoundCloudTrackBlock",
      "SubscribeBlock",
      "TeaserGridBlock",
      "TeaserGridFlexBlock",
      "TeaserListBlock",
      "TeaserSlotsBlock",
      "TikTokVideoBlock",
      "TitleBlock",
      "TwitterTweetBlock",
      "UnknownBlock",
      "VimeoVideoBlock",
      "YouTubeVideoBlock"
    ],
    "HasArticle": [
      "ArticleNavigationLink"
    ],
    "HasArticleLc": [
      "ArticleCreatedAction"
    ],
    "HasAuthor": [
      "AuthorCreatedAction"
    ],
    "HasBlockContent": [
      "ArticleRevision",
      "PageRevision"
    ],
    "HasComment": [
      "CommentCreatedAction"
    ],
    "HasEventLc": [
      "EventCreatedAction"
    ],
    "HasImage": [
      "ArticleTeaser",
      "Author",
      "BreakBlock",
      "CustomTeaser",
      "EventTeaser",
      "ImageBlock",
      "ImageGalleryImage",
      "ListicleItem",
      "MemberPlan",
      "PageTeaser",
      "QuoteBlock"
    ],
    "HasImageLc": [
      "PaymentMethod"
    ],
    "HasOptionalArticle": [
      "ArticleTeaser"
    ],
    "HasOptionalCrowdfunding": [
      "CrowdfundingBlock"
    ],
    "HasOptionalEvent": [
      "EventTeaser"
    ],
    "HasOptionalPage": [
      "PageTeaser"
    ],
    "HasOptionalPaywall": [
      "Article"
    ],
    "HasOptionalPeerLc": [
      "Article",
      "Author",
      "PeerArticle"
    ],
    "HasOptionalPoll": [
      "PollBlock"
    ],
    "HasOptionalSubscription": [
      "Invoice"
    ],
    "HasPage": [
      "PageNavigationLink"
    ],
    "HasPageLc": [
      "PageCreatedAction"
    ],
    "HasPaymentMethod": [
      "Payment",
      "PublicSubscription"
    ],
    "HasPoll": [
      "PollStartedAction"
    ],
    "HasSubscriptionLc": [
      "SubscriptionCreatedAction"
    ],
    "HasUser": [
      "PublicSubscription"
    ],
    "HasUserLc": [
      "UserCreatedAction"
    ],
    "Teaser": [
      "ArticleTeaser",
      "CustomTeaser",
      "EventTeaser",
      "PageTeaser"
    ]
  }
};
      export default result;
    